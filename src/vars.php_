Array
(
    [_GET] => Array
        (
        )

    [_POST] => Array
        (
        )

    [_COOKIE] => Array
        (
            [vmsettings_view_mode] => advanced
            [dockersettings_view_mode] => advanced
            [_ga] => GA1.1.1793662771.1638710953
            [diskio] => diskio
            [unassigneddevicesplgAnupdateisavailableaclasscaPluginUpdateInstallonclickcapluginUpdateInstallquotunassigneddevicesplgquotClickheretoinstallversion20220912caaclassbannerInfofafainfocircleonclickcapluginUpdateShowInfoquotpluginsdynamixpluginmanagerincludeShowChangesphpfile2Ftmp2Fplugins2FunassigneddevicestxtquotquotReleaseNotesquot600900returnfalsea] => true
            [_pk_id_1_e626] => d3f70ecb1f6b1324.1663044427.
            [nerdtools_checkall] => no
            [nerdtools_packages_uninstall] => --uninstall
            [hidden_content] => ;8211e87da86e3cb4d16a99dc8908e9c1;5daf3d28cea920ff31c7d2ad156f9f2d
            [db-box3] => 5342796f0cb9791704e1e4df80f8c815;35a054445bd8a74298be14de06b90f4e;cfbea4d252709c726589d7611c928b57;978539cd3c260ac5ee415f8d6f090460
            [db-box1] => 7fd06ad571f773b4fcd62b5a2b604649;4f58cffdd1cb02d5573da6a3d9e053a8;2397947828b3f7532b5eb42f6daf5aaa;d1722b43099adc8787b65505299d0cc9;a419dbfe8173788c2b5605b6583b70d9;cd77d4168f71fd19c26024ed654684f0;5daf3d28cea920ff31c7d2ad156f9f2d;8211e87da86e3cb4d16a99dc8908e9c1
            [autosize-backup_external] => 1
            [cpuline] => 60
            [autosize-backup_cache] => 1
            [docker_listview_mode] => advanced
            [unraid_097d066c034aab2af62baac4b141829c] => f43fda13bc1fcb8b532b6d1a7372f842
            [UPC_ENV] => local
            [ud_reload] => UD_reload
            [one] => tab1
        )

    [_FILES] => Array
        (
        )

    [_SERVER] => Array
        (
            [USER] => root
            [HOME] => /root
            [HTTP_COOKIE] => vmsettings_view_mode=advanced; dockersettings_view_mode=advanced; _ga=GA1.1.1793662771.1638710953; diskio=diskio; unassigneddevicesplgAnupdateisavailableaclasscaPluginUpdateInstallonclickcapluginUpdateInstallquotunassigneddevicesplgquotClickheretoinstallversion20220912caaclassbannerInfofafainfocircleonclickcapluginUpdateShowInfoquotpluginsdynamixpluginmanagerincludeShowChangesphpfile2Ftmp2Fplugins2FunassigneddevicestxtquotquotReleaseNotesquot600900returnfalsea=true; _pk_id.1.e626=d3f70ecb1f6b1324.1663044427.; nerdtools_checkall=no; nerdtools_packages_uninstall=--uninstall; hidden_content=%3B8211e87da86e3cb4d16a99dc8908e9c1%3B5daf3d28cea920ff31c7d2ad156f9f2d; db-box3=5342796f0cb9791704e1e4df80f8c815%3B35a054445bd8a74298be14de06b90f4e%3Bcfbea4d252709c726589d7611c928b57%3B978539cd3c260ac5ee415f8d6f090460; db-box1=7fd06ad571f773b4fcd62b5a2b604649%3B4f58cffdd1cb02d5573da6a3d9e053a8%3B2397947828b3f7532b5eb42f6daf5aaa%3Bd1722b43099adc8787b65505299d0cc9%3Ba419dbfe8173788c2b5605b6583b70d9%3Bcd77d4168f71fd19c26024ed654684f0%3B5daf3d28cea920ff31c7d2ad156f9f2d%3B8211e87da86e3cb4d16a99dc8908e9c1; autosize-backup_external=1; dockersettings_view_mode=advanced; cpuline=60; autosize-backup_cache=1; docker_listview_mode=advanced; unraid_097d066c034aab2af62baac4b141829c=f43fda13bc1fcb8b532b6d1a7372f842; UPC_ENV=local; ud_reload=UD_reload; one=tab1
            [HTTP_ACCEPT_LANGUAGE] => de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
            [HTTP_ACCEPT_ENCODING] => gzip, deflate
            [HTTP_REFERER] => http://192.168.1.50/Settings
            [HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
            [HTTP_USER_AGENT] => Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36
            [HTTP_UPGRADE_INSECURE_REQUESTS] => 1
            [HTTP_CACHE_CONTROL] => max-age=0
            [HTTP_CONNECTION] => keep-alive
            [HTTP_HOST] => 192.168.1.50
            [REDIRECT_STATUS] => 200
            [SERVER_NAME] => 
            [SERVER_PORT] => 80
            [SERVER_ADDR] => 192.168.1.50
            [REMOTE_PORT] => 54538
            [REMOTE_ADDR] => 172.16.10.100
            [SERVER_SOFTWARE] => nginx/1.23.3
            [GATEWAY_INTERFACE] => CGI/1.1
            [REQUEST_SCHEME] => http
            [SERVER_PROTOCOL] => HTTP/1.1
            [DOCUMENT_ROOT] => /usr/local/emhttp
            [DOCUMENT_URI] => /webGui/template.php
            [REQUEST_URI] => /Settings/smbackup
            [SCRIPT_NAME] => /webGui/template.php
            [SCRIPT_FILENAME] => /usr/local/emhttp/webGui/template.php
            [CONTENT_LENGTH] => 
            [CONTENT_TYPE] => 
            [REQUEST_METHOD] => GET
            [QUERY_STRING] => 
            [FCGI_ROLE] => RESPONDER
            [PHP_SELF] => /webGui/template.php
            [REQUEST_TIME_FLOAT] => 1693072939.1234
            [REQUEST_TIME] => 1693072939
            [argv] => Array
                (
                )

            [argc] => 0
        )

    [secure] => 
    [docroot] => /usr/local/emhttp
    [var] => Array
        (
            [version] => 6.12.3
            [MAX_ARRAYSZ] => 30
            [MAX_CACHESZ] => 60
            [NAME] => EideardHome
            [timeZone] => Europe/Berlin
            [COMMENT] => Media server
            [SECURITY] => user
            [WORKGROUP] => WORKGROUP
            [DOMAIN] => 
            [DOMAIN_SHORT] => 
            [hideDotFiles] => no
            [localMaster] => yes
            [serverMultiChannel] => no
            [enableFruit] => no
            [USE_NETBIOS] => yes
            [USE_WSD] => yes
            [WSD_OPT] => 
            [WSD2_OPT] => 
            [USE_NTP] => yes
            [NTP_SERVER1] => time1.google.com
            [NTP_SERVER2] => time2.google.com
            [NTP_SERVER3] => time3.google.com
            [NTP_SERVER4] => time4.google.com
            [DOMAIN_LOGIN] => Administrator
            [SYS_MODEL] => Custom
            [SYS_ARRAY_SLOTS] => 7
            [SYS_FLASH_SLOTS] => 1
            [USE_SSL] => no
            [PORT] => 80
            [PORTSSL] => 443
            [LOCAL_TLD] => local
            [BIND_MGT] => no
            [USE_TELNET] => no
            [PORTTELNET] => 23
            [USE_SSH] => yes
            [PORTSSH] => 22
            [USE_UPNP] => no
            [START_PAGE] => Dashboard
            [startArray] => yes
            [spindownDelay] => 15
            [spinupGroups] => no
            [defaultFsType] => xfs
            [shutdownTimeout] => 90
            [luksKeyfile] => /root/keyfile
            [poll_attributes] => 30
            [poll_attributes_default] => 30
            [poll_attributes_status] => default
            [queueDepth] => auto
            [nr_requests] => Auto
            [nr_requests_default] => Auto
            [nr_requests_status] => default
            [md_scheduler] => auto
            [md_scheduler_default] => auto
            [md_scheduler_status] => default
            [md_num_stripes] => 1280
            [md_num_stripes_default] => 1280
            [md_num_stripes_status] => default
            [md_queue_limit] => 80
            [md_queue_limit_default] => 80
            [md_queue_limit_status] => default
            [md_sync_limit] => 5
            [md_sync_limit_default] => 5
            [md_sync_limit_status] => default
            [md_write_method] => auto
            [md_write_method_default] => auto
            [md_write_method_status] => default
            [shareDisk] => auto
            [shareUser] => e
            [shareUserInclude] => 
            [shareUserExclude] => 
            [shareUserExclusive] => no
            [shareSMBEnabled] => yes
            [shareNFSEnabled] => no
            [shareInitialOwner] => Administrator
            [shareInitialGroup] => Domain Users
            [shareCacheEnabled] => yes
            [shareCacheFloor] => 2000000
            [shareMoverSchedule] => 0 0 1 * *
            [shareMoverLogging] => no
            [fuse_remember] => 330
            [fuse_remember_default] => 330
            [fuse_remember_status] => default
            [fuse_directio] => auto
            [fuse_directio_default] => auto
            [fuse_directio_status] => default
            [fuse_useino] => yes
            [shareAvahiEnabled] => yes
            [shareAvahiSMBName] => %h
            [shareAvahiSMBModel] => Xserve
            [shfs_logging] => 1
            [safeMode] => no
            [startMode] => Normal
            [configValid] => yes
            [joinStatus] => Not joined
            [deviceCount] => 5
            [flashGUID] => 8644-8003-1201-000000000EF5
            [flashProduct] => Micro_Line
            [flashVendor] => Intenso
            [regBuildTime] => 1689387842
            [regCheck] => 
            [regFILE] => /boot/config/Plus.key
            [regGUID] => 8644-8003-1201-000000000EF5
            [regTy] => Plus
            [regTo] => Michel-IT Solutions
            [regTm] => 1680947738
            [regTm2] => 0
            [regGen] => 0
            [sbClean] => no
            [sbName] => /boot/config/super.dat
            [sbVersion] => 2.9.27
            [sbUpdated] => 1692898270
            [sbEvents] => 6
            [sbState] => 1
            [sbSynced] => 1692851546
            [sbSyncErrs] => 1
            [sbSynced2] => 1692898270
            [sbSyncExit] => 0
            [sbNumDisks] => 6
            [mdColor] => green-on
            [mdNumDisks] => 4
            [mdNumDisabled] => 1
            [mdNumInvalid] => 1
            [mdNumMissing] => 0
            [mdNumNew] => 0
            [mdNumErased] => 0
            [mdResync] => 0
            [mdResyncCorr] => 1
            [mdResyncPos] => 0
            [mdResyncDb] => 0
            [mdResyncDt] => 0
            [mdResyncAction] => check P
            [mdResyncSize] => 5860522532
            [mdState] => STARTED
            [mdVersion] => 2.9.27
            [fsState] => Started
            [fsProgress] => 
            [fsCopyPrcnt] => 0
            [fsNumMounted] => 4
            [fsNumUnmountable] => 0
            [fsUnmountableMask] => 
            [shareCount] => 18
            [shareSMBCount] => 16
            [shareNFSCount] => 0
            [shareMoverActive] => no
            [reservedNames] => flash,boot,user,user0,dev,remotes,RecycleBin,rootshare,disks,addons,mirror,raidz,raidz1,raidz2,raidz3,draid,spare,log,disk,parity,parity2,parity3,diskP,diskQ,diskR,disk0,disk1,disk2,disk3,disk4,disk5,disk6,disk7,disk8,disk9,disk10,disk11,disk12,disk13,disk14,disk15,disk16,disk17,disk18,disk19,disk20,disk21,disk22,disk23,disk24,disk25,disk26,disk27,disk28,disk29,disk30,disk31
            [csrf_token] => DDB379880205602F
        )

    [sec] => Array
        (
            [disk1] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [disk2] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [disk3] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [disk4] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [disk5] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [cache] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [flash] => Array
                (
                    [export] => -
                    [fruit] => no
                    [security] => public
                    [readList] => 
                    [writeList] => 
                )

            [BenPrivat] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => ben
                    [volsizelimit] => 
                )

            [JanaPrivat] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => jana
                    [volsizelimit] => 
                )

            [Medien] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [Pictures] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [SaschaPrivat] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [Share] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [Spiele Auslagerung] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [Youtube] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [appdata] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [backup_cache] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [backup_external] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha,backup_user,backup_ha
                    [volsizelimit] => 
                )

            [backup_internal] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [backup_manual] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [domains] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [isos] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [jDownloader] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

            [system] => Array
                (
                    [export] => -
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => public
                    [readList] => 
                    [writeList] => 
                    [volsizelimit] => 
                )

            [webdev] => Array
                (
                    [export] => e
                    [fruit] => no
                    [caseSensitive] => auto
                    [security] => private
                    [readList] => 
                    [writeList] => sascha
                    [volsizelimit] => 
                )

        )

    [devs] => Array
        (
        )

    [disks] => Array
        (
            [parity] => Array
                (
                    [idx] => 0
                    [name] => parity
                    [device] => sdc
                    [id] => ST6000VN001-2BB186_ZR12ZALZ
                    [transport] => ata
                    [size] => 5860522532
                    [status] => DISK_OK
                    [format] => GPT: 4KiB-aligned
                    [rotational] => 1
                    [discard] => 0
                    [removable] => 0
                    [spundown] => 0
                    [temp] => 32
                    [numReads] => 1502738344
                    [numWrites] => 37611270
                    [numErrors] => 0
                    [type] => Parity
                    [color] => green-on
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => ST6000VN001-2BB186_ZR12ZALZ
                    [sizeSb] => 5860522532
                    [deviceSb] => 
                )

            [disk1] => Array
                (
                    [idx] => 1
                    [name] => disk1
                    [device] => sde
                    [id] => WDC_WD20EFRX-68EUZN0_WD-WCC4M1NN1VPU
                    [transport] => ata
                    [size] => 1953514552
                    [status] => DISK_OK
                    [format] => MBR: 4KiB-aligned
                    [rotational] => 1
                    [discard] => 0
                    [removable] => 1
                    [spundown] => 0
                    [temp] => 29
                    [numReads] => 517481813
                    [numWrites] => 25115787
                    [numErrors] => 0
                    [type] => Data
                    [color] => green-on
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => WDC_WD20EFRX-68EUZN0_WD-WCC4M1NN1VPU
                    [sizeSb] => 1953514552
                    [deviceSb] => md1p1
                    [luksState] => 0
                    [comment] => 
                    [exportable] => no
                    [fsType] => xfs
                    [fsStatus] => Mounted
                    [fsColor] => green-on
                    [fsSize] => 1953276084
                    [fsFree] => 1116073460
                    [fsUsed] => 837202624
                    [autotrim] => off
                    [compression] => off
                    [warning] => 
                    [critical] => 
                    [fsProfile] => 
                    [fsWidth] => 0
                    [fsGroups] => 0
                    [missing] => 0
                )

            [disk2] => Array
                (
                    [idx] => 2
                    [name] => disk2
                    [device] => 
                    [id] => 
                    [transport] => 
                    [size] => 0
                    [status] => DISK_NP
                    [format] => -
                    [rotational] => 
                    [discard] => 
                    [removable] => 
                    [spundown] => 0
                    [temp] => *
                    [numReads] => 0
                    [numWrites] => 0
                    [numErrors] => 0
                    [type] => Data
                    [color] => grey-off
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => 
                    [sizeSb] => 0
                    [deviceSb] => 
                    [luksState] => 0
                    [comment] => 
                    [exportable] => no
                    [fsType] => auto
                    [fsStatus] => -
                    [fsColor] => grey-off
                    [fsSize] => 0
                    [fsFree] => 0
                    [fsUsed] => 0
                    [autotrim] => 
                    [compression] => 
                    [warning] => 
                    [critical] => 
                    [fsProfile] => 
                    [fsWidth] => 0
                    [fsGroups] => 0
                    [missing] => 0
                )

            [disk3] => Array
                (
                    [idx] => 3
                    [name] => disk3
                    [device] => sdb
                    [id] => ST6000VN001-2BB186_ZR1337DH
                    [transport] => ata
                    [size] => 5860522532
                    [status] => DISK_OK
                    [format] => GPT: 4KiB-aligned
                    [rotational] => 1
                    [discard] => 0
                    [removable] => 0
                    [spundown] => 0
                    [temp] => 31
                    [numReads] => 1481471932
                    [numWrites] => 12494921
                    [numErrors] => 0
                    [type] => Data
                    [color] => green-on
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => ST6000VN001-2BB186_ZR1337DH
                    [sizeSb] => 5860522532
                    [deviceSb] => md3p1
                    [luksState] => 0
                    [comment] => 
                    [exportable] => no
                    [fsType] => xfs
                    [fsStatus] => Mounted
                    [fsColor] => green-on
                    [fsSize] => 5860045600
                    [fsFree] => 1420231576
                    [fsUsed] => 4439814024
                    [autotrim] => off
                    [compression] => off
                    [warning] => 
                    [critical] => 
                    [fsProfile] => 
                    [fsWidth] => 0
                    [fsGroups] => 0
                    [missing] => 0
                )

            [disk4] => Array
                (
                    [idx] => 4
                    [name] => disk4
                    [device] => sdd
                    [id] => ST2000DM008-2FR102_ZFL4QPSM
                    [transport] => ata
                    [size] => 1953514552
                    [status] => DISK_OK
                    [format] => MBR: 4KiB-aligned
                    [rotational] => 1
                    [discard] => 0
                    [removable] => 1
                    [spundown] => 1
                    [temp] => *
                    [numReads] => 488390170
                    [numWrites] => 590
                    [numErrors] => 0
                    [type] => Data
                    [color] => green-blink
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => ST2000DM008-2FR102_ZFL4QPSM
                    [sizeSb] => 1953514552
                    [deviceSb] => md4p1
                    [luksState] => 0
                    [comment] => 
                    [exportable] => no
                    [fsType] => xfs
                    [fsStatus] => Mounted
                    [fsColor] => green-on
                    [fsSize] => 1952560688
                    [fsFree] => 1426310112
                    [fsUsed] => 526250576
                    [autotrim] => off
                    [compression] => off
                    [warning] => 
                    [critical] => 
                    [fsProfile] => 
                    [fsWidth] => 0
                    [fsGroups] => 0
                    [missing] => 0
                )

            [disk5] => Array
                (
                    [idx] => 5
                    [name] => disk5
                    [device] => 
                    [id] => 
                    [transport] => 
                    [size] => 0
                    [status] => DISK_NP
                    [format] => -
                    [rotational] => 
                    [discard] => 
                    [removable] => 
                    [spundown] => 0
                    [temp] => *
                    [numReads] => 0
                    [numWrites] => 0
                    [numErrors] => 0
                    [type] => Data
                    [color] => grey-off
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => 
                    [sizeSb] => 0
                    [deviceSb] => 
                    [luksState] => 0
                    [comment] => 
                    [exportable] => no
                    [fsType] => auto
                    [fsStatus] => -
                    [fsColor] => grey-off
                    [fsSize] => 0
                    [fsFree] => 0
                    [fsUsed] => 0
                    [autotrim] => 
                    [compression] => 
                    [warning] => 
                    [critical] => 
                    [fsProfile] => 
                    [fsWidth] => 0
                    [fsGroups] => 0
                    [missing] => 0
                )

            [parity2] => Array
                (
                    [idx] => 29
                    [name] => parity2
                    [device] => 
                    [id] => 
                    [transport] => 
                    [size] => 0
                    [status] => DISK_NP_DSBL
                    [format] => -
                    [rotational] => 
                    [discard] => 
                    [removable] => 
                    [spundown] => 0
                    [temp] => *
                    [numReads] => 0
                    [numWrites] => 0
                    [numErrors] => 0
                    [type] => Parity
                    [color] => grey-off
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => 
                    [sizeSb] => 0
                    [deviceSb] => 
                )

            [cache] => Array
                (
                    [idx] => 30
                    [name] => cache
                    [device] => nvme0n1
                    [id] => Samsung_SSD_970_EVO_Plus_2TB_S4J4NX0W599368N
                    [transport] => nvme
                    [size] => 1953513560
                    [status] => DISK_OK
                    [format] => MBR: 1MiB-aligned
                    [rotational] => 0
                    [discard] => 1
                    [removable] => 0
                    [spundown] => 0
                    [temp] => 46
                    [numReads] => 2838880
                    [numWrites] => 11649146
                    [numErrors] => 0
                    [type] => Cache
                    [color] => green-on
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => Samsung_SSD_970_EVO_Plus_2TB_S4J4NX0W599368N
                    [sizeSb] => 1953513560
                    [deviceSb] => nvme0n1p1
                    [luksState] => 0
                    [comment] => 
                    [exportable] => no
                    [fsType] => btrfs
                    [fsStatus] => Mounted
                    [fsColor] => yellow-on
                    [fsSize] => 1953513560
                    [fsFree] => 1383988408
                    [fsUsed] => 567008120
                    [autotrim] => on
                    [compression] => off
                    [warning] => 
                    [critical] => 
                    [fsProfile] => single
                    [fsWidth] => 0
                    [fsGroups] => 0
                    [missing] => 0
                    [state] => STARTED
                    [nameOrig] => cache
                    [slots] => 2
                    [devices] => 1
                    [devicesSb] => 1
                    [uuid] => 5e518caa-a5b6-4ee8-9da1-367e3cba924c
                    [shareEnabled] => yes
                    [shareFloor] => 0
                    [hotTemp] => 75
                    [maxTemp] => 80
                )

            [cache2] => Array
                (
                    [idx] => 31
                    [name] => cache2
                    [device] => 
                    [id] => 
                    [transport] => 
                    [size] => 0
                    [status] => DISK_NP
                    [format] => -
                    [rotational] => 
                    [discard] => 
                    [removable] => 
                    [spundown] => 0
                    [temp] => *
                    [numReads] => 0
                    [numWrites] => 0
                    [numErrors] => 0
                    [type] => Cache
                    [color] => grey-off
                    [spindownDelay] => -1
                    [spinupGroup] => 
                    [idSb] => 
                    [sizeSb] => 0
                    [deviceSb] => 
                    [luksState] => 0
                )

            [flash] => Array
                (
                    [idx] => 32
                    [name] => flash
                    [device] => sda
                    [id] => Micro_Line
                    [transport] => usb
                    [size] => 3915744
                    [status] => DISK_OK
                    [format] => unknown
                    [rotational] => 1
                    [discard] => 0
                    [removable] => 1
                    [spundown] => 0
                    [temp] => *
                    [numReads] => 21957
                    [numWrites] => 806
                    [numErrors] => 0
                    [type] => Flash
                    [color] => green-on
                    [comment] => Unraid OS boot device
                    [exportable] => yes
                    [fsType] => vfat
                    [fsStatus] => Mounted
                    [fsColor] => yellow-on
                    [fsSize] => 3907100
                    [fsFree] => 2997584
                    [fsUsed] => 909516
                    [autotrim] => off
                    [compression] => off
                    [warning] => 
                    [critical] => 
                )

        )

    [users] => Array
        (
            [root] => Array
                (
                    [idx] => 0
                    [name] => root
                    [desc] => Console and webGui login account
                    [passwd] => yes
                )

            [sascha] => Array
                (
                    [idx] => 1
                    [name] => sascha
                    [desc] => 
                    [passwd] => yes
                )

            [jana] => Array
                (
                    [idx] => 2
                    [name] => jana
                    [desc] => 
                    [passwd] => yes
                )

            [ben] => Array
                (
                    [idx] => 3
                    [name] => ben
                    [desc] => 
                    [passwd] => yes
                )

            [backup_user] => Array
                (
                    [idx] => 4
                    [name] => backup_user
                    [desc] => 
                    [passwd] => yes
                )

            [backup_ha] => Array
                (
                    [idx] => 5
                    [name] => backup_ha
                    [desc] => 7vSXlgNSGj4tJi4
                    [passwd] => yes
                )

        )

    [shares] => Array
        (
            [BenPrivat] => Array
                (
                    [name] => BenPrivat
                    [nameOrig] => BenPrivat
                    [comment] => Bens privater Ordner
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 1300000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [JanaPrivat] => Array
                (
                    [name] => JanaPrivat
                    [nameOrig] => JanaPrivat
                    [comment] => Janas privates Laufwerk
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 500000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [Medien] => Array
                (
                    [name] => Medien
                    [nameOrig] => Medien
                    [comment] => Filme und Serien
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 10300000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [Pictures] => Array
                (
                    [name] => Pictures
                    [nameOrig] => Pictures
                    [comment] => Bildablage für Photoprism
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 1300000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [SaschaPrivat] => Array
                (
                    [name] => SaschaPrivat
                    [nameOrig] => SaschaPrivat
                    [comment] => Saschas privates Laufwerk
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 5200000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [Share] => Array
                (
                    [name] => Share
                    [nameOrig] => Share
                    [comment] => Öffentliches Verzeichnis
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 500000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [Spiele Auslagerung] => Array
                (
                    [name] => Spiele Auslagerung
                    [nameOrig] => Spiele Auslagerung
                    [comment] => Spiele die keine SSD erfordern oder aktuell nicht gespielt werden
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 20600000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [Youtube] => Array
                (
                    [name] => Youtube
                    [nameOrig] => Youtube
                    [comment] => Youtube Videos und so
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 5200000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [appdata] => Array
                (
                    [name] => appdata
                    [nameOrig] => appdata
                    [comment] => application data
                    [allocator] => highwater
                    [splitLevel] => 1
                    [floor] => 1300000
                    [include] => 
                    [exclude] => 
                    [useCache] => prefer
                    [cachePool] => cache
                    [cow] => auto
                    [color] => yellow-on
                    [size] => 0
                    [free] => 1383988408
                    [used] => 567008120
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [backup_cache] => Array
                (
                    [name] => backup_cache
                    [nameOrig] => backup_cache
                    [comment] => 
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 195256068
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [backup_external] => Array
                (
                    [name] => backup_external
                    [nameOrig] => backup_external
                    [comment] => Backup von PCs (images) usw.
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 195256068
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [backup_internal] => Array
                (
                    [name] => backup_internal
                    [nameOrig] => backup_internal
                    [comment] => Interne Backups z.B. von Appdata und domains 
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 41200000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [backup_manual] => Array
                (
                    [name] => backup_manual
                    [nameOrig] => backup_manual
                    [comment] => Ablage manueller Backups
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 164015097
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [domains] => Array
                (
                    [name] => domains
                    [nameOrig] => domains
                    [comment] => VMs
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 500000
                    [include] => 
                    [exclude] => 
                    [useCache] => prefer
                    [cachePool] => cache
                    [cow] => auto
                    [color] => yellow-on
                    [size] => 0
                    [free] => 1383988408
                    [used] => 567008120
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [isos] => Array
                (
                    [name] => isos
                    [nameOrig] => isos
                    [comment] => ISO images
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 10300000
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => cache
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [jDownloader] => Array
                (
                    [name] => jDownloader
                    [nameOrig] => jDownloader
                    [comment] => 
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 195256068
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [system] => Array
                (
                    [name] => system
                    [nameOrig] => system
                    [comment] => system data
                    [allocator] => highwater
                    [splitLevel] => 1
                    [floor] => 500000
                    [include] => 
                    [exclude] => 
                    [useCache] => prefer
                    [cachePool] => cache
                    [cow] => no
                    [color] => yellow-on
                    [size] => 0
                    [free] => 1383988408
                    [used] => 567008120
                    [luksStatus] => 0
                    [exclusive] => no
                )

            [webdev] => Array
                (
                    [name] => webdev
                    [nameOrig] => webdev
                    [comment] => Ablage für Webentwicklungen
                    [allocator] => highwater
                    [splitLevel] => 
                    [floor] => 644200
                    [include] => 
                    [exclude] => 
                    [useCache] => no
                    [cachePool] => 
                    [cow] => auto
                    [color] => green-on
                    [size] => 0
                    [free] => 3962615148
                    [used] => 5803267224
                    [luksStatus] => 0
                    [exclusive] => no
                )

        )

    [sec_nfs] => Array
        (
            [disk1] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [disk2] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [disk3] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [disk4] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [disk5] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [cache] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [BenPrivat] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [JanaPrivat] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [Medien] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [Pictures] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [SaschaPrivat] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [Share] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [Spiele Auslagerung] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [Youtube] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [appdata] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [backup_cache] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [backup_external] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [backup_internal] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [backup_manual] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [domains] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [isos] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [jDownloader] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [system] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

            [webdev] => Array
                (
                    [export] => -
                    [security] => public
                    [hostList] => 
                )

        )

    [pool_devices] => 1
    [pools] => Array
        (
            [0] => cache
        )

    [pool] => cache
    [display] => Array
        (
            [font] => 
            [tty] => 15
            [date] => %A, %Y-%m-%d
            [time] => %R
            [number] => ,.
            [unit] => C
            [scale] => -1
            [resize] => 0
            [wwn] => 0
            [total] => 1
            [banner] => 
            [header] => EDEDED
            [background] => 1C1B1B
            [dashapps] => icons
            [tabs] => 0
            [users] => Tasks:3
            [usage] => 1
            [text] => 20
            [warning] => 70
            [critical] => 90
            [hot] => 51
            [max] => 70
            [theme] => gray
            [locale] => 
            [raw] => 
            [rtl] => 
            [headermetacolor] => 
            [headerdescription] => yes
            [showBannerGradient] => yes
            [sysinfo] => /Tools/SystemProfiler
        )

    [site] => Array
        (
            [SMBWorkGroup] => Array
                (
                    [Menu] => SMB:2
                    [Title] => Workgroup Settings
                    [Tag] => sitemap
                    [Cond] => ($var['shareSMBEnabled']=='yes')
                    [file] => plugins/dynamix.local.master/SMBWorkGroup.page
                    [root] => plugins/dynamix.local.master
                    [name] => SMBWorkGroup
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin  = 'dynamix.local.master';
$netbios = $var['USE_NETBIOS']=='yes';
$wsd     = $var['USE_WSD']=='yes';
?>
<script>
function setMonitor(form) {
<?if ($netbios):?>
  var monitor = form.monitor.value;
<?else:?>
  var monitor = 0;
<?endif;?>
  $.get('/plugins/<?=$plugin?>/include/LocalMaster.php',{monitor:monitor});
}
<?if ($netbios):?>
function getMaster() {
  $.get('/plugins/<?=$plugin?>/include/LocalMaster.php',{smb:1},function(data) {
    $('#elected').html(data);
    setTimeout(getMaster,10000);
  });
}
$(function(){
  // get and display current master
  getMaster();
});
<?endif;?>
</script>

<form markdown="1" name="WorkGroup" method="POST" action="/update.htm" target="progressFrame" onsubmit="setMonitor(this)">
_(Workgroup)_:
: <input type="text" name="WORKGROUP" maxlength="40" value="<?=htmlspecialchars($var['WORKGROUP'])?>" class="narrow"<?if ($var['fsState']=="Started"):?> disabled<?endif;?>>

:smb_workgroup_plug:
> Enter your local network Workgroup name. Usually this is "WORKGROUP".
:end

<?if ($netbios):?>
_(Local master)_:
: <select name="localMaster"<?if ($var['fsState']=="Started"):?> disabled<?endif;?>>
  <?=mk_option($var['localMaster'], "no", _('No'))?>
  <?=mk_option($var['localMaster'], "yes", _('Yes'))?>
  </select>

:smb_master_plug:
> If set to 'Yes' then the server will fully participate in browser elections, and in the absense
> of other servers, will usually become the local Master Browser.
:end

_(Monitor local master election)_:
: <select name="monitor"<?if ($var['fsState']=="Started"):?> disabled<?endif;?>>
  <?=mk_option($display['monitor']??'', "0", _("Disabled"))?>
  <?=mk_option($display['monitor']??'', "1", _("Enabled"))?>
  </select>

:smb_master_election_plug:
> Enable or disable background monitoring of the local master election.
> The result of the monitoring is displayed in the header at the top-left position.
:end

_(Current elected master)_:
: <span id="elected">_(please wait, obtaining)_...</span>

:smb_master_current_plug:
> Shows in real-time the current elected local master browser.
:end

<?elseif ($wsd):?>
_(Current elected master)_:
: <img src='/plugins/dynamix.local.master/icons/localmaster.png' class='icon'> _(Not used with Web Services on Devices (WSD))_

<?endif;?>
&nbsp;
: <input type="submit" name="changeShare" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()"><?if ($var['fsState']=="Started"):?>*_(Array must be **Stopped** to change)_*<?endif;?>
</form>

                )

            [SMBsettings] => Array
                (
                    [Menu] => SMB:1
                    [Title] => SMB Settings
                    [Tag] => windows
                    [file] => webGui/SMBsettings.page
                    [root] => webGui
                    [name] => SMBsettings
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<form markdown="1" name="SMBEnable" method="POST" action="/update.htm" target="progressFrame">

_(Enable SMB)_:
: <select name="shareSMBEnabled" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>
  <?=mk_option($var['shareSMBEnabled'], "no", _('No'))?>
  <?=mk_option($var['shareSMBEnabled'], "yes", _('Yes').' ('._('Workgroup').')')?>
  <?=mk_option($var['shareSMBEnabled'], "ads", _('Yes').' ('._('Active Directory').')')?>
  </select>

:smb_enable_help:

_(Hide "dot" files)_:
: <select name="hideDotFiles" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>
  <?=mk_option($var['hideDotFiles'], "no", _('No'))?>
  <?=mk_option($var['hideDotFiles'], "yes", _('Yes'))?>
  </select>

:smb_hide_files_help:

_(Enable SMB Multi Channel)_:
: <select name="serverMultiChannel" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>
  <?=mk_option($var['serverMultiChannel'], "no", _('No'))?>
  <?=mk_option($var['serverMultiChannel'], "yes", _('Yes'))?>
  </select>

:smb_multi_channel_help:

_(Enhanced macOS interoperability)_:
: <select name="enableFruit" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>
  <?=mk_option($var['enableFruit'], "no", _('No'))?>
  <?=mk_option($var['enableFruit'], "yes", _('Yes'))?>
  </select>

:smb_enhanced_macos_help:

_(Enable NetBIOS)_:
: <select name="USE_NETBIOS" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>
  <?=mk_option($var['USE_NETBIOS'], "no", _('No'))?>
  <?=mk_option($var['USE_NETBIOS'], "yes", _('Yes'))?>
  </select>

:smb_enable_netbios_help:

_(Enable WSD)_:
: <select name="USE_WSD" onchange="checkWSDSettings()" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>
  <?=mk_option($var['USE_WSD'], "no", _('No'))?>
  <?=mk_option($var['USE_WSD'], "yes", _('Yes'))?>
  </select>

:smb_enable_wsd_help:

_(WSD options [experimental])_:
: <input type="text" name="WSD2_OPT" maxlength="80" class="narrow" value="<?=htmlspecialchars($var['WSD2_OPT'])?>" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>>

:smb_wsd_options_help:

&nbsp;
: <input type="submit" name="changeShare" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()"><?if ($var['fsState']=="Started"):?>*_(Array must be **Stopped** to change)_*<?endif;?>
</form>

<script>
function checkWSDSettings() {
  form=document.SMBEnable;
  if (form.USE_WSD.value=="yes") {
    form.WSD2_OPT.disabled=false;
  } else {
    form.WSD2_OPT.disabled=true;
  }
}
$(checkWSDSettings);
</script>

                )

            [Scheduler] => Array
                (
                    [Menu] => UserPreferences
                    [Type] => xmenu
                    [Title] => Scheduler
                    [Icon] => icon-scheduler
                    [file] => webGui/Scheduler.page
                    [root] => webGui
                    [name] => Scheduler
                    [text] => 
                )

            [SecurityNFS] => Array
                (
                    [Menu] => Disk Share
                    [Title] => NFS Security Settings
                    [Tag] => linux
                    [Cond] => (($var['shareNFSEnabled']!='no') && (isset($name)?array_key_exists($name,$sec_nfs):0))
                    [file] => webGui/SecurityNFS.page
                    [root] => webGui
                    [name] => SecurityNFS
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$width = [123,300];
?>
:nfs_security_help:

<div class="clone1">
<span class="clone">_(Read settings from)_</span><i class="fa fa-arrow-left fa-fw"></i>
<span class="wrap"><select name="readnfs" class="clone" onchange="toggleButton('readnfs',false)">
<option disabled selected>_(select)_...</option>
<?
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name) echo mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name) echo mk_option("", $list['name'], compress($list['name']));
}
?>
</select></span><input type="button" id="readnfs" value="_(Read)_" class="clone" onclick="readNFS()" disabled>
</div>
<div class="clone2">
<span class="clone">_(Write settings to)_</span><i class="fa fa-arrow-right fa-fw"></i>
<span class="wrap"><select id="nfs1" name="writenfs" multiple="multiple" style="display:none" onchange="toggleButton('writenfs',this.id)">
<?
$rows = [];
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name) $rows[] = mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name) $rows[] = mk_option("", $list['name'], compress($list['name']));
}
if ($rows) echo "<option>("._('All').")</option>";
foreach ($rows as $row) echo $row;
?>
</select></span><input type="button" id="writenfs" value="_(Write)_" class="clone" onclick="writeNFS()" disabled>
</div>

<form markdown="1" name="nfs_edit" method="POST" action="/update.htm" target="progressFrame" onchange="toggleButton('writenfs',true);$('#nfs1').dropdownchecklist('disable')">
<input type="hidden" name="shareName" value="<?=htmlspecialchars($name)?>">

_(Share name)_:
: <?=htmlspecialchars($name)?>

_(Export)_:
: <select name="shareExportNFS">
  <?=mk_option($sec_nfs[$name]['export'], "-", _('No'));?>
  <?=mk_option($sec_nfs[$name]['export'], "e", _('Yes'));?>
  </select>

_(Security)_:
: <select name="shareSecurityNFS">
  <?=mk_option($sec_nfs[$name]['security'], "public", _('Public'));?>
  <?=mk_option($sec_nfs[$name]['security'], "secure", _('Secure'));?>
  <?=mk_option($sec_nfs[$name]['security'], "private", _('Private'));?>
  </select>

&nbsp;
: <input type="submit" name="changeShareSecurityNFS" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<?if ($sec_nfs[$name]['security']=='private'):?>
<form markdown="1" method="POST" name="otherForm" action="/update.htm" target="progressFrame">
<input type="hidden" name="shareName" value="<?=htmlspecialchars($name)?>">
_(Rule)_:
: <input type="text" name="shareHostListNFS" maxlength="512" value="<?=htmlspecialchars($sec_nfs[$name]['hostList'])?>">

&nbsp;
: <input type="submit" name="changeShareAccessNFS" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>
<?endif;?>

<script>
$(function() {
  initDropdownNFS(false);
  if ($.cookie('hostList')!=null) {
    var host = $('input[name="shareHostListNFS"]');
    host.val($.cookie('hostList'));
    setTimeout(function(){host.trigger('change');},100);
    $.removeCookie('hostList');
  }
<?if ($tabbed):?>
<?$path=='Shares/Share' ? $t=2 : $t=1;?>
  $('#tab<?=$t?>').bind({click:function(){initDropdownNFS(true);}});
<?endif;?>
});
function initDropdownNFS(reset) {
  if (reset) {
    $('#nfs1').dropdownchecklist('destroy');
  }
  $("#nfs1").dropdownchecklist({firstItemChecksAll:true, emptyText:"_(select)_...", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
}
function readNFS() {
  var form = document.nfs_edit;
  var name = $('select[name="readnfs"]').val();
  $.get('/webGui/include/ProtocolData.php',{protocol:'nfs',name:name},function(json) {
    var data = $.parseJSON(json);
    form.shareExportNFS.value = data.export;
    form.shareSecurityNFS.value = data.security;
    if (data.hostList != '') $.cookie('hostList',data.hostList);
    $(form).find('select').trigger('change');
  });
}
function writeNFS(data,n,i) {
  if (data) {
    if (n<i) {
      $.post('/update.htm',data[n], function(){setTimeout(function(){writeNFS(data,++n,i);},3000);});
    } else {
      toggleButton('writenfs',false);
      $('div.spinner.fixed').hide();
    }
  } else {
    var data = [], i = 0;
    $('select#nfs1 option').map(function(i) {
      if ($(this).prop('selected')==true && $(this).val()!='(_(All)_)') {
        data[i] = {};
        data[i]['shareName'] = $(this).val();
        data[i]['shareExportNFS'] = '<?=addslashes(htmlspecialchars($sec_nfs[$name]['export']))?>';
        data[i]['shareSecurityNFS'] = '<?=addslashes(htmlspecialchars($sec_nfs[$name]['security']))?>';
        data[i]['changeShareSecurityNFS'] = 'Apply';
        i++;
      }
    });
    toggleButton('writenfs',true);
    $('div.spinner.fixed').show('slow');
    writeNFS(data,0,i);
  }
}
</script>

                )

            [SecuritySMB] => Array
                (
                    [Menu] => Disk Share Flash
                    [Title] => SMB Security Settings
                    [Tag] => windows
                    [Cond] => (($var['shareSMBEnabled']!='no') && (isset($name)?array_key_exists($name,$sec):0))
                    [file] => webGui/SecuritySMB.page
                    [root] => webGui
                    [name] => SecuritySMB
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/webGui/include/InputSecurity.php";

$width = [123,300];
?>
:smb_security_help:

<div class="clone1">
<span class="clone">_(Read settings from)_</span><i class="fa fa-arrow-left fa-fw"></i>
<span class="wrap"><select name="readsmb" class="clone" onchange="toggleButton('readsmb',false)">
<option disabled selected>_(select)_...</option>
<?
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name) echo mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name) echo mk_option("", $list['name'], compress($list['name']));
}
?>
</select></span><input type="button" id="readsmb" value="_(Read)_" class="clone" onclick="readSMB()" disabled>
</div>
<div class="clone2">
<span class="clone">_(Write settings to)_</span><i class="fa fa-arrow-right fa-fw"></i>
<span class="wrap"><select id="smb1" name="writesmb" multiple="multiple" style="display:none" onchange="toggleButton('writesmb',this.id)">
<?
$rows = [];
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name) $rows[] = mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name) $rows[] = mk_option("", $list['name'], compress($list['name']));
}
if ($rows) echo "<option>("._('All').")</option>";
foreach ($rows as $row) echo $row;
?>
</select></span><input type="button" id="writesmb" value="_(Write)_" class="clone" onclick="writeSMB()" disabled>
</div>

<form markdown="1" name="smb_edit" method="POST" action="/update.htm" target="progressFrame" onchange="toggleButton('writesmb',true);$('#smb1').dropdownchecklist('disable')">
<input type="hidden" name="shareName" value="<?=htmlspecialchars($name)?>">

_(Share name)_:
: <?=htmlspecialchars($name)?>

<?if (($name=='flash')||($var['enableFruit']!='yes')):?>
_(Export)_:
: <select name="shareExport">
  <?=mk_option($sec[$name]['export'], "-", _('No'))?>
  <?=mk_option($sec[$name]['export'], "e", _('Yes'))?>
  <?=mk_option($sec[$name]['export'], "eh", _('Yes (hidden)'))?>
  </select>

:smb_export_help:

<input type="hidden" name="shareVolsizelimit" value="">
<?else:?>
_(Export)_:
: <select name="shareExport" onchange="checkShareSettingsSMB(this.form)">
  <?=mk_option($sec[$name]['export'], "-", _('No'))?>
  <?=mk_option($sec[$name]['export'], "e", _('Yes'))?>
  <?=mk_option($sec[$name]['export'], "eh", _('Yes (hidden)'))?>
  <?=mk_option($sec[$name]['export'], "et", _('Yes/Time Machine'))?>
  <?=mk_option($sec[$name]['export'], "eth", _('Yes/Time Machine (hidden)'))?>
  </select>

:smb_export_help:

_(Time Machine volume size limit)_:
: <input type="text" name="shareVolsizelimit" maxlen="20" value="<?=$sec[$name]['volsizelimit']?>"> MB

:smb_time_machine_volume_help:

<?endif;?>
<?if ($name!='flash'):?>
_(Case-sensitive names)_:
: <select name="shareCaseSensitive">
  <?=mk_option($sec[$name]['caseSensitive'], "auto", _("Auto"))?>
  <?=mk_option($sec[$name]['caseSensitive'], "yes", _("Yes"))?>
  <?=mk_option($sec[$name]['caseSensitive'], "forced", _("Force lower"))?>
  </select>

:smb_case_sensitive_names_help:

<?endif;?>
_(Security)_:
: <select name="shareSecurity">
  <?=mk_option($sec[$name]['security'], "public", _('Public'))?>
  <?=mk_option($sec[$name]['security'], "secure", _('Secure'))?>
  <?=mk_option($sec[$name]['security'], "private", _('Private'))?>
  </select>

:smb_security_modes_help:

&nbsp;
: <input type="submit" name="changeShareSecurity" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<?if ($sec[$name]['security']=='secure'):?>
<div class="title nocontrol"><dt>_(SMB)_ _(User Access)_</dt><i>_(Guests have **read-only** access)_.</i></div>

:smb_secure_access_help:

<div class="clone1">
<span class="clone">_(Read settings from)_</span><i class="fa fa-arrow-left fa-fw"></i>
<span class="wrap"><select name="readusersmb" class="clone" onchange="toggleButton('readusersmb',false)">
<option disabled selected>_(select)_...</option>
<?
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='secure') echo mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='secure') echo mk_option("", $list['name'], compress($list['name']));
}
?>
</select></span><input type="button" id="readusersmb" value="_(Read)_" class="clone" onclick="readUserSMB()" disabled>
</div>
<div class="clone2">
<span class="clone">_(Write settings to)_</span><i class="fa fa-arrow-right fa-fw"></i>
<span class="wrap"><select id="smb2" name="writeusersmb" multiple="multiple" style="display:none" onchange="toggleButton('writeusersmb',this.id)">
<?
$rows = [];
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='secure') $rows[] = mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='secure') $rows[] = mk_option("", $list['name'], compress($list['name']));
}
if ($rows) echo "<option>("._('All').")</option>";
foreach ($rows as $row) echo $row;
?>
</select></span><input type="button" id="writeusersmb" value="_(Write)_" class="clone" onclick="writeUserSMB()" disabled>
</div>

<form markdown="1" name="smb_user_edit" method="POST" action="/update.htm" target="progressFrame" onchange="toggleButton('writeusersmb',true);$('#smb2').dropdownchecklist('disable')">
<input type="hidden" name="shareName" value="<?=htmlspecialchars($name)?>">
<?input_secure_users($sec)?>

&nbsp;
: <input type="submit" name="changeShareAccess" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<?elseif ($sec[$name]['security']=='private'):?>
<div class="title nocontrol"><dt>_(SMB)_ _(User Access)_</dt><i>_(Guests have **no** access)_.</i></div>

:smb_private_access_help:

<div class="clone1">
<span class="clone">_(Read settings from)_</span><i class="fa fa-arrow-left fa-fw"></i>
<span class="wrap"><select name="readusersmb" class="clone" onchange="toggleButton('readusersmb',false)">
<option disabled selected>_(select)_...</option>
<?
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='private') echo mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='private') echo mk_option("", $list['name'], compress($list['name']));
}
?>
</select></span><input type="button" id="readusersmb" value="_(Read)_" class="clone" onclick="readUserSMB()" disabled>
</div>
<div class="clone2">
<span class="clone">_(Write settings to)_</span><i class="fa fa-arrow-right fa-fw"></i>
<span class="wrap"><select id="smb2" name="writeusersmb" multiple="multiple" style="display:none" onchange="toggleButton('writeusersmb',this.id)">
<?
$rows = [];
if (isset($disks[$name])) {
  foreach (array_filter($disks,'clone_list') as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='private') $rows[] = mk_option("", $list['name'], _(my_disk($list['name']),3));
} else {
  foreach ($shares as $list) if ($list['name']!=$name && $sec[$list['name']]['security']=='private') $rows[] = mk_option("", $list['name'], compress($list['name']));
}
if ($rows) echo "<option>("._('All').")</option>";
foreach ($rows as $row) echo $row;
?>
</select></span><input type="button" id="writeusersmb" value="_(Write)_" class="clone" onclick="writeUserSMB()" disabled>
</div>

<form markdown="1" name="smb_user_edit" method="POST" action="/update.htm" target="progressFrame" onchange="toggleButton('writeusersmb',true);$('#smb2').dropdownchecklist('disable')">
<input type="hidden" name="shareName" value="<?=htmlspecialchars($name)?>">
<?input_private_users($sec)?>

&nbsp;
: <input type="submit" name="changeShareAccess" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>
<?endif;?>

<script>
$(function() {
  checkShareSettingsSMB(document.smb_edit);
  initDropdownSMB(false);
<?if ($tabbed):?>
  $('#tab'+$('input[name$="tabs"]').length).bind({click:function(){initDropdownSMB(true);}});
<?endif;?>
<?if (count($users)==1):?>
  toggleButton('readusersmb',true);
  toggleButton('writeusersmb',true);
  $('#smb2').dropdownchecklist('disable');
<?endif;?>
});
function checkShareSettingsSMB(form) {
  form.shareVolsizelimit.disabled = (form.shareExport.value.indexOf("et") == -1);
}
function initDropdownSMB(reset) {
  if (reset) {
    $('#smb1').dropdownchecklist('destroy');
    $('#smb2').dropdownchecklist('destroy');
  }
  $("#smb1").dropdownchecklist({firstItemChecksAll:true, emptyText:"_(select)_...", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
  $("#smb2").dropdownchecklist({firstItemChecksAll:true, emptyText:"_(select)_...", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
}
function readSMB() {
  var form = document.smb_edit;
  var name = $('select[name="readsmb"]').val();
  $.get('/webGui/include/ProtocolData.php',{protocol:'smb',name:name},function(json) {
    var data = $.parseJSON(json);
    form.shareExport.value = data.export;
    form.shareFruit.value = data.fruit;
    form.shareSecurity.value = data.security;
  });
  $(form).find('select').trigger('change');
}
function writeSMB(data,n,i) {
  if (data) {
    if (n<i) {
      $.post('/update.htm',data[n], function(){setTimeout(function(){writeSMB(data,++n,i);},3000);});
    } else {
      toggleButton('writesmb',false);
      $('div.spinner.fixed').hide();
    }
  } else {
    var data = [], i = 0;
    $('select#smb1 option').map(function() {
      if ($(this).prop('selected')==true && $(this).val()!='(_(All)_)') {
        data[i] = {};
        data[i]['shareName'] = $(this).val();
        data[i]['shareExport'] = '<?=addslashes(htmlspecialchars($sec[$name]['export']))?>';
        data[i]['shareFruit'] = '<?=addslashes(htmlspecialchars($sec[$name]['fruit']))?>';
        data[i]['shareSecurity'] = '<?=addslashes(htmlspecialchars($sec[$name]['security']))?>';
        data[i]['changeShareSecurity'] = 'Apply';
        i++;
      }
    });
    toggleButton('writesmb',true);
    $('div.spinner.fixed').show('slow');
    writeSMB(data,0,i);
  }
}
function readUserSMB() {
  var form = document.smb_user_edit;
  var name = $('select[name="readusersmb"]').val();
  var users = {};
<?
  foreach ($users as $user) {
    if ($user['name'] == "root") continue;
    echo "users['{$user['name']}'] = {$user['idx']};\n";
  }
?>
  $.get('/webGui/include/ProtocolData.php',{protocol:'smb',name:name},function(json) {
    var data = $.parseJSON(json);
    var readList = data.readList.split(',');
    var writeList = data.writeList.split(',');
    $(form).find('select[name^="userAccess."]').each(function(){$(this).val('no-access');});
    for (var i=0; i < readList.length; i++) $(form).find('select[name="userAccess.'+users[readList[i]]+'"]').val('read-only');
    for (var i=0; i < writeList.length; i++) $(form).find('select[name="userAccess.'+users[writeList[i]]+'"]').val('read-write');
  });
  $(form).find('select').trigger('change');
}
function writeUserSMB(data,n,i) {
  if (data) {
    if (n<i) {
      $.post('/update.htm',data[n], function(){setTimeout(function(){writeUserSMB(data,++n,i);},3000);});
    } else {
      toggleButton('writeusersmb',false);
      $('div.spinner.fixed').hide();
    }
  } else {
    var data = [], i = 0;
    $('select#smb2 option').map(function() {
      if ($(this).prop('selected')==true && $(this).val()!='(_(All)_)') {
        data[i] = {};
        data[i]['shareName'] = $(this).val();
        data[i]['userAccess.0'] = 'no-access';
<?
        $read_list = explode(",", $sec[$name]['readList']);
        $write_list = explode(",", $sec[$name]['writeList']);
        foreach ($users as $user) {
          if ($user['name'] == "root") continue;
          $idx = $user['idx'];
          $userAccess = null;
          if ($sec[$name]['security']=='secure') {
            $userAccess = in_array($user['name'], $write_list) ? "read-write" : "read-only";
          } elseif ($sec[$name]['security'] == 'private') {
            $userAccess = in_array($user['name'], $write_list) ? "read-write" : (in_array($user['name'], $read_list) ? "read-only" : "no-access");
          }
          if ($userAccess) echo "data[i]['userAccess.$idx'] = '$userAccess';\n";
        }
?>
        data[i]['changeShareAccess'] = 'Apply';
        i++;
      }
    });
    toggleButton('writeusersmb',true);
    $('div.spinner.fixed').show('slow');
    writeUserSMB(data,0,i);
  }
}
</script>

                )

            [Selftest] => Array
                (
                    [Menu] => Device:2 New:2
                    [Title] => Self-Test
                    [Tag] => wrench
                    [Cond] => strpos(_var($disks[$name],'status'),'_NP')===false
                    [file] => webGui/Selftest.page
                    [root] => webGui
                    [name] => Selftest
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$date = date('Ymd-Hi');
$file = _var($disk,'id','no-id')."-$date.txt";
$zip  = str_replace(' ','_',strtolower(_var($var,'NAME','tower')))."-smart-$date.zip";
$long = !isset($disks[$name]['spindownDelay']) || _var($disks[$name],'spindownDelay')==0 || (_var($disks[$name],'spindownDelay')==-1 && _var($var,'spindownDelay')==0);
?>
_(Download SMART report)_:
: <input type='button' value="_(Download)_" onclick='saveSMART()'>

_(SMART self-test history)_:
: <input type="button" value="_(Show)_" id="toggle_log" onclick="selftestLog()">

:selftest_history_help:

<pre id="selftest" style="display:none"></pre>

_(SMART error log)_:
: <input type="button" value="_(Show)_" id="toggle_error" onclick="errorLog()">

:selftest_error_log_help:

<pre id="errorlog" style="display:none"></pre>

_(SMART short self-test)_:
: <input type='button' value="_(Start)_" id='short_test' onclick="startShortTest()">

:selftest_short_test_help:

_(SMART extended self-test)_:
: <input type='button' value="_(Start)_" id='long_test' onclick="startLongTest()"<?=$long ? ">" : " disabled> _(Disable **Spin down delay** to run a SMART extended self-test)_"?>

:selftest_long_test_help:

_(Last SMART test result)_:
: <span id="test_result"><i class='fa fa-circle-o-notch fa-spin fa-fw'></i></span>

:selftest_result_help:

<script>
function cleanUp() {
  if (document.hasFocus()) {
    $('input[value="_(Downloading)_..."]').val("_(Download)_").prop('disabled',false);
    $.post('/webGui/include/Download.php',{cmd:'delete',file:'<?=addslashes(htmlspecialchars($file))?>'});
    $.post('/webGui/include/Download.php',{cmd:'delete',file:'<?=addslashes(htmlspecialchars($zip))?>'});
  } else {
    setTimeout(cleanUp,4000);
  }
}
function saveSMART() {
  $('input[value="_(Download)_"]').val('_(Downloading)_...').prop('disabled',true);
  $.post('/webGui/include/SmartInfo.php',{cmd:'save',port:'<?=$dev?>',name:'<?=$name?>',file:'<?=addslashes(htmlspecialchars($file))?>'}, function() {
    $.post('/webGui/include/Download.php',{cmd:'save',source:'<?=addslashes(htmlspecialchars($file))?>',file:'<?=addslashes(htmlspecialchars($zip))?>'},function(zip) {
      location = zip;
      setTimeout(cleanUp,4000);
    });
  });
}
function testUpdate(init) {
  $.post('/webGui/include/SmartInfo.php',{cmd:'update',port:'<?=$dev?>',name:'<?=$name?>',csrf:'<?=$var['csrf_token']?>'},function(data) {
    $('#test_result').html(data);
    if (data.indexOf('%')>=0) {
      if ($('#smart_selftest').length) {
        $('#smart_selftest').html('<i class="fa fa-camera"></i> _(SMART self-test in progress)_...');
      }
      if (!init) timers.testUpdate = setTimeout(testUpdate,3000);
    } else {
      if ($('#smart_selftest').length) $('#smart_selftest').html('');
      $('#short_test').val("_(Start)_");
      $('#long_test').val("_(Start)_");
      if (!init) {
        $.removeCookie('test.<?=$dev?>');
      }
    }
  });
}
function selftestLog() {
  $('#selftest').toggle('slow');
  var text = $('#toggle_log').val()=="_(Show)_" ? "_(Hide)_" : "_(Show)_";
  $('#toggle_log').val(text);
}
function errorLog() {
  $('#errorlog').toggle('slow');
  var text = $('#toggle_error').val()=="_(Show)_" ? "_(Hide)_" : "_(Show)_";
  $('#toggle_error').val(text);
}
function startShortTest() {
  if ($('#short_test').val()=="_(Start)_") {
    $('#short_test').val("_(Stop)_");
    $('#long_test').attr('disabled','disabled');
    $.cookie('test.<?=$dev?>','short',{expires:365});
    $.post('/webGui/include/SmartInfo.php',{cmd:'short',port:'<?=$dev?>',name:'<?=$name?>'},function(){timers.testUpdate = setTimeout(testUpdate,0);});
  } else {
    clearTimeout(timers.testUpdate);
    $.removeCookie('test.<?=$dev?>');
    $.post('/webGui/include/SmartInfo.php',{cmd:'stop',port:'<?=$dev?>',name:'<?=$name?>'},function(){setTimeout(testUpdate,0);});
  }
}
function startLongTest() {
  if ($('#long_test').val()=="_(Start)_") {
    $('#long_test').val("_(Stop)_");
    $('#short_test').attr('disabled','disabled');
    $.cookie('test.<?=$dev?>','long',{expires:365});
    $.post('/webGui/include/SmartInfo.php',{cmd:'long',port:'<?=$dev?>',name:'<?=$name?>'},function(){timers.testUpdate = setTimeout(testUpdate,0);});
  } else {
    clearTimeout(timers.testUpdate);
    $.removeCookie('test.<?=$dev?>');
    $.post('/webGui/include/SmartInfo.php',{cmd:'stop',port:'<?=$dev?>',name:'<?=$name?>'},function(){setTimeout(testUpdate,0);});
  }
}
$(function() {
  var smarttest = $.cookie('test.<?=$dev?>');
  testUpdate(smarttest===undefined);
  if (smarttest !== undefined) $('#'+smarttest+'_test').val("_(Stop)_").removeAttr('disabled');
  $.post('/webGui/include/SmartInfo.php',{cmd:'selftest',port:'<?=$dev?>',name:'<?=$name?>'},function(data){$('#selftest').html(data);});
  $.post('/webGui/include/SmartInfo.php',{cmd:'errorlog',port:'<?=$dev?>',name:'<?=$name?>'},function(data){$('#errorlog').html(data);});
});
</script>

                )

            [Settings] => Array
                (
                    [Menu] => Tasks:4
                    [Type] => xmenu
                    [Tabs] => false
                    [Code] => e924
                    [file] => webGui/Settings.page
                    [root] => webGui
                    [name] => Settings
                    [text] => 
                )

            [Share] => Array
                (
                    [Type] => xmenu
                    [file] => webGui/Share.page
                    [root] => webGui
                    [name] => Share
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function clone_list($disk) {
  global $pools;
  return strpos($disk['status'],'_NP')===false && ($disk['type']=='Data' || in_array($disk['name'],$pools));
}
if ($name) {
  $refs = []; $n = $i = 0;
  // Natural sorting of share names
  uksort($shares,'strnatcasecmp');
  foreach ($shares as $ref) {
    $sname = $ref['name'];
    $refs[] = $sname;
    if ($sname==$name) $i = $n;
    $n++;
  }
  $end  = count($refs)-1;
  if ($end >= 0) {
    $prev = urlencode($i>0 ? $refs[$i-1] : $refs[$end]);
    $next = urlencode($i<$end ? $refs[$i+1] : $refs[0]);
  } else {
    $prev = $next = '';
  }
} else {
  $tabbed = false;
}
?>
<style>
div.clone1{position:absolute;right:10px;margin-top:0}
div.clone2{position:absolute;right:10px;margin-top:48px}
span.input{display:inline-block;width:330px}
<?if ($themes1):?>
span.wrap{display:inline-block;width:128px}
select.clone{min-width:123px;max-width:123px;margin-right:0}
<?else:?>
span.wrap{display:inline-block;width:150px}
select.clone{min-width:145px;max-width:145px;margin-right:0}
<?endif;?>
input.clone{margin-left:8px;margin-right:0}
span.clone{margin-right:4px}
</style>
<script>
function toggleButton(button,id) {
  var disabled = true;
  switch (id) {
  case false:
  case true:
    disabled = id;
    break;
  default:
    $('select#'+id+' option').each(function(){if ($(this).prop('selected')==true) disabled = false;});
  }
  $('input#'+button).prop('disabled',disabled);
}

<?if ($name):?>
var ctrl = '<span class="ctrl1 status <?=$tabbed?'vhshift':'vshift'?>"><a href="/Shares/Share?name=<?=$prev?>" title="_(previous user share)_"><button type="button" style="margin-right:4px"><i class="fa fa-chevron-left fa-fw"></i></button></a><a href="/Shares/Share?name=<?=$next?>" title="_(next user share)_"><button type="button"><i class="fa fa-chevron-right fa-fw"></i></button></a></span>';

$(function() {
<?if ($tabbed):?>
  $('.tabs').append(ctrl);
<?else:?>
  $('div[class=title]:first').append(ctrl);
<?endif;?>
});
<?endif;?>
</script>

                )

            [ShareEdit] => Array
                (
                    [Menu] => Share:1
                    [Title] => Share Settings
                    [Tag] => share-alt-square
                    [file] => webGui/ShareEdit.page
                    [root] => webGui
                    [name] => ShareEdit
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$width = [123,300];

if ($name == "") {
  // default values when adding new share
  $share = ["nameOrig"   => "",
            "name"       => "",
            "comment"    => "",
            "allocator"  => "highwater",
            "floor"      => "",
            "splitLevel" => "",
            "include"    => "",
            "exclude"    => "",
            "useCache"   => "no",
            "cachePool"  => "",
            "cow"        => "auto"
           ];
} elseif (array_key_exists($name, $shares)) {
  // edit existing share
  $share = $shares[$name];
} else {
  // handle share deleted case
  echo "<p class='notice'>"._('Share')." '".htmlspecialchars($name)."' "._('has been deleted').".</p><input type='button' value=\""._('Done')."\" onclick='done()'>";
  return;
}
// Check for non existent pool device
if ($share['cachePool'] && !in_array($share['cachePool'],$pools)) $share['useCache'] = "no";

function globalInclude($name) {
  global $var;
  return substr($name,0,4)=='disk' && (!$var['shareUserInclude'] || in_array($name,explode(',',$var['shareUserInclude'])));
}
function sanitize(&$val) {
  $data = explode('.',str_replace([' ',','],['','.'],$val));
  $last = array_pop($data);
  $val = count($data) ? implode($data).".$last" : $last;
}
function presetSpace($val) {
  global $disks,$shares,$name,$pools,$display;
  if (!$val or strcasecmp($val,'NaN')==0) return;
  sanitize($val);
  $small = [];
  foreach (data_filter($disks) as $disk) $small[] = _var($disk,'fsSize');
  $fsSize[""] = min(array_filter($small));
  foreach ($pools as $pool) $fsSize[$pool] = _var($disks[$pool],'fsSize',0);
  $pool = _var($shares[$name],'cachePool');
  $size = _var($fsSize,$pool,0);
  $size = $size>0 ? round(100*$val/$size,1) : 0;
  $unit = '%';
  if ($size < 1) {
    $units = ['KB','MB','GB','TB','PB','EB','ZB','YB'];
    $base = $val>0 ? floor(log($val,1000)) : 0;
    $size = round($val/pow(1000,$base),1);
    $unit = _var($units,$base);
  }
  [$dot,$comma] = str_split(_var($display,'number','.,'));
  return $size>0 ? number_format($size,$size-floor($size)?1:0,$dot,$comma).' '.$unit : '';
}
function fsSize() {
  global $disks,$pools;
  $fsSize = $small = [];
  foreach (data_filter($disks) as $disk) $small[] = _var($disk,'fsSize');
  $fsSize[] = '"":"'.min(array_filter($small)).'"';
  foreach ($pools as $pool) $fsSize[] = '"'.$pool.'":"'._var($disks[$pool],'fsSize',0).'"';
  return implode(',',$fsSize);
}
function fsType() {
  global $disks,$pools;
  $fsType = [];
  foreach ($pools as $pool) $fsType[] = '"'.$pool.'":"'.str_replace('luks:','',_var($disks[$pool],'fsType')).'"';
  return implode(',',$fsType);
}
function primary() {
  global $share;
  return $share['useCache']=='no' ? '' : $share['cachePool'];
}
function secondary() {
  global $share;
  return in_array($share['useCache'],['no','only']) ? '0' : '1';
}
function direction() {
  global $share;
  return $share['useCache']=='prefer' ? '1' : '0';
}
// global shares include/exclude
$myDisks = array_filter(array_diff(array_keys(array_filter($disks,'my_disks')), explode(',',$var['shareUserExclude'])), 'globalInclude');
?>
<style>
div.shade-white{background-color:#ededed;margin-top:10px;padding:8px 0 3px 0}
div.shade-black{background-color:#212121;margin-top:10px;padding:8px 0 3px 0}
div.shade-azure{background-color:#edeaef;margin-top:10px;padding:8px 0 3px 0}
div.shade-gray{background-color:#121510;margin-top:10px;padding:8px 0 3px 0}
#s1,#s2,#s3,#s4,#s5,#autosize,.empty,.full2,#zfs-name{display:none}
i.fa-info.i{margin-right:10px}
<?if ($themes1):?>
form[name=share_edit]{margin-top:-20px}
<?endif;?>
</style>

:share_edit_global1_help:
<?if ($name):?>
:share_edit_global2_help:
<?endif;?>

<div class="clone1">
<span class="clone">_(Read settings from)_</span><i class="fa fa-arrow-left fa-fw"></i>
<span class="wrap"><select name="readshare" class="clone" onchange="toggleButton('readshare',false)">
<option disabled selected>_(select)_...</option>
<?
foreach ($shares as $list) if ($list['name']!=$name || !$name) echo mk_option("", $list['name'], compress($list['name']));
?>
</select></span><input type="button" id="readshare" value="_(Read)_" class="clone" onclick="readShare()" disabled>
</div>
<?if ($name):?>
<div class="clone2">
<span class="clone">_(Write settings to)_</span><i class="fa fa-arrow-right fa-fw"></i>
<span class="wrap"><select id="s5" name="writeshare" multiple onchange="toggleButton('writeshare',this.id)">
<?
$rows = [];
foreach ($shares as $list) if ($list['name']!=$name) $rows[] = mk_option("", $list['name'], compress($list['name']));
if ($rows) echo "<option>("._('All').")</option>";
foreach ($rows as $row) echo $row;
?>
</select></span><input type="button" id="writeshare" value="_(Write)_" class="clone" onclick="writeShare()" disabled>
</div>
<?endif;?>

<form markdown="1" name="share_edit" method="POST" action="/update.htm" target="progressFrame" onsubmit="return prepareEdit()"<?=$name?" onchange=\"toggleButton('writeshare',true);$('#s5').dropdownchecklist('disable')\">":">"?>
<input type="hidden" name="shareNameOrig" value="<?=htmlspecialchars($share['nameOrig'])?>">
<input type="hidden" name="shareUseCache" value="<?=$share['useCache']?>">
<input type="hidden" name="shareAllocator" value="">
<input type="hidden" name="shareSplitLevel" value="">
<input type="hidden" name="shareInclude" value="">
<input type="hidden" name="shareExclude" value="">

<div markdown="1" class="shade-<?=$display['theme']?>">
_(Share name)_:
: <input type="text" id="shareName" name="shareName" maxlength="40" autocomplete="off" spellcheck="false" value="<?=htmlspecialchars($name)?>" oninput="checkName(this.value)" title="_(Hidden share names are not allowed)_" pattern="^[^\.].*"><span id="zfs-name" class="orange-text"><i class="fa fa-warning"></i> _(Share name contains invalid characters for ZFS use)_</span>

:share_edit_name_help:

_(Comments)_:
: <input type="text" name="shareComment" maxlength="256" autocomplete="off" spellcheck="false" value="<?=htmlspecialchars($share['comment'])?>">

:share_edit_comments_help:

<div markdown="1">
_(Minimum free space)_:
: <span class="input"><input type="text" name="shareFloor" maxlength="16" autocomplete="off" spellcheck="false" class="narrow" value="<?=presetSpace($share['floor'])?>" placeholder="0"></span><span id="autosize"><i class="fa fa-info i"></i>_(Calculated free space value)_</span>

:share_edit_free_space_help:

</div>
<?if ($name):?>
<div markdown="1" class="empty">
_(Share status)_:
: _(Share is empty)_

:share_edit_status_help:

</div>
<div markdown="1" class="full">
_(Share status)_:
: <span class="full1">&nbsp;</span><span class="full2">_(Share contains data)_</span>

:share_edit_delete_help:

</div>
<?if (_var($share,'exclusive')=="yes"):?>
_(Exclusive access)_:
: _(Yes)_

:share_edit_exclusive_access_help:

<?else:?>
_(Exclusive access)_:
: _(No)_

:share_edit_exclusive_access_help:

<?endif;?>
<?endif;?>
</div>
<div markdown="1" class="shade-<?=$display['theme']?>">
_(Primary storage (for new files and folders))_:
: <select id="primary" name="shareCachePool" onchange="form.shareFloor.value='';updateScreen(z(4),'slow')">
  <?=mk_option(primary(),'',_('Array'))?>
  <?foreach ($pools as $pool):?>
  <?if ($disks[$pool]['devices']) echo mk_option(primary(),$pool,my_disk($pool),$disks[$pool]['shareEnabled']=='yes'?"":"disabled")?>
  <?endforeach;?>
  </select>

:share_edit_primary_storage_help:

<div markdown="1" id="cow-setting">
_(Enable Copy-on-write)_:
: <span class="input"><select name="shareCOW"<?if ($name):?> disabled<?endif;?>>
  <?=mk_option($share['cow'], "no", _('No'))?>
  <?=mk_option($share['cow'], "auto", _('Auto'))?>
  </select></span><?if ($name):?><i class='fa fa-info i'></i>_(Set when adding new share only)_<?endif;?>

:share_edit_copy_on_write_help:

</div>
<div markdown="1" id="moreSettings1">
_(Allocation method)_:
: <select name="shareAllocator1">
  <?=mk_option($share['allocator'], "highwater", _('High-water'))?>
  <?=mk_option($share['allocator'], "fillup", _('Fill-up'))?>
  <?=mk_option($share['allocator'], "mostfree", _('Most-free'))?>
  </select>

:share_edit_allocation_method_help:

_(Split level)_:
: <select name="shareSplitLevel1">
  <?=mk_option($share['splitLevel'], "", _('Automatically split any directory as required'))?>
  <?=mk_option($share['splitLevel'], "1", _('Automatically split only the top level directory as required'))?>
  <?=mk_option($share['splitLevel'], "2", _('Automatically split only the top two directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "3", _('Automatically split only the top three directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "4", _('Automatically split only the top four directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "5", _('Automatically split only the top five directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "0", _('Manual: do not automatically split directories'))?>
  </select>

:share_edit_split_level_help:

_(Included disk(s))_:
: <select id="s1" name="shareInclude1" multiple>
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_luks($disk, $share['include'], strstr(_var($disks[$disk],'fsType'),':',true))?>
  <?endforeach;?>
  </select>

:share_edit_included_disks_help:

_(Excluded disk(s))_:
: <select id="s2" name="shareExclude1" multiple>
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_luks($disk, $share['exclude'], strstr(_var($disks[$disk],'fsType'),':',true))?>
  <?endforeach;?>
  </select>

:share_edit_excluded_disks_help:

</div>
</div>
<div markdown="1" class="shade-<?=$display['theme']?>">
_(Secondary storage)_:
: <select id="secondary" onchange="updateScreen(z(4),'slow')">
  <?=mk_option(secondary(),'0',_('None'))?>
  <?=mk_option(secondary(),'1',_('Array'))?>
  </select>

:share_edit_secondary_storage_help:

<div markdown="1" id="moreSettings2">
_(Allocation method)_:
: <select name="shareAllocator2">
  <?=mk_option($share['allocator'], "highwater", _('High-water'))?>
  <?=mk_option($share['allocator'], "fillup", _('Fill-up'))?>
  <?=mk_option($share['allocator'], "mostfree", _('Most-free'))?>
  </select>

:share_edit_allocation_method_help:

_(Split level)_:
: <select name="shareSplitLevel2">
  <?=mk_option($share['splitLevel'], "", _('Automatically split any directory as required'))?>
  <?=mk_option($share['splitLevel'], "1", _('Automatically split only the top level directory as required'))?>
  <?=mk_option($share['splitLevel'], "2", _('Automatically split only the top two directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "3", _('Automatically split only the top three directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "4", _('Automatically split only the top four directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "5", _('Automatically split only the top five directory levels as required'))?>
  <?=mk_option($share['splitLevel'], "0", _('Manual: do not automatically split directories'))?>
  </select>

:share_edit_split_level_help:

_(Included disk(s))_:
: <select id="s3" name="shareInclude2" multiple>
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_luks($disk, $share['include'], strstr(_var($disks[$disk],'fsType'),':',true))?>
  <?endforeach;?>
  </select>

:share_edit_included_disks_help:

_(Excluded disk(s))_:
: <select id="s4" name="shareExclude2" multiple>
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_luks($disk, $share['exclude'], strstr(_var($disks[$disk],'fsType'),':',true))?>
  <?endforeach;?>
  </select>

:share_edit_excluded_disks_help:

</div>

</div>
<div markdown="1" class="shade-<?=$display['theme']?>">
<div markdown="1" id="moverDirection1">
_(Mover action)_:
: <span class="input"><select id="direction" onchange="updateScreen(z(3),'slow')">
  <?=mk_option(direction(),'0','')?>
  <?=mk_option(direction(),'1','')?>
  </select></span><span id="moverAction1"></span>

:share_edit_mover_action_help:

</div>
<div markdown="1" id="moverDirection2">
_(Mover action)_:
: <span class="input"><select disabled>
  <?=mk_option('','',"_(Not used)_")?>
  </select></span><span id="moverAction2"></span>

:share_edit_mover_action_help:

</div>
</div>
<?if (!$name):?>
&nbsp;
: <input type="submit" name="cmdEditShare" value="_(Add Share)_" onclick="this.value='Add Share'"><input type="button" value="_(Done)_" onclick="done()">
<?else:?>
<div markdown="1" class="empty">
_(Delete)_<input type="checkbox" name="confirmDelete" onchange="chkDelete(this.form, document.getElementById('cmdEditShare'));">
: <input type="submit" id="cmdEditShare" name="cmdEditShare" value="_(Apply)_" onclick="if (this.value=='_(Delete)_') this.value='Delete'; else this.value='Apply'" disabled><input type="button" value="_(Done)_" onclick="done()">
</div>
<div markdown="1" class="full">
&nbsp;
: <input type="submit" name="cmdEditShare" value="_(Apply)_" onclick="this.value='Apply'" disabled><input type="button" value="_(Done)_" onclick="done()">
</div>
<?endif;?>
</form>
<script>
var form = document.share_edit;

$(function() {
<?if ($name):?>
  $.post('/webGui/include/ShareList.php',{scan:"<?=$name?>"},function(e){
    if (e==1) {$('.empty').show(); $('.full').hide();} else {$('.full1').hide(); $('.full2').show();}
  });
<?endif;?>
  initDropdown(false,true);
<?if ($tabbed):?>
  $('#tab1').bind({click:function(){initDropdown(true,true);}});
<?endif;?>
  updateScreen(form.shareUseCache.value);
  if ($.cookie('autosize-'+$('#shareName').val())) $('#autosize').show();
  checkName($('#shareName').val());
});
function initDropdown(remove,create) {
  if (remove) {
    $('#s1').dropdownchecklist('destroy');
    $('#s2').dropdownchecklist('destroy');
    $('#s3').dropdownchecklist('destroy');
    $('#s4').dropdownchecklist('destroy');
<?if ($name):?>
    $('#s5').dropdownchecklist('destroy');
<?endif;?>
  }
  if (create) {
    $('#s1').dropdownchecklist({emptyText:"_(All)_", width:<?=$width[1]?>, explicitClose:"..._(close)_"});
    $('#s2').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[1]?>, explicitClose:"..._(close)_"});
    $('#s3').dropdownchecklist({emptyText:"_(All)_", width:<?=$width[1]?>, explicitClose:"..._(close)_"});
    $('#s4').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[1]?>, explicitClose:"..._(close)_"});
<?if ($name):?>
    $("#s5").dropdownchecklist({firstItemChecksAll:true, emptyText:"_(select)_...", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
<?endif;?>
  }
}
function z(i) {
  switch (i) {
    case 0: return $('#primary').prop('selectedIndex');
    case 1: return $('#secondary').prop('selectedIndex');
    case 2: return $('#direction').prop('selectedIndex');
    case 3: return z(2)==0 ? 'yes' : 'prefer';
    case 4: return z(0)==0 ? 'no' : (z(1)==0 ? 'only' : z(3));
  }
}
function updateCOW(i,slow) {
  const fsType = {<?=fsType()?>};
  if (fsType[i]=='btrfs') $('#cow-setting').show(slow); else $('#cow-setting').hide(slow);
}
function updateScreen(cache,slow) {
  switch (cache) {
  case 'no':
    $('#primary option:eq('+z(0)+')').prop('selected',true);
    $('#secondary option:eq(0)').prop('selected',true);
    $('#secondary option:eq(1)').prop('disabled',true);
    $('#moverDirection1').hide();
    $('#moverDirection2').show();
    $('#moreSettings1').show(slow);
    $('#moreSettings2').hide(slow);
    $('#cow-setting').hide(slow);
    form.shareAllocator.disabled = false;
    form.shareSplitLevel.disabled = false;
    $('#s1').dropdownchecklist('enable');
    $('#s2').dropdownchecklist('enable');
    $('#moverAction2').html("<i class='fa fa-info i'></i>_(Mover takes no action)_");
    break;
  case 'yes':
    $('#primary option:eq('+z(0)+')').prop('selected',true);
    $('#secondary option:eq('+z(1)+')').prop('selected',true);
    $('#secondary option:eq(1)').prop('disabled',false);
    $('#moverDirection1 option:eq(0)').text($('#primary option:eq('+z(0)+')').text()+' → '+$('#secondary option:eq('+z(1)+')').text());
    $('#moverDirection1 option:eq(1)').text($('#secondary option:eq('+z(1)+')').text()+' → '+$('#primary option:eq('+z(0)+')').text());
    $('#moverDirection1').val('0').show();
    $('#moverDirection2').hide();
    $('#moreSettings1').hide(slow);
    $('#moreSettings2').show(slow);
    updateCOW(form.shareCachePool.value,slow);
    form.shareAllocator.disabled = false;
    form.shareSplitLevel.disabled = false;
    $('#s3').dropdownchecklist('enable');
    $('#s4').dropdownchecklist('enable');
    $('#moverAction1').html("<i class='fa fa-info i'></i>_(Mover transfers files from Primary storage to Secondary storage)_");
    break;
  case 'only':
    $('#primary option:eq('+z(0)+')').prop('selected',true);
    $('#secondary option:eq('+z(1)+')').prop('selected',true);
    $('#secondary option:eq(1)').prop('disabled',false);
    $('#moverDirection1').hide();
    $('#moverDirection2').show();
    $('#moreSettings1').hide(slow);
    $('#moreSettings2').hide(slow);
    updateCOW(form.shareCachePool.value,slow);
    form.shareAllocator.disabled = true;
    form.shareSplitLevel.disabled = true;
    $('#s1').dropdownchecklist('disable');
    $('#s2').dropdownchecklist('disable');
    $('#moverAction2').html("<i class='fa fa-info i'></i>_(Mover takes no action)_");
    break;
  case 'prefer':
    $('#primary option:eq('+z(0)+')').prop('selected',true);
    $('#secondary option:eq('+z(1)+')').prop('selected',true);
    $('#secondary option:eq(1)').prop('disabled',false);
    $('#moverDirection1 option:eq(0)').text($('#primary option:eq('+z(0)+')').text()+' → '+$('#secondary option:eq('+z(1)+')').text());
    $('#moverDirection1 option:eq(1)').text($('#secondary option:eq('+z(1)+')').text()+' → '+$('#primary option:eq('+z(0)+')').text());
    $('#moverDirection1').val('1').show();
    $('#moverDirection2').hide();
    $('#moreSettings1').hide(slow);
    $('#moreSettings2').show(slow);
    updateCOW(form.shareCachePool.value,slow);
    form.shareAllocator.disabled = false;
    form.shareSplitLevel.disabled = false;
    $('#s3').dropdownchecklist('enable');
    $('#s4').dropdownchecklist('enable');
    $('#moverAction1').html("<i class='fa fa-info i'></i>_(Mover transfers files from Secondary storage to Primary storage)_");
    break;
  }
}
function unite(field) {
  var list = [];
  for (var i=0,item; item=field.options[i]; i++) if (item.selected) list.push(item.value);
  return list.join(',');
}
function setFloor(val) {
  const fsSize = {<?=fsSize()?>};
  const units = ['K','M','G','T','P','E','Z','Y'];
  var full = fsSize[$('#primary').val()];
  var size = parseInt(full * 0.1); // 10% of available size
  var number = val.replace(/[A-Z%\s]/gi,'').replace(',','.').split('.');
  var last = number.pop();
  number = number.length ? number.join('')+'.'+last : last;
  if (number==0 && size>0) {
    size = size.toString()
    $.cookie('autosize-'+$('#shareName').val(),'1',{expires:365});
  } else {
    size = val;
    $.removeCookie('autosize-'+$('#shareName').val());
  }
  var unit = size.replace(/[0-9.,\s]/g,'');
  if (unit=='%') {
    number = (number > 0 && number <= 100) ? parseInt(full * number / 100) : '';
  } else {
    var base = unit.length==2 ? 1000 : (unit.length==1 ? 1024 : 0);
    number = base>0 ? number * Math.pow(base,(units.indexOf(unit.toUpperCase().replace('B',''))||0)) : size;
  }
  return isNaN(number) ? '' : number;
}
// Compose input fields
function prepareEdit() {
// Test share name validity
  var share = form.shareName.value.trim();
  if (share.length==0) {
    swal({title:"_(Missing share name)_",text:"_(Enter a name for the share)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  var reserved = [<?=implode(',',array_map('escapestring',explode(',',$var['reservedNames'])))?>];
  if (reserved.includes(share)) {
    swal({title:"_(Invalid share name)_",text:"_(Do not use reserved names)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  var pools = [<?=implode(',',array_map('escapestring',$pools))?>];
  if (pools.includes(share)) {
    swal({title:"_(Invalid share name)_",text:"_(Do not use pool names)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  if (share.match('[:\\\/*<>|"?]')) {
    swal({title:"_(Invalid Characters)_",text:"_(You cannot use the following within share names)_"+'<b> \\ / : * < > | " ?</b>',type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
// Update settings
  form.shareName.value = share;
  form.shareUseCache.value = z(4);
  form.shareFloor.value = setFloor(form.shareFloor.value);
  switch (form.shareUseCache.value) {
  case 'no':
    form.shareAllocator.value = form.shareAllocator1.value;
    form.shareSplitLevel.value = form.shareSplitLevel1.value;
    form.shareInclude.value = unite(form.shareInclude1);
    form.shareExclude.value = unite(form.shareExclude1);
    break;
  case 'yes':
  case 'prefer':
    form.shareAllocator.value = form.shareAllocator2.value;
    form.shareSplitLevel.value = form.shareSplitLevel2.value;
    form.shareInclude.value = unite(form.shareInclude2);
    form.shareExclude.value = unite(form.shareExclude2);
    break;
  }
  return true;
}
function readShare() {
  var name = $('select[name="readshare"]').val();
  initDropdown(true,false);
  $.get('/webGui/include/ShareData.php',{name:name},function(json) {
    var data = $.parseJSON(json);
    form.shareAllocator.value = data.allocator;
    form.shareFloor.value = data.floor;
    form.shareSplitLevel.value = data.splitLevel;
    form.shareInclude.value = data.include;
    form.shareExclude.value = data.exclude;
    form.shareUseCache.value = data.useCache;
    form.shareCOW.value = data.cow;
    for (var i=0,disk; disk=data.include.split(',')[i]; i++) for (var j=0,include; include=form.shareInclude.options[j]; j++) if (include.value==disk) include.selected=true;
    for (var i=0,disk; disk=data.exclude.split(',')[i]; i++) for (var j=0,exclude; exclude=form.shareExclude.options[j]; j++) if (exclude.value==disk) exclude.selected=true;
    initDropdown(false,true);
  });
  $(form).find('select').trigger('change');
}
function writeShare(data,n,i) {
  if (data) {
    if (n<i) {
      $.post('/update.htm',data[n], function(){setTimeout(function(){writeShare(data,++n,i);},3000);});
    } else {
      toggleButton('writeshare',false);
      $('div.spinner.fixed').hide();
    }
  } else {
    var data = [], i = 0;
    $('select#s5 option').map(function() {
      if ($(this).prop('selected')==true && $(this).val()!='(All)') {
        data[i] = {};
        data[i]['shareName'] = $(this).val();
        data[i]['shareNameOrig'] = $(this).val();
        data[i]['shareAllocator'] = '<?=addslashes(htmlspecialchars($share['allocator']))?>';
        data[i]['shareFloor'] = '<?=addslashes(htmlspecialchars($share['floor']))?>';
        data[i]['shareSplitLevel'] = '<?=addslashes(htmlspecialchars($share['splitLevel']))?>';
        data[i]['shareInclude'] = '<?=addslashes(htmlspecialchars($share['include']))?>';
        data[i]['shareExclude'] = '<?=addslashes(htmlspecialchars($share['exclude']))?>';
        data[i]['shareUseCache'] = '<?=addslashes(htmlspecialchars($share['useCache']))?>';
        data[i]['cmdEditShare'] = 'Apply';
        i++;
      }
    });
    toggleButton('writeshare',true);
    $('div.spinner.fixed').show('slow');
    writeShare(data,0,i);
  }
}
function checkName(name) {
  if (/^[A-Za-z0-9-_.: ]*$/.test(name)) $('#zfs-name').hide(); else $('#zfs-name').show();
}
</script>

                )

            [ShareList] => Array
                (
                    [Menu] => Shares:1
                    [Title] => User Shares
                    [Tag] => user-circle
                    [Cond] => _var($var,'fsState')!='Stopped' && _var($var,'shareUser')=='e'
                    [file] => webGui/ShareList.page
                    [root] => webGui
                    [name] => ShareList
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style>
table.share_status thead tr td:first-child{width:15%}
table.share_status thead tr td:nth-child(n+3){width:9%!important}
table.share_status thead tr td:nth-child(5){width:13%!important}
td.empty{text-align:center;padding-top:12px}
i.fa-fw{margin-right:2px}
</style>

<table class="share_status">
<thead><tr><td>_(Name)_</td><td>_(Comment)_</td><td>_(SMB)_</td><td>_(NFS)_</td><td>_(Storage)_</td><td>_(Size)_</td><td>_(Free)_</td></tr></thead>
<tbody id="shareslist"></tbody>
</table>

<form name="share_form" method="POST" action="<?=htmlspecialchars($path)?>/Share?name=">
<input type="button" id="compute-shares" value="_(Compute All)_" onclick="$(this).prop('disabled',true);shareList('',-1)">
<input type="submit" value="_(Add Share)_">
<input type="button" value="_(Clean Up)_" onclick="cleanup()" id="cleanup-button" disabled>
</form>

:share_list_help:

<script>
function shareList(name,all) {
  timers.shareList = setTimeout(function(){$('div.spinner.fixed').show();},500);
  $.post('/webGui/include/ShareList.php',{compute:name,path:"<?=rawurlencode($path)?>",all:all},function(data){
    clearTimeout(timers.shareList);
    $('div.spinner.fixed').hide();
    $('#shareslist').html(data);
    if (all!=1) $('#compute-shares').prop('disabled',!data||data.indexOf('colspan=')!=-1);
  });
}
function computeShare(name,status) {
  status.html("<i class='fa fa-circle-o-notch fa-spin'></i> _(Please wait)_...");
  shareList(name,1);
}
function cleanup() {
  swal({title:"_(CLEAN UP)_",text:"_(Remove unused share configurations)_",type:'info',html:true,animation:'none',showCancelButton:true,closeOnConfirm:false,confirmButtonText:"<?=_('Proceed')?>",cancelButtonText:"<?=_('Cancel')?>"},function(cleanup){
    if (!cleanup) return;
    $.post('/webGui/include/ShareList.php',{cleanup:1},function(data){
      swal({title:"_(CLEAN UP)_",text:"_(Removed share configurations)_: "+data,type:"success",html:true,confirmButtonText:"_(Ok)_"},function(esc){$('#cleanup-button').prop('disabled',true);});
    });
  });
}
$(function(){
  // enable CLEAN_UP button only when unused files are present
  $.post('/webGui/include/ShareList.php',{cleanup:0},function(data){if (data>0) $('#cleanup-button').prop('disabled',false);});
  shareList('',0);
});
</script>

                )

            [ShareSettings] => Array
                (
                    [Menu] => OtherSettings
                    [Type] => xmenu
                    [Title] => Global Share Settings
                    [Icon] => icon-share
                    [Tag] => share-alt
                    [file] => webGui/ShareSettings.page
                    [root] => webGui
                    [name] => ShareSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$disabled = _var($var,'fsState')!='Stopped' ? 'disabled' : '';
$disks    = array_filter($disks,'my_disks');
$width    = [166,300];
?>
<script>
$(function() {
  $('#s1').dropdownchecklist({emptyText:"_(All)_", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
  $('#s2').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
  presetShare(document.share_settings);
});
// Simulate the original input field
function prepareShare(form) {
  var include = '';
  for (var i=0,item; item=form.shareUserInclude.options[i]; i++) {
    if (item.selected) {
      if (include.length) include += ',';
      include += item.value;
      item.selected = false;
    }
  }
  item = form.shareUserInclude.options[0];
  item.value = include;
  item.selected = true;
  var exclude = '';
  for (var i=0,item; item=form.shareUserExclude.options[i]; i++) {
    if (item.selected) {
      if (exclude.length) exclude += ',';
      exclude += item.value;
      item.selected = false;
    }
  }
  item = form.shareUserExclude.options[0];
  item.value = exclude;
  item.selected = true;
}
function presetShare(form,shares) {
  var disabled = shares==null ? <?=$disabled ? 'true':'false'?> : shares=='-';
  var onOff = disabled ? 'disable':'enable';
  form.shareUserInclude.disabled = disabled;
  form.shareUserExclude.disabled = disabled;
  $('#s1').dropdownchecklist(onOff);
  $('#s2').dropdownchecklist(onOff);
}
</script>
<form markdown="1" name="share_settings" method="POST" action="/update.htm" target="progressFrame" onsubmit="prepareShare(this)">

_(Enable disk shares)_:
: <select name="shareDisk" <?=$disabled?>>
  <?=mk_option($var['shareDisk'], "no", _('No'))?>
  <?=mk_option($var['shareDisk'], "yes", _('Yes'))?>
  <?=mk_option($var['shareDisk'], "auto", _('Auto'))?>
  </select>

:shares_enable_disk_help:

_(Enable user shares)_:
: <select name="shareUser" onchange="presetShare(this.form,this.value)" <?=$disabled?>>
  <?=mk_option($var['shareUser'], "e", _('Yes'))?>
  <?=mk_option($var['shareUser'], "-", _('No'))?>
  </select>

:shares_enable_shares_help:

_(Included disk(s))_:
: <select id="s1" name="shareUserInclude" multiple="multiple" style="display:none">
  <?foreach ($disks as $disk):?>
  <?=mk_option_luks(_var($disk,'name'),_var($var,'shareUserInclude'),strstr(_var($disk,'fsType'),':',true))?>
  <?endforeach;?>
  </select>

:shares_included_disks_help:

_(Excluded disk(s))_:
: <select id="s2" name="shareUserExclude" multiple="multiple" style="display:none">
  <?foreach ($disks as $disk):?>
  <?=mk_option_luks(_var($disk,'name'),_var($var,'shareUserExclude'),strstr(_var($disk,'fsType'),':',true))?>
  <?endforeach;?>
  </select>

:shares_excluded_disks_help:

_(Permit exclusive shares)_:
: <select name="shareUserExclusive" <?=$disabled?>>
  <?=mk_option($var['shareUserExclusive'], "no", _('No'))?>
  <?=mk_option($var['shareUserExclusive'], "yes", _('Yes'))?>
  </select>

:shares_exclusive_shares_help:

_(Tunable (support Hard Links))_:
: <select name="fuse_useino" <?=$disabled?>>
  <?=mk_option($var['fuse_useino'], "no", _('No'))?>
  <?=mk_option($var['fuse_useino'], "yes", _('Yes'))?>
  </select>

:shares_tunable_hard_links_help:

_(Tunable (enable Direct IO))_:
: <select name="fuse_directio" <?=$disabled?>>
  <?=mk_option($var['fuse_directio'], "auto", _('Auto'))?>
  <?=mk_option($var['fuse_directio'], "0", _('No'))?>
  <?=mk_option($var['fuse_directio'], "1", _('Yes'))?>
  </select>

:shares_tunable_direct_io_help:

&nbsp;
: <input type="submit" name="changeShare" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()"><?if ($disabled):?>*_(Array must be **Stopped** to change)_*<?endif;?>
</form>

                )

            [Shares] => Array
                (
                    [Menu] => Tasks:2
                    [Type] => xmenu
                    [Code] => e92a
                    [file] => webGui/Shares.page
                    [root] => webGui
                    [name] => Shares
                    [text] => <?PHP
if ($var['fsState']=="Stopped") {
  echo "<p class='notice shift'>"._('Array must be **Started** to view Shares').".</p>";
  return;
}
if (count($pages)==2) $tabbed = false;
?>

                )

            [SmtpSettings] => Array
                (
                    [Menu] => Notifications:2
                    [Title] => SMTP Settings
                    [Tag] => envelope
                    [file] => webGui/SmtpSettings.page
                    [root] => webGui
                    [name] => SmtpSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/webGui/include/Encryption.php";

$ssmtp['AuthPass'] = base64_decrypt(_var($ssmtp,'AuthPass'));
$incomplete = !_var($ssmtp,'root') || !_var($ssmtp,'server') || !_var($ssmtp,'port') || ((!_var($ssmtp,'AuthUser') || !_var($ssmtp,'AuthPass')) && _var($ssmtp,'AuthMethod')!='none');
?>
<script>
var counter,pid;

$(function() {
  $('#testbutton').click(function(){
    $('#testresult').html('_(Test running)_:<span class="orange">_(obtaining)_ <span id="testcounter"></span>...</span>');
    counter = 20;
    mailtest();
    $.get('/webGui/include/SMTPtest.php',function(data){clearTimeout(pid); $('#testresult').html(data)});
  });
  tls(document.smtp_setup);
  pwd(document.smtp_setup);
});
function mailcheck(form) {
  var email = /^\S+@\S+\.\S+/;
  if (!email.test(form.root.value)) {
    swal({title:"_(Invalid email address)_",text:"_(Please enter a valid sending email address)_",type:"error",html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  return true;
}
function tls(form) {
  form.TLSCert.disabled = form.UseTLSCert.selectedIndex==0;
}
function pwd(form) {
  form.AuthUser.disabled = form.AuthMethod.selectedIndex==0;
  form.AuthPass.disabled = form.AuthMethod.selectedIndex==0;
}
function mailtest() {
  document.getElementById('testcounter').innerHTML = '('+counter+' sec)';
  counter--;
  if (counter>0) pid=setTimeout(mailtest,1000);
}
function disableTest() {
  document.getElementById('testbutton').disabled = true;
}
function settings(form, data) {
  var item = data.split(':');
  form.server.value = item[0];
  form.port.value = item[1];
  form.UseTLS.value = item[2];
  form.UseSTARTTLS.value = item[3];
  form.AuthMethod.value = item[4];
  disableTest();
}
</script>

<form markdown="1" name="smtp_setup" method="POST" action="/update.php" target="progressFrame" onsubmit="return mailcheck(this)" onchange="disableTest()">
<input type="hidden" name="#file"  value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="ssmtp">
<input type="hidden" name="#include" value="/webGui/include/update.ssmtp.php">
<input type="hidden" name="#command" value="/webGui/scripts/notify">
<input type="hidden" name="#arg[1]" value="smtp-init">
_(Preset service)_:
: <select name="service" size="1" onchange="settings(this.form,this.value)">
<?=mk_option(_var($ssmtp,'service'), "smtp.gmail.com:465:YES:NO:login", "Gmail")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.gmail.com:587:YES:YES:login", "Gmail with TLS")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.office365.com:587:YES:YES:login", "Outlook")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.office365.com:587:YES:YES:login", "Hotmail")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.office365.com:587:YES:YES:login", "Office365")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.mail.yahoo.com:465:YES:NO:login", "Yahoo")?>
<?=mk_option(_var($ssmtp,'service'), "plus.smtp.mail.yahoo.com:465:YES:NO:login", "Yahoo Plus")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.mail.yahoo.co.uk:465:YES:NO:login", "Yahoo UK")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.mail.yahoo.com.au:465:YES:NO:login", "Yahoo AU/NZ")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.o2.ie:25:NO:NO:login", "O2")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.o2.co.uk:25:NO:NO:login", "O2 UK")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.o2online.de:25:NO:NO:login", "O2 Online Deutschland")?>
<?=mk_option(_var($ssmtp,'service'), "securesmtp.t-online.de:587:YES:YES:login", "T-Online Deutschland")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.1and1.com:587:YES:YES:login", "1&1")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.1und1.de:587:YES:YES:login", "1&1 Deutschland")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.att.yahoo.com:465:YES:NO:login", "AT&T")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.ntlworld.com:465:YES:NO:login", "NTL")?>
<?=mk_option(_var($ssmtp,'service'), "mail.btopenworld.com:25:NO:NO:login", "BT Openworld")?>
<?=mk_option(_var($ssmtp,'service'), "mail.btinternet.com:25:NO:NO:login", "BT Internet")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.comcast.net:465:YES:NO:login", "Comcast")?>
<?=mk_option(_var($ssmtp,'service'), "outgoing.verizon.net:465:YES:NO:login", "Verizon")?>
<?=mk_option(_var($ssmtp,'service'), "outgoing.yahoo.verizon.net:587:NO:NO:login", "Verizon (Yahoo hosted)")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.mail.com:465:YES:NO:login", "Mail.com")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.gmx.com:465:YES:NO:login", "GMX.com")?>
<?=mk_option(_var($ssmtp,'service'), "smtp.zoho.com:465:YES:NO:login", "zoho Mail")?>
<?=mk_option(_var($ssmtp,'service'), "::NO:NO:none", _("Custom"))?>
</select>

:smtp_preset_service_help:

_(Sending email address)_:
: <input type="text" name="root" value="<?=htmlspecialchars(_var($ssmtp,'root'))?>">

:smtp_email_address_help:

_(Email recipients)_:
: <input type="text" name="RcptTo" value="<?=htmlspecialchars(_var($ssmtp,'RcptTo'))?>">

:smtp_recipients_help:

_(Priority in header)_:
: <select name="SetEmailPriority">
  <?=mk_option(_var($ssmtp,'SetEmailPriority'), "False", _("No"))?>
  <?=mk_option(_var($ssmtp,'SetEmailPriority'), "True", _("Yes"))?>
  </select>

:smtp_priority_help:

_(Email subject prefix)_:
: <input type="text" name="Subject" value="<?=htmlspecialchars(_var($ssmtp,'Subject'))?>">

:smtp_subject_prefix_help:

_(Mail server)_:
: <input type="text" name="server" value="<?=htmlspecialchars(_var($ssmtp,'server'))?>">

:smtp_mail_server_help:

_(Mail server port)_:
: <input type="text" name="port" class="narrow"  maxlength="5" value="<?=htmlspecialchars(_var($ssmtp,'port'))?>">

:smtp_mail_server_port_help:

_(Use SSL/TLS)_:
: <select name="UseTLS">
  <?=mk_option(_var($ssmtp,'UseTLS'), "NO", _("No"))?>
  <?=mk_option(_var($ssmtp,'UseTLS'), "YES", _("Yes"))?>
  </select>

:smtp_use_ssl_tls_help:

_(Use STARTTLS)_:
: <select name="UseSTARTTLS">
  <?=mk_option(_var($ssmtp,'UseSTARTTLS'), "NO", _("No"))?>
  <?=mk_option(_var($ssmtp,'UseSTARTTLS'), "YES", _("Yes"))?>
  </select>

:smtp_use_starttls_help:

_(Define a TLS certificate)_:
: <select name="UseTLSCert" onchange="tls(this.form)">
  <?=mk_option(_var($ssmtp,'UseTLSCert'), "NO", _("No"))?>
  <?=mk_option(_var($ssmtp,'UseTLSCert'), "YES", _("Yes"))?>
  </select>

:smtp_define_tls_cert_help:

_(TLS certificate location)_:
: <input type="text" name="TLSCert" value="<?=htmlspecialchars(_var($ssmtp,'TLSCert'))?>">

:smtp_tls_cert_location_help:

_(Authentication method)_:
: <select name="AuthMethod" onchange="pwd(this.form)">
  <?=mk_option(_var($ssmtp,'AuthMethod'), "none", _("None"))?>
  <?=mk_option(_var($ssmtp,'AuthMethod'), "cram-md5", _("CRAM-MD5"))?>
  <?=mk_option(_var($ssmtp,'AuthMethod'), "login", _("Login"))?>
  </select>

:smtp_authentication_method_help:

_(Username)_:
: <input type="text" name="AuthUser" value="<?=htmlspecialchars(_var($ssmtp,'AuthUser'))?>">

_(Password)_:
: <input type="password" name="AuthPass" value="<?=htmlspecialchars(_var($ssmtp,'AuthPass'))?>">

:smtp_username_password_help:

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
  <span id="testresult"><input type="button" id="testbutton" value="_(Test)_"<?if ($incomplete):?> disabled<?endif;?>></span>
</form>

                )

            [SysDevs] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => System Devices
                    [Icon] => icon-hardware
                    [Tag] => server
                    [file] => webGui/SysDevs.page
                    [root] => webGui
                    [name] => SysDevs
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style>
table.pre{margin-top:0;background:transparent}
table.pre td:first-child{width:144px}
table tr td{padding:0 0 3px 0;margin:0}
table tr td.thin{line-height:8px;height:8px}
</style>
<script>
$(function(){
  $('#t1').load('/webGui/include/SysDevs.php',{table:'t1'});
  $('#t2').load('/webGui/include/SysDevs.php',{table:'t2'});
  $('#t3').load('/webGui/include/SysDevs.php',{table:'t3'});
  $('#t4').load('/webGui/include/SysDevs.php',{table:'t4'});
});
function applyCfg() {
  var message = "_(System Devices)_: _(A reboot is required to apply changes)_";
  var string = "BIND=";
  var elements = document.getElementById("vfiopci").elements;
  for (var i = 0, element; element = elements[i++];) {
    if (element.type === "checkbox"  && element.checked === true)
    string = string + element.value + " ";
  }
  string = string.trim();
  if (string === "BIND=") {
    string = "";
  }
  $.get( "/plugins/dynamix/include/update.vfio-pci-cfg.php", { cfg: string } )
  .done(function(d) {
    if (d==1) {
      addRebootNotice(message);
      document.getElementById("warning").innerHTML = "<b>_(ALERT)_: _(Changes saved)_. _(Reboot to take effect)_.</b>";
    } else {
      removeRebootNotice(message);
      document.getElementById("warning").innerHTML = "<b>_(No changes)_.</b>";
    }
    $("#applycfg").attr("disabled",true);
  });
}
</script>

<?exec('ls /sys/kernel/iommu_groups/',$groups); ?>
<?if (count($groups) > 0):?>
**_(PCI Devices and IOMMU Groups)_**
<?else:?>
**_(PCI Devices (No IOMMU Groups Available))_**
<?endif;?>

:sysdevs_iommu_groups_help:

<?if (strpos(file_get_contents('/proc/cmdline'), 'pcie_acs_override=') !== false):?>
<p class="notice" style="line-height:30px;height:auto">_(Warning)_: _(Your system has booted with the PCIe ACS Override setting enabled)_. _(The below list doesn't not reflect the way IOMMU would naturally group devices)_.<br>
<?=my_hyperlink(_("To see natural IOMMU groups for your hardware, go to the [VM Manager] page and set the **PCIe ACS override** setting to **Disabled**"),'/Settings/VMSettings')?>.</p>
<?endif;?>

<pre><form id="vfiopci" class="js-confirm-leave" onsubmit="return false"><table id='t1' class='pre'><tr><td><div class="spinner"></div></td></tr></table></form></pre><br>

**_(CPU Thread Pairings)_**

:sysdevs_thread_pairings_help:

<pre><table id='t2' class='pre'><tr><td><div class="spinner"></div></td></tr></table></pre><br>

**_(USB Devices)_**

:sysdevs_usb_devices_help:

<pre><table id='t3' class='pre'><tr><td><div class="spinner"></div></td></tr></table></pre><br>

**_(SCSI Devices)_**

:sysdevs_scsi_devices_help:

<pre><table id='t4' class='pre'><tr><td><div class="spinner"></div></td></tr></table></pre>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [Syslinux] => Array
                (
                    [Menu] => Flash
                    [Title] => Syslinux Configuration
                    [Tag] => edit
                    [file] => webGui/Syslinux.page
                    [root] => webGui
                    [name] => Syslinux
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$top = $themes1 ? -58 : -44;

function strip($area) {
  return preg_replace(["/^|(\n)  /","/\n$/"],["$1",""],$area);
}
$file    = '/boot/syslinux/syslinux.cfg';
$current = @file_get_contents($file);
$default = @file_get_contents("$file-") ?: $current;
$current = preg_replace(["/\r\n/","/\r/","/\n$/"],["\n","\n",""],$current);
$default = preg_replace(["/\r\n/","/\r/","/\n$/"],["\n","\n",""],$default);

$title   = _('Global Configuration');
$menu    = 'menu default';
$mark    = 'label ';
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<style>
div.basic{display:block}
div.advanced{display:none}
textarea.raw{resize:none;font-family:bitstream;width:65.5%}
<?
switch (strtok($display['theme'],'-')) {
case 'gray':
case 'azure':
  echo "span.array,span.system{margin-left:33.33%;width:65.5%;padding:2px 10px;font-weight:bold;border:solid 1px #606E7F;border-bottom:none}\n";
  echo "textarea.menu{margin-left:33.33%;width:65.5%;margin-bottom:12px;padding:4px 10px;font-family:bitstream;border-top:none}\n";
  break;
case 'white':
  echo "span.array,span.system{margin-left:33.33%;width:65.5%;padding:2px 10px;font-weight:bold;border:solid 1px #1c1c1c;border-bottom:none}\n";
  echo "textarea.menu{margin-left:33.33%;width:65.5%;margin-bottom:12px;padding:4px 10px;font-family:bitstream;border:1px solid #1c1b1b;border-top:none}\n";
  break;
case 'black':
  echo "span.array,span.system{margin-left:33.33%;width:65.5%;padding:2px 10px;font-weight:bold;border:solid 1px #f2f2f2;border-bottom:none}\n";
  echo "textarea.menu{margin-left:33.33%;width:65.5%;margin-bottom:12px;padding:4px 10px;font-family:bitstream;border:1px solid #f2f2f2;border-top:none}\n";
  break;
}
?>
</style>
<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script>
const title = '<?=$title?>';
const menu = '<?=$menu?>';
const mark = '<?=$mark?>';

Array.prototype.indent = function(o) {
  if (o) for (var i=0; i < this.length; i++) this[i] = '  '+this[i];
  return this;
};
Array.prototype.spliceArray = function(i,n,a) {
  return Array.prototype.splice.apply(this,[i,n].concat(a));
};
function prepareMenu(form) {
  $('input[name="#arg[1]"]').val(form.boot.checked?1:0);
  if ($('div.basic').is(':visible')) {
    var label = [], area = [];
    $(form).find('span[id^=label]').each(function(){
      label.push($(this).text());
    });
    $(form).find('textarea.menu').each(function(i){
      var start = $('#input-'+i).prop('checked') ? menu+'\n' : '';
      area.push(start+$(this).val());
    });
    var text = [];
    for (var i=0; i < label.length; i++) {
      if (i==0) {
        text.push(area[i]);
      } else {
        text.push(mark+label[i]);
        text.push(area[i].replace(/^|(\n)/g,'$1  '));
      }
    }
    // menu view
    form.text.value = text.join('\n')+'\n';
  } else {
    // raw view
    form.text.value = form.raw.value+'\n';
  }
  form.raw.disabled = true;
}
function setDefault(form) {
  var text = <?=json_encode(array_map('strip',explode($mark,$default)))?>;
  $(form).find('textarea.menu').each(function(i){
    if (i < text.length) {
      var area = text[i].split('\n');
      var label = (i) ? area.shift():title;
      var start = (area[0]==menu);
      var checked = start ? ' checked':'';
      if (i) label += "<span style='float:right'><input type='radio' id='input-"+i+"' title='<?=_('Set default boot menu')?>' onchange='changeMenu(this.form,this.id,true)'"+checked+"></span>";
      $('#label-'+i).html(label).prop('class',start ? 'array':'system');
      if (start) area.shift();
      $(this).val(area.join('\n')).prop('rows',area.length).trigger('change');
    } else {
      $('#label-'+i).remove();
      $(this).remove();
    }
  });
  $(form).find('textarea.raw').val(<?=json_encode($default)?>).prop('rows',$(this).val().match(/\n/g).length+1).trigger('change');
}
function changeMenu(form,id,update) {
  $(form).find('input.menu').each(function(){
    // highlight default boot menu
    var i = $(this).prop('id');
    var label = $('#'+i.replace('input','label'));
    if (i == id) {
      label.prop('class','array');
      $(this).prop('checked',true);
    } else {
      label.prop('class','system');
      $(this).prop('checked',false);
    }
  });
  if (update) {
    // menu view -> update raw view
    var n = 0, o = null;
    var x = id.split('-')[1];
    var text = form.raw.value.split('\n');
    for (var i=0; i < text.length; i++) {
      if (text[i].indexOf(mark) >= 0) if (++n == x) o = i + 1;
      if (text[i].indexOf(menu) >= 0) text.splice(i,1);
    }
    if (o) text.splice(o,0,'  '+menu);
    $(form).find('textarea.raw').val(text.join('\n')).prop('rows',text.length);
  }
}
$(function(){
  $('form').find('textarea').each(function(){$(this).on('input change',function(event){
    $(this).prop('rows',($(this).val().match(/\n/g)||[]).length+1);
    if (event.type == 'input') return;
    // propogate changes to 'other' view mode
    var form = $(this).closest('form');
    if ($(this).prop('class')=='menu') {
      // menu view -> update raw view
      var n = 0, o = 0, x = null;
      var id = $(this).prop('id').split('-')[1];
      var area = $(this).val().split('\n');
      var raw = form.find('textarea.raw');
      var text = raw.val().split('\n');
      for (var i=0; i < text.length; i++) {
        if (text[i].indexOf(mark) >= 0) {
          if (n++ == id) x = i; else o = i + 1;
        }
        if (text[i].indexOf(menu) >= 0) o++;
        if (x) break;
      }
      text.spliceArray(o,(x||text.length)-o,area.indent(o));
      raw.val(text.join('\n')).prop('rows',text.length);
    } else {
      // raw view -> update menu view
      var n = 0, id = null, area = [];
      var text = $(this).val().split('\n');
      for (var i=0; i < text.length; i++) {
        if (text[i].indexOf(mark) >= 0) {
          $('#menu-'+(n++)).val(area.join('\n')).prop('rows',area.length);
          var label = $('#label-'+n);
          label.html(label.html().replace(/^.*(<span.*)/,text[i].replace(mark,'')+'$1'));
          area = [];
        } else {
          if (text[i].indexOf(menu) >= 0) id = 'input-'+n; else if (text[i].length) area.push(text[i].replace(/^  /,''));
        }
      }
      $('#menu-'+n).val(area.join('\n')).prop('rows',area.length);
      if (id) changeMenu(form,id,false);
    }
  });});
  if ($.cookie('syslinux_viewmode')=='advanced') {
    $('.advanced').show();
    $('.basic').hide();
  }
  $('.advancedview').switchButton({
    labels_placement: 'left',
    off_label: "_(Menu View)_",
    on_label: "_(Raw View)_",
    checked: $.cookie('syslinux_viewmode')=='advanced'
  });
  $('.advancedview').change(function() {
    $('.advanced').toggle('slow');
    $('.basic').toggle('slow');
    $.cookie('syslinux_viewmode', $('.advancedview').is(':checked') ? 'advanced':'basic', {expires:3650});
  });
});
</script>
<span class="status" style="margin-top:<?=$top?>px"><input type="checkbox" class="advancedview"></span>

:syslinux_cfg_help:

<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareMenu(this)">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">
<input type="hidden" name="#file" value="<?=$file;?>">
<input type="hidden" name="#command" value="/webGui/scripts/bootmode">
<input type="hidden" name="#arg[1]" value="">
<input type="hidden" name="text" value="">
<div markdown="1" class="basic">
_(Syslinux configuration)_:
: <?$i=0;
  foreach (array_map('strip',explode($mark,$current)) as $area):
  $area = explode("\n", $area);
  $label = ($i) ? array_shift($area):$title;
  $start = in_array($menu,$area);
  if ($start) unset($area[array_search($menu,$area)]);
?><span id="label-<?=$i?>" class="<?=$start?'array':'system'?>"><?=$label?>
  <?if ($i):?><span style="float:right"><input type="radio" id="input-<?=$i?>" class="menu" <?=$start?'checked':''?> title="_(Set default boot menu)_" onchange="changeMenu(this.form,this.id,true)"></span><?endif;?></span>
  <textarea class="menu" id="menu-<?=$i++?>" spellcheck="false" cols="80" rows="<?=count($area)?>" maxlength="2048"><?=implode("\n",$area)?></textarea>
  <?endforeach;?>

</div>
<div markdown="1" class="advanced">
_(Syslinux configuration)_:
: <textarea class="raw" name="raw" spellcheck="false" cols="80" rows="<?=substr_count($current,"\n")+1?>" maxlength="2048"><?=$current?></textarea>

</div>
_(Server boot mode)_:
: <?=is_dir('/sys/firmware/efi') ? 'UEFI' : 'Legacy'?>

_(Permit UEFI boot mode)_ <input type="checkbox" name="boot" <?=is_dir('/boot/EFI')?'checked':''?>>
: *_(Boot system in UEFI mode)_. _(Please check your system settings to support UEFI boot mode)_.*

<input type="button" value="_(Default)_" onclick="setDefault(this.form)">
: <input type="submit" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">

:syslinux_button_help:

</form>

                )

            [Syslog] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => System Log
                    [Icon] => icon-log
                    [Tag] => list
                    [file] => webGui/Syslog.page
                    [root] => webGui
                    [name] => Syslog
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$zip    = htmlspecialchars(str_replace(' ','_',strtolower($var['NAME'])));
$log    = '/var/log/syslog';
$cfg    = '/boot/config/rsyslog.cfg';
$max    = 5000;
$select = [];
if (file_exists($cfg)) {
  $syslog = parse_ini_file($cfg);
  if (isset($syslog['local_server']) && isset($syslog['server_folder']) && $logs = glob($syslog['server_folder'].'/syslog-*.log',GLOB_NOSORT)) {
    natsort($logs);
    $select[] = "<select onchange='showLog(this.value)'>";
    $select[] = mk_option(1,$log,'syslog');
    foreach ($logs as $file) $select[] = mk_option(1,$file,basename($file));
    $select[] = "</select>";
  }
}
$select = implode($select);
?>
<style>
input#max{border:none;width:60px;margin:0;padding:0}
</style>
<script>
var logfile = "<?=$log?>";

function zipfile(){
  var d = new Date();
  return "<?=$zip?>-"+logfile.split('/').reverse()[0].replace('.log','')+'-'+d.toISOString().substr(0,16).replace(/[-:]/g,'').replace('T','-')+'.zip';
}
function cleanUp(file) {
  if (document.hasFocus()) {
    $('input#download').val("_(Download)_").prop('disabled',false);
    $.post('/webGui/include/Download.php',{cmd:'delete',file:file});
  } else {
    setTimeout(function(){cleanUp(file);},2000);
  }
}
function syslog(file) {
  $('input#download').val("_(Downloading)_...").prop('disabled',true);
  $.post('/webGui/include/Download.php',{cmd:'save',source:logfile,file:file},function(zip) {
    location = zip;
    setTimeout(function(){cleanUp(file);},4000);
  });
}
function highlight(checked,line) {
  var o = checked ? '-' : '';
  var n = ($('span.text').css('display')=='none' && !checked) ? 'none' : '';
  switch (line) {
    case 'E': $('span.'+o+'error').css('display',n); $('span.error'+o).toggleClass('error -error error-'); break;
    case 'W': $('span.'+o+'warn').css('display',n); $('span.warn'+o).toggleClass('warn -warn warn-'); break;
    case 'S': $('span.'+o+'system').css('display',n); $('span.system'+o).toggleClass('system -system system-'); break;
    case 'A': $('span.'+o+'array').css('display',n); $('span.array'+o).toggleClass('array -array array-'); break;
    case 'L': $('span.'+o+'login').css('display',n); $('span.login'+o).toggleClass('login -login login-'); break;
    case 'N': $('span.text,span[class^="-"]').css('display',checked ? 'none':''); break;
  }
  $('span.label').show();
}
function toggle(checked) {
  highlight(checked,'E');
  highlight(checked,'W');
  highlight(checked,'S');
  highlight(checked,'A');
  highlight(checked,'L');
  $('span.label input[type=checkbox]').not('.ctrl').prop('checked',checked);
}
<?if (_var($display,'resize')):?>
function resize() {
  $('pre.up').height(Math.max(window.innerHeight-320,330));
}
<?endif;?>
function showLog(log) {
  logfile = log;
  $('span.label input[type=checkbox]').prop('checked',true);
  $('span.label').each(function(){
    var type = $(this).attr('class').replace('label','').replace(/-/g,'');
    $(this).removeClass().addClass(type+' label');
  });
  timers.syslog = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.post('/webGui/include/Syslog.php',{log:log,max:$('#max').val()||<?=$max?>},function(data){
    clearTimeout(timers.syslog);
    $('pre.up').html(data);
    $('div.spinner.fixed').hide('slow');
  });
}
$(function() {
  $('input#max').on('keydown',function(e) {
    if (e.keyCode === 13) {
      e.preventDefault();
      e.stopImmediatePropagation();
      showLog(logfile);
    }
  });
<?if (_var($display,'resize')):?>
  resize();
  $(window).bind('resize',function(){resize();});
<?endif;?>
  showLog(logfile);
});
$('.tabs').append("<span class='status'><span class='lite label'>_(Log size)_:&nbsp;&nbsp;<input type='number' id='max' value='' placeholder='<?=$max?>'></span><?=$select?><span class='lite label'><label>_(Text)_<input type='checkbox' class='ctrl' onclick='highlight(!this.checked,\"N\")' checked></label></span><span class='error label'><label>_(Error)_<input type='checkbox' onclick='highlight(this.checked,\"E\")' checked></label></span><span class='warn label'><label>_(Warning)_<input type='checkbox' onclick='highlight(this.checked,\"W\")' checked></label></span><span class='system label'><label>_(System)_<input type='checkbox' onclick='highlight(this.checked,\"S\")' checked></label></span><span class='array label'><label>_(Array)_<input type='checkbox' onclick='highlight(this.checked,\"A\")' checked></label></span><span class='login label'><label>_(Login)_<input type='checkbox' onclick='highlight(this.checked,\"L\")' checked></label></span><span class='lite label'><input type='checkbox' class='ctrl' onclick='toggle(this.checked)' checked></span></span>");
</script>
<pre class='up'></pre>
<input type="button" id="download" value="_(Download)_" onclick="syslog(zipfile())"><input type="button" value="_(Refresh)_" onclick="showLog(logfile)"><input type="button" value="_(Done)_" onclick="done()">

                )

            [SyslogSettings] => Array
                (
                    [Menu] => NetworkServices
                    [Title] => Syslog Server
                    [Icon] => icon-eula
                    [Tag] => file-text-o
                    [file] => webGui/SyslogSettings.page
                    [root] => webGui
                    [name] => SyslogSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$syslog = @parse_ini_file('/boot/config/rsyslog.cfg') ?: [];

function plain($ip) {
  return str_replace(['[',']'],'',$ip);
}
// Get ports in use
$portsInUse = [];
exec("lsof -Pni|awk '/LISTEN/ && \$9!~/127.0.0.1/ && \$9!~/\\[::1\\]/{print \$9}'|sort -u", $output);

$ethX = 'eth0';
$addr = ipaddr($ethX);
$bind = _var($var,'BIND_MGT')=='yes';
$list = ['*',$addr];

foreach ($output as $line) {
  [$ip, $port] = my_explode(':', $line);
  if (!in_array($port,$portsInUse) && (!$bind || in_array(plain($ip),$list))) $portsInUse[] = $port;
}
?>
<style>
span.span{display:inline-block;width:224px}
</style>
<script>
function localFolder(local,time) {
  if (local) $('#local_folder').show(time); else $('#local_folder').hide(time);
}
function logOptions(log,time) {
  if (log) $('#log_options').show(time); else $('#log_options').hide(time);
}

$(function(){
  localFolder(document.syslog.local_server.value);
  logOptions(document.syslog.log_rotation.value);
});
function validatePort(form) {
  var portsInUse = JSON.parse('<?=json_encode($portsInUse)?>');
  var currentPort = "<?=(_var($syslog,'local_server') && _var($syslog,'server_protocol')!='udp') ? _var($syslog,'server_port',514) : 514?>";
  var port = $(form).find('input[name="server_port"]');
  var remotePort = $(form).find('input[name="remote_port"]');
  var protocol = $(form).find('select[name="server_protocol"]').val();
  if ( !port.val() ) port.val("514");
  port.val(parseInt(port.val()));
  remotePort.val(parseInt(remotePort.val()));
  var newport = port.val();
  if (newport != currentPort && protocol != "udp" && $(form).find('select[name="local_server"]').val()) {
    if (portsInUse.includes(newport)) {
      swal({title:'_(Port already in use)_',text:sprintf('_(Port %s is already in use by other services)_',newport),type:'error',showCancelButton:false,confirmButtonText:"_(OK)_"});
      return;
    }
  }
  var list = [];
  if (newport < 1 || newport > 65535) {
    list.push("_(Local syslog port)_");
  }
  var remote = remotePort.val();
  if (!remote) remote = 514;
  if (remote < 1 || remote > 65535) {
    list.push("_(Remote syslog port)_");
  }
  if (list.length > 0) {
    swal({title:'_(Port out of range)_',text:sprintf('_(%s is out of range (minimum 1 maximum 65535))_',list.join(", ")),type:'error',showCancelButton:false,confirmButtonText:"_(OK)_"});
    return;
  }
  form.submit();
}

</script>

<form markdown="1" name="syslog" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="/boot/config/rsyslog.cfg">
<input type="hidden" name="#command" value="/webGui/scripts/rsyslog_config">

_(Local syslog server)_:
: <span class="span"><select name="local_server" onchange="localFolder(this.value,'slow')">
  <?=mk_option(_var($syslog,'local_server'), "", _("Disabled"))?>
  <?=mk_option(_var($syslog,'local_server'), "1", _("Enabled"))?>
  </select></span>
  <select name="server_protocol" class="narrow">
  <?=mk_option(_var($syslog,'server_protocol'), "udp", _("UDP"))?>
  <?=mk_option(_var($syslog,'server_protocol'), "tcp", _("TCP"))?>
  <?=mk_option(_var($syslog,'server_protocol'), "both", _("Both"))?>
  </select>
  <input type="text" name="server_port" class="trim" value="<?=_var($syslog,'server_port')?>" maxlength="5" placeholder="514">

:syslog_local_server_help:

<div markdown="1" id="local_folder" style="display:none">
_(Local syslog folder)_:
: <select name="server_folder">
  <?=mk_option(0,'','&lt;'._('custom').'&gt;','disabled')?>
  <?foreach ($shares as $share){echo mk_option(_var($syslog,'server_folder'), '/mnt/user/'.$share['name'], $share['name']);}?>
  </select>

:syslog_local_folder_help:

_(Local syslog rotation)_:
: <select name="log_rotation" onchange="logOptions(this.value,'slow')">
  <?=mk_option(_var($syslog,'log_rotation'), "", _("Disabled"))?>
  <?=mk_option(_var($syslog,'log_rotation'), "1", _("Enabled"))?>
  </select>

:syslog_local_rotation_help:

<div markdown="1" id="log_options" style="display:none">
_(Local syslog maximum file size)_:
: <select name="log_size">
  <?=mk_option(_var($syslog,'log_size'), '1M', '1 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '2M', '2 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '5M', '5 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '10M', '10 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '20M', '20 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '50M', '50 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '100M', '100 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '200M', '200 '._('MB'))?>
  <?=mk_option(_var($syslog,'log_size'), '500M', '500 '._('MB'))?>
  </select>

:syslog_local_file_size_help:

_(Local syslog number of files)_:
: <select name="log_files">
  <?=mk_option(_var($syslog,'log_files'), '1', '1')?>
  <?=mk_option(_var($syslog,'log_files'), '2', '2')?>
  <?=mk_option(_var($syslog,'log_files'), '3', '3')?>
  <?=mk_option(_var($syslog,'log_files'), '4', '4')?>
  </select>

:syslog_local_file_number_help:

</div>
</div>

_(Remote syslog server)_:
: <span class="span"><input type="text" name="remote_server" class="narrow" value="<?=_var($syslog,'remote_server')?>" maxlength="23" placeholder="_(name or ip address)_"></span>
  <select name="remote_protocol" class="narrow" size="1">
  <?=mk_option(_var($syslog,'remote_protocol'), "udp", _("UDP"))?>
  <?=mk_option(_var($syslog,'remote_protocol'), "tcp", _("TCP"))?>
  </select>
  <input type="number" name="remote_port" class="trim" value="<?=_var($syslog,'remote_port')?>" maxlength="5" placeholder="514" pattern="([0-9]{1,5})">

:syslog_remote_server_help:

_(Mirror syslog to flash)_:
: <select name="syslog_flash" size="1">
  <?=mk_option(_var($syslog,'syslog_flash'), "", _("No"))?>
  <?=mk_option(_var($syslog,'syslog_flash'), "1", _("Yes"))?>
  </select>

:syslog_mirror_flash_help:

&nbsp;
: <input type="button" value="_(Apply)_" onclick='validatePort(this.form)' disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [TerminalButton] => Array
                (
                    [Menu] => Buttons:3
                    [Title] => Terminal
                    [Icon] => icon-u-terminal
                    [Code] => e93f
                    [file] => webGui/TerminalButton.page
                    [root] => webGui
                    [name] => TerminalButton
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function TerminalButton() {
  var d = new Date();
  openTerminal('ttyd','Web Terminal '+d.getTime(),'');
}
</script>

                )

            [Tools] => Array
                (
                    [Menu] => Tasks:90
                    [Type] => xmenu
                    [Tabs] => false
                    [Code] => e909
                    [file] => webGui/Tools.page
                    [root] => webGui
                    [name] => Tools
                    [text] => 
                )

            [TrimSettings] => Array
                (
                    [Menu] => Scheduler
                    [Title] => TRIM Settings
                    [Tag] => superpowers
                    [file] => webGui/TrimSettings.page
                    [root] => webGui
                    [name] => TrimSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$mode = ['Disabled','Hourly','Daily','Weekly','Monthly'];
$days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
?>
<script>
function trimNow() {
  openPlugin("ssd_trim", "_(Perform TRIM Operation)_");
}
function presetTrim(form) {
  var mode = form.mode.value;
  form.min.disabled = mode==0;
  form.day.disabled = mode==0 || mode!=3;
  form.dotm.disabled = mode==0 || mode!=4;
  form.hour1.disabled = mode==0;
  form.hour2.disabled = mode==0;
  form.day.value = form.day.disabled ? '*' : (form.day.value=='*' ? 0 : form.day.value);
  form.dotm.value = form.dotm.disabled ? '*' : (form.dotm.value=='*' ? 1 : form.dotm.value);
  if (mode==1) {$('#hour1').hide(); $('#hour2').show();} else {$('#hour2').hide(); $('#hour1').show();}
}
function prepareTrim(form) {
  var include = [];
  var mode = form.mode.value;
  form.hour.value = mode!=1 ? form.hour1.value : form.hour2.value;
  form.min.value = mode!=1 ? form.min.value : 0;
  form.hour1.disabled = true;
  form.hour2.disabled = true;
  for (var i=0,item; item=form.disk.options[i]; i++) {
    if (item.selected) {
      include.push(item.value);
      item.selected = false;
    }
  }
  item = form.disk.options[0];
  item.value = include.join(',');
  item.selected = true;
}
$(function() {
  presetTrim(document.trim_schedule);
});
</script>
<form markdown="1" name="trim_schedule" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareTrim(this)">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="ssd">
<input type="hidden" name="#include" value="/webGui/include/update.trim.php">
<input type="hidden" name="hour" value="">
_(TRIM schedule)_:
: <select name="mode" onchange="presetTrim(this.form)">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option(_var($ssd,'mode'), strval($m), _($mode[$m]))?>
  <?endfor;?>
  </select>

:trim_schedule_plug:
> Choose a trim schedule ranging from hourly, daily, weekly and monthly.
>
> The interval determines how often SSD trim will run, it runs in the background.
:end

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option(_var($ssd,'day'), strval($d), _($days[$d],0))?>
  <?endfor;?>
  <?=mk_option(_var($ssd,'day'), "*", "--------", _("disabled"))?>
  </select>

:trim_day_of_the_week_plug:
> Choose a day when the weekly schedule is selected. Otherwise disabled.
:end

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option(_var($ssd,'dotm'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option(_var($ssd,'dotm'), "*", "--------", _("disabled"))?>
  </select>

:trim_day_of_the_month_plug:
> Choose a date when the monthly schedule is selected. Otherwise disabled.
:end

_(Time of the day)_:
: <span id="hour1" style="display:none"><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option(_var($ssd,'hour'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option(_var($ssd,'min'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="hour2" style="display:none"><select name="hour2">
  <?=mk_option(_var($ssd,'hour'), "*/1", _("Every hour"))?>
  <?=mk_option(_var($ssd,'hour'), "*/2", _("Every 2 hours"))?>
  <?=mk_option(_var($ssd,'hour'), "*/3", _("Every 3 hours"))?>
  <?=mk_option(_var($ssd,'hour'), "*/4", _("Every 4 hours"))?>
  <?=mk_option(_var($ssd,'hour'), "*/6", _("Every 6 hours"))?>
  <?=mk_option(_var($ssd,'hour'), "*/8", _("Every 8 hours"))?>
  </select></span>

:trim_time_of_the_day_plug:
> When an hourly schedule is selected this will set the interval in hours. An interval always starts on the whole hour (minute 0).
>
> For the other schedules choose here the time of the day trim should start.
:end

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()"><input type="button" value="_(Trim Now)_" onclick="trimNow()">
</form>

                )

            [UNRAID-OS] => Array
                (
                    [Menu] => Tools:10
                    [Type] => menu
                    [Title] => Unraid OS
                    [Tag] => lemon-o
                    [file] => webGui/UNRAID-OS.page
                    [root] => webGui
                    [name] => UNRAID-OS
                    [text] => 
                )

            [UserAdd] => Array
                (
                    [Menu] => UserList
                    [Title] => Add User
                    [Tag] => user
                    [file] => webGui/UserAdd.page
                    [root] => webGui
                    [name] => UserAdd
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$void = "<img src='/webGui/images/user.png' width='48' height='48' onclick='$(&quot;#drop&quot;).click()' style='cursor:pointer' title='"._('Click to select PNG file')."'>";
$icon = "<i class='fa fa-trash top' title='"._('Restore default image')."' onclick='restore()'></i>";
$zxcvbn = file_exists('/boot/config/plugins/dynamix/zxcvbn.js');
?>
<style>
<?if ($display['theme']=='gray'):?>
span#dropbox{border:1px solid #606E7F;border-radius:5px;background:#121510;padding:28px 12px;line-height:72px;margin-right:16px}
<?elseif ($display['theme']=='azure'):?>
span#dropbox{border:1px solid #606E7F;border-radius:5px;background:#EDEAEF;padding:28px 12px;line-height:72px;margin-right:16px}
<?elseif ($display['theme']=='black'):?>
span#dropbox{border:1px solid #f2f2f2;border-radius:5px;background:#262626;padding:28px 12px;line-height:72px;margin-right:16px}
<?else:?>
span#dropbox{border:1px solid #1c1c1c;border-radius:5px;background:#e8e8e8;padding:28px 12px;line-height:72px;margin-right:16px}
<?endif;?>
i.top{position:absolute;padding-top:4px;cursor:pointer}
i#showPass.checked{opacity:0.5}
.usage-disk.sys{display:inline-block;width:10rem;top:<?=$themes2?'1.2':'.2'?>rem;margin-left:12px;border-radius:4px}
</style>

<script src="<?autov('/webGui/javascript/jquery.filedrop.js')?>"></script>
<?if ($zxcvbn):?>
<script src="<?autov('/boot/config/plugins/dynamix/zxcvbn.js')?>" async></script>
<?endif;?>
<script>
var path = '/boot/config/plugins/dynamix/users';
var filename = '';

function base64(str) {
  return window.btoa(unescape(encodeURIComponent(str)));
}
function showPassword() {
  if ($('#showPass').hasClass('checked')) {
    $('#showPass').removeClass('checked fa-eye-slash').addClass('fa-eye');
    var type = 'password';
  } else {
    $('#showPass').addClass('checked fa-eye-slash').removeClass('fa-eye');
    var type = 'text';
  }
  $('input[name="userPasswordGUI"]').attr('type',type);
  $('input[name="userPasswordConfGUI"]').attr('type',type);
}
function checkUsername(form) {
  var username = form.userName.value.trim();
  if (!username.match('^[a-z_][a-z0-9_-]*[$]?$')) {
    $('input[name="cmdUserEdit"]').val("_(Add)_");
    swal({title:"_(Invalid user name)_",text:"_(Use only lowercase letters, digits, underscores and dashes)_",type:"error",html:true,confirmButtonText:"_(Ok)_"});
		
    return false;
  }
  if (form.userPasswordGUI.value.length > 128 || form.userPasswordConfGUI.value.length > 128) {
    swal({title:"_(Password too long)_",text:"_(Use a password up to 128 characters)_",type:"error",html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  if (filename) {
    $.post("/webGui/include/FileUpload.php",{cmd:'save',path:path,filename:filename,output:username+'.png'});
  }
  form.userPassword.value = base64(form.userPasswordGUI.value);
  form.userPasswordConf.value = base64(form.userPasswordConfGUI.value);
  form.userPasswordGUI.disabled = true;
  form.userPasswordConfGUI.disabled = true;
  return true;
}
function validatePassword(input) {
<?if ($zxcvbn):?>
  var custom = ['unraid','limetech','lime-technology','bergware','squidly'];
  var strength = ['Worst','Bad','Weak','Good','Strong'];
  var emoji = ['&#128565;','&#128553;','&#128532;','&#128512;','&#128526;'];
  if (!input) {
    $('#strength-bar').css('background-color','transparent');
    $('#strength-text').html('');
    $('.usage-disk.sys').addClass('none');
  } else {
    var bar = zxcvbn(input,custom);
    switch (bar.score) {
      case 0: $('#strength-bar').css('background-color','red'); break;
      case 1: $('#strength-bar').css('background-color','yellow'); break;
      case 2: $('#strength-bar').css('background-color','orange'); break;
      case 3: $('#strength-bar').css('background-color','blue'); break;
      case 4: $('#strength-bar').css('background-color','green'); break;
    }
    $('#strength-bar').css('width',Math.min(input.length*100/64,100)+'%');
    $('#strength-text').html(emoji[bar.score]+' '+strength[bar.score]+'. '+bar.feedback.warning);
    $('.usage-disk.sys').removeClass('none');
  }
<?endif;?>
}
function restore() {
  // restore original image
  $('#dropbox').html("<?=$void?>");
  filename = '';
}
$(function(){
  var dropbox = $('#dropbox');
  // attach the drag-n-drop feature to the 'dropbox' element
  dropbox.filedrop({
    maxfiles:1,
    maxfilesize:512, // KB
    url:'/webGui/include/FileUpload.php',
    data:{path:path,"csrf_token":"<?=$var['csrf_token']?>"},
    beforeEach:function(file) {
      if (!file.type.match(/^image\/png/)) {
        swal({title:"Warning",text:"Only PNG images are allowed!",type:"warning",html:true,confirmButtonText:"_(Ok)_"});
        return false;
      }
    },
    error: function(error, file, i) {
      switch (error) {
      case 'BrowserNotSupported':
        swal({title:"_(Browser error)_",text:"_(Your browser does not support HTML5 file uploads)_!",type:"error",html:true,confirmButtonText:"_(Ok)_"});
        break;
      case 'TooManyFiles':
        swal({title:"_(Too many files)_",text:"_(Please select one file only)_!",type:"error",html:true});
        break;
      case 'FileTooLarge':
        swal({title:"_(File too large)_",text:"_(Maximum file upload size is 512K)_ (524,288 _(bytes)_)",type:"error",html:true,confirmButtonText:"_(Ok)_"});
        break;
      }
    },
    uploadStarted:function(i,file,count) {
      var image = $('img', $(dropbox));
      var reader = new FileReader();
      image.width = 48;
      image.height = 48;
      reader.onload = function(e){image.attr('src',e.target.result);};
      reader.readAsDataURL(file);
    },
    uploadFinished:function(i,file,response) {
      if (response == 'OK 200') {
        if (!filename) $(dropbox).append("<?=$icon?>");
        $('input[name="userDesc"]').trigger('change');
        filename = file.name;
      } else {
        swal({title:"_(Upload error)_",text:response,type:"error",html:true,confirmButtonText:"_(Ok)_"});
      }
    }
  });
  // simulate a drop action when manual file selection is done
  $('#drop').bind('change', function(e) {
    var files = e.target.files;
    if ($('#dropbox').triggerHandler({type:'drop',dataTransfer:{files:files}})==false) e.stopImmediatePropagation();
  });
});
</script>

<form markdown="1" name="user_edit" method="POST" action="/update.htm" target="progressFrame" onsubmit="return checkUsername(this)">
_(User name)_:
: <input type="text" name="userName" maxlength="40" onKeyUp="this.form.cmdUserEdit.disabled=(this.form.userName.value=='')">

:user_add_username_help:

_(Description)_:
: <input type="text" name="userDesc" maxlength="64" pattern='[^&:"]*'>

:user_add_description_help:

_(Custom image)_:
: <span id="dropbox"><?=$void?></span><em>_(Drag-n-drop a PNG file or click the image at the left)_</em><input type="file" id="drop" accept="image/png" style="display:none">

:user_add_custom_image_help:

_(Password)_:
<input type="hidden" name="userPassword" value="">
: <input type="password" name="userPasswordGUI" maxlength="129" autocomplete="new-password" onKeyUp="validatePassword(this.value);this.form.cmdUserEdit.disabled=(this.form.userName.value=='' || this.form.userPasswordGUI.value!=this.form.userPasswordConfGUI.value)">
  <i id="showPass" class="fa fa-eye" style="cursor:pointer" title="_(Show / Hide password)_" onclick="showPassword()"></i><span><span class="usage-disk sys none"><span id="strength-bar" style="width:0"></span><span></span></span><span id="strength-text"></span></span>

:user_password_help:

_(Retype password)_:
<input type="hidden" name="userPasswordConf" value="">
: <input type="password" name="userPasswordConfGUI" maxlength="129" autocomplete="new-password" onKeyUp="this.form.cmdUserEdit.disabled=(this.form.userName.value=='' || this.form.userPasswordGUI.value!=this.form.userPasswordConfGUI.value)">

&nbsp;
: <input type="submit" name="cmdUserEdit" value="_(Add)_" onclick="this.value='Add'" disabled><input type="button" value="_(Done)_" onclick="done('UserAdd')">
</form>

                )

            [UserEdit] => Array
                (
                    [Menu] => UserList
                    [Title] => Edit User
                    [Tag] => user
                    [file] => webGui/UserEdit.page
                    [root] => webGui
                    [name] => UserEdit
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?if (!array_key_exists($name, $users)):?>
  <p class="notice"><?=sprintf(_('User %s has been deleted'),htmlspecialchars($name))?>.</p><br>
  <input type="button" value="_(Done)_" onClick="done()">
<?return;?>
<?endif;?>
<?
$user   = "/boot/config/plugins/dynamix/users/$name.png";
$void   = "<img src='/webGui/images/user.png' width='48' height='48' id='image' onclick='$(&quot;#drop&quot;).click()' style='cursor:pointer' title='"._('Click to select PNG file')."'>";
$icon   = "<i class='fa fa-trash top' title='"._('Restore default image')."' onclick='restore()'></i>";
$zxcvbn = file_exists('/boot/config/plugins/dynamix/zxcvbn.js');

$file   = "/boot/config/ssh/root/authorized_keys";
$text   = preg_replace(["/\r\n/","/\r/"],"\n", @file_get_contents($file) ?: '');
?>
<style>
<?if ($display['theme']=='gray'):?>
span#dropbox{border:1px solid #606E7F;border-radius:5px;background:#121510;padding:28px 12px;line-height:72px;margin-right:16px}
<?elseif ($display['theme']=='azure'):?>
span#dropbox{border:1px solid #606E7F;border-radius:5px;background:#EDEAEF;padding:28px 12px;line-height:72px;margin-right:16px}
<?elseif ($display['theme']=='black'):?>
span#dropbox{border:1px solid #f2f2f2;border-radius:5px;background:#262626;padding:28px 12px;line-height:72px;margin-right:16px}
<?else:?>
span#dropbox{border:1px solid #1c1c1c;border-radius:5px;background:#e8e8e8;padding:28px 12px;line-height:72px;margin-right:16px}
<?endif;?>
i.top{position:absolute;padding-top:4px;cursor:pointer}
i#showPass.checked{opacity:0.5}
.usage-disk.sys{display:inline-block;width:10rem;top:<?=$themes2?'1.2':'.2'?>rem;margin-left:12px;border-radius:4px}
</style>

<script src="<?autov('/webGui/javascript/jquery.filedrop.js')?>"></script>
<?if ($zxcvbn):?>
<script src="<?autov('/boot/config/plugins/dynamix/zxcvbn.js')?>" async></script>
<?endif;?>
<script>
var path = '/boot/config/plugins/dynamix/users';
var filename = '';

function base64(str) {
  return window.btoa(unescape(encodeURIComponent(str)));
}
function showPassword() {
  if ($('#showPass').hasClass('checked')) {
    $('#showPass').removeClass('checked fa-eye-slash').addClass('fa-eye');
    var type = 'password';
  } else {
    $('#showPass').addClass('checked fa-eye-slash').removeClass('fa-eye');
    var type = 'text';
  }
  $('input[name="userPasswordGUI"]').attr('type',type);
  $('input[name="userPasswordConfGUI"]').attr('type',type);
}
function checkPassword(form) {
  if (form.userPasswordGUI.value.length > 128 || form.userPasswordConfGUI.value.length > 128) {
    swal({title:"_(Password too long)_",text:"_(Use a password up to 128 characters)_",type:"error",html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  form.userPassword.value = base64(form.userPasswordGUI.value);
  form.userPasswordConf.value = base64(form.userPasswordConfGUI.value);
  form.userPasswordGUI.disabled = true;
  form.userPasswordConfGUI.disabled = true;
  return true;
}
function validatePassword(input) {
<?if ($zxcvbn):?>
  var custom = ['unraid','limetech','lime-technology','bergware','squidly'];
  var strength = ['Worst','Bad','Weak','Good','Strong'];
  var emoji = ['&#128565;','&#128553;','&#128532;','&#128512;','&#128526;'];
  if (!input) {
    $('#strength-bar').css('background-color','transparent');
    $('#strength-text').html('');
    $('.usage-disk.sys').addClass('none');
  } else {
    var bar = zxcvbn(input,custom);
    switch (bar.score) {
      case 0: $('#strength-bar').css('background-color','red'); break;
      case 1: $('#strength-bar').css('background-color','yellow'); break;
      case 2: $('#strength-bar').css('background-color','orange'); break;
      case 3: $('#strength-bar').css('background-color','blue'); break;
      case 4: $('#strength-bar').css('background-color','green'); break;
    }
    $('#strength-bar').css('width',Math.min(input.length*100/64,100)+'%');
    $('#strength-text').html(emoji[bar.score]+' '+strength[bar.score]+'. '+bar.feedback.warning);
    $('.usage-disk.sys').removeClass('none');
  }
<?endif;?>
}
function restore() {
  // restore original image and activate APPLY button
  $('#dropbox').html("<?=$void?>");
  $('input[name="userDesc"]').trigger('change');
  filename = 'reset';
}
function upload(remove) {
  // save or delete upload when APPLY is pressed
  if (remove || filename=='reset') {
    $.post("/webGui/include/FileUpload.php",{cmd:'delete',path:path,filename:'<?=addslashes(htmlspecialchars($name))?>.png'});
  } else if (filename) {
    $.post("/webGui/include/FileUpload.php",{cmd:'save',path:path,filename:filename,output:'<?=addslashes(htmlspecialchars($name))?>.png'});
  }
}
function checkKey(form) {
  // check syntax of ssh keys
  var rows = form.text.value.split('\n');
  for (var i=0,row; row=rows[i]; i++) {
    if (row.search(/^(ssh-ed25519 AAAAC3NzaC1lZDI1NTE5|sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5zc2guY29t|ssh-rsa AAAAB3NzaC1yc2)[0-9A-Za-z+/]+[=]{0,3}(\s.*)?$/)==-1) {
      swal({title:"_(Invalid Key)_",text:"["+(i+1)+"] "+row.split(' ')[0]+": _(Syntax of the key is incorrect)_!",type:"error",html:true,confirmButtonText:"_(Ok)_"});
      return false;
    }
  }
  return true;
}
$(function(){
  var dropbox = $('#dropbox');
  // attach the drag-n-drop feature to the 'dropbox' element
  dropbox.filedrop({
    maxfiles:1,
    maxfilesize:512, // KB
    url:'/webGui/include/FileUpload.php',
    data:{"csrf_token":"<?=$var['csrf_token']?>"},
    beforeEach:function(file) {
      if (!file.type.match(/^image\/png/)) {
        swal({title:"Warning",text:"_(Only PNG images are allowed)_!",type:"warning",html:true,confirmButtonText:"_(Ok)_"});
        return false;
      }
    },
    error: function(error, file, i) {
      switch (error) {
      case 'BrowserNotSupported':
        swal({title:"_(Browser error)_",text:"_(Your browser does not support HTML5 file uploads)_!",type:"error",html:true,confirmButtonText:"_(Ok)_"});
        break;
      case 'TooManyFiles':
        swal({title:"_(Too many files)_",text:"_(Please select one file only)_!",html:true,type:"error"});
        break;
      case 'FileTooLarge':
        swal({title:"_(File too large)_",text:"_(Maximum file upload size is 512K)_ (524,288 _(bytes)_)",type:"error",html:true,confirmButtonText:"_(Ok)_"});
        break;
      }
    },
    uploadStarted:function(i,file,count) {
      var image = $('img', $(dropbox));
      var reader = new FileReader();
      image.width = 48;
      image.height = 48;
      reader.onload = function(e){image.attr('src',e.target.result);};
      reader.readAsDataURL(file);
    },
    uploadFinished:function(i,file,response) {
      if (response == 'OK 200') {
        if (!filename || filename=='reset') $(dropbox).append("<?=$icon?>");
        $('input[name="userDesc"]').trigger('change');
        filename = file.name;
      } else {
        swal({title:"_(Upload error)_",text:response,type:"error",html:true,confirmButtonText:"_(Ok)_"});
      }
    }
  });
  // simulate a drop action when manual file selection is done
  $('#drop').bind('change', function(e) {
    var files = e.target.files;
    if ($('#dropbox').triggerHandler({type:'drop',dataTransfer:{files:files}})==false) e.stopImmediatePropagation();
  });
  // auto size the textarea
  $('form').find('textarea').on('input change',function(){
    $(this).prop('rows',Math.max(($(this).val().match(/\n/g)||[]).length+1,10));
    $('form').find('input[value="_(Save)_"]').prop('disabled',false);
  });
});
</script>
<div class="spinner fixed"></div>
<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="upload(<?=$name=="root" ? 'false' : 'this.confirmDelete.checked'?>)">
<input type="hidden" name="userName" value="<?=htmlspecialchars($name)?>">
_(User name)_:
: <?=htmlspecialchars($name)?>

_(Description)_:
: <input type="text" name="userDesc" maxlength="64" value="<?=htmlspecialchars($users[$name]['desc'])?>" pattern='[^&:"]*'>

:user_edit_description_help:

_(Custom image)_:
: <span id="dropbox">
<?if (file_exists($user)):?>
  <img src="<?=autov($user)?>" id="image" width="48" height="48" onclick="$('#drop').click()" style="cursor:pointer" title="_(Click to select PNG file)_"><?=$icon?>
<?else:?>
  <?=$void?>
<?endif;?>
  </span><em>_(Drag-n-drop a PNG file or click the image at the left)_</em><input type="file" id="drop" accept="image/png" style="display:none">

:user_edit_custom_image_help:

<?if ($name=="root"):?>
&nbsp;
<?else:?>
_(Delete)_<input type="checkbox" name="confirmDelete" onChange="chkDelete(this.form, this.form.cmdUserEdit)">
<?endif;?>
: <input type="submit" name="cmdUserEdit" value="_(Apply)_" onclick="if (this.value=='_(Delete)_') this.value='Delete'; else this.value='Apply';" disabled><input type="button" value="_(Done)_" onclick="done('UserEdit')">
</form>
<br><br>
<form markdown="1" method="POST" action="/update.htm" onsubmit="return checkPassword(this)" target="progressFrame">
<input type="hidden" name="userName" value="<?=htmlspecialchars($name)?>">
_(Password)_:
<input type="hidden" name="userPassword" value="">
: <input type="password" name="userPasswordGUI" maxlength="129" autocomplete="new-password" onKeyUp="validatePassword(this.value);this.form.cmdUserEdit.disabled=(this.form.userPasswordGUI.value != this.form.userPasswordConfGUI.value);">
  <i id="showPass" class="fa fa-eye" style="cursor:pointer" title="_(Show / Hide password)_" onclick="showPassword()"></i><span><span class="usage-disk sys none"><span id="strength-bar" style="width:0"></span><span></span></span><span id="strength-text"></span></span>

:user_password_help:

_(Retype password)_:
<input type="hidden" name="userPasswordConf" value="">
: <input type="password" name="userPasswordConfGUI" maxlength="129" autocomplete="new-password" onKeyUp="this.form.cmdUserEdit.disabled=(this.form.userPasswordGUI.value != this.form.userPasswordConfGUI.value);">

&nbsp;
: <input type="submit" name="cmdUserEdit" value="_(Change)_" onclick="this.value='Change'" disabled><input type="button" value="_(Done)_" onclick="done('UserEdit')">
</form>

<?if ($name == 'root'):?>
<form markdown="1" method="POST" action="/update.php" onsubmit="return checkKey(this)" target="progressFrame">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">
<input type="hidden" name="#file" value="<?=$file;?>">
_(SSH authorized keys)_:
: <textarea spellcheck="false" cols="80" rows="<?=max(substr_count($text,"\n")+1,10)?>" maxlength="16384" name="text" style="resize:none;white-space:normal;font-family:bitstream;width:65.5%"><?=htmlspecialchars($text)?></textarea>

&nbsp;
: <input type="submit" value="_(Save)_" disabled><input type="button" value="_(Done)_" onclick="done()">

</form>
<?endif;?>

<?if ($name != 'root' && $var['shareSMBEnabled'] != 'no'):?>
<script>
var users = {};
var security = {};
var readList = {};
var writeList = {};
<?
$rw = 'read-write';
$ro = 'read-only';
$no = 'no-access';
foreach ($users as $user) {
  $idx = $user['idx'];
  if ($idx) echo "users[\"{$user['name']}\"]='$idx';\n";
}
foreach ($shares as $share => $data) {
  echo "security[\"$share\"]=\"{$sec[$share]['security']}\";\n";
  echo "readList[\"$share\"]=\"{$sec[$share]['readList']}\";\n";
  echo "writeList[\"$share\"]=\"{$sec[$share]['writeList']}\";\n";
}
?>
function updateAccess(form,data,n,i) {
  var name = "<?=$name?>";
  if (data) {
    if (n<i) {
      $.post('/update.htm',data[n], function(){setTimeout(function(){updateAccess(form,data,++n,i);},3000);});
    } else {
      $('div.spinner.fixed').hide();
      $('input[value="Reset"]').val('Done').prop('disabled',false).prop('onclick',null).off('click').click(function(){done('UserEdit');});
    }
  } else {
    var data = [], i = 0;
    $(form).find('select').each(function(){
      if ($(this).prop('id')) {
        var share = decodeURI($(this).prop('id'));
        var read = readList[share].split(',');
        var write = writeList[share].split(',');
        var access = '';
        data[i] = {};
        data[i]['shareName'] = share;
        data[i]['userAccess.0'] = '<?=$no?>';
        for (var user in users) {
          var idx = users[user];
          switch (security[share]) {
          case 'public':
            access = '<?=$rw?>';
            break;
          case 'secure':
            if (user == name) access = $(this).val();
            else access = write.includes(user) ? '<?=$rw?>' : '<?=$ro?>';
            break;
          case 'private':
            if (user == name) access = $(this).val();
            else access = write.includes(user) ? '<?=$rw?>' : (read.includes(user) ? '<?=$ro?>' : '<?=$no?>');
            break;
          }
          data[i]['userAccess.'+idx] = access;
        }
        data[i]['changeShareAccess'] = 'Apply';
        i++;
      }
    });
    $(form).find('input').prop('disabled',true);
    $('div.spinner.fixed').show();
    updateAccess(form,data,0,i);
  }
}
</script>
<form markdown="1" method="POST">
<?
echo "<table class='share_status' style='margin-top:20px'>";
echo "<thead><tr><td>"._('Share')."</td><td>"._('Security')."</td><td>"._('User Access')."</td></tr></thead>";
echo "<tbody>";
foreach ($shares as $share => $data) {
  if ($sec[$share]['export']=='-') continue;
  $security = $sec[$share]['security'];
  $read = in_array($name,explode(',',$sec[$share]['readList']));
  $write = in_array($name,explode(',',$sec[$share]['writeList']));
  switch ($security) {
  case 'public' : $access = $rw; break;
  case 'secure' : $access = $write ? $rw : $ro; break;
  case 'private': $access = $write ? $rw : ($read ? $ro : $no); break;}
  echo "<tr><td>$share</td><td>"._(ucfirst($security))."</td><td><select onchange='$(this).prop(\"id\",\"".rawurlencode($share)."\")'>";
  echo mk_option($access,$rw,_('Read/Write'));
  if ($security!='public') echo mk_option($access,$ro,_('Read-only'));
  if ($security=='private') echo mk_option($access,$no,_('No Access'));
  echo "</select></td></tr>";
}
echo "</tbody>";
echo "</table>";
?>

&nbsp;
: <input type="button" value="_(Apply)_" onclick="updateAccess(this.form)" disabled><input type="button" value="_(Done)_" onclick="done('UserEdit')">
</form>
<?endif;?>

                )

            [UserList] => Array
                (
                    [Menu] => Users
                    [Title] => Users
                    [Tag] => users
                    [file] => webGui/UserList.page
                    [root] => webGui
                    [name] => UserList
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$submenu = !empty($display['users']) && substr($display['users'],0,5)!='Tasks';
if ($submenu) $path = './Users';
ksort($users);
?>
<style>
a.info span{top:66px;left:42px}
<?if ($themes1):?>
div#title{margin-top:-30px!important}
<?endif;?>
</style>

<div id="title" class="title"><span class="left"><i class="fa fa-bell title"></i>_(Management Access)_</span></div>
<?$img = "/boot/config/plugins/dynamix/users/root.png"?>
<div class="user-list" style="text-align:center"><a class="<?=(!empty($users['root']['desc']) ? 'info' : '')?>" href="<?=$path?>/UserEdit?name=root"><img src="<?=(file_exists($img) ? autov($img) : '/webGui/images/user.png')?>" class="picture" border="0" width="48" height="48"><br>root<span><?=htmlspecialchars($users['root']['desc'])?></span></a></div>

<div class="title"><span class="left"><i class="fa fa-cloud title"></i>_(Shares Access)_</span></div>
<?foreach ($users as $user):?>
<?if ($user['name'] == 'root') continue;?>
<?$img = "/boot/config/plugins/dynamix/users/{$user['name']}.png"?>
<div class="user-list" style="text-align:center"><a class="<?=(!empty($user['desc']) ? 'info' : '')?>" href="<?=$path?>/UserEdit?name=<?=htmlspecialchars(urlencode($user['name']))?>"><img src="<?=(file_exists($img) ? autov($img) : '/webGui/images/user.png')?>" class="picture" border="0" width="48" height="48"><br><?=htmlspecialchars($user['name'])?><span><?=htmlspecialchars($user['desc'])?></span></a></div>
<?endforeach;?>

<?if (count($users)==1):?>
_(No users are defined)_. _(Click **Add User** to create a user for remote shares access)_
<?endif;?>

<div style='clear:both'></div>
<form method="POST" action="<?=$path?>/UserAdd">
<input type="submit" value="_(Add User)_"><?if ($submenu):?><input type="button" value="_(Done)_" onclick="done()"><?endif;?>
</form>

                )

            [UserPreferences] => Array
                (
                    [Menu] => Settings:3
                    [Type] => menu
                    [Title] => User Preferences
                    [Tag] => star
                    [file] => webGui/UserPreferences.page
                    [root] => webGui
                    [name] => UserPreferences
                    [text] => 
                )

            [Users] => Array
                (
                    [Menu] => $display['users'] Tasks:3
                    [Type] => xmenu
                    [Title] => Users
                    [Icon] => icon-users
                    [Code] => e945
                    [file] => webGui/Users.page
                    [root] => webGui
                    [name] => Users
                    [text] => 
                )

            [Utilities] => Array
                (
                    [Menu] => Settings
                    [Title] => User Utilities
                    [Type] => menu
                    [Tag] => cogs
                    [file] => webGui/Utilities.page
                    [root] => webGui
                    [name] => Utilities
                    [text] => 
                )

            [VPNmanager] => Array
                (
                    [Menu] => NetworkServices
                    [Type] => xmenu
                    [Title] => VPN Manager
                    [Icon] => icon-vpn
                    [Tabs] => false
                    [file] => webGui/VPNmanager.page
                    [root] => webGui
                    [name] => VPNmanager
                    [text] => 
                )

            [Vars] => Array
                (
                    [Menu] => WebGui
                    [Title] => Vars
                    [Icon] => icon-vars
                    [Tag] => code
                    [file] => webGui/Vars.page
                    [root] => webGui
                    [name] => Vars
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?if (_var($display,'resize')):?>
<script>
function resize() {
  $('pre.up').height(Math.max(window.innerHeight-320,330));
}
$(function() {
  resize();
  $(window).bind('resize',function(){resize();});
});
</script>
<?endif;?>
<?
$myPage['text'] = $page['text'] = $pages['Vars']['text'] = $language = $text = $notes = $site = '...';
$globals = $GLOBALS;
ksort($globals);
if (isset($globals['_SERVER']['PHP_AUTH_PW'])) $globals['_SERVER']['PHP_AUTH_PW'] = "***";
echo "<pre class='up'>",htmlspecialchars(print_r($globals,true)),"</pre>";
?>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [WG0] => Array
                (
                    [Menu] => VPNmanager:100
                    [Title] => Tunnel wg0
                    [Tag] => icon-vpn
                    [Nchan] => wg_poller
                    [file] => webGui/WG0.page
                    [root] => webGui
                    [name] => WG0
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$etc = '/etc/wireguard';
$tmp = '/tmp/list.tmp';

unset($subnets,$hosts,$subnets6,$hosts6,$vtuns,$filter,$docker);
exec("ip -4 route show scope link|awk '/^[^d].+ dev (eth|br|bond)[0-9]+(\\.[0-9]+)?/{print \$1}'",$subnets);
exec("ip -6 route show type unicast|awk '\$0 !~ \"expires\" && \$3 !~ \"^shim-\" && /^[^dfm:]/{print \$1}'",$subnets6);
exec("ip -br -4 addr show scope global|awk '/^(br|bond|eth)[0-9]+(\\.[0-9]+)?/{split(\$3,ip,\"/\");print ip[1]}'",$hosts);
exec("ip -br -6 addr show scope global|awk '/^(br|bond|eth)[0-9]+(\\.[0-9]+)?/{split(\$3,ip,\"/\");print ip[1]}'",$hosts6);
exec("ls  --indicator-style=none $etc/wg*.conf*|grep -Po wg[0-9]+",$vtuns);
exec("docker network ls --filter driver='macvlan' --filter driver='ipvlan' --format='{{.Name}}' 2>/dev/null",$filter);

$nginx = @parse_ini_file('state/nginx.ini') ?: [];

// add subnets defined in Docker custom networks
if (count($filter)) {
  exec("docker network inspect --format='{{range .IPAM.Config}}{{println .Subnet}}{{end}}' ".implode(' ',$filter),$docker);
  foreach (array_filter($docker) as $network) {
    if (strpos($network,'.')!==false && !in_array($network,$subnets)) $subnets[] = $network;
    elseif (strpos($network,':')!==false && !in_array($network,$subnets6)) $subnets6[] = $network;
  }
}
$subnets = implode(',',$subnets);
$hosts = implode(',',$hosts);
$subnets6 = implode(',',$subnets6);
$hosts6 = implode(',',$hosts6);

function ifname($eth, $new) {
  return str_replace('eth',$new,$eth);
}
function iflink($eth) {
  $system = '/sys/class/net/';
  if (file_exists($system.ifname($eth,'br'))) return ifname($eth,'br');
  if (file_exists($system.ifname($eth,'bond'))) return ifname($eth,'bond');
  return $eth;
}
function concat($array) {
  return implode(',',array_map(function($v){return "'$v'";},$array));
}
function readConf(&$peer_wg, &$wg, $vtun) {
  global $etc,$netbase,$netpool,$netbase6,$netpool6,$validIP4,$validIP6;
  $conf = "$etc/$vtun.conf";
  $cfg  = "$etc/$vtun.cfg";
  $file = false;
  $vpn  = 0;
  if (file_exists($conf) && filesize($conf) > 0) {
    $entries = array_filter(array_map('trim',preg_split('/\[(Interface|Peer)\]/',file_get_contents($conf))));
    foreach ($entries as $key => $entry) {
      $i = $key-1;
      if ($i) $peer_wg[] = $i;
      $rows = explode("\n",$entry);
      foreach ($rows as $row) {
        [$id,$data] = array_map('trim',my_explode('=',$row));
        switch ($id) {
        case 'PostUp':
        case 'PostDown':
          break;
        case 'Address':
          foreach (array_map('trim',explode(',',$data)) as $ip) {
            if (strpos($ip,'.')!==false) $wg["Address:$i"] = $ip;
            elseif (strpos($ip,':')!==false) $wg["Address6:$i"] = $ip;
          }
          break;
        case 'Endpoint':
          if ($data[0]=='[') {
            [$ip,$port] = my_explode(']:',$data);
            $ip = substr($ip,1);
          } else {
            [$ip,$port] = my_explode(':',$data);
          }
          $wg["Endpoint:$i"] = $ip;
          $wg["ListenPort:$i"] = $port;
          break;
        default:
          if ($id[0]=='#') $wg["Name:$i"] = substr($id,1); else $wg["$id:$i"] = $data;
          break;
        }
      }
    }
    $file = true;
  }
  if (file_exists($cfg)) {
    $more = parse_ini_file($cfg);
    foreach ($more as $key => $data) {
      [$id,$i] = my_explode(':',$key);
      if ($id!='Address') continue;
      switch ($more['PROT:0']) {
      case '46':
        [$ip4,$ip6] = array_map('trim',my_explode(',',$data));
        $more[$key] = $ip4;
        $more["Address6:$i"] = $ip6;
        break;
      case '6':
        unset($more[$key]);
        $more["Address6:$i"] = $data;
        break;
      }
    }
    $wg = array_merge($wg,$more);
    [$subnet,$mask] = my_explode('/',_var($wg,'Network:0'));
    [$subnet6,$mask6] = my_explode('/',_var($wg,'Network6:0'));
    $netbase[$vtun] = ip2long($subnet) & (0x100000000-2**(32-$mask));
    $netbase6[$vtun] = $subnet6 ?: $netpool6[$vtun];
  } else {
    $netbase[$vtun] = ip2long($netpool[$vtun]);
    $netbase6[$vtun] = $netpool6[$vtun];
  }
  foreach ($peer_wg as $i) if (_var($wg,"TYPE:$i",0)>=7) {$vpn = $wg["TYPE:$i"]; break;}
  return [$conf,$cfg,$file,$vpn];
}
$public    = _var($nginx,'NGINX_WANFQDN');
$active    = explode(' ',exec('wg show interfaces'));
$autostart = explode(' ',@file_get_contents("$etc/autostart")?:'');
$build     = false;
$script    = "$docroot/webGui/scripts/upnp_port";
$services  = "$docroot/webGui/scripts/update_services";
$template  = "$docroot/webGui/WGX.page";
$tower     = _var($var,'NAME');
$ethX      = 'eth0';
$server    = ipaddr($ethX);
$dnsserver = _var($$ethX,'DNS_SERVER1');

$link      = iflink($ethX);
$postUp0   = "$script add $link WireGuard-<wg> $server <port> <port> udp";
$postUp1   = "logger -t wireguard 'Tunnel WireGuard-<wg> started';$services";
$postUp2   = "iptables -t nat -A POSTROUTING -s <source> -o $link -j MASQUERADE";
$postUp3   = "iptables -N WIREGUARD_DROP_<WG>;iptables -A WIREGUARD -o $link -j WIREGUARD_DROP_<WG>";
$postUpX   = "iptables -A WIREGUARD_DROP_<WG> -s <source> -d <target> -j DROP";
$postUpZ   = "iptables -A WIREGUARD_DROP_<WG> -s <source> -j ACCEPT;iptables -A WIREGUARD_DROP_<WG> -j RETURN";
$postUp26  = "ip6tables -t nat -A POSTROUTING -s <source> -o $link -j MASQUERADE";
$postUp36  = "ip6tables -N WIREGUARD_DROP_<WG>;ip6tables -A WIREGUARD -o $link -j WIREGUARD_DROP_<WG>";
$postUpX6  = "ip6tables -A WIREGUARD_DROP_<WG> -s <source> -d <target> -j DROP";
$postUpZ6  = "ip6tables -A WIREGUARD_DROP_<WG> -s <source> -j ACCEPT;ip6tables -A WIREGUARD_DROP_<WG> -j RETURN";
$postDown0 = "$script del $link <port> udp";
$postDown1 = "logger -t wireguard 'Tunnel WireGuard-<wg> stopped';$services";
$postDown2 = "iptables -t nat -D POSTROUTING -s <source> -o $link -j MASQUERADE";
$postDown3 = "iptables -F WIREGUARD_DROP_<WG>;iptables -D WIREGUARD -o $link -j WIREGUARD_DROP_<WG>;iptables -X WIREGUARD_DROP_<WG>";
$postDown26= "ip6tables -t nat -D POSTROUTING -s <source> -o $link -j MASQUERADE";
$postDown36= "ip6tables -F WIREGUARD_DROP_<WG>;ip6tables -D WIREGUARD -o $link -j WIREGUARD_DROP_<WG>;ip6tables -X WIREGUARD_DROP_<WG>";

$tld       = @file_get_contents("$docroot/webGui/include/tld.key")?:'';
$validDNS  = "([0-9a-z]([0-9a-z\-]{0,61}[0-9a-z])?\.)+($tld)";
$validIP4  = "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}";
$validIP6  = "(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(:|([0-9a-fA-F]{1,4}:)+):(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?)";
$maskIP4   = "([0-9]|[12][0-9]|3[0-2])?";
$maskIP6   = "([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?";

$validText = "^($validDNS|$validIP4|$validIP6)$";
$validList = "^(($validIP4/?$maskIP4|$validIP6/?$maskIP6)(, *)?)+$";
$validDNSServerList = "^(($validIP4|$validIP6)(, *)?)+$";
$validname = "^[0-9a-zA-Z \-_]*$";

$netbase   = $netpool = $netport = [];
$netbase6  = $netpool6 = [];
$check_wg0 = in_array('wg0',$active) ? 'true' : 'false';
$start_wg0 = in_array('wg0',$autostart);
$peer_wg0  = $wg0 = [];

$netpool['wg0']  = '10.253.0.0';
$netpool6['wg0'] = 'fc00:253:0:0::';
$netport['wg0']  = 51820;

// read current configuration
[$conf_wg0,$cfg_wg0,$this_wg0,$vpn_wg0] = readConf($peer_wg0,$wg0,'wg0');

// gather IPv4 and IPv6 addresses for available interfaces
$endpoints = [];
$eth = 'eth0';
while (isset($$eth)) {
  if (!empty($$eth['IPADDR:0']))  $endpoints[] = $$eth['IPADDR:0'];
  if (!empty($$eth['IPADDR6:0'])) $endpoints[] = $$eth['IPADDR6:0'];
  $eth = 'eth'.(substr($eth,3)+1);
}

// remove obsolete tunnels
foreach (glob("$docroot/webGui/WG[1-9]*.page",GLOB_NOSORT) as $wgX) {
  if (!in_array(strtolower(basename($wgX,'.page')),$vtuns)) {
    delete_file($wgX);
    $build = true;
  }
}
// add additional tunnels
foreach ($vtuns as $wgX) {
  if ($wgX == 'wg0') continue;
  $file = "$docroot/webGui/".strtoupper($wgX).".page";
  if (!file_exists($file)) {
    $X = filter_var($wgX,FILTER_SANITIZE_NUMBER_INT);
    $nnn = 100 + $X;
    copy($template,$file);
    exec("sed -i 's/parentname:nnn/VPNmanager:$nnn/;s/XXX/$X/g;s/wgX/$wgX/g' $file");
    chmod($file,0644);
    $build = true;
  }
}
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<style>
dt{width:22%}
span.even{float:right;display:inline-block;width:150px;margin-top:3px}
span.even.wide{width:200px}
span.pin{float:right;margin:-40px 12px 0 0;clear:both;display:inline-block;width:400px;text-align:right}
span[class^=rx]{margin-right:40px}
span.hshift{margin-right:<?=$themes1?'-7':'11'?>px!important}
span.vshift{margin-top:-2px!important}
span.label{font-size:1.1rem;text-transform:uppercase;letter-spacing:1px;margin-left:<?=$themes1?'-12':'-4'?>px}
span.input{display:inline-block;width:420px}
span.access-type{display:inline-block;width:35%;white-space:normal}
@media(max-width:1920px){span.access-type{width:20%}}
span.block{display:inline-block;width:48%;white-space:normal}
div.shade-white{background-color:#ededed;margin-top:10px;padding:8px 0 3px 0}
div.shade-black{background-color:#212121;margin-top:10px;padding:8px 0 3px 0}
div.shade-azure{background-color:#edeaef;margin-top:10px;padding:8px 0 3px 0}
div.shade-gray{background-color:#121510;margin-top:10px;padding:8px 0 3px 0}
div.title{margin-bottom:10px!important}
div[id^=block-wg]{margin-bottom:30px}
div.preset{margin:8px 0;float:right}
input.wide{width:360px}
input.subnet{width:150px;margin-right:4px}
input.mask{width:30px}
input.port{width:50px}
input.form,button.form{font-size:1rem;min-width:0;padding:5px 8px;margin:0}
input.ok{color:#f2f2f2;background:#4f8a10}
input.nok{color:#f2f2f2;background:#f0000c}
select.subnet{min-width:150px}
i.fa-fw{margin-left:5px}
i.key-off{opacity:0.3;cursor:default!important}
input:user-invalid {border-bottom-color:#E22828;}
input:-moz-ui-invalid {border-bottom-color:#E22828;}
</style>
<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script>
<?if ($build):?>
refresh();
<?endif;?>
Number.prototype.long2ip = function(){return [this>>>24,this>>>16&255,this>>>8&255,this&255].join('.');}
String.prototype.ip2long = function(){var ip=this.split('.');return (ip[0]<<24)+(ip[1]<<16)+(ip[2]<<8)+(ip[3]*1);}
String.prototype.desc    = function(){return this.substr(this.lastIndexOf('/'));}
String.prototype.patch   = function(s,t){return t?this.replace(/<source>/,s).replace(/<target>/,t):this.replace(/<source>/,s);}
Array.prototype.bind     = function(w){return (this.join(';')).replace(/<WG>/g,w).replace(/,/g,';');}

var xml = $.cookie('upnp')||'<?=@file_get_contents('/var/tmp/upnp')?>';
var netbase = {}, netpool = {}, netport = {}, netbase6 = {}, netpool6 = {};

netbase['wg0']  =  <?=_var($netbase,'wg0')?>;
netpool['wg0']  = "<?=_var($netpool,'wg0')?>";
netport['wg0']  = "<?=_var($netport,'wg0')?>";
netbase6['wg0'] = "<?=_var($netbase6,'wg0')?>";
netpool6['wg0'] = "<?=_var($netpool6,'wg0')?>";

// polyfill to fix reportValidity() for Firefox
if (!HTMLInputElement.prototype.reportValidity || (navigator.userAgent.indexOf("Firefox") !== -1)) {
  HTMLInputElement.prototype.reportValidity = function () {
    if (this.checkValidity()) {
      return true;
    } else {
      var labelText = "_(Invalid data)_";
      try {
        labelText = $(this).closest('dl').children().first()[0].textContent;
      } catch (err) { }
      // the browser generates the validationMessage, we cannot translate it
      swal({title:labelText,text:this.validationMessage,html:true,type:'error',confirmButtonText:"_(Ok)_"});
      return false;
    }
  };
}
function ipv4(ip) {
  return ip.indexOf('.') > 0;
}
function ipv6(ip) {
  return ip.indexOf(':') > 0;
}
function ipset(ip) {
  return ipv4(ip) ? ip : '['+ip+']';
}
function nodefault(ip) {
  return ip != '0.0.0.0/0';
}
function nodefault6(ip) {
  return ip != '::/0';
}
function validateForm(form,vtun) {
  // this runs when the Apply button is clicked, before built-in form validation and before the form's onsubmit function
  // if any fields do not pass basic validation, ensure they are visible then manually show the validation error
  // this prevents validation errors on hidden fields
  var isValid = true;
  form.find('input').each(function(){
    var i = this.name.match(/.*:(\d+)/) ? this.name.match(/.*:(\d+)/)[1] : -1;
    if (i > -1 && !this.checkValidity()) {
      if ($(this).is(":hidden")) {
        var icon = $('#chevron-'+vtun+'-'+i);
        openClose(form,icon,'div.zone'+i);
      }
      this.reportValidity();
      isValid = false;
    }
  });
  return isValid;
}
function prepareSettings(form,vtun) {
  var subnets = '<?=$subnets?>';
  var hosts = '<?=$hosts?>';
  var subnets6 = '<?=$subnets6?>';
  var hosts6 = '<?=$hosts6?>';
  var protocol = form.find('select[name="PROT:0"]').val();
  var listen = form.find('input[name="gui:ListenPort:0"]').val()||netport[vtun];
  var network = form.find('input[name="gui:Network:0"]').val();
  var mypool = netpool[vtun];
  var network6 = form.find('input[name="gui:Network6:0"]').val();
  var mypool6 = netpool6[vtun];
  var vpn = 0;
  form.find('input[name="Network:0"]').val((network||mypool)+'/'+(form.find('input[name="gui:Mask:0"]').val()||24));
  form.find('input[name="Network6:0"]').val((network6||mypool6)+'/'+(form.find('input[name="gui:Mask6:0"]').val()||64));
  form.find('input[name^="Address:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    var address = $(this).val();
    var address6 = form.find('input[name="Address6:'+i+'"]').val();
    switch (protocol) {
      case '46': $(this).val(address+', '+address6); break;
      case '6' : $(this).val(address6); break;
      default  : break;
    }
  });
  switch (protocol) {
  case '46':
    form.find('input[name="#subnets1"]').val(form.find('input[name="Address:0"]').val()+', '+form.find('input[name="Address6:0"]').val()+', '+subnets+', '+subnets6);
    form.find('input[name="#subnets2"]').val(form.find('input[name="Address:0"]').val()+', '+form.find('input[name="Address6:0"]').val()+', '+hosts+', '+hosts6);
    form.find('input[name="#shared1"]').val(form.find('input[name="Network:0"]').val()+', '+form.find('input[name="Network6:0"]').val()+', '+subnets+', '+subnets6);
    form.find('input[name="#shared2"]').val(form.find('input[name="Network:0"]').val()+', '+form.find('input[name="Network6:0"]').val()+', '+hosts+', '+hosts6);
    break;
  case '6':
    form.find('input[name="#subnets1"]').val(form.find('input[name="Address6:0"]').val()+', '+subnets6);
    form.find('input[name="#subnets2"]').val(form.find('input[name="Address6:0"]').val()+', '+hosts6);
    form.find('input[name="#shared1"]').val(form.find('input[name="Network6:0"]').val()+', '+subnets6);
    form.find('input[name="#shared2"]').val(form.find('input[name="Network6:0"]').val()+', '+hosts6);
    break;
  default:
    form.find('input[name="#subnets1"]').val(form.find('input[name="Address:0"]').val()+', '+subnets);
    form.find('input[name="#subnets2"]').val(form.find('input[name="Address:0"]').val()+', '+hosts);
    form.find('input[name="#shared1"]').val(form.find('input[name="Network:0"]').val()+', '+subnets);
    form.find('input[name="#shared2"]').val(form.find('input[name="Network:0"]').val()+', '+hosts);
    break;
  }
  form.find('select[name^="TYPE:"]').each(function(){if($(this).val()>=7){vpn=$(this).val();return false};});
  if (vpn==0) form.find('input[name="ListenPort:0"]').val(listen);
  form.find('input[name^="gui:Endpoint:"]').each(function(){
    var i = $(this).attr('name').split(':')[2];
    var endpoint = form.find('input[name="Endpoint:'+i+'"]');
    var port = form.find('input[name="gui:ListenPort:'+i+'"]').val()||listen;
    if ($(this).val()) endpoint.val(ipset($(this).val())+':'+port);
  });
  form.find('input[name^="Address6:"]').each(function(){$(this).prop('disabled',true);});
  form.find('input[name^="gui:"]').each(function(){$(this).prop('disabled',true);});
  form.find('input[name="#wg"]').val(tstate[vtun]);
  form.find('input[name="#internet"]').val(ipset(form.find('input[name="#internet"]').val())+':'+listen);
  var upnp = form.find('select[name="UPNP:0"]');
  var postup = form.find('input[name="PostUp:0:0"]');
  var postdown = form.find('input[name="PostDown:0:0"]');
  var source = form.find('input[name="Network:0"]').val();
  var source6 = form.find('input[name="Network6:0"]').val();
  upnp.prop('disabled',false);
<?if (!is_executable('/usr/bin/upnpc')):?>
  upnp.val('no');
<?endif;?>
  if (!xml||vpn > 0||upnp.val()=='no') {
    postup.prop('disabled',true);
    postdown.prop('disabled',true);
  } else {
    postup.val(postup.val().replace(/<wg>/,vtun).replace(/<port>/g,listen));
    postdown.val(postdown.val().replace(/<port>/,listen));
  }
  postup = form.find('input[name="PostUp:0:1"]');
  postup.val(postup.val().replace(/<wg>/,vtun));
  postdown = form.find('input[name="PostDown:0:1"]');
  postdown.val(postdown.val().replace(/<wg>/,vtun));
  postup = form.find('input[name="PostUp:0:2"]');
  postdown = form.find('input[name="PostDown:0:2"]');
  var drop = form.find('input[name="DROP:0"]').val();
  var postup1 = [], postup16 = [];
  var postdown1 = [], postdown16 = [];
  var ip4 = []; ip6 = [];
  if (form.find('select[name="NAT:0"]').val()=='') {
    var postup2 = '<?=$postUp2?>';
    var postup26 = '<?=$postUp26?>';
    var postdown2 = '<?=$postDown2?>';
    var postdown26 = '<?=$postDown26?>';
    switch (protocol) {
    case '46':
      postup1.push(postup2.patch(source));
      postdown1.push(postdown2.patch(source));
      postup16.push(postup26.patch(source6));
      postdown16.push(postdown26.patch(source6));
      break;
    case '6':
      postup16.push(postup26.patch(source6));
      postdown16.push(postdown26.patch(source6));
      break;
    default:
      postup1.push(postup2.patch(source));
      postdown1.push(postdown2.patch(source));
      break;
    }
  }
  if (drop) {
    var postup3 = '<?=$postUp3?>';
    var postupX = '<?=$postUpX?>';
    var postupZ = '<?=$postUpZ?>';
    var postup36 = '<?=$postUp36?>';
    var postupX6 = '<?=$postUpX6?>';
    var postupZ6 = '<?=$postUpZ6?>';
    var postdown3 = '<?=$postDown3?>';
    var postdown36 = '<?=$postDown36?>';
    vtun = vtun.toUpperCase();
    drop = drop.replace(/ /g,'').split(',');
    if (form.find('select[name="RULE:0"]').val()) {
      postupX = postupX.replace('-j DROP','-j ACCEPT');
      postupZ = postupZ.replace('-j ACCEPT','-j DROP');
      postupX6 = postupX6.replace('-j DROP','-j ACCEPT');
      postupZ6 = postupZ6.replace('-j ACCEPT','-j DROP');
    }
    for (var i=0,target; target=drop[i]; i++) {
      switch (protocol) {
      case '46':
        if (ipv4(target)) ip4.push(postupX.patch(source,target));
        if (ipv6(target)) ip6.push(postupX6.patch(source6,target));
        break;
      case '6':
        if (ipv6(target)) ip6.push(postupX6.patch(source6,target));
        break;
      default:
        if (ipv4(target)) ip4.push(postupX.patch(source,target));
        break;
      }
    }
  }
  switch (protocol) {
  case '46':
    if (ip4.length > 0) {
      postup1.push(postup3);
      postup1.push(ip4);
      postup1.push(postupZ.patch(source));
      postdown1.push(postdown3);
    }
    if (ip6.length > 0) {
      postup16.push(postup36);
      postup16.push(ip6);
      postup16.push(postupZ6.patch(source6));
      postdown16.push(postdown36);
    }
    postup1.push(postup16);
    postdown1.push(postdown16);
    postup.val(postup1.bind(vtun));
    postdown.val(postdown1.bind(vtun));
    break;
  case '6':
    if (ip6.length > 0) {
      postup16.push(postup36);
      postup16.push(ip6);
      postup16.push(postupZ6.patch(source6));
      postdown16.push(postdown36);
    }
    postup.val(postup16.bind(vtun));
    postdown.val(postdown16.bind(vtun));
    break;
  default:
    if (ip4.length > 0) {
      postup1.push(postup3);
      postup1.push(ip4);
      postup1.push(postupZ.patch(source));
      postdown1.push(postdown3);
    }
    postup.val(postup1.bind(vtun));
    postdown.val(postdown1.bind(vtun));
    break;
  }
  $('div[id^="index-'+vtun+'-"]').each(function(){
    var temp = $(this).find('select[name^="TYPE:"]').val();
    if (temp >= 7) form.find('input[name="#type"]').val(temp);
  });
  if (!postup.val()) postup.prop('disabled',true);
  if (!postdown.val()) postdown.prop('disabled',true);
}
function keypair(form,i) {
  $.post('/webGui/include/update.wireguard.php',{'#cmd':'keypair'},function(keys){
    var key = keys.split('\0');
    form.find('.private-'+i).val(key[0]).trigger('change');
    form.find('.public-'+i).val(key[1]).trigger('change');
  });
}
function presharedkey(form,i) {
  $.post('/webGui/include/update.wireguard.php',{'#cmd':'presharedkey'},function(key){
    form.find('.preshared-'+i).val(key).trigger('change');
  });
}
function clearTunnel(vtun) {
  $.removeCookie('my-'+vtun);
  $.removeCookie('view-'+vtun);
  $.removeCookie('block-'+vtun);
  refresh();
}
function addTunnel() {
  $.post('/webGui/include/update.wireguard.php',{'#cmd':'addtunnel','#name':'<?=$tower?>'},function(){refresh();});
}
function delTunnel(vtun) {
  swal({title:"_(Delete Tunnel)_ "+vtun,text:"_(This removes any connections running over this tunnel)_",type:'warning',confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_",showCancelButton:true},function(){
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'deltunnel','#vtun':vtun,'#name':'<?=$tower?>'},function(ok){
      if (ok==0) {
        clearTunnel(vtun);
      } else {
        setTimeout(function(){swal({title:"_(Delete tunnel failed)_",text:"_(Tunnel has running containers attached)_<br>_(Stop corresponding docker containers)_",html:true,type:'error',confirmButtonText:"_(Ok)_"});},250);
      }
    });
  });
}
function addPeer(form,vtun) {
  // don't add peer if there are errors that would be propagated to the peer
  if (!validateForm(form,vtun)) return false;

  var index = [0];
  form.find('div[id^="index-'+vtun+'-"]').each(function(){index.push($(this).prop('id').split('-')[2]);});
  var i = Math.max(...index)+1;
  var template = $($('<div/>').loadTemplate($('#peer-template-'+vtun)).html().replace(/INDEX/g,i));
  var peer = i==1 ? $('div#peers-list-'+vtun) : $('[id^="index-'+vtun+'-"]').last();
  $(peer).after(template);
  if (i==1) form.find('select[name="TYPE:1"] option').each(function(){$(this).prop('disabled',false);});
  var address = [], address6 = [];
  var protocol = form.find('select[name="PROT:0"]').val();
  if (protocol!='6') {
    form.find('input[name^="Address:"]').each(function(){if ($(this).val()) address.push($(this).val().ip2long());});
    var ip = (Math.max(...address)+1).long2ip();
    form.find('input[name="Address:'+i+'"]').val(ip);
  }
  if (protocol!='') {
    form.find('input[name^="Address6:"]').each(function(){if ($(this).val()) address6.push($(this).val().split('::')[1]);});
    var ip6 = (form.find('input[name="Network6:0"]').val()||netpool6[vtun])+(address6.sort(function(x,y){return x-y}).pop()*1+1);
    form.find('input[name="Address6:'+i+'"]').val(ip6);
  }
  switch (protocol) {
  case '46':
    var data = ip+', '+ip6;
    form.find('input[name="Address:'+i+'"]').attr('placeholder',"(_(mandatory)_)").prop('required',true);
    form.find('input[name="Address6:'+i+'"]').attr('placeholder',"(_(mandatory)_)").prop('required',true);
    $('div[class="ipv4 '+vtun+'"]').show();
    $('div[class="ipv6 '+vtun+'"]').show();
    break;
  case '6':
    var data = ip6;
    form.find('input[name="Address:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required').val('');
    form.find('input[name="Address6:'+i+'"]').attr('placeholder',"(_(mandatory)_)").prop('required',true);
    $('div[class="ipv4 '+vtun+'"]').hide();
    $('div[class="ipv6 '+vtun+'"]').show();
    break;
  default:
    var data = ip;
    form.find('input[name="Address:'+i+'"]').attr('placeholder',"(_(mandatory)_)").prop('required',true);
    form.find('input[name="Address6:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required').val('');
    $('div[class="ipv4 '+vtun+'"]').show();
    $('div[class="ipv6 '+vtun+'"]').hide();
    break;
  }
  form.find('input[name="AllowedIPs:'+i+'"]').val(data);
  form.find('input[name="Address:'+i+'"]').on('input change',function(){form.find('#ping-button1-'+i).prop('disabled',$(this).val()=='');});
  form.find('input[name="Address6:'+i+'"]').on('input change',function(){form.find('#ping-button6-'+i).prop('disabled',$(this).val()=='');});
  form.find('input[name="gui:Endpoint:'+i+'"]').on('input change',function(){form.find('#ping-button2-'+i).prop('disabled',$(this).val()=='');});
  if ($.cookie('view-'+vtun)=='advanced') {
    form.find('div.zone'+i).show();
    form.find('i.fa-chevron-down').last().removeClass().addClass('fa fa-chevron-up');
  }
  form.find('input[class$="zone'+i+'"]').show();
  form.find('input[name="Name:0"]').trigger('change');
  $('blockquote.inline_help').each(function(i) {
    $(this).attr('id','helpinfo'+i);
    var pin = $(this).prev();
    if (!pin.prop('nodeName')) pin = $(this).parent().prev();
    while (pin.prop('nodeName') && pin.prop('nodeName').search(/(table|dl)/i) == -1) pin = pin.prev();
    pin.find('tr:first,dt:last').each(function() {
      var node = $(this);
      var name = node.prop('nodeName').toLowerCase();
      if (name=='dt') {
        while (!node.html() || node.html().search(/(<input|<select|nbsp;)/i) >= 0 || name!='dt') {
          if (name=='dt' && node.is(':first-of-type')) break;
          node = node.prev();
          name = node.prop('nodeName').toLowerCase();
        }
        node.css('cursor','help').prop('onclick',null).off('click').click(function(){$('#helpinfo'+i).toggle('slow');});
      } else {
        if (node.html() && (name!='tr' || node.children('td:first').html())) node.css('cursor','help').prop('onclick',null).off('click').click(function(){$('#helpinfo'+i).toggle('slow');});
      }
    });
  });
}
function delPeer(form,peer) {
  var deleted = form.find('input[name="#deleted"]');
  var comma = deleted.val() ? ',' : '';
  deleted.val(deleted.val()+comma+peer.substr(7));
  form.find(peer).remove();
  form.find('input[name="Name:0"]').trigger('change');
}
function lockEye(form,i) {
  form.find('i[class*="eye'+i+'"]').removeClass('key-off').addClass('key-off');
}
function toLC(field) {
  field.value=(field.value) ? field.value.toLowerCase() : '';
}
function updatePeer(form,i,n,vtun) {
  var unraid = form.find('input[name="#internet"]').val().replace(/^(www\.).+(\.unraid.net)$/,'$1<hash>$2');
  var type = form.find('select[name="TYPE:'+i+'"]').val();
  var icon = $('#chevron-'+vtun+'-'+i);
  var protocol = form.find('select[name="PROT:0"]').val();
  switch (n) {
  case '6':
    var dns = form.find('input[name="DNS:'+i+'"]');
    form.find('input[name="Endpoint:0"]').attr('placeholder',unraid);
    form.find('input[name="gui:ListenPort:0"]').attr('placeholder',netport[vtun]);
    form.find('select[name="NAT:0"]').prop('disabled',false);
    form.find('input[name="gui:Endpoint:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required').val('');
    form.find('input[name="gui:ListenPort:'+i+'"]').removeAttr('placeholder').val('');
    dns.attr('placeholder',"(_(mandatory)_)").prop('required',true).val(dns.val()||'<?=$dnsserver?>');
    if (!dns.val() && icon.hasClass('fa-chevron-down')) openClose(form,icon,'div.zone'+i);
    break;
  case '7':
    form.find('input[name="Endpoint:0"]').attr('placeholder',"(_(not used)_)");
    form.find('input[name="gui:ListenPort:0"]').removeAttr('placeholder');
    form.find('select[name="NAT:0"]').prop('disabled',true);
    form.find('input[name="gui:Endpoint:'+i+'"]').attr('placeholder',"(_(mandatory)_)").prop('required',true);
    form.find('input[name="gui:ListenPort:'+i+'"]').attr('placeholder',form.find('input[name="gui:ListenPort:0"]').val()||netport[vtun]);
    form.find('input[name="Address:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required');
    form.find('input[name="Address6:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required');
    form.find('input[name="DNS:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required').val('');
    if (icon.hasClass('fa-chevron-down')) openClose(form,icon,'div.zone'+i);
    break;
  default:
    form.find('input[name="Endpoint:0"]').attr('placeholder',unraid);
    form.find('input[name="gui:ListenPort:0"]').attr('placeholder',netport[vtun]);
    form.find('select[name="NAT:0"]').prop('disabled',false);
    if (n=='2'||n=='3') {
      form.find('input[name="gui:Endpoint:'+i+'"]').attr('placeholder',"(_(mandatory)_)").prop('required',true);
      form.find('input[name="gui:ListenPort:'+i+'"]').attr('placeholder',form.find('input[name="gui:ListenPort:0"]').val()||netport[vtun]);
      if (icon.hasClass('fa-chevron-down')) openClose(form,icon,'div.zone'+i);
    } else {
      form.find('input[name="gui:Endpoint:'+i+'"]').attr('placeholder',"(_(not used)_)").removeAttr('required').val('');
      form.find('input[name="gui:ListenPort:'+i+'"]').removeAttr('placeholder').val('');
    }
    form.find('input[name="DNS:'+i+'"]').attr('placeholder',"(_(optional)_)").removeAttr('required');
    break;
  }
  form.find('#addpeer-'+vtun).prop('disabled',n>=7);
  var subnet = form.find('input[name="Address:'+i+'"]').val();
  var subnet6 = form.find('input[name="Address6:'+i+'"]').val();
  switch (protocol) {
  case '46':
    setAllow6(form,subnet6,i);
    setAllow(form,subnet,i);
    break;
  case '6':
    setAllow6(form,subnet6,i);
    break;
  default:
    setAllow(form,subnet,i);
    break;
  }
  showRemark(form);
  showRoute(form,vtun);
  showAccess(form,i,n);
}
function setProtocol(form,vtun,update) {
  switch (form.find('select[name="PROT:0"]').val()) {
  case '46':
    $('div[class="ipv4 '+vtun+'"]').show();
    $('div[class="ipv6 '+vtun+'"]').show();
    form.find('input[name^="Address:"]').each(function(){
      var i = $(this).attr('name').split(':')[1];
      if (i==0) {
        $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true);
      } else {
        if (form.find('select[name="TYPE:'+i+'"]').val()<7) $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true); else $(this).attr('placeholder',"(_(not used)_)").removeAttr('required');
      }
    });
    form.find('input[name^="Address6:"]').each(function(){
      var i = $(this).attr('name').split(':')[1];
      if (i==0) {
        $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true);
      } else {
        if (form.find('select[name="TYPE:'+i+'"]').val()<7) $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true); else $(this).attr('placeholder',"(_(not used)_)").removeAttr('required');
      }
    });
    if (update) {
      form.find('input[name="gui:Network6:0"]').trigger('change');
      form.find('input[name="gui:Network:0"]').trigger('change');
    }
    break;
  case '6':
    $('div[class="ipv4 '+vtun+'"]').hide();
    $('div[class="ipv6 '+vtun+'"]').show();
    form.find('input[name^="Address:"]').each(function(){$(this).attr('placeholder',"(_(not used)_)").removeAttr('required').val('');});
    form.find('input[name^="Address6:"]').each(function(){
      var i = $(this).attr('name').split(':')[1];
      if (i==0) {
        $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true);
      } else {
        if (form.find('select[name="TYPE:'+i+'"]').val()<7) $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true); else $(this).attr('placeholder',"(_(not used)_)").removeAttr('required');
      }
    });
    if (update) {
      form.find('input[name="gui:Network6:0"]').trigger('change');
    }
    break;
  default:
    $('div[class="ipv4 '+vtun+'"]').show();
    $('div[class="ipv6 '+vtun+'"]').hide();
    form.find('input[name^="Address6:"]').each(function(){$(this).attr('placeholder',"(_(not used)_)").removeAttr('required').val('');});
    form.find('input[name^="Address:"]').each(function(){
      var i = $(this).attr('name').split(':')[1];
      if (i==0) {
        $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true);
      } else {
        if (form.find('select[name="TYPE:'+i+'"]').val()<7) $(this).attr('placeholder',"(_(mandatory)_)").prop('required',true); else $(this).attr('placeholder',"(_(not used)_)").removeAttr('required');
      }
    });
    if (update) {
      form.find('input[name="gui:Network:0"]').trigger('change');
    }
    break;
  }
}
function quickValidate(field) {
  try {
    var form = $(field).parents('form');
    var i = field.name.match(/.*:(\d+)/)[1];
    lockEye(form,i);
  } catch (err) { }
  return field.reportValidity();
}
function setPool(form,vtun) {
  // perform standard field validation on Network and Mask before custom validation
  field = form.find('input[name="gui:Network:0"]')[0];
  field.setCustomValidity('');
  if (!quickValidate(field)) return false;
  field2 = form.find('input[name="gui:Mask:0"]')[0];
  if (!quickValidate(field2)) return false;
  // ensure Local tunnel network pool is a pool address
  var network = form.find('input[name="gui:Network:0"]').val();
  var mask = form.find('select[name="gui:Mask:0"]').val()||24;
  var networkSubnet = network.ip2long() & (0x100000000-2**(32-mask));
  if (network && network.ip2long() !== networkSubnet) {
    network = networkSubnet.long2ip();
    form.find('input[name="gui:Network:0"]').val(network);
  }
  // ensure Local tunnel network pool is not already in use on this server
  var subnets = '<?=$subnets?>';
  if (network && subnets.includes(network+"/")) {
    field.setCustomValidity("_(The Local tunnel network pool cannot be in)_ "+subnets);
    field.reportValidity();
    return false;
  }
  // remove existing IPv4 addresses in AllowedIP list
  form.find('input[name^="AllowedIPs:"]').each(function(){
    var list = $(this).val().replace(/ +/g,'').split(',');
    list = list.filter(ipv6);
    $(this).val(list.join(', '));
  });
  // update existing IPv4 addresses with new pool address
  netbase[vtun] = (network||netpool[vtun]).ip2long() & (0x100000000-2**(32-mask));
  var assign = netbase[vtun];
  form.find('input[name^="Address:"]').each(function(){
    ++assign;
    var i = $(this).attr('name').split(':')[1];
    $(this).val((assign).long2ip()).trigger('change');
  });
}
function setPool6(form,vtun) {
  // perform standard field validation on Network6 and Mask6 before custom validation
  field = form.find('input[name="gui:Network6:0"]')[0];
  field.setCustomValidity('');
  if (!quickValidate(field)) return false;
  field2 = form.find('input[name="gui:Mask6:0"]')[0];
  if (!quickValidate(field2)) return false;
  // ensure Local tunnel network pool is a pool address
  var network6 = form.find('input[name="gui:Network6:0"]').val();
  var mask6 = form.find('select[name="gui:Mask6:0"]').val()||64;
  // this logic only handles IPv6 mask of 64. for other masks, assume the user knows what they are doing.
  if (network6 && mask6 === 64) {
    var network6Subnet = network6.match(/((.*?):){4}/) ? network6.match(/((.*?):){4}/)[0].slice(0,-1) : "";
    if (network6Subnet && network6 !== network6Subnet+"::") {
      network6 = network6Subnet+"::";
      form.find('input[name="gui:Network6:0"]').val(network6);
    }
  }
  // ensure Local tunnel network pool is not already in use on this server
  var subnets6 = '<?=$subnets6?>';
  if (network6 && subnets6.includes(network6+"/")) {
    field.setCustomValidity("_(The Local tunnel network pool IPv6 cannot be in)_ "+subnets6);
    field.reportValidity();
    return false;
  }
  // remove existing IPv6 addresses in AllowedIP list
  form.find('input[name^="AllowedIPs:"]').each(function(){
    var list = $(this).val().replace(/ +/g,'').split(',');
    list = list.filter(ipv4);
    $(this).val(list.join(', '));
  });
  // update existing IPv6 addresses with new pool address
  netbase6[vtun] = network6||netpool6[vtun];
  var assign = 0;
  form.find('input[name^="Address6:"]').each(function(){
    ++assign;
    var i = $(this).attr('name').split(':')[1];
    $(this).val(netbase6[vtun]+assign).trigger('change');
  });
}
function verifyInSubnet(field) {
  // perform standard field validation before custom validation
  field.setCustomValidity('');
  if (!quickValidate(field)) return false;
  // ensure this IP address is in the Local tunnel network pool
  var form = $(field).parents('form');
  // note: if network or mask are invalid, subnet calculation will be unpredictable
  // not going to validate them here as the UI would be confusing
  var network = form.find('input[name="gui:Network:0"]').val()||form.find('input[name="gui:Network:0"]').prop('placeholder');
  var mask = form.find('input[name="gui:Mask:0"]').val()||24;
  var addr = $(field).val();
  var networkSubnet = network.ip2long() & (0x100000000-2**(32-mask));
  var addrSubnet = addr.ip2long() & (0x100000000-2**(32-mask));
  if (networkSubnet !== addrSubnet) {
    field.setCustomValidity(addr+" _(is not in the)_ "+networkSubnet.long2ip()+"/"+mask+" _(subnet)_");
    field.reportValidity();
    return false;
  }
  return true;
}
function verifyInSubnet6(field) {
  // perform standard field validation before custom validation
  field.setCustomValidity('');
  if (!quickValidate(field)) return false;
  // ensure this IPv6 address is in the Local tunnel network pool IPv6
  var form = $(field).parents('form');
  var network6 = form.find('input[name="gui:Network6:0"]').val()||form.find('input[name="gui:Network6:0"]').prop('placeholder');
  var mask6 = form.find('input[name="gui:Mask6:0"]').val()||64;
  if (mask6 !== 64) {
    // this logic only handles IPv6 mask of 64. for other masks, assume the user knows what they are doing.
    return true;
  }
  var network6Subnet = network6.match(/((.*?):){4}/) ? network6.match(/((.*?):){4}/)[0].slice(0,-1) : "";
  var addr6 = $(field).val();
  var addr6Subnet = addr6.match(/((.*?):){4}/) ? addr6.match(/((.*?):){4}/)[0].slice(0,-1) : "";
  if (!network6Subnet || network6Subnet !== addr6Subnet) {
    field.setCustomValidity(addr6+" _(is not in the)_ "+network6Subnet+"/"+mask6+" _(subnet)_");
    field.reportValidity();
    return false;
  }
  return true;
}
function setAllow(form,subnet,i) {
  var input = form.find('input[name="AllowedIPs:'+i+'"]');
  var type = form.find('select[name="TYPE:'+i+'"]').val();
  var prot = form.find('select[name="PROT:0"]').val();
  if (type < 7) {
    var list = input.val().replace(/ +/g,'').split(',');
    var n = prot=='46' ? 0 : (list.length > 1 ? 2 : 1);
    list.splice(0,n);
    list.unshift(subnet);
    list = [...new Set(list)];
    list = list.filter(nodefault);
    if (n > 0) list = list.filter(ipv4);
  } else {
    var list = prot!='46' ? ['0.0.0.0/0'] : ['0.0.0.0/0','::/0'];
  }
  input.val(list.join(', '));
  lockEye(form,i);
}
function setAllow6(form,subnet6,i) {
  var input = form.find('input[name="AllowedIPs:'+i+'"]');
  var type = form.find('select[name="TYPE:'+i+'"]').val();
  var prot = form.find('select[name="PROT:0"]').val();
  if (type < 7) {
    var list = input.val().replace(/ +/g,'').split(',');
    var n = prot=='46' ? 0 : (list.length > 1 ? 2 : 1);
    list.splice(0,n);
    list.unshift(subnet6);
    list = [...new Set(list)];
    list = list.filter(nodefault6);
    if (n > 0) list = list.filter(ipv6);
  } else {
    var list = prot!='46' ? ['::/0'] : ['0.0.0.0/0','::/0'];
  }
  input.val(list.join(', '));
  lockEye(form,i);
}
function ping(form,button,field) {
  $(button).val('Pinging...');
  $.post('/webGui/include/update.wireguard.php',{'#cmd':'ping','#addr':form.find(field).val().replace(/\/.+$/,'')},function(reply){
    if (reply) {
      $(button).addClass('ok').val("_(Replied)_");
    } else {
      $(button).addClass('nok').val("_(No Reply)_");
    }
    setTimeout(function(){$(button).removeClass('ok nok').val("_(Ping)_")},3000);
  });
}
function WGconfig(icon,file,path) {
  if (!$(icon).hasClass('key-off')) openChanges('wg_config '+file+' '+path, "_(WireGuard Configuration)_");
}
function highlight(form,input,i) {
  $(input).css({'color':'#e68a00'});
  lockEye(form,i);
}
function showRemark(form) {
  var upnp = form.find('select[name="UPNP:0"]').val();
  var vpn = 0;
  form.find('select[name^="TYPE:"]').each(function(){if ($(this).val()>=7 && vpn==0) vpn = $(this).val();});
  if (upnp=='' || vpn > 0) form.find('span.remark').hide(); else form.find('span.remark').show();
  if (upnp=='' && vpn < 7) form.find('span.upnp').show(); else form.find('span.upnp').hide();
}
function showRoute(form,vtun,i) {
  var nat = form.find('select[name="NAT:0"]').val();
  var vpn = 0, lan = false;
  form.find('select[name^="TYPE:"]').each(function(){
    if ($(this).val()>=7 && vpn==0) vpn = $(this).val();
    else lan |= $(this).val()=='6' || $(this).val() % 2;
  });
  if (nat=='no' && vpn==0 && lan) {
    $('span#my-static1-'+vtun).show();
    $('span#my-static2-'+vtun).hide();
  } else {
    $('span#my-static1-'+vtun).hide();
    if (lan) $('span#my-static2-'+vtun).show(); else $('span#my-static2-'+vtun).hide();
  }
  if (i!=null) lockEye(form,i);
}
function showAccess(form,i,n) {
  switch (n) {
    case '0':
      switch (form.find('select[name="PROT:0"]').val()) {
        case '6' : var peer_addr = form.find('input[name="Address6:0"]').val()+"</b>"; break;
        case '46': var peer_addr = form.find('input[name="Address:0"]').val()+"</b> _(or)_ <b>"+form.find('input[name="Address6:0"]').val()+"</b>"; break;
        default  : var peer_addr = form.find('input[name="Address:0"]').val()+"</b>"; break;
      }
      form.find('span#access-type-'+i).html("_(Remark)_: _(connect to this server using IP address)_ <b>"+peer_addr);
      break;
    case '1':
    case '2':
    case '3':
    case '6': form.find('span#access-type-'+i).html("_(Remark)_: _(ensure the peer network is different from)_ <b><?=exec("ip -4 route show dev $link scope link|awk '{print \$1;exit}'")?></b>"); break;
    case '4':
      switch (form.find('select[name="PROT:0"]').val()) {
        case '6' : var peer_net = form.find('input[name="gui:Network6:0"]').val()+'/'+(form.find('input[name="gui:Mask6:0"]').val()||64)+"</b>"; break;
        case '46': var peer_net = form.find('input[name="gui:Network:0"]').val()+'/'+(form.find('input[name="gui:Mask:0"]').val()||24)+"</b> _(or)_ <b>"+form.find('input[name="gui:Network6:0"]').val()+'/'+(form.find('input[name="gui:Mask6:0"]').val()||64)+"</b>"; break;
        default  : var peer_net = form.find('input[name="gui:Network:0"]').val()+'/'+(form.find('input[name="gui:Mask:0"]').val()||24)+"</b>"; break;
      }
      form.find('span#access-type-'+i).html("_(Remark)_: _(connect to any device on the VPN tunnel)_ <b>"+peer_net);
      break;
    case '5': form.find('span#access-type-'+i).html("_(Remark)_: _(ensure the peer networks are different from)_ <b><?=exec("ip -4 route show dev $link scope link|awk '{print \$1;exit}'")?></b>"); break;
    case '7': form.find('span#access-type-'+i).html("_(Remark)_: _(this must be the only peer in the tunnel and sole active tunnel when in use)_"); break;
    case '8': form.find('span#access-type-'+i).html("_(Remark)_: _(VPN tunnel for docker containers only)_"); break;
  }
}
function portRemark(form,vtun,val) {
  $('#my-port-'+vtun).text(val);
  var port = form.find('input[name="gui:ListenPort:0"]').val()||netport[vtun];
  form.find('input[name^="gui:ListenPort:"]').each(function(i) {
    if (i>0 && form.find('input[name="gui:Endpoint:'+i+'"]').val()) $(this).attr('placeholder',port);
  });
}
function openClose(form,icon,zone) {
  if (icon) {
    form.find(zone).toggle('slow');
    if ($(icon).hasClass('fa-chevron-down')) {
      // advanced view
      form.find(zone.replace('div','input')).show('slow');
      $(icon).removeClass('fa-chevron-down').addClass('fa-chevron-up');
      if (!form.find('input[name="PublicKey:'+zone.replace('div.zone','')+'"]').val()) {
        form.find(zone.replace('zone','key')).show();
        form.find(zone.replace('div','i')).removeClass('key-off').addClass('key-off');
      }
    } else {
      // basic view
      $(icon).removeClass('fa-chevron-up').addClass('fa-chevron-down');
      if (form.find('input[name="PublicKey:'+zone.replace('div.zone','')+'"]').val()) {
        form.find(zone.replace('div','input')).hide('slow');
        form.find(zone.replace('zone','key')).hide();
        form.find(zone.replace('div','i')).removeClass('key-off');
      }
    }
  } else {
    if (!form.find(zone.replace('div.key','i.zone')).hasClass('key-off')) form.find(zone).toggle('slow');
  }
}
function blockToggle(vtun) {
  $('div#block-'+vtun).toggle('slow');
  if ($('i#block-'+vtun).hasClass('fa-chevron-up')) {
    $('i#block-'+vtun).removeClass('fa-chevron-up').addClass('fa-chevron-down');
    $.cookie('block-'+vtun,'hide',{expires:3650});
  } else {
    $('i#block-'+vtun).removeClass('fa-chevron-down').addClass('fa-chevron-up');
    $.removeCookie('block-'+vtun);
  }
}
function importFile(file) {
  var reader = new FileReader();
  reader.readAsText(file,'UTF-8');
  reader.onload = function(e){$.post('/webGui/include/update.wireguard.php',{'#cmd':'import','#name':'<?=$tower?>','#data':e.target.result},function(vtun){clearTunnel(vtun);});};
}
function isPublic(ipv4) {
  var rfc1918 = ['10.0.0.0/8','172.16.0.0/12','192.168.0.0/16'];
  for (var i=0,rfc; rfc=rfc1918[i]; i++) {
    var subnet = rfc.split('/');
    if (subnet[0].ip2long() == ipv4.ip2long() & (0x100000000-2**(32-subnet[1]))) return false;
  }
  return true;
}
function getPublicIP(ip,wg,protocol) {
  $.post('/webGui/include/update.wireguard.php',{'#cmd':'public','#ip':ip,'#prot':protocol},function(x){
    var endpoints = [<?=concat($endpoints)?>];
    var ips = x.split(';');
    var wgx_ipv4 = ips[0];
    var ext_ipv4 = ips[1];
    var wgx_ipv6 = ips[2];
    var ext_ipv6 = ips[3];
    if ((protocol==''||protocol=='46') && ext_ipv4 && ip) {
      if (!wgx_ipv4) {
        if (!wgx_ipv6) $('#endpoint4-'+wg).html("<dt>&nbsp;</dt><dd><span class='input'></span>  <span class='block'>_(Remark)_: _(The Local endpoint does not resolve to an IPv4 address)_. _(In most cases, this should be your public WAN IPv4)_: <b>"+ext_ipv4+"</b></span></dd>\n").show();
      } else if (wgx_ipv4 != ext_ipv4) {
        $('#endpoint4-'+wg).html("<dt>&nbsp;</dt><dd><span class='input'></span>  <span class='block'>_(Remark)_: _(The Local endpoint resolves to)_ <b>"+wgx_ipv4+".</b> _(In most cases, this should be your public WAN IPv4 instead)_: <b>"+ext_ipv4+"</b></span></dd>\n").show();
      } else if (endpoints.includes(wgx_ipv4) && isPublic(wgx_ipv4)) {
        $('#endpoint4-'+wg).html("<dt>&nbsp;</dt><dd><span class='input'></span>  <span class='block'>_(Remark)_: _(The Local endpoint resolves to)_ <b>"+wgx_ipv4+".</b> _(Your Unraid Server is reachable from the internet)_</span></dd>\n").show();
      }
    }
    if ((protocol=='6'||protocol=='46') && ext_ipv6 && ip) {
      if (!wgx_ipv6) {
        if (!wgx_ipv4) $('#endpoint6-'+wg).html("<dt>&nbsp;</dt><dd><span class='input'></span>  <span class='block'>_(Remark)_: _(The Local endpoint does not resolve to an IPv6 address)_. _(In most cases, this should be your public WAN IPv6)_: <b>"+ext_ipv6+"</b></span></dd>\n").show();
      } else if (wgx_ipv6 != ext_ipv6) {
        $('#endpoint6-'+wg).html("<dt>&nbsp;</dt><dd><span class='input'></span>  <span class='block'>_(Remark)_: _(The Local endpoint resolves to)_ <b>"+wgx_ipv6+".</b> _(In most cases, this should be your public WAN IPv6 instead)_: <b>"+ext_ipv6+"</b></span></dd>\n").show();
      } else if (endpoints.includes(wgx_ipv6)) {
        $('#endpoint6-'+wg).html("<dt>&nbsp;</dt><dd><span class='input'></span>  <span class='block'>_(Remark)_: _(The Local endpoint resolves to)_ <b>"+wgx_ipv6+".</b> _(Your Unraid Server is reachable from the internet)_</span></dd>\n").show();
      }
    }
<?if (!$public):?>
    $('input[name="#internet"]').val(ext_ipv4||ext_ipv6);
    $('input[name="Endpoint:0"]').each(function(){if ($(this).attr('placeholder')=='') $(this).attr('placeholder',ext_ipv4||ext_ipv6);});
<?endif;?>
  });
}

// keep tunnel states in global variable
var tstate = [];
tstate['wg0'] = "<?=$check_wg0 ? 'active' : 'passive'?>";

var statistics = new NchanSubscriber('/sub/wireguard',{subscriber:'websocket'});
statistics.on('message', function(data) {
  var list = [];
  var rows = data.split('\0');
  var x = 0; var vtun = '';
  // get all existing tunnels
  $('div[id^="block-wg"]').each(function(){list.push($(this).prop('id').split('-')[1]);});
  // update active tunnels
  for (var i=0,row; row=rows[i]; i++) {
    var info = row.split(';');
    if (info[0] != vtun) {
      vtun = info[0];
      // remove tunnel from inactive list
      for (var n=0,done; done=list[n]; n++) if (vtun==done) list.splice(n,1);
      x = 1;
    } else x++;
    if (info[1] > 0) {
      var hr = parseInt(info[1]/3600);
      var mn = parseInt(info[1]/60%60);
      var sc = parseInt(info[1]%60);
      $('.hs-'+vtun+'-'+x).text(sprintf("_(%s ago)_",plus(hr,"_(hour)_","_(hours)_",false)+plus(mn,"_(minute)_","_(minutes)_",false)+plus(sc,"_(second)_","_(seconds)_",true)));
    } else {
      $('.hs-'+vtun+'-'+x).text("_(not received)_");
    }
    $('.rx-'+vtun+'-'+x).text(info[2]);
    $('.tx-'+vtun+'-'+x).text(info[3]);
  }
  // update inactive tunnels
  for (var i=0,vtun; vtun=list[i]; i++) {
    $('span[class^="hs-'+vtun+'"]').text("_(tunnel is inactive)_");
    $('span[class^="tx-'+vtun+'"]').text('---');
    $('span[class^="rx-'+vtun+'"]').text('---');
  }
});

$(function(){
  var form = $(document.wg0);
  var ctrl = "<span class='status vhshift hshift'><i id='block-wg0' class='fa fa-fw fa-chevron-up' style='cursor:pointer' onclick='blockToggle(&quot;wg0&quot;)'></i></span>";
  ctrl += "<span class='even wide'><span class='status vshift label'>_(Autostart)_</span><span class='status vhshift'><input type='checkbox' id='start-wg0' style='display:none'<?=$start_wg0?' checked':''?>></span></span>";
  ctrl += "<span class='even'><span class='status vhshift'><input type='checkbox' id='view-wg0' style='display:none'></span></span>";
  ctrl += "<span class='even'><span class='status vhshift'><input type='checkbox' id='toggle-wg0' style='display:none'></span></span>";
  statistics.start();
  getPublicIP($('#endpoint-wg0').val(),'wg0',$('#protocol-wg0').val());
  $('div.content').prepend('<div class="preset"><input type="button" value="_(Import Tunnel)_" onclick="$(&apos;input#file&apos;).trigger(&apos;click&apos;);"><input type="button" value="_(Add Tunnel)_" onclick="addTunnel()";<?=$this_wg0?"":" disabled"?>></div>');
  $('div.title').eq(0).find('span.left').append(ctrl);
  $.post('/webGui/include/update.wireguard.php',{'#cmd':'upnp','#gw':"<?=$$ethX['GATEWAY:0']?>",'#link':"<?=$link?>"},function(url){
    if (url) {
      $('div.upnp').show();
      $.cookie('upnp',url,{expires:3650});
      var upnp = 'ON';
    } else {
      $('div.upnp').hide();
      $.removeCookie('upnp');
      var upnp = 'OFF';
    }
    $('span.upnp').each(function(){
      var vtun = $(this).attr('class').split(' ')[1];
      $.post('/webGui/include/update.wireguard.php',{'#cmd':'upnpc','#xml':xml,'#vtun':vtun,'#link':'<?=$link?>','#ip':'<?=$server?>','#wg':tstate[vtun]},function(data){$('span.upnp.'+vtun).text(data);});
    });
    if (xml.desc() != url.desc()) {
      xml = url;
      swal({title:"_(UPnP state changed to)_ "+upnp,text:"_(Please consider re-applying all configurations)_<br>(_(enable advanced settings view)_)",type:'warning',html:true});
    }
  });
  $('#start-wg0').switchButton({labels_placement:'left',off_label:"_(Off)_",on_label:"_(On)_",clear:false});
  $('#start-wg0').change(function(){
    var start = $('#start-wg0').is(':checked') ? 'on' : 'off';
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'autostart','#start':start,'#vtun':'wg0'});
  });
  $('#toggle-wg0').switchButton({labels_placement:'left',off_label:"_(Inactive)_",on_label:"_(Active)_",checked:<?=$check_wg0?>});
  $('#toggle-wg0').change(function(e){
<?if ($this_wg0):?>
    e.preventDefault();
    e.stopPropagation();
    var wg = $('#toggle-wg0').is(':checked') ? 'start' : 'stop';
    var type = 0;
    $('div[id^="index-wg0-"]').each(function(){
      var temp = $(this).find('select[name^="TYPE:"]').val();
      if (temp >= 7 && type==0) type = temp;
    });
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'toggle','#wg':wg,'#vtun':'wg0','#type':type},function(ok){
      if (wg=='start') {
        if (ok==0) tstate['wg0']='active'; else $('#toggle-wg0').switchButton({checked:false});
      } else {
        if (ok==0) tstate['wg0']=''; else $('#toggle-wg0').switchButton({checked:true});
      }
<?if (empty($wg0['UPNP:0'])):?>
      $.post('/webGui/include/update.wireguard.php',{'#cmd':'upnpc','#xml':xml,'#vtun':'wg0','#link':'<?=$link?>','#ip':'<?=$server?>','#wg':tstate['wg0']},function(data){$('span.upnp.wg0').text(data);});
<?endif;?>
    });
<?else:?>
    $('#toggle-wg0').prop('checked',false).trigger('change');
<?endif;?>
  });
  if ($.cookie('view-wg0')=='advanced') {
    $('.advanced.wg0').show();
    form.find('i.fa-chevron-down').removeClass('fa-chevron-down').addClass('fa-chevron-up');
    form.find('input[class*="zone"]').show();
    form.find('i[class*="zone"]').each(function(i){if (!form.find('input[name="PublicKey:'+i+'"]').val()) {
      $('div.wg0.key'+i).show();
      $(this).removeClass('key-off').addClass('key-off');
    }});
  }
  $('#view-wg0').switchButton({labels_placement:'left',off_label:"_(Basic)_",on_label:"_(Advanced)_",checked:$.cookie('view-wg0')=='advanced'});
  $('#view-wg0').change(function(){
    if ($.cookie('view-wg0')==null) {
      // advanced view
      $.cookie('view-wg0','advanced',{expires:3650});
      $('.advanced.wg0').show('slow');
      form.find('input[class*="zone"]').show('slow');
      form.find('i.fa-chevron-down').removeClass('fa-chevron-down').addClass('fa-chevron-up');
      form.find('i[class*="zone"]').each(function(i){if (!form.find('input[name="PublicKey:'+i+'"]').val()) {
        $('div.wg0.key'+i).show('slow');
        $(this).removeClass('key-off').addClass('key-off');
      }});
    } else {
      // basic view
      $.removeCookie('view-wg0');
      $('.advanced.wg0').hide('slow');
      form.find('i.fa-chevron-up').removeClass('fa-chevron-up').addClass('fa-chevron-down');
      form.find('i[class*="zone"]').each(function(i){if (form.find('input[name="PublicKey:'+i+'"]').val()) {
        form.find('input[class$="zone'+i+'"]').hide('slow');
        $('div.wg0.key'+i).hide('slow');
        $(this).removeClass('key-off');
      }});
    }
  });
  showRemark(form);
  setProtocol(form,'wg0');
  form.find('input[name^="Address:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    if (i > 0) $(this).on('input change',function(){form.find('.ping-button1-'+i).prop('disabled',$(this).val()=='');});
  });
  form.find('input[name^="Address6:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    if (i > 0) $(this).on('input change',function(){form.find('.ping-button6-'+i).prop('disabled',$(this).val()=='');});
  });
  form.find('input[name^="gui:Endpoint:"]').each(function(){
    var i = $(this).attr('name').split(':')[2];
    $(this).on('input change',function(){
      form.find('.ping-button2-'+i).prop('disabled',$(this).val()=='');
    });
  });
  if (!$.cookie('block-wg0')) $('div#block-wg0').show(); else $('i#block-wg0').removeClass('fa-chevron-up').addClass('fa-chevron-down');
  if (xml) {
    $('div.upnp.wg0').show();
<?if (empty($wg0['UPNP:0'])):?>
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'upnpc','#xml':xml,'#vtun':'wg0','#link':'<?=$link?>','#ip':'<?=$server?>','#wg':$.cookie('my-wg0')||''},function(data){$('span.upnp.wg0').text(data);});
<?endif;?>
  } else {
    form.find('select[name="UPNP:0"]').val('no');
  }
  var vpn = 0, lan = false
  form.find('select[name^="TYPE:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    if ($(this).val()>=7 && vpn==0) vpn = $(this).val();
    lan |= $(this).val()=='6' || $(this).val() % 2;
    form.find('input[name="DNS:'+i+'"]').attr('placeholder',$(this).val()>=7 ? "(_(not used)_)" : "(_(optional)_)");
    showAccess(form,i,$(this).val());
  });
  if (vpn > 0) {
    form.find('select[name="NAT:0"]').val('no').prop('disabled',true);
    form.find('#addpeer-wg0').prop('disabled',true);
  }
  else if (form.find('select[name="NAT:0"]').val()=='no' && lan) $('span#my-static1-wg0').show();
  else if (lan) $('span#my-static2-wg0').show();
<?if (file_exists($tmp)):?>
  setTimeout(function(){swal({title:"_(Peer update required)_",text:"<b><u>_(List of peers)_</u></b><br><span style='display:inline-block;text-align:left'><?=file_get_contents($tmp)?></span>",type:'warning',html:true});},200);
<?delete_file($tmp);?>
<?endif;?>
});
</script>
<input type='file' id='file' accept='.conf' onchange='importFile(this.files[0])' style='display:none'>
<div markdown="1" id="block-wg0" style="display:none">
<form markdown="1" name="wg0" autocomplete="off" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareSettings($(this),'wg0')">
<input type="hidden" name="#include" value="/webGui/include/update.wireguard.php">
<input type="hidden" name="#file" value="<?=$conf_wg0?>">
<input type="hidden" name="#cfg" value="<?=$cfg_wg0?>">
<input type="hidden" name="#cmd" value="update">
<input type="hidden" name="#name" value="<?=$tower?>">
<input type="hidden" name="#vtun" value="wg0">
<input type="hidden" name="#type" value="0">
<input type="hidden" name="#wg" value="">
<input type="hidden" name="#internet" value="<?=$public?>">
<input type="hidden" name="#subnets1" value="">
<input type="hidden" name="#subnets2" value="">
<input type="hidden" name="#shared1" value="">
<input type="hidden" name="#shared2" value="">
<input type="hidden" name="#deleted" value="">
<input type="hidden" name="#locale" value="<?=$locale?>">
_(Local name)_:
: <span class="input"><input type="text" name="Name:0" class="wide" maxlength="99" value="<?=_var($wg0,"Name:0")?>" pattern="<?=$validname?>" title="_(Use only letters A-Z, digits or space,dash,underscore)_" placeholder="(_(optional)_)"></span>
  <span class="pin"><i class="fa fa-fw fa-eye eye0<?=$this_wg0?'':' key-off'?>" style="cursor:pointer" onclick="WGconfig(this,'wg0','')" title="_(View Local Config)_"></i>
  <i class="fa fa-fw fa-key zone0<?=isset($wg0['PublicKey:0'])?'':' key-off'?>" style="cursor:pointer" onclick="openClose($(document.wg0),null,'div.key0')" title="_(Toggle keys)_"></i>
  <i id="chevron-wg0-0" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="openClose($(document.wg0),this,'div.zone0')" title="_(Toggle view)_"></i></span>

:wg_local_name_help:

<div markdown="1" class="keys wg0 key0"<?=isset($wg0['PublicKey:0'])?' style="display:none">':'>'?>
_(Local private key)_:
: <span class="input"><input type="text" name="PrivateKey:0" class="wide private-0" maxlength="64" value="<?=_var($wg0,'PrivateKey:0')?>" onchange="highlight($(document.wg0),this,0)" placeholder="(_(mandatory)_)" required></span>
  <input type="button" class="form" value="_(Generate Keypair)_" onclick="keypair($(document.wg0),'0')">

:wg_generate_keypair_help:

_(Local public key)_:
: <span class="input"><input type="text" name="PublicKey:0" class="wide public-0" maxlength="64" value="<?=_var($wg0,'PublicKey:0')?>" onchange="highlight($(document.wg0),this,0)" placeholder="(_(mandatory)_)" required></span>

:wg_generate_keypair_help:

</div>
<div markdown="1" class="advanced wg0 zone0" style="display:none">
_(Network protocol)_:
: <span class="input"><select id="protocol-wg0" name="PROT:0" class="subnet" onchange="setProtocol($(document.wg0),'wg0',true)">
  <?=mk_option(_var($wg0,'PROT:0'), "", "_(IPv4 only)_")?>
  <?=mk_option(_var($wg0,'PROT:0'), "6", "_(IPv6 only)_")?>
  <?=mk_option(_var($wg0,'PROT:0'), "46", "_(IPv4 + IPv6)_")?>
  </select></span>

<div markdown="1" class="ipv4 wg0" style="display:none">
_(Local tunnel network pool)_:
<input type="hidden" name="Network:0" value="">
: <span class="input"><input type="text" name="gui:Network:0" class="subnet" maxlength="15" value="<?=explode('/',_var($wg0,'Network:0'))[0]?>" onchange="setPool($(document.wg0),'wg0')" pattern="<?=$validIP4?>" title="_(IPv4 network)_" placeholder="<?=_var($netpool,'wg0')?>">/
 <input type="number" name="gui:Mask:0" class="mask" min="1" max="32" value="<?=my_explode('/',_var($wg0,'Network:0'))[1]?>" onchange="if(quickValidate(this)) {setPool($(document.wg0),'wg0')}" placeholder="24"></span>

</div>
<div markdown="1" class="ipv6 wg0" style="display:none">
_(Local tunnel network pool IPv6)_:
<input type="hidden" name="Network6:0" value="">
: <span class="input"><input type="text" name="gui:Network6:0" class="subnet" maxlength="40" value="<?=explode('/',_var($wg0,'Network6:0'))[0]?>" onchange="setPool6($(document.wg0),'wg0')" pattern="<?=$validIP6?>" title="_(IPv6 network)_" placeholder="<?=_var($netpool6,'wg0')?>">/
 <input type="number" name="gui:Mask6:0" class="mask" min="1" max="128" value="<?=my_explode('/',_var($wg0,'Network6:0'))[1]?>" onchange="if(quickValidate(this)) {setPool6($(document.wg0),'wg0')}" placeholder="64"></span>

</div>
:wg_local_tunnel_network_pool_help:

<div markdown="1" class="ipv4 wg0" style="display:none">
_(Local tunnel address)_:
: <span class="input"><input type="text" name="Address:0" class="subnet" maxlength="15" value="<?=_var($wg0,'Address:0')?:long2ip(_var($netbase,'wg0')+1)?>" onchange="verifyInSubnet(this)" pattern="<?=$validIP4?>" title="_(IPv4 address)_"></span>

:wg_local_tunnel_address_help:

</div>
<div markdown="1" class="ipv6 wg0" style="display:none">
_(Local tunnel address IPv6)_:
: <span class="input"><input type="text" name="Address6:0" class="subnet" maxlength="40" value="<?=_var($wg0,'Address6:0')?:(_var($netbase6,'wg0').'1')?>" onchange="verifyInSubnet6(this)" pattern="<?=$validIP6?>" title="_(IPv6 address)_"></span>

:wg_local_tunnel_address_help:

</div>
</div>
_(Local endpoint)_:
: <span class="input"><input type="text" id="endpoint-wg0" name="Endpoint:0" class="subnet" value="<?=$vpn_wg0?'':_var($wg0,'Endpoint:0')?>" onchange="toLC(this);quickValidate(this);" pattern="<?=$validText?>" title="_(IP address or FQDN)_" placeholder="<?=$vpn_wg0?'(_(not used)_)':preg_replace('/^(.+?\.)[0-9a-zA-Z]+(\.(my)?unraid.net)$/','$1<hash>$2',$public)?>">:
  <input type="number" name="gui:ListenPort:0" class="port" min="1" max="65535" value="<?=$vpn_wg0?'':_var($wg0,'ListenPort:0')?>" onchange="if(quickValidate(this)) {portRemark($(document.wg0),'wg0',this.value)}" placeholder="<?=$vpn_wg0?'':_var($netport,'wg0')?>"></span>
  <span class="remark block" style="display:none">_(Remark)_: _(configure your router with port forwarding of port)_ **<span id="my-port-wg0"><?=_var($wg0,'ListenPort:0')?:_var($netport,'wg0')?></span>/_(UDP)_** _(to)_ **<?=$server?>:<?=_var($wg0,'ListenPort:0')?:_var($netport,'wg0')?>**</span><span class="upnp wg0 block"></span>
  <input type="hidden" name="ListenPort:0" value=""><dl id="endpoint4-wg0" style="display:none"></dl><dl id="endpoint6-wg0" style="display:none"></dl>

:wg_local_endpoint_help:

<div markdown="1" class="advanced wg0 zone0" style="display:none">
_(Local server uses NAT)_:
: <span class="input"><select name="NAT:0" class="narrow" onchange="showRoute($(document.wg0),'wg0',0)">
  <?=mk_option(_var($wg0,'NAT:0'), "", _("Yes"))?>
  <?=mk_option(_var($wg0,'NAT:0'), "no", _("No"))?>
  </select></span>
  <span id="my-static1-wg0" class="block" style="display:none">_(Remark)_: _(configure your router with a static route of)_ **<?=_var($wg0,'Network:0')?>** _(to)_ **<?=$server?>**</span><span id="my-static2-wg0" class="block" style="display:none">_(Remark)_: _(docker containers on custom networks need static routing)_ **<?=_var($wg0,'Network:0')?>** _(to)_ **<?=$server?>**</span>

:wg_local_server_uses_nat_help:

<div markdown="1" class="upnp wg0" style="display:none">
_(Local gateway uses UPnP)_:
: <span class="input"><select name="UPNP:0" class="narrow" onchange="showRemark($(document.wg0))">
  <?=mk_option(_var($wg0,'UPNP:0'), "", _("Yes"))?>
  <?=mk_option(_var($wg0,'UPNP:0'), "no", _("No"))?>
  </select></span>

:wg_local_gateway_uses_upnp_help:

</div>
_(Local tunnel firewall)_:
: <span class="input"><input type="text" name="DROP:0" class="wide" value="<?=_var($wg0,'DROP:0')?>" onchange="quickValidate(this);" pattern="<?=$validList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_, _(CIDR optional)_" placeholder="(_(optional)_)"></span>
  _(Rule)_: <select name="RULE:0" class="auto">
  <?=mk_option(_var($wg0,'RULE:0'), "", _("Deny"))?>
  <?=mk_option(_var($wg0,'RULE:0'), "1", _("Allow"))?>
  </select>

:wg_local_tunnel_firewall_help:

_(MTU size)_:
: <span class="input"><input type="number" name="MTU:0" class="trim" min="68" max="9198" value="<?=_var($wg0,'MTU:0')?>" onchange="quickValidate(this);" placeholder="(_(automatic)_)">_(bytes)_</span>

:wg_mtu_size_help:

<!--
_(DNS servers)_:
: <span class="input"><input type="text" name="DNS:0" class="wide" value="" placeholder="(_(optional)_)"></span>

> Not used at the moment. It gives errors when used together with Unraid.
-->
</div>
<input type="hidden" name="PostUp:0:0" value="<?=$postUp0?>">
<input type="hidden" name="PostUp:0:1" value="<?=$postUp1?>">
<input type="hidden" name="PostUp:0:2" value="">
<input type="hidden" name="PostDown:0:0" value="<?=$postDown0?>">
<input type="hidden" name="PostDown:0:1" value="<?=$postDown1?>">
<input type="hidden" name="PostDown:0:2" value="">

:wg_peer_configuration_help:

<div id="peers-list-wg0" style="display:none"></div>
<?foreach ($peer_wg0 as $i):?>
<div markdown="1" id="index-wg0-<?=$i?>" class="shade-<?=$display['theme']?>">
_(Peer name)_:
: <span class="input"><input type="text" name="Name:<?=$i?>" class="wide" maxlength="99" value="<?=_var($wg0,"Name:$i")?>" onchange="quickValidate(this);" pattern="<?=$validname?>" title="_(Use only letters A-Z, digits or space,dash,underscore)_" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Delete Peer)_" onclick="delPeer($(document.wg0),'#index-wg0-<?=$i?>')">
  <span class="pin"><i class="fa fa-fw fa-eye eye<?=$i?><?=(file_exists("$etc/peers/peer-$tower-wg0-$i.conf")&&isset($wg0["TYPE:$i"])&&$wg0["TYPE:$i"]<=6)?'':' key-off'?>" style="cursor:pointer" onclick="WGconfig(this,'peer-<?=$tower?>-wg0-<?=$i?>','/peers')" title="_(View Peer Config)_"></i>
  <i class="fa fa-fw fa-key zone<?=$i?><?=isset($wg0["PublicKey:$i"])?'':' key-off'?>" style="cursor:pointer" onclick="openClose($(document.wg0),null,'div.key<?=$i?>')" title="_(Toggle keys)_"></i>
  <i id="chevron-wg0-<?=$i?>" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="openClose($(document.wg0),this,'div.zone<?=$i?>')" title="_(Toggle view)_"></i></span>

:wg_peer_name_help:

_(Peer type of access)_:
: <span class="input"><select name="TYPE:<?=$i?>" class="auto" onchange="updatePeer($(document.wg0),<?=$i?>,this.value,'wg0')">
  <?=mk_option(_var($wg0,"TYPE:$i"), "0", _("Remote access to server"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "1", _("Remote access to LAN"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "2", _("Server to server access"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "3", _("LAN to LAN access"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "4", _("Server hub & spoke access"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "5", _("LAN hub & spoke access"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "6", _("Remote tunneled access"))?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "7", _("VPN tunneled access for system"),count($peer_wg0)==1?'':'disabled')?>
  <?=mk_option(_var($wg0,"TYPE:$i"), "8", _("VPN tunneled access for docker"),count($peer_wg0)==1?'':'disabled')?>
  </select></span>
  <span id="access-type-<?=$i?>" class="access-type"></span>

<?if ($i==1):?>
> ![](<?=autov('/webGui/images/wireguard-help.png')?>)
<?endif;?>

<div markdown="1" class="keys wg0 key<?=$i?>"<?=isset($wg0["PublicKey:$i"])?' style="display:none">':'>'?>
_(Peer private key)_:
: <span class="input"><input type="text" name="PrivateKey:<?=$i?>" class="wide private-<?=$i?>" maxlength="64" value="<?=_var($wg0,"PrivateKey:$i")?>" onchange="highlight($(document.wg0),this,<?=$i?>)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Keypair)_" onclick="keypair($(document.wg0),'<?=$i?>')">

:wg_generate_keypair_help:

_(Peer public key)_:
: <span class="input"><input type="text" name="PublicKey:<?=$i?>" class="wide public-<?=$i?>" maxlength="64" value="<?=_var($wg0,"PublicKey:$i")?>" onchange="highlight($(document.wg0),this,<?=$i?>)" placeholder="(_(mandatory)_)" required></span>

:wg_generate_keypair_help:

_(Peer preshared key)_:
: <span class="input"><input type="text" name="PresharedKey:<?=$i?>" class="wide preshared-<?=$i?>" maxlength="64" value="<?=_var($wg0,"PresharedKey:$i")?>" onchange="highlight($(document.wg0),this,<?=$i?>)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Key)_" onclick="presharedkey($(document.wg0),'<?=$i?>')">

:wg_peer_preshared_key_help:

</div>
<div markdown="1" class="advanced wg0 zone<?=$i?>" style="display:none">
<div markdown="1" class="ipv4 wg0" style="display:none">
_(Peer tunnel address)_:
: <span class="input"><input type="text" name="Address:<?=$i?>" class="subnet" maxlength="15" value="<?=_var($wg0,"Address:$i")?>" onchange="if(verifyInSubnet(this)){setAllow($(document.wg0),this.value,<?=$i?>)}" pattern="<?=$validIP4?>" title="_(IPv4 address)_"></span>
  <input type="button" class="form ping-button1-<?=$i?>" value="_(Ping)_" onclick="ping($(document.wg0),this,'input[name=&quot;Address:<?=$i?>&quot;]')"<?=isset($wg0["Address:$i"])?'':' disabled'?>>

</div>
<div markdown="1" class="ipv6 wg0" style="display:none">
_(Peer tunnel address IPv6)_:
: <span class="input"><input type="text" name="Address6:<?=$i?>" class="subnet" maxlength="40" value="<?=_var($wg0,"Address6:$i")?>" onchange="if(verifyInSubnet6(this)){setAllow6($(document.wg0),this.value,<?=$i?>)}" pattern="<?=$validIP6?>" title="_(IPv6 address)_"></span>
  <input type="button" class="form ping-button6-<?=$i?>" value="_(Ping)_" onclick="ping($(document.wg0),this,'input[name=&quot;Address6:<?=$i?>&quot;]')"<?=isset($wg0["Address6:$i"])?'':' disabled'?>>

</div>
:wg_peer_tunnel_address_help:

_(Peer endpoint)_:
<input type="hidden" name="Endpoint:<?=$i?>" value="">
: <span class="input"><input type="text" name="gui:Endpoint:<?=$i?>" class="subnet" value="<?=_var($wg0,"Endpoint:$i")?>" pattern="<?=$validText?>" title="_(IP address or FQDN)_" onchange="toLC(this);quickValidate(this);" <?=($vpn_wg0||(int)_var($wg0,"TYPE:$i",0)==2||(int)_var($wg0,"TYPE:$i",0)==3)?'placeholder="(_(mandatory)_)" required':'placeholder="(_(not used)_)"'?>>:
  <input type="number" name="gui:ListenPort:<?=$i?>" class="port" min="1" max="65535" value="<?=_var($wg0,"ListenPort:$i")?>" onchange="quickValidate(this);"<?=isset($wg0["Endpoint:$i"])?" placeholder=\"".(_var($wg0,'ListenPort:0')?:_var($netport,'wg0'))."\"":""?>></span>
  <input type="button" class="form ping-button2-<?=$i?>" value="_(Ping)_" onclick="ping($(document.wg0),this,'input[name=&quot;gui:Endpoint:<?=$i?>&quot;]')"<?=isset($wg0["Endpoint:$i"])?'':' disabled'?>>

:wg_peer_endpoint_help:

_(Peer allowed IPs)_:
: <span class="input"><input type="text" name="AllowedIPs:<?=$i?>" class="wide" value="<?=_var($wg0,"AllowedIPs:$i")?>" onchange="quickValidate(this);" pattern="<?=$validList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_, _(CIDR optional)_" placeholder="(_(mandatory)_)" required></span>

:wg_peer_allowed_ips_help:

_(Peer DNS server)_:
: <span class="input"><input type="text" name="DNS:<?=$i?>" class="subnet" maxlength="40" value="<?=_var($wg0,"DNS:$i")?>" onchange="quickValidate(this);" pattern="<?=$validDNSServerList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_" <?=(int)_var($wg0,"TYPE:$i",0)!=6?'placeholder="(_(optional)_)"':'placeholder="(_(mandatory)_)" required'?>></span>

:wg_peer_dns_server_help:

_(Persistent keepalive)_:
: <span class="input"><input type="number" name="PersistentKeepalive:<?=$i?>" class="trim" min="0" max="600" value="<?=_var($wg0,"PersistentKeepalive:$i")?>" onchange="quickValidate(this);" placeholder="(_(disabled)_)">_(seconds)_</span>

:wg_persistent_keepalive_help:

</div>
<span class="pin">_(Data received)_: <span class="rx-wg0-<?=$i?>">0 B</span>_(Data sent)_: <span class="tx-wg0-<?=$i?>">0 B</span><br>_(Last handshake)_: <span class="hs-wg0-<?=$i?>">_(unknown)_</span></span>
</div>
<?endforeach;?>

&nbsp;
: <input type="submit" value="_(Apply)_" onclick="return(validateForm($(document.wg0),'wg0'))" disabled><input type="button" value="_(Done)_" onclick="done()"><input type="button" id="addpeer-wg0" value="_(Add Peer)_" onclick="addPeer($(document.wg0),'wg0')">
  <input type="button" class="advanced wg0" value="_(Delete Tunnel)_" style="float:right;display:none" onclick="delTunnel('wg0')"<?=file_exists($conf_wg0)?'':' disabled'?>>
</form>
<small style="position:absolute;left:10px;top:30px">"WireGuard" and the "WireGuard" logo are registered trademarks of Jason A. Donenfeld</small>

<script markdown="1" type="text/html" id="peer-template-wg0">
<div markdown="1" id="index-wg0-INDEX" class="shade-<?=$display['theme']?>">
_(Peer name)_:
: <span class="input"><input type="text" name="Name:INDEX" class="wide" maxlength="99" value="" onchange="quickValidate(this);" pattern="<?=$validname?>" title="_(Use only letters A-Z, digits or space,dash,underscore)_" placeholder="(_(optional)_)"></span>
  <span class="pin"><i class="fa fa-fw fa-eye eyeINDEX key-off" title="_(Show Peer Config)_"></i>
  <i class="fa fa-fw fa-key zoneINDEX key-off" title="_(Toggle keys)_"></i>
  <i id="chevron-wg0-INDEX" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="openClose($(document.wg0),this,'div.zoneINDEX')" title="_(Toggle view)_"></i></span>

:wg_peer_name_help:

_(Peer type of access)_:
: <span class="input"><select name="TYPE:INDEX" class="auto" onchange="updatePeer($(document.wg0),INDEX,this.value,'wg0')">
  <?=mk_option(0, "0", _("Remote access to server"))?>
  <?=mk_option(0, "1", _("Remote access to LAN"))?>
  <?=mk_option(0, "2", _("Server to server access"))?>
  <?=mk_option(0, "3", _("LAN to LAN access"))?>
  <?=mk_option(0, "4", _("Server hub & spoke access"))?>
  <?=mk_option(0, "5", _("LAN hub & spoke access"))?>
  <?=mk_option(0, "6", _("Remote tunneled access"))?>
  <?=mk_option(0, "7", _("VPN tunneled access for system"),'disabled')?>
  <?=mk_option(0, "8", _("VPN tunneled access for docker"),'disabled')?>
  </select></span>
  <span id="access-type-INDEX" class="access-type"></span>

> ![](<?=autov('/webGui/images/wireguard-help.png')?>)

<div markdown="1" class="keys wg0 keyINDEX">
_(Peer private key)_:
: <span class="input"><input type="text" name="PrivateKey:INDEX" class="wide private-INDEX" maxlength="64" value="" onchange="highlight($(document.wg0),this,0)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Keypair)_" onclick="keypair($(document.wg0),'INDEX')">

:wg_generate_keypair_help:

_(Peer public key)_:
: <span class="input"><input type="text" name="PublicKey:INDEX" class="wide public-INDEX" maxlength="64" onchange="highlight($(document.wg0),this,0)" placeholder="(_(mandatory)_)" value="" required></span>

:wg_generate_keypair_help:

_(Peer preshared key)_:
: <span class="input"><input type="text" name="PresharedKey:INDEX" class="wide preshared-INDEX" maxlength="64" value="" onchange="highlight($(document.wg0),this,0)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Key)_" onclick="presharedkey($(document.wg0),'INDEX')">

:wg_peer_preshared_key_help:

</div>
<div markdown="1" class="advanced wg0 zoneINDEX" style="display:none">
<div markdown="1" class="ipv4 wg0" style="display:none">
_(Peer tunnel address)_:
: <span class="input"><input type="text" name="Address:INDEX" class="subnet" maxlength="15" value="" onchange="if(verifyInSubnet(this)){setAllow($(document.wg0),this.value,INDEX)}" pattern="<?=$validIP4?>" title="_(IPv4 address)_"></span>
  <input type="button" class="form ping-button1-INDEX" value="_(Ping)_" onclick="ping($(document.wg0),this,'input[name=&quot;Address:INDEX&quot;]')" disabled>

</div>
<div markdown="1" class="ipv6 wg0" style="display:none">
_(Peer tunnel address IPv6)_:
: <span class="input"><input type="text" name="Address6:INDEX" class="subnet" maxlength="40" value="" onchange="if(verifyInSubnet6(this)){setAllow6($(document.wg0),this.value,INDEX)}" pattern="<?=$validIP6?>" title="_(IPv6 address)_"></span>
  <input type="button" class="form ping-button6-INDEX" value="_(Ping)_" onclick="ping($(document.wg0),this,'input[name=&quot;Address6:INDEX&quot;]')" disabled>

</div>
:wg_peer_tunnel_address_help:

_(Peer endpoint)_:
<input type="hidden" name="Endpoint:INDEX" value="">
: <span class="input"><input type="text" name="gui:Endpoint:INDEX" class="subnet" value="" pattern="<?=$validText?>" title="_(IP address or FQDN)_" onchange="toLC(this);quickValidate(this);" placeholder="(_(not used)_)">:
  <input type="number" name="gui:ListenPort:INDEX" class="port" min="1" max="65535" value="" onchange="quickValidate(this);"></span>
  <input type="button" class="form ping-button2-INDEX" value="_(Ping)_" onclick="ping($(document.wg0),this,'input[name=&quot;gui:Endpoint:INDEX&quot;]')" disabled>

:wg_peer_endpoint_help:

_(Peer allowed IPs)_:
: <span class="input"><input type="text" name="AllowedIPs:INDEX" class="wide" value="" onchange="quickValidate(this);" pattern="<?=$validList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_, _(CIDR optional)_" placeholder="(_(mandatory)_)" required></span>

:wg_peer_allowed_ips_help:

_(Peer DNS server)_:
: <span class="input"><input type="text" name="DNS:INDEX" class="subnet" maxlength="40" value="" onchange="quickValidate(this);" pattern="<?=$validDNSServerList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_" placeholder="(_(optional)_)"></span>

:wg_peer_dns_server_help:

_(Persistent keepalive)_:
: <span class="input"><input type="number" name="PersistentKeepalive:INDEX" class="trim" min="0" max="600" value="" onchange="quickValidate(this);" placeholder="(_(disabled)_)">_(seconds)_</span>

:wg_persistent_keepalive_help:

</div>
</div>
</script>
</div>

                )

            [WGX] => Array
                (
                    [Menu] => parentname:nnn
                    [Title] => Tunnel wgX
                    [Tag] => icon-vpn
                    [file] => webGui/WGX.page
                    [root] => webGui
                    [name] => WGX
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$check_wgX = in_array('wgX',$active) ? 'true' : 'false';
$start_wgX = in_array('wgX',$autostart);
$peer_wgX  = $wgX = [];

$netpool['wgX']  = long2ip(ip2long($netpool['wg0'])+XXX*256);
$netpool6['wgX'] = str_replace(':0:0:',':XXX:0:',$netpool6['wg0']);
$netport['wgX']  = $netport['wg0']+XXX;

// read current configuration
[$conf_wgX,$cfg_wgX,$this_wgX,$vpn_wgX] = readConf($peer_wgX,$wgX,'wgX');
?>
<script>
netbase['wgX']  =  <?=_var($netbase,'wgX')?>;
netpool['wgX']  = "<?=_var($netpool,'wgX')?>";
netport['wgX']  = "<?=_var($netport,'wgX')?>";
netbase6['wgX'] = "<?=_var($netbase6,'wgX')?>";
netpool6['wgX'] = "<?=_var($netpool6,'wgX')?>";
tstate['wgX']   = "<?=$check_wgX ? 'active' : 'passive'?>";

$(function(){
  var ctrl = "<span class='status vhshift hshift'><i id='block-wgX' class='fa fa-fw fa-chevron-up' style='cursor:pointer' onclick='blockToggle(&quot;wgX&quot;)'></i></span>";
  ctrl += "<span class='even wide'><span class='status vshift label'>_(Autostart)_</span><span class='status vhshift'><input type='checkbox' id='start-wgX' style='display:none'<?=$start_wgX?' checked':''?>></span></span>";
  ctrl += "<span class='even'><span class='status vhshift'><input type='checkbox' id='view-wgX' style='display:none'></span></span>";
  ctrl += "<span class='even'><span class='status vhshift'><input type='checkbox' id='toggle-wgX' style='display:none'></span></span>";
  var form = $(document.wgX);
  getPublicIP($('#endpoint-wgX').val(),'wgX',$('#protocol-wgX').val());
  $('div.title').each(function(){if ($(this).html().indexOf('status vhshift')==-1) {$(this).find('span.left').append(ctrl);return false;}});
  $('#start-wgX').switchButton({labels_placement:'left',off_label:"_(Off)_",on_label:"_(On)_"});
  $('#start-wgX').change(function(){
    var start = $('#start-wgX').is(':checked') ? 'on' : 'off';
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'autostart','#start':start,'#vtun':'wgX'});
  });
  $('#toggle-wgX').switchButton({labels_placement:'left',off_label:"_(Inactive)_",on_label:"_(Active)_",checked:<?=$check_wgX?>});
  $('#toggle-wgX').change(function(e){
<?if ($this_wgX):?>
    e.preventDefault();
    e.stopPropagation();
    var wg = $('#toggle-wgX').is(':checked') ? 'start' : 'stop';
    var type = 0;
    $('div[id^="index-wgX-"]').each(function(){
      var temp = $(this).find('select[name^="TYPE:"]').val();
      if (temp >= 7 && type==0) type = temp;
    });
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'toggle','#wg':wg,'#vtun':'wgX','#type':type},function(ok){
      if (wg=='start') {
        if (ok==0) tstate['wgX']='active'; else $('#toggle-wgX').switchButton({checked:false});
      } else {
        if (ok==0) tstate['wgX']=''; else $('#toggle-wgX').switchButton({checked:true});
      }
<?if (empty($wgX['UPNP:0'])):?>
      $.post('/webGui/include/update.wireguard.php',{'#cmd':'upnpc','#xml':xml,'#vtun':'wgX','#link':'<?=$link?>','#ip':'<?=$server?>','#wg':tstate['wgX']},function(data){$('span.upnp.wgX').text(data);});
<?endif;?>
    });
<?else:?>
    $('#toggle-wgX').prop('checked',false).trigger('change');
<?endif;?>
  });
  if ($.cookie('view-wgX')=='advanced') {
    $('.advanced.wgX').show();
    form.find('i.fa-chevron-down').removeClass('fa-chevron-down').addClass('fa-chevron-up');
    form.find('input[class*="zone"]').show();
    form.find('i[class*="zone"]').each(function(i){if (!form.find('input[name="PublicKey:'+i+'"]').val()) {
      $('div.wgX.key'+i).show();
      $(this).removeClass('key-off').addClass('key-off');
    }});
  }
  $('#view-wgX').switchButton({labels_placement:'left',off_label:"_(Basic)_",on_label:"_(Advanced)_",checked:$.cookie('view-wgX')=='advanced'});
  $('#view-wgX').change(function(){
    if ($.cookie('view-wgX')==null) {
      // advanced view
      $.cookie('view-wgX','advanced',{expires:3650});
      $('.advanced.wgX').show('slow');
      form.find('input[class*="zone"]').show('slow');
      form.find('i.fa-chevron-down').removeClass('fa-chevron-down').addClass('fa-chevron-up');
      form.find('i[class*="zone"]').each(function(i){if (!form.find('input[name="PublicKey:'+i+'"]').val()) {
        $('div.wgX.key'+i).show('slow');
        $(this).removeClass('key-off').addClass('key-off');
      }});
    } else {
      // basic view
      $.removeCookie('view-wgX');
      $('.advanced.wgX').hide('slow');
      form.find('i.fa-chevron-up').removeClass('fa-chevron-up').addClass('fa-chevron-down');
      form.find('i[class*="zone"]').each(function(i){if (form.find('input[name="PublicKey:'+i+'"]').val()) {
        form.find('input[class$="zone'+i+'"]').hide('slow');
        $('div.wgX.key'+i).hide('slow');
        $(this).removeClass('key-off');
      }});
    }
  });
  showRemark(form);
  setProtocol(form,'wgX');
  form.find('input[name^="Address:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    if (i > 0) $(this).on('input change',function(){form.find('#ping-button1-'+i).prop('disabled',$(this).val()=='');});
  });
  form.find('input[name^="Address6:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    if (i > 0) $(this).on('input change',function(){form.find('.ping-button6-'+i).prop('disabled',$(this).val()=='');});
  });
  form.find('input[name^="gui:Endpoint:"]').each(function(){
    var i = $(this).attr('name').split(':')[2];
    $(this).on('input change',function(){
      form.find('#ping-button2-'+i).prop('disabled',$(this).val()=='');
    });
  });
  if (!$.cookie('block-wgX')) $('div#block-wgX').show(); else $('i#block-wgX').removeClass('fa-chevron-up').addClass('fa-chevron-down');
  if (xml) {
    $('div.upnp.wgX').show();
<?if (empty($wgX['UPNP:0'])):?>
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'upnpc','#xml':xml,'#vtun':'wgX','#link':'<?=$link?>','#ip':'<?=$server?>','#wg':$.cookie('my-wgX')||''},function(data){$('span.upnp.wgX').text(data);});
<?endif;?>
  } else {
    form.find('select[name="UPNP:0"]').val('no');
  }
  var vpn = 0, lan = false
  form.find('select[name^="TYPE:"]').each(function(){
    var i = $(this).attr('name').split(':')[1];
    if ($(this).val()>=7 && vpn==0) vpn = $(this).val();
    lan |= $(this).val()=='6' || $(this).val() % 2;
    form.find('input[name="DNS:'+i+'"]').attr('placeholder',$(this).val()>=7 ? "(_(not used)_)" : "(_(optional)_)");
    showAccess(form,i,$(this).val());
  });
  if (vpn > 0) {
    form.find('select[name="NAT:0"]').val('no').prop('disabled',true);
    form.find('#addpeer-wgX').prop('disabled',true);
  }
  else if (form.find('select[name="NAT:0"]').val()=='no' && lan) $('span#my-static1-wgX').show();
  else if (lan) $('span#my-static2-wgX').show();
});
</script>
<div markdown="1" id="block-wgX" style="display:none">
<form markdown="1" name="wgX" autocomplete="off" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareSettings($(this),'wgX')">
<input type="hidden" name="#include" value="/webGui/include/update.wireguard.php">
<input type="hidden" name="#file" value="<?=$conf_wgX?>">
<input type="hidden" name="#cfg" value="<?=$cfg_wgX?>">
<input type="hidden" name="#cmd" value="update">
<input type="hidden" name="#name" value="<?=$tower?>">
<input type="hidden" name="#vtun" value="wgX">
<input type="hidden" name="#type" value="0">
<input type="hidden" name="#wg" value="">
<input type="hidden" name="#internet" value="<?=$public?>">
<input type="hidden" name="#subnets1" value="">
<input type="hidden" name="#subnets2" value="">
<input type="hidden" name="#shared1" value="">
<input type="hidden" name="#shared2" value="">
<input type="hidden" name="#deleted" value="">
<input type="hidden" name="#locale" value="<?=$locale?>">
_(Local name)_:
: <span class="input"><input type="text" name="Name:0" class="wide" maxlength="99" value="<?=_var($wgX,"Name:0")?>" pattern="<?=$validname?>" title="_(Use only letters A-Z, digits or space,dash,underscore)_" placeholder="(_(optional)_)"></span>
  <span class="pin"><i class="fa fa-fw fa-eye eye0<?=$this_wgX?'':' key-off'?>" style="cursor:pointer" onclick="WGconfig(this,'wgX','')" title="_(View Local Config)_"></i>
  <i class="fa fa-fw fa-key zone0<?=isset($wgX['PublicKey:0'])?'':' key-off'?>" style="cursor:pointer" onclick="openClose($(document.wgX),null,'div.key0')" title="_(Toggle keys)_"></i>
  <i id="chevron-wgX-0" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="openClose($(document.wgX),this,'div.zone0')" title="_(Toggle view)_"></i></span>

:wg_local_name_help:

<div markdown="1" class="keys wgX key0"<?=isset($wgX['PublicKey:0'])?' style="display:none">':'>'?>
_(Local private key)_:
: <span class="input"><input type="text" name="PrivateKey:0" class="wide private-0" maxlength="64" value="<?=_var($wgX,'PrivateKey:0')?>" onchange="highlight($(document.wgX),this,0)" placeholder="(_(mandatory)_)" required></span>
  <input type="button" class="form" value="_(Generate Keypair)_" onclick="keypair($(document.wgX),'0')">

:wg_generate_keypair_help:

_(Local public key)_:
: <span class="input"><input type="text" name="PublicKey:0" class="wide public-0" maxlength="64" value="<?=_var($wgX,'PublicKey:0')?>" onchange="highlight($(document.wgX),this,0)" placeholder="(_(mandatory)_)" required></span>

:wg_generate_keypair_help:

</div>
<div markdown="1" class="advanced wgX zone0" style="display:none">
_(Network protocol)_:
: <span class="input"><select id="protocol-wgX" name="PROT:0" class="subnet" onchange="setProtocol($(document.wgX),'wgX',true)">
  <?=mk_option(_var($wgX,'PROT:0'), "", _("IPv4 only"))?>
  <?=mk_option(_var($wgX,'PROT:0'), "6", _("IPv6 only"))?>
  <?=mk_option(_var($wgX,'PROT:0'), "46", _("IPv4 + IPv6"))?>
  </select></span>

<div markdown="1" class="ipv4 wgX" style="display:none">
_(Local tunnel network pool)_:
<input type="hidden" name="Network:0" value="">
: <span class="input"><input type="text" name="gui:Network:0" class="subnet" maxlength="15" value="<?=explode('/',_var($wgX,'Network:0'))[0]?>" onchange="setPool($(document.wgX),'wgX')" pattern="<?=$validIP4?>" title="_(IPv4 network)_" placeholder="<?=_var($netpool,'wgX')?>">/
 <input type="number" name="gui:Mask:0" class="mask" min="1" max="32" value="<?=my_explode('/',_var($wgX,'Network:0'))[1]?>" onchange="if(quickValidate(this)) {setPool($(document.wgX),'wgX')}" placeholder="24"></span>

</div>
<div markdown="1" class="ipv6 wgX" style="display:none">
_(Local tunnel network pool IPv6)_:
<input type="hidden" name="Network6:0" value="">
: <span class="input"><input type="text" name="gui:Network6:0" class="subnet" maxlength="40" value="<?=explode('/',_var($wgX,'Network6:0'))[0]?>" onchange="setPool6($(document.wgX),'wgX')" pattern="<?=$validIP6?>" title="_(IPv6 network)_" placeholder="<?=_var($netpool6,'wgX')?>">/
 <input type="number" name="gui:Mask6:0" class="mask" min="1" max="128" value="<?=my_explode('/',_var($wgX,'Network6:0'))[1]?>" onchange="if(quickValidate(this)) {setPool6($(document.wgX),'wgX')}" placeholder="64"></span>

</div>
:wg_local_tunnel_network_pool_X_help:

<div markdown="1" class="ipv4 wgX" style="display:none">
_(Local tunnel address)_:
: <span class="input"><input type="text" name="Address:0" class="subnet" maxlength="15" value="<?=_var($wgX,'Address:0')?:long2ip(_var($netbase,'wgX')+1)?>" onchange="verifyInSubnet(this);" pattern="<?=$validIP4?>" title="_(IPv4 address)_"></span>

:wg_local_tunnel_address_help:

</div>
<div markdown="1" class="ipv6 wgX" style="display:none">
_(Local tunnel address IPv6)_:
: <span class="input"><input type="text" name="Address6:0" class="subnet" maxlength="40" value="<?=_var($wgX,'Address6:0')?:(_var($netbase6,'wgX').'1')?>" onchange="verifyInSubnet6(this);" pattern="<?=$validIP6?>" title="_(IPv6 address)_"></span>

:wg_local_tunnel_address_help:

</div>
</div>
_(Local endpoint)_:
: <span class="input"><input type="text" id="endpoint-wgX" name="Endpoint:0" class="subnet" value="<?=$vpn_wgX?'':_var($wgX,'Endpoint:0')?>" onchange="toLC(this);quickValidate(this);" pattern="<?=$validText?>" title="_(IP address or FQDN)_" placeholder="<?=$vpn_wgX?'(_(not used)_)':preg_replace('/^(www\.).+(\.unraid.net)$/','$1<hash>$2',$public)?>">:
  <input type="number" name="gui:ListenPort:0" class="port" min="1" max="65535" value="<?=$vpn_wgX?'':_var($wgX,'ListenPort:0')?>" onchange="if(quickValidate(this)) {portRemark($(document.wgX),'wgX',this.value)}"  placeholder="<?=$vpn_wgX?'':_var($netport,'wgX')?>"></span>
  <span class="remark block" style="display:none">_(Remark)_: _(configure your router with port forwarding of port)_ **<span id="my-port-wgX"><?=_var($wgX,'ListenPort:0')?:_var($netport,'wgX')?></span>/_(UDP)_** _(to)_ **<?=$server?>:<?=_var($wgX,'ListenPort:0')?:_var($netport,'wgX')?>**</span><span class="upnp wgX block"></span>
  <input type="hidden" name="ListenPort:0" value=""><dl id="endpoint4-wgX" style="display:none"></dl><dl id="endpoint6-wgX" style="display:none"></dl>

:wg_local_endpoint_X_help:

<div markdown="1" class="advanced wgX zone0" style="display:none">
_(Local server uses NAT)_:
: <span class="input"><select name="NAT:0" class="narrow" onchange="showRoute($(document.wgX),'wgX',0)">
  <?=mk_option(_var($wgX,'NAT:0'), "", _("Yes"))?>
  <?=mk_option(_var($wgX,'NAT:0'), "no", _("No"))?>
  </select></span>
  <span id="my-static1-wgX" class="block" style="display:none">_(Remark)_: _(configure your router with a static route of)_ **<?=_var($wgX,'Network:0')?>** _(to)_ **<?=$server?>**</span><span id="my-static2-wgX" class="block" style="display:none">_(Remark)_: _(docker containers on custom networks need static routing)_ **<?=_var($wgX,'Network:0')?>** _(to)_ **<?=$server?>**</span>

:wg_local_server_uses_nat_help:

<div markdown="1" class="upnp wg0" style="display:none">
_(Local gateway uses UPnP)_:
: <span class="input"><select name="UPNP:0" class="narrow" onchange="showRemark($(document.wgX))">
  <?=mk_option(_var($wgX,'UPNP:0'), "", _("Yes"))?>
  <?=mk_option(_var($wgX,'UPNP:0'), "no", _("No"))?>
  </select></span>

:wg_local_gateway_uses_upnp_help:

</div>
_(Local tunnel firewall)_:
: <span class="input"><input type="text" name="DROP:0" class="wide" value="<?=_var($wgX,'DROP:0')?>" onchange="quickValidate(this);" pattern="<?=$validList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_, _(CIDR optional)_" placeholder="(_(optional)_)"></span>
  _(Rule)_: <select name="RULE:0" class="auto">
  <?=mk_option(_var($wgX,'RULE:0'), "", _("Deny"))?>
  <?=mk_option(_var($wgX,'RULE:0'), "1", _("Allow"))?>
  </select>

:wg_local_tunnel_firewall_help:

_(MTU size)_:
: <span class="input"><input type="number" name="MTU:0" class="trim" min="68" max="9198" value="<?=_var($wgX,'MTU:0')?>" onchange="quickValidate(this);" placeholder="(_(automatic)_)">_(bytes)_</span>

:wg_mtu_size_help:

<!--
_(DNS servers)_:
: <span class="input"><input type="text" name="DNS:0" class="wide" value="" placeholder="(_(optional)_)"></span>

> Not used at the moment. It gives errors when used together with Unraid.
-->
</div>
<input type="hidden" name="PostUp:0:0" value="<?=$postUp0?>">
<input type="hidden" name="PostUp:0:1" value="<?=$postUp1?>">
<input type="hidden" name="PostUp:0:2" value="">
<input type="hidden" name="PostDown:0:0" value="<?=$postDown0?>">
<input type="hidden" name="PostDown:0:1" value="<?=$postDown1?>">
<input type="hidden" name="PostDown:0:2" value="">

:wg_peer_configuration_help:

<div id="peers-list-wgX" style="display:none"></div>
<?foreach ($peer_wgX as $i):?>
<div markdown="1" id="index-wgX-<?=$i?>" class="shade-<?=$display['theme']?>">
_(Peer name)_:
: <span class="input"><input type="text" name="Name:<?=$i?>" class="wide" maxlength="99" value="<?=_var($wgX,"Name:$i")?>" onchange="quickValidate(this);" pattern="<?=$validname?>" title="_(Use only letters A-Z, digits or space,dash,underscore)_" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Delete Peer)_" onclick="delPeer($(document.wgX),'#index-wgX-<?=$i?>')">
  <span class="pin"><i class="fa fa-fw fa-eye eye<?=$i?><?=(file_exists("$etc/peers/peer-$tower-wgX-$i.conf")&&isset($wgX["TYPE:$i"])&&$wgX["TYPE:$i"]<=6)?'':' key-off'?>" style="cursor:pointer" onclick="WGconfig(this,'peer-<?=$tower?>-wgX-<?=$i?>','/peers')" title="_(View Peer Config)_"></i>
  <i class="fa fa-fw fa-key zone<?=$i?><?=isset($wgX["PublicKey:$i"])?'':' key-off'?>" style="cursor:pointer" onclick="openClose($(document.wgX),null,'div.key<?=$i?>')" title="_(Toggle keys)_"></i>
  <i id="chevron-wgX-<?=$i?>" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="openClose($(document.wgX),this,'div.zone<?=$i?>')" title="_(Toggle view)_"></i></span>

:wg_peer_name_help:

_(Peer type of access)_:
: <span class="input"><select name="TYPE:<?=$i?>" class="auto" onchange="updatePeer($(document.wgX),<?=$i?>,this.value,'wgX')">
  <?=mk_option(_var($wgX,"TYPE:$i"), "0", _("Remote access to server"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "1", _("Remote access to LAN"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "2", _("Server to server access"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "3", _("LAN to LAN access"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "4", _("Server hub & spoke access"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "5", _("LAN hub & spoke access"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "6", _("Remote tunneled access"))?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "7", _("VPN tunneled access for system"),count($peer_wgX)==1?'':'disabled')?>
  <?=mk_option(_var($wgX,"TYPE:$i"), "8", _("VPN tunneled access for docker"))?>
  </select></span>
  <span id="access-type-<?=$i?>" class="access-type"></span>

<?if ($i==1):?>
> ![](<?=autov('/webGui/images/wireguard-help.png')?>)
<?endif;?>

<div markdown="1" class="keys wgX key<?=$i?>"<?=isset($wgX["PublicKey:$i"])?' style="display:none">':'>'?>
_(Peer private key)_:
: <span class="input"><input type="text" name="PrivateKey:<?=$i?>" class="wide private-<?=$i?>" maxlength="64" value="<?=_var($wgX,"PrivateKey:$i")?>" onchange="highlight($(document.wgX),this,<?=$i?>)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Keypair)_" onclick="keypair($(document.wgX),'<?=$i?>')">

:wg_generate_keypair_help:

_(Peer public key)_:
: <span class="input"><input type="text" name="PublicKey:<?=$i?>" class="wide public-<?=$i?>" maxlength="64" value="<?=_var($wgX,"PublicKey:$i")?>" onchange="highlight($(document.wgX),this,<?=$i?>)" placeholder="(_(mandatory)_)" required></span>

:wg_generate_keypair_help:

_(Peer preshared key)_:
: <span class="input"><input type="text" name="PresharedKey:<?=$i?>" class="wide preshared-<?=$i?>" maxlength="64" value="<?=_var($wgX,"PresharedKey:$i")?>" onchange="highlight($(document.wgX),this,<?=$i?>)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Key)_" onclick="presharedkey($(document.wgX),'<?=$i?>')">

:wg_peer_preshared_key_help:

</div>
<div markdown="1" class="advanced wgX zone<?=$i?>" style="display:none">
<div markdown="1" class="ipv4 wgX" style="display:none">
_(Peer tunnel address)_:
: <span class="input"><input type="text" name="Address:<?=$i?>" class="subnet" maxlength="15" value="<?=_var($wgX,"Address:$i")?>" onchange="if(verifyInSubnet(this)){setAllow($(document.wgX),this.value,<?=$i?>)}" pattern="<?=$validIP4?>" title="_(IPv4 address)_"></span>
  <input type="button" class="form ping-button1-<?=$i?>" value="_(Ping)_" onclick="ping($(document.wgX),this,'input[name=&quot;Address:<?=$i?>&quot;]')"<?=isset($wgX["Address:$i"])?'':' disabled'?>>

</div>
<div markdown="1" class="ipv6 wgX" style="display:none">
_(Peer tunnel address IPv6)_:
: <span class="input"><input type="text" name="Address6:<?=$i?>" class="subnet" maxlength="40" value="<?=_var($wgX,"Address6:$i")?>" onchange="if(verifyInSubnet6(this)){setAllow6($(document.wgX),this.value,<?=$i?>)}" pattern="<?=$validIP6?>" title="_(IPv6 address)_"></span>
  <input type="button" class="form ping-button6-<?=$i?>" value="_(Ping)_" onclick="ping($(document.wgX),this,'input[name=&quot;Address6:<?=$i?>&quot;]')"<?=isset($wgX["Address6:$i"])?'':' disabled'?>>

</div>
:wg_peer_tunnel_address_help:

_(Peer endpoint)_:
<input type="hidden" name="Endpoint:<?=$i?>" value="">
: <span class="input"><input type="text" name="gui:Endpoint:<?=$i?>" class="subnet" value="<?=_var($wgX,"Endpoint:$i")?>" pattern="<?=$validText?>" title="_(IP address or FQDN)_" onchange="toLC(this);quickValidate(this);" <?=($vpn_wgX||(int)_var($wgX,"TYPE:$i",0)==2||(int)_var($wgX,"TYPE:$i",0)==3)?'placeholder="(_(mandatory)_)" required':'placeholder="(_(not used)_)"'?>>:
  <input type="number" name="gui:ListenPort:<?=$i?>" class="port" min="1" max="65535" value="<?=_var($wgX,"ListenPort:$i")?>" onchange="quickValidate(this);"<?=isset($wgX["Endpoint:$i"])?" placeholder=\"".(_var($wgX,'ListenPort:0')?:_var($netport,'wgX'))."\"":""?>></span>
  <input type="button" class="form ping-button2-<?=$i?>" value="Ping" onclick="ping($(document.wgX),this,'input[name=&quot;gui:Endpoint:<?=$i?>&quot;]')"<?=isset($wgX["Endpoint:$i"])?'':' disabled'?>>

:wg_peer_endpoint_help:

_(Peer allowed IPs)_:
: <span class="input"><input type="text" name="AllowedIPs:<?=$i?>" class="wide" value="<?=_var($wgX,"AllowedIPs:$i")?>" onchange="quickValidate(this);" pattern="<?=$validList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_, _(CIDR optional)_" placeholder="(_(mandatory)_)" required></span>

:wg_peer_allowed_ips_help:

_(Peer DNS server)_:
: <span class="input"><input type="text" name="DNS:<?=$i?>" class="subnet" maxlength="40" value="<?=_var($wgX,"DNS:$i")?>" onchange="quickValidate(this);" pattern="<?=$validDNSServerList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_"<?=(int)_var($wgX,"TYPE:$i",0)!=6?'placeholder="(_(optional)_)"':'placeholder="(_(mandatory)_)" required'?>></span>

:wg_peer_dns_server_help:

_(Persistent keepalive)_:
: <span class="input"><input type="number" name="PersistentKeepalive:<?=$i?>" class="trim" min="0" max="600" value="<?=_var($wgX,"PersistentKeepalive:$i")?>" onchange="quickValidate(this);" placeholder="(_(disabled)_)">_(seconds)_</span>

:wg_persistent_keepalive_help:

</div>
<span class="pin">_(Data received)_: <span class="rx-wgX-<?=$i?>">0 B</span>_(Data sent)_: <span class="tx-wgX-<?=$i?>">0 B</span><br>_(Last handshake)_: <span class="hs-wgX-<?=$i?>">_(unknown)_</span></span>
</div>
<?endforeach;?>

&nbsp;
: <input type="submit" value="_(Apply)_" onclick="return(validateForm($(document.wgX),'wgX'))" disabled><input type="button" value="_(Done)_" onclick="done()"><input type="button" id="addpeer-wgX" value="_(Add Peer)_" onclick="addPeer($(document.wgX),'wgX')"><input type="button" class="advanced wgX" value="_(Delete Tunnel)_" style="float:right;display:none" onclick="delTunnel('wgX')">
</form>

<script markdown="1" type="text/html" id="peer-template-wgX">
<div markdown="1" id="index-wgX-INDEX" class="shade-<?=$display['theme']?>">
_(Peer name)_:
: <span class="input"><input type="text" name="Name:INDEX" class="wide" maxlength="99" value="" onchange="quickValidate(this);" pattern="<?=$validname?>" title="_(Use only letters A-Z, digits or space,dash,underscore)_" placeholder="(_(optional)_)"></span>
  <span class="pin"><i class="fa fa-fw fa-eye eyeINDEX key-off" title="_(Show Peer Config)_"></i>
  <i class="fa fa-fw fa-key zoneINDEX key-off" title="_(Toggle keys)_"></i>
  <i id="chevron-wgX-INDEX" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="openClose($(document.wgX),this,'div.zoneINDEX')" title="_(Toggle view)_"></i></span>

:wg_peer_name_help:

_(Peer type of access)_:
: <span class="input"><select name="TYPE:INDEX" class="auto" onchange="updatePeer($(document.wgX),INDEX,this.value,'wgX')">
  <?=mk_option(0, "0", _("Remote access to server"))?>
  <?=mk_option(0, "1", _("Remote access to LAN"))?>
  <?=mk_option(0, "2", _("Server to server access"))?>
  <?=mk_option(0, "3", _("LAN to LAN access"))?>
  <?=mk_option(0, "4", _("Server hub & spoke access"))?>
  <?=mk_option(0, "5", _("LAN hub & spoke access"))?>
  <?=mk_option(0, "6", _("Remote tunneled access"))?>
  <?=mk_option(0, "7", _("VPN tunneled access for system"),'disabled')?>
  <?=mk_option(0, "8", _("VPN tunneled access for docker"))?>
  </select></span>
  <span id="access-type-INDEX" class="access-type"></span>

> ![](<?=autov('/webGui/images/wireguard-help.png')?>)

<div markdown="1" class="keys wgX keyINDEX">
_(Peer private key)_:
: <span class="input"><input type="text" name="PrivateKey:INDEX" class="wide private-INDEX" maxlength="64" value="" onchange="highlight($(document.wgX),this,0)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Keypair)_" onclick="keypair($(document.wgX),'INDEX')">

:wg_generate_keypair_help:

_(Peer public key)_:
: <span class="input"><input type="text" name="PublicKey:INDEX" class="wide public-INDEX" maxlength="64" onchange="highlight($(document.wgX),this,0)" placeholder="(_(mandatory)_)" value="" required></span>

:wg_generate_keypair_help:

_(Peer preshared key)_:
: <span class="input"><input type="text" name="PresharedKey:INDEX" class="wide preshared-INDEX" maxlength="64" value="" onchange="highlight($(document.wgX),this,0)" placeholder="(_(optional)_)"></span>
  <input type="button" class="form" value="_(Generate Key)_" onclick="presharedkey($(document.wgX),'INDEX')">

:wg_peer_preshared_key_help:

</div>
<div markdown="1" class="advanced wgX zoneINDEX" style="display:none">
<div markdown="1" class="ipv4 wgX" style="display:none">
_(Peer tunnel address)_:
: <span class="input"><input type="text" name="Address:INDEX" class="subnet" maxlength="15" value="" onchange="if(verifyInSubnet(this)){setAllow($(document.wgX),this.value,INDEX)}" pattern="<?=$validIP4?>" title="_(IPv4 address)_"></span>
  <input type="button" class="form ping-button1-INDEX" value="_(Ping)_" onclick="ping($(document.wgX),this,'input[name=&quot;Address:INDEX&quot;]')" disabled>

</div>
<div markdown="1" class="ipv6 wgX" style="display:none">
_(Peer tunnel address IPv6)_:
: <span class="input"><input type="text" name="Address6:INDEX" class="subnet" maxlength="40" value="" onchange="if(verifyInSubnet6(this)){setAllow6($(document.wgX),this.value,INDEX)}" pattern="<?=$validIP6?>" title="_(IPv6 address)_"></span>
  <input type="button" class="form ping-button6-INDEX" value="_(Ping)_" onclick="ping($(document.wgX),this,'input[name=&quot;Address6:INDEX&quot;]')" disabled>

</div>
:wg_peer_tunnel_address_help:

_(Peer endpoint)_:
<input type="hidden" name="Endpoint:INDEX" value="">
: <span class="input"><input type="text" name="gui:Endpoint:INDEX" class="subnet" value="" pattern="<?=$validText?>" title="_(IP address or FQDN)_" onchange="toLC(this);quickValidate(this);" placeholder="(_(not used)_)">:
  <input type="number" name="gui:ListenPort:INDEX" class="port" min="1" max="65535" value="" onchange="quickValidate(this);"></span>
  <input type="button" class="form ping-button2-INDEX" value="_(Ping)_" onclick="ping($(document.wgX),this,'input[name=&quot;gui:Endpoint:INDEX&quot;]')" disabled>

:wg_peer_endpoint_help:

_(Peer allowed IPs)_:
: <span class="input"><input type="text" name="AllowedIPs:INDEX" class="wide" value="" onchange="quickValidate(this);" pattern="<?=$validList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_, _(CIDR optional)_" placeholder="(_(mandatory)_)" required></span>

:wg_peer_allowed_ips_help:

_(Peer DNS server)_:
: <span class="input"><input type="text" name="DNS:INDEX" class="subnet" maxlength="40" value="" onchange="quickValidate(this);" pattern="<?=$validDNSServerList?>" title="_(Comma separated list of IPv4 and IPv6 IP addresses)_" placeholder="(_(optional)_)"></span>

:wg_peer_dns_server_help:

_(Persistent keepalive)_:
: <span class="input"><input type="number" name="PersistentKeepalive:INDEX" class="trim" min="0" max="600" value="" onchange="quickValidate(this);" placeholder="(_(disabled)_)">_(seconds)_</span>

:wg_persistent_keepalive_help:

</div>
</div>
</script>
</div>

                )

            [WebGui] => Array
                (
                    [Menu] => Tools:20
                    [Type] => menu
                    [Title] => webGUI
                    [Tag] => tv
                    [file] => webGui/WebGui.page
                    [root] => webGui
                    [name] => WebGui
                    [text] => 
                )

            [About] => Array
                (
                    [Menu] => Tools:90
                    [Type] => menu
                    [Title] => About
                    [Tag] => question-circle-o
                    [file] => webGui/About.page
                    [root] => webGui
                    [name] => About
                    [text] => 
                )

            [Apps] => Array
                (
                    [Menu] => Tasks:80
                    [Name] => Apps
                    [Type] => xmenu
                    [Tabs] => true
                    [Code] => f0db
                    [file] => plugins/community.applications/Apps.page
                    [root] => plugins/community.applications
                    [name] => Apps
                    [text] => <?
###############################################################
#                                                             #
# Community Applications copyright 2015-2023, Andrew Zawadzki #
#                   Licenced under GPLv2                      #
#                                                             #
###############################################################

$_SESSION['locale'] = $_SESSION['locale'] ?? null;
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: "/usr/local/emhttp";
$plugin = "community.applications";

$cfg = parse_plugin_cfg($plugin);
$cfg['dockerSearch'] = "yes";
$cfg['unRaidVersion'] = $var['version'];
$caSettings = $cfg;

require_once "$docroot/plugins/dynamix.docker.manager/include/DockerClient.php";
require_once "$docroot/plugins/$plugin/include/paths.php";
require_once "$docroot/plugins/$plugin/include/helpers.php";
require_once "$docroot/plugins/dynamix.plugin.manager/include/PluginHelpers.php";

$DockerClient = new DockerClient();
$DockerTemplates = new DockerTemplates();

// Restart logging over at start of every session
exec("rm -rf {$caPaths['CA_logs']}");
exec("mkdir -p {$caPaths['CA_logs']}");
exec("mkdir -p {$caPaths['tempFiles']}");
exec("rm $docroot/CA-Logging*.zip");

$diagnosticsFile = htmlspecialchars(str_replace(' ','_',strtolower($var['NAME'])));

if ( $cfg['maxPerPage'] < 24 ) $cfg['maxPerPage'] = 24;

$firstRun = is_file($caPaths['warningAccepted']) ? "false" : "true";
$pluginWarning = is_file($caPaths['pluginWarning']) ? "true": "false";

if ( ! is_file($caPaths['docker_cfg']) ) {
	exec("logger -t 'Community Applications' 'Fatal Flash Drive Error: /boot/config/docker.cfg does not exist'");
}

$unRaidSettings = parse_ini_file($caPaths['unRaidVersion']);
$unRaid610      = version_compare($unRaidSettings['version'],"6.10.0-beta17",">");
$unRaid612      = version_compare($unRaidSettings['version'],"6.12.0-beta1",">");
$nchanCom       = version_compare($unRaidSettings['version'],"6.10.3",">");

// Check md5's of files
exec("cd /usr/local/emhttp/plugins/$plugin/ && md5sum -c ca.md5",$output,$md5Error);

$previousLocale = $_COOKIE["locale"] ?? "";

switch ($theme) {
	case 'black':
		$swalBackground = "black";
		$tooltipsterContent = "#f2f2f2";
		$chartGrid = "#222222";
		break;
	case 'azure':
		$swalBackground = "white";
		$tooltipsterContent = "#101010";
		$chartGrid = "#dddddd";
		break;
	case 'gray':
		$swalBackground = "black";
		$tooltipsterContent = "#f2f2f2";
		$chartGrid = "#222222";
		break;
	case 'white':
		$swalBackground = "white";
		$tooltipsterContent = "#101010";
		$chartGrid = "#dddddd";
		break;
	default:
		$swalBackground = "black"; // default to black.  This should only be when someone adds a new theme.  It is NOT the default that the OS uses
		$tooltipsterContent = "#f2f2f2";
		$chartGrid = "#222222";
		break;
}

if ( is_file($caPaths['addConverted']) )
	$dockerConvertFlag = "true";
else
	$dockerConvertFlag = "false";

$date = (date("n/d"));

$startupDisplayed = is_file($caPaths['startupDisplayed']) ? "true" : "false";
if ( $startupDisplayed == "true" && ($_COOKIE['ca_languageSwitch'] ?? false) )
	$killCookie = "true";
else
	$killCookie = "false";

$dockerSearchActive = is_file($caPaths['dockerSearchActive']);

// Only check for updates to containers / plugins max once per hour
exec("mkdir -p {$caPaths['tempFiles']}");
if ( ($cfg['updateCheck'] == "yes") && ( (time() - @filemtime($caPaths['updateTime']) ) > 3600 ) ) {
	touch($caPaths['updateTime']);
	exec("echo '/usr/local/emhttp/plugins/community.applications/scripts/checkForUpdates.php >/dev/null 2>&1' | at now -M >/dev/null 2>&1");
}

if ( is_file("/var/run/dockerd.pid") && is_dir("/proc/".@file_get_contents("/var/run/dockerd.pid")) ) {
	$caSettings['dockerRunning'] = true;
} else {
	$caSettings['dockerSearch'] = "no";
	unset($caSettings['dockerRunning']);
}

if ( is_file($caPaths['docker_cfg']) )
	getAllInfo(true,false);

// Check memory to see if CA's minimums are met (4G same as base OS) - Test is actually for 2.5G though

$memRaw = trim(str_replace("MemTotal:","",exec("cat /proc/meminfo | grep MemTotal:")));
$memoryInstalled = explode(" ",$memRaw);

$CArequirementsNOTmet = $memoryInstalled[0] < 2500000;


function tr($string,$ret=false) {
	$string = str_replace('"',"&#34;",str_replace("'","&#39;",_($string)));
	if ( $ret )
		return $string;
	else
		echo $string;
}

?>
<style>
<?include "/$docroot/plugins/$plugin/skins/Narrow/css.php"?>
</style>
<? if ( is_file("$docroot/plugins/dynamix/styles/community.applications-$theme.css") ):?>
	<link type='text/css' rel='stylesheet' href='<?=autov("/plugins/dynamix/styles/community.applications-$theme.css")?>'>
<? endif; ?>
<script src='<?autov("/plugins/community.applications/javascript/libraries.js")?>'></script>
<script src='<?autov("/plugins/dynamix.docker.manager/javascript/docker.js")?>'></script>
<?if (!$unRaid610):?>
<script>
	/*! sprintf-js v1.1.2 | Copyright (c) 2007-present, Alexandru Mărășteanu <hello@alexei.ro> | BSD-3-Clause */
	!function(){"use strict";var g={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function y(e){return function(e,t){var r,n,i,s,a,o,p,c,l,u=1,f=e.length,d="";for(n=0;n<f;n++)if("string"==typeof e[n])d+=e[n];else if("object"==typeof e[n]){if((s=e[n]).keys)for(r=t[u],i=0;i<s.keys.length;i++){if(null==r)throw new Error(y('[sprintf] Cannot access property "%s" of undefined value "%s"',s.keys[i],s.keys[i-1]));r=r[s.keys[i]]}else r=s.param_no?t[s.param_no]:t[u++];if(g.not_type.test(s.type)&&g.not_primitive.test(s.type)&&r instanceof Function&&(r=r()),g.numeric_arg.test(s.type)&&"number"!=typeof r&&isNaN(r))throw new TypeError(y("[sprintf] expecting number but found %T",r));switch(g.number.test(s.type)&&(c=0<=r),s.type){case"b":r=parseInt(r,10).toString(2);break;case"c":r=String.fromCharCode(parseInt(r,10));break;case"d":case"i":r=parseInt(r,10);break;case"j":r=JSON.stringify(r,null,s.width?parseInt(s.width):0);break;case"e":r=s.precision?parseFloat(r).toExponential(s.precision):parseFloat(r).toExponential();break;case"f":r=s.precision?parseFloat(r).toFixed(s.precision):parseFloat(r);break;case"g":r=s.precision?String(Number(r.toPrecision(s.precision))):parseFloat(r);break;case"o":r=(parseInt(r,10)>>>0).toString(8);break;case"s":r=String(r),r=s.precision?r.substring(0,s.precision):r;break;case"t":r=String(!!r),r=s.precision?r.substring(0,s.precision):r;break;case"T":r=Object.prototype.toString.call(r).slice(8,-1).toLowerCase(),r=s.precision?r.substring(0,s.precision):r;break;case"u":r=parseInt(r,10)>>>0;break;case"v":r=r.valueOf(),r=s.precision?r.substring(0,s.precision):r;break;case"x":r=(parseInt(r,10)>>>0).toString(16);break;case"X":r=(parseInt(r,10)>>>0).toString(16).toUpperCase()}g.json.test(s.type)?d+=r:(!g.number.test(s.type)||c&&!s.sign?l="":(l=c?"+":"-",r=r.toString().replace(g.sign,"")),o=s.pad_char?"0"===s.pad_char?"0":s.pad_char.charAt(1):" ",p=s.width-(l+r).length,a=s.width&&0<p?o.repeat(p):"",d+=s.align?l+r+a:"0"===o?l+a+r:a+l+r)}return d}(function(e){if(p[e])return p[e];var t,r=e,n=[],i=0;for(;r;){if(null!==(t=g.text.exec(r)))n.push(t[0]);else if(null!==(t=g.modulo.exec(r)))n.push("%");else{if(null===(t=g.placeholder.exec(r)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){i|=1;var s=[],a=t[2],o=[];if(null===(o=g.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(o[1]);""!==(a=a.substring(o[0].length));)if(null!==(o=g.key_access.exec(a)))s.push(o[1]);else{if(null===(o=g.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(o[1])}t[2]=s}else i|=2;if(3===i)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");n.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}r=r.substring(t[0].length)}return p[e]=n}(e),arguments)}function e(e,t){return y.apply(null,[e].concat(t||[]))}var p=Object.create(null);"undefined"!=typeof exports&&(exports.sprintf=y,exports.vsprintf=e),"undefined"!=typeof window&&(window.sprintf=y,window.vsprintf=e,"function"==typeof define&&define.amd&&define(function(){return{sprintf:y,vsprintf:e}}))}();
</script>
<?endif;?>
<script>

var searchBoxInput;
var searchBoxAwesomplete;
var pluginInstallIntervalTimer;
var showRepoIntervalTimer;

var data = new Object();
data.docker = "";
data.section = "AppStore";
data.selected_category = "";
data.subcategory = "";
data.selected_subcategory = "";
data.selected = "";
data.lastUpdated = 0;
data.nextpage = 0;
data.prevpage = 0;
data.currentpage = 1;
data.searchFlag = false;
data.searchActive = false; // Sets whether changepage re-sorts the displayed templates.
data.previousAppsSection = ""; // The section the user is on within previous apps
data.searchInProgress = false;
data.deprecated = false; // Only set by reinstalling a deprecated plugin

var dockerNotEnabled;
var postCount = 0;
var cookieWarning = false;
var dockerWarningAdded = false;
var backupServerWarning = false;
var restoreStateMenu = false;
var actionCentreRestoreState = false;
var initialStartup = true;
var repoBanner = false;
var repoBannerTimer = false;
var resizeTimer;
var portsInUse = [];
var startupSearch = "<?=$_GET['search'] ?? ""?>";
var iconHoverTimer;
var wheelActive = false;

$(function(){
	window.onerror = function(msg,url,lineNo,columnNo, error) {
		post({action:'javascriptError',msg:msg,url:url,lineNo:lineNo,columnNo:columnNo,error:error});
	}
		<? if ( $CArequirementsNOTmet ) : ?>
	  $(".ca_templatesDisplay").hide();
		swal({
			title: "<?tr("Not Enough Memory")?>",
			text: '<?tr('Community Applications (and Unraid OS) have a minimum required memory of 4G.  CA cannot run without those mimimums being met');?>',
			html: true,
			type: 'error',
			showCancelButton: false,
			showConfirmButton: true,
			cancelButtonText: "<?tr('Cancel')?>",
			confirmButtonText: "<?tr('I Understand')?>"
		}, function (isConfirm) {
			history.back();
		});
		return;
	<? endif; ?>
	<? if ( ! is_file($caPaths['docker_cfg']) ): ?>
		// This file is guaranteed to exist on the flash drive.  Even though 6.10Beta3+ includes similar code, keep this code because CA just can't function properly with a flash offline / corrupted.
		$(".mainArea,.menuItems").html("");
		swal({
			title: "<?tr("Fatal Flash Drive Error")?>",
			text: '<?tr('This usually means your flash drive is corrupted or has dropped offline.  The rest of the Unraid GUI will also be affected.  Post a new thread in the Unraid forums if this error continues')?>',
			html: true,
			type: 'error',
			showCancelButton: false,
			showConfirmButton: true,
			confirmButtonText: "<?tr('OK')?>"
		}, function (isConfirm) {
			if ( isConfirm ) {
				location.replace("/Main");
			}
		});
		return;
});
	<?else:?>
	// don't run this through the wrapper so that if it hangs up it won't delay anything else
	$.post("/plugins/<?=$plugin?>/include/exec.php",{action:'getPortsInUse'},function(data) {
		console.log(data);
		var ret = JSON.parse(data);
		portsInUse = ret.portsInUse;
		console.log("Ports In Use:" + portsInUse);
	});

	if ( "<?=$killCookie?>" == "true" ) { // This is needed so that if language gets switched on the home page the home page gets regenerated correctly
		$.cookie("ca_languageSwitch","",{path:"/;SameSite=Lax"});
	}

	<? if ( $cfg['debugging'] == "yes" ):?>
		var debugBanner = addBannerWarning("<?tr("Debugging enabled.  This significantly increases the memory used by your browser");?>");
		setTimeout(function() {
			removeBannerWarning(debugBanner);
		},20000);
	<?endif;?>


	caPluginUpdateCheck("community.applications.plg",{
			noDismiss:true,
			name:"Community Applications",
			debug:false,
			priority:true
		},function(result) {
			var result = JSON.parse(result);
			$("#caInstalledVersion").html(result.installedVersion);
		}
	);

// Override the OS switch language function so that CA can save it's current state when switching via the OS
	$(".LanguageButton").find("a").attr("onclick","CAswitchLanguage('<?=$previousLocale?>')");

	$("body").append("<div class='sidebar'><div class='sidebarClose'></div><div class='sidenav sidenavHide'><div id='sidenavContent'></div></div>");

	searchBoxInput = document.getElementById("searchBox");
	searchBoxAwesomplete = new Awesomplete(searchBoxInput);

	if ( "<?=$date?>" == "12/24" ) addBannerWarning("<i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i> <?tr("Happy Holidays from Andrew, Tracey, and family")?> <i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i>",false);
	if ( "<?=$date?>" == "12/25" ) addBannerWarning("<i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i> <?tr("Happy Holidays from Andrew, Tracey, and family")?> <i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i>",false);
	if ( "<?=$date?>" == "1/01" )  addBannerWarning("<?tr("Happy New Year!")?>",false);
	if ( "<?=$date?>" == "12/31" ) addBannerWarning("<?tr("Happy New Year!")?> <i style='float:initial;cursor:initial;' class='fa fa-beer'></i> <?tr("Please Enjoy Responsibly")?>",false);

	context.init({preventDoubleContext:false,left:false,right:false,bottom:true,above:true});

	$(".maxPerPage").html(sprintf("<?tr("Results Per Page: %s")?>","<?=$cfg['maxPerPage']?>"));

	context.attach("#maxPerPage",getPerPageOpts(<?=$cfg['maxPerPage']?>));

	$(".sidebarClose").on("click",function(e) {
		closeSidebar();
	});
	$(".mainArea").on("click",".actionsButtonContext,.actionsButton,.supportButton,.supportButtonCardContext,.ca_multiselect",function() {
		data.actions = true;
	});
	$("#searchBox").keydown(function(e) {
		if (e.which === 13) {
			searchBoxAwesomplete.close();
			// this is the check sort order function
			var sortButton = false;
			$(".sortIcons").each(function() {
				if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
					sortButton = true;
				}
			});
			if ( !sortButton) {
				$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
				post({action:"defaultSortOrder"},function(data) {
					$("#defaultSort").addClass("enabledIcon");
					doSearch();
				});
			} else {
				doSearch();
			}
		}
	});

	$('body').keydown(function(e) {
		if (e.which === 27) {
			closeSidebar();
		}
	});

	$('.caChangeLog').on("click",function() {disableSort();scrollToTop();caChangeLog();});
	$('.mainArea').on("click",'.ca_multiselect',function() {enableMultiInstall();});

	$('#sidenavContent').on("click",".pinPopup",function() {
		var repository = $(this).data("repository");
		var name = $(this).data("name");
		pinApp(this,repository,name);
	});

	$('.mainArea').on("click",".ca_favouriteRepo",function() {
		$(".ca_fav").removeClass("ca_favouriteRepo").addClass("ca_non_favouriteRepo");
		$(".ca_holderFav").removeClass("ca_holderFav");
		$(this).removeClass("ca_favouriteRepo").addClass("ca_non_favouriteRepo");
		setToolTipForFavourite();
		post({action:'toggleFavourite',repository:""},function(data) {
			clearTimeout(repoBannerTimer);
			if ( repoBanner !== false ) {
				removeBannerWarning(repoBanner);
			}
			repoBanner = addBannerWarning("<?tr("Removed favourite repository");?>",false,true);
			repoBannerTimer = setTimeout(function(){
				removeBannerWarning(repoBanner);
				repoBanner = false;
			},5000);
			setFavRepoSearch();
		});
	});

	$('.mainArea').on("click",".ca_href",function() {
		var href = $(this).attr("data-href");
		var target = $(this).attr("data-target");
		if ( ! target ) target = "_blank";
		window.open(href,target);
	});

	$('body').on("click",".dockerUpdate",function() {
		var container = $(this).attr("data-name");
		updateDocker(container);
	});


	$('body').on("click",".fav,.nonfav",function() {
		setFavourite(this);
	});

	$('body').on("click",".ca_repoSearch,.ca_repoSearchPopUp",function() {
		closeSidebar();
		var repo = $(this).data("repository");
		var sortButton = false;
		$(".sortIcons").each(function() {
			if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
				sortButton = true;
			}
		});
		if ( !sortButton) {
			$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
			post({action:"defaultSortOrder"},function(data) {
				$("#defaultSort").addClass("enabledIcon");
				doSearch(false,repo);
			});
		} else {
			doSearch(false,repo);
		}
	});

	$('.favouriteRepo').on("click",function() {
		if ( $(this).hasClass("caMenuDisabled") )
			return;
		var repo = $(this).attr("data-repository");
		var sortButton = false;
		$(".sortIcons").each(function() {
			if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
				sortButton = true;
			}
		});
		if ( !sortButton) {
			$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
			post({action:"defaultSortOrder"},function(data) {
				$("#defaultSort").addClass("enabledIcon");
				doSearch(false,repo);
			});
		} else {
			doSearch(false,repo);
		}
	});

	$('body').on("click",".templateSearch",function() {
		$(".maxPerPage").show();
		doSearch(false);
	});

	$('body').on("click",".xmlInstall",function() {
		var type = $(this).data("type");
		var xml = $(this).data("xml");

		saveState();
		post({action:'createXML',xml:xml,type:type},function(result){
			if ( result.status == "ok" ) {
				if (type == "second")
					type = "default"

				openNewWindow("/Apps/AddContainer?xmlTemplate="+type+":"+xml);
			}
		});
	});

	$('body').on("click",".displayTags",function() {
		var id = $(this).data("id");
		displayTags(id);
	});

	$('body').on("click",".pluginInstall",function() {
		var plugin = $(this).data("url");
		var type = $(this).data("update") ? true : false;
		installPlugin(plugin,type);
	});

	$("body").on("click",".uninstallApp",function() {
		var type = $(this).data("type");
		var name = $(this).data("name");
		var app = $(this).data("app");
		switch (type) {
			case "docker":
				uninstallDocker(app,name);
				break;
			case "plugin":
				uninstallApp(app,name);
				break;
		}
	});

	$("body").on("click",".repoPopup,.ca_repoinfo,.ca_reporeadmore,.ca_repoFromPopUp,.cardDescriptionRepo", function() {
		event.stopPropagation();
		var repository = $(this).data("repository");
		showRepoPopup(repository);
	});

	$('body').on("click",".ca_holder",function(event) {
		if (data.actions) {
			data.actions = false;
			return;
		}
		data.actions = false;
		event.stopPropagation();
		if ( $(this).hasClass("ca_repoPopup") ) {
			var repository = $(this).data("repository");
			showRepoPopup(repository);
		} else {
			if ( $(this).hasClass("dockerCardBackground") || $(this).hasClass("noClick") )
				return;
			if ( $(".dropdown-menu").is(":visible") ) {
				$(".dropdown-menu").hide();
				return;
			}

			var apppath = $(this).data("apppath");
			var appname = $(this).data("appname");
			appname = stripTags(appname);
			if ( !apppath || !appname ) return;
			showSidebarApp(apppath,appname);
		}
	});

	$('body').on("click",".dockerPopup", function() {
		var url = $(this).data("dockerhub");
		openNewWindow(url,'_blank');
	});

	$('.menuItems').on("click",'.categoryMenu',function() {
		var menu = this;
		if ( $(menu).hasClass("caMenuDisabled") )
			return;
		if ( $(menu).hasClass("selectedMenu") ) {
			if ( $(menu).hasClass("caRepositoryMenu") ) {
				return;
			}

			$(".caRepositoryMenu").removeClass("selectedMenu");
		}
		if ( ! data.searchFlag ) {
			$("#searchBox").val("");
		}
		showSortIcons();
		scrollToTop();

		// This is the checkSortOrder function to prevent a race condition
		var sortButton = false;
		$(".sortIcons").each(function() {
			if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
				sortButton = true;
			}
		});
		if ( !sortButton) {
			$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
			post({action:"defaultSortOrder"},function(data) {
				$("#defaultSort").addClass("enabledIcon");
				changeCategory(menu,false);
			});
		}	else {
			changeCategory(menu,false);
		}
	});

	$('.menuItems').on("mouseover",".caMenuItem",function() {
		if ( $(this).hasClass("caMenuEnabled") ) {
			$(this).addClass("hoverMenu");
		}
	});

	$('.menuItems').on("mouseleave",".caMenuItem",function() {
		$(this).removeClass("hoverMenu");
	});

	$(".sidebar").on("click",".chartMenu",function() {
		if ($(this).hasClass("selectedMenu") )
			return;
		$(".chartMenu").removeClass("selectedMenu");
		$(this).addClass("selectedMenu");
		$(".caChart").hide();
		var chart = $(this).data("chart");
		$("#"+chart).show();
	});

	$(".sidebar").on("click",".popUpBack",function() {
		var apppath = $.cookie("sidebarAppPath");
		var appname = $.cookie("sidebarAppName");
		showSidebarApp(apppath,appname);
	});

	$('.menuItems').on("click",".caMenuItem",function() {
		if ( $(this).hasClass("caMenuDisabled") ) {
			return;
		}
		if ( $(this).attr("onclick") )
			return;

		var slideFlag = true;
		var currentCat = $(".selectedMenu").data("category");
		var newCat = $(this).data("category");
		if ( currentCat && currentCat.startsWith(newCat) )
			slideFlag = false;

		if ( ! $(this).hasClass("caRepositoryMenu") ) {
			$(".caMenuItem").removeClass("selectedMenu");
			if ( ! $(this).parent().hasClass("subCategory") ) {

				if ( slideFlag )
					$(".subCategory").hide("fast");
			}
		}
		if ( $(this).hasClass("caRepositoryMenu") && $(".startupButton").hasClass("selectedMenu") ) {
			$(".startupButton").removeClass("selectedMenu");
			$(".allApps").addClass("selectedMenu");
		}

		$(this).addClass("selectedMenu");
		if ( slideFlag ) {
			if ( ! $(this).next().hasClass("actionCentre") ) {
				$(this).next().show("fast");
			}
		}
	});

	$(".sectionMenu").on("click",function() {
		if ( $(this).hasClass("caMenuDisabled") )
			return;

		var section = $(this).attr("data-category");
		showSortIcons();
		switch (section) {
			case "installed_apps":
				data.previousAppsSection = "";
				previousApps(true);
				break;
			case "inst_docker":
				data.previousAppsSection = "docker";
				previousApps(true,false,"docker");
				break;
			case "inst_plugins":
				data.previousAppsSection = "plugins";
				previousApps(true,false,"plugins");
				break;
			case "previous_apps":
				data.previousAppsSection = "";
				previousApps(false);
				break;
			case "prev_docker":
				data.previousAppsSection = "docker";
				previousApps(false,true,"docker");
				break;
			case "prev_plugins":
				data.previousAppsSection = "plugins";
				previousApps(false,true,"plugins");
				break;
			case "action_centre":
				data.previousAppsSection = "";
				actionCentre();
				break;
			case "pinned_apps":
				pinnedApps();
				break;
		}
	});

	$(".mainArea").on("click",".homeMore",function() {
		var description = $(this).data("des");
		var category = $(this).data("category");
		var menuItem = $.find(".caMenuItem[data-category='"+category+"']");
		$('.caMenuItem').removeClass('selectedMenu');
		$(menuItem).addClass('selectedMenu');

		if ($(this).data("sortby")) {
			var sortBy = $(this).data("sortby");
			var sortDir = $(this).data("sortdir");
			$(".sortIcons").removeClass("enabledIcon");
			var sortOrder = new Object();
			sortOrder.sortBy = sortBy;
			sortOrder.sortDir = sortDir;
			$(".sortIcons").addClass("startupMore");
		}
		$("#CategoryLine").html($(this).data("des"));
		$("#searchBox").val("");
		scrollToTop();
		post({action:"changeSortOrder",sortOrder:sortOrder},function() {
			getContent(false,category,description,false);
		});
	});

	$(".debugging").on("click",function() {
		var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
		var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);
		var filename='CA-Logging-'+localISOTime.substr(0,16).replace(/[-:]/g,'').replace('T','-')+'.zip';

		$.post('/webGui/include/Download.php',{cmd:'save',file:filename,source:"<?=$caPaths['logging']?>"},function(zip) {
			location = zip;
		});
	});

	$(".clearSearch").click(function() {
		if ( $(this).hasClass("caMenuEnabled") ) {
			var sortButton = false;
			$(".sortIcons").each(function() {
				if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
					sortButton = true;
				}
			});
			if ( !sortButton) {
				$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
				post({action:"defaultSortOrder"},function(data) {
					$("#defaultSort").addClass("enabledIcon");
					doSearch(true);
				});
			} else {
				doSearch(true);
			}
		}
	});

	$(".initDockerSearch").click(function()     { initDockerSearch(); });
	$(".multi_installClear").click(function()   { clearMultiInstall(); });
	$(".multi_deleteButton").click(function()   { deleteMulti(); });
	$(".multi_installAll").click(function()     { selectAllPrevious(); enableMultiInstall(); });
	$(".startupButton").click(function()        { $(".maxPerPage").hide();hideSortIcons();updateContent(this); });

	$(".checkForUpdatesButton").click(function() {
		openBox('/plugins/<?=$plugin?>/scripts/checkForUpdates.sh',tr('Check For Updates'),600,1100,true,"postCheckForUpdates");
	});

	$(".multi_installButton").click(function()  {
		if ( $(".multi_installButton").hasClass("actionCenter") ) {
			updateMulti();
		} else {
			installMulti();
		}
	});

	$(".sortIcons").click(function() {
		$(".sortIcons").removeClass("enabledIcon");
		$(this).addClass("enabledIcon");
		data.currentpage = 1;
		data.searchActive = false;
		var sortOrder = new Object();
		sortOrder.sortBy = $(this).attr("data-sortBy");
		sortOrder.sortDir = $(this).attr("data-sortDir");

		post({action:"changeSortOrder",sortOrder:sortOrder},function() {
			changeSortOrder();
		});
	});

	$('body').on("click",".languageSwitch",function() {
		CAswitchLanguage($(this).data("language"));
	});

	$('body').on("click",".languageInstall",function() {
		installLanguage($(this).data("language_xml"),$(this).data("language"));
	});

	$('body').on("click",".languageRemove",function() {
		removeLanguage($(this).data("language"));
	});

	$('body').on("click",".languageUpdate",function() {
		updateLanguage($(this).data("language"));
	});

	$("body").on("click",".popUpClose",function() {
		closeSidebar();
	});

	$("body").on("click",".removeApp",function() {
		var path = $(this).data("path");
		var name = $(this).data("name");
		removeApp(path,name);
	});
	<?if ($cfg['wheelPage'] == "no"):?>
	addEventListener("wheel",function(event){
		if (wheelActive)
			return;
		if ( $(".sidebar").is(":visible") )
			return;
		if ($("body").width() < 1260 ) return; // dynamix coding
		event.stopPropagation();

		if ( $(".pageRight").is(":visible") ) {
			if (event.deltaX >50) {
				if ( !$(".pageRight").hasClass("pageNavNoClick")) {
					wheelActive = true;
					setTimeout(function() {
						wheelActive = false;
					},1000);
					$(".pageRight").click();
				}
			}
			if (event.deltaX < -50) {
				if (! $(".pageLeft").hasClass("pageNavNoClick")) {
					wheelActive = true;

					setTimeout(function() {
						wheelActive = false;
					},1000);
					$(".pageLeft").click();
				}
			}
		} else
			wheelActive = false;
	});
	<?endif;?>

	<? if ($cfg['sidebarOpen'] == "yes"):?>
		$("body").on("mouseover",".ca_displayIcon,.infoButton,.displayIcon,.card_readmore",function() {
			var icon = this;
			iconHoverTimer = setTimeout(function() {
				icon.click();
			},3000);
		});

		$("body").on("mouseout",".ca_displayIcon,.infoButton,.displayIcon,.card_readmore",function() {
			clearTimeout(iconHoverTimer);
		});
	<?endif;?>
	/* Everything is now initialized.  This is the start of the actual "real" code */

	if ( "<?=$firstRun?>" == "true" ) {
	  $(".ca_templatesDisplay").hide();
		swal({
			title: "<?tr("Disclaimer")?>",
			text: '<?tr('All applications listed here are 3rd party additions to Unraid.  Neither the authors of Community Applications nor Limetech make any warranty as to the suitability of any application listed here')?> <br><span class="ca_italic"><font color="green"><?tr('Every attempt is made to ensure that only safe and compatible applications are present')?></font></span><br><br><center><a href="https://forums.unraid.net/topic/87144-ca-application-policies/" target="_blank"><?tr('Application Policy')?></a>',
			html: true,
			type: 'warning',
			showCancelButton: true,
			showConfirmButton: true,
			cancelButtonText: "<?tr('Cancel')?>",
			confirmButtonText: "<?tr('I Understand')?>"
		}, function (isConfirm) {
			if ( isConfirm ) {
				post({action:'dismiss_warning'},function(result) {
					location.reload();
				});
			} else {
			$(".ca_templatesDisplay").show();
				addBannerWarning("<?tr("Installations of apps disabled.  You must accept the warning to be able to install applications.")?>   <a onclick='window.location.reload();' style='cursor:pointer;'><?tr("Click here")?></a>",true,true);
				updateContent();
			}
		});
	} else if ( "<?=$pluginWarning?>" == "false" ) {
		$(".ca_templatesDisplay").hide();
		swal({
			title: "<?tr('Plugins')?>",
			text: '<?tr('Community Applications contains both docker containers and plugin applications.  Plugins are designed for OS enhancements, and run with full privileges on your system and are clearly identified within CA.')?><br><br><ceter><a href="https://forums.unraid.net/topic/87144-ca-application-policies-notes/?tab=comments#comment-817555" target="_blank"><?tr('Plugin Note')?></a></center>',
			type: 'warning',
			html: true,
			showCancelButton: false,
			showConfirmButton: true,
			confirmButtonText: "<?tr("I Understand")?>"
		}, function (isConfirm) {
			if (isConfirm) {
				post({action:'dismiss_plugin_warning'},function(result) {
					location.reload();
				});
			}
		});
	}	else {
		if ( "<?=$startupDisplayed?>" != "true" && (document.referrer.indexOf("/Apps/") > 1) && ( document.referrer.indexOf("/Apps/ca_settings") < 1 ) && cookiesEnabled() && ("<?=$dockerConvertFlag?>" != "true") || $.cookie("ca_languageSwitch") ) {
			initialStartup = false;
			getCategories();
			restoreState();
			<? if ( $dockerSearchActive ): ?>
				dockerSearch(data.currentpage);
			<? else: ?>
				actionCentreRestoreState = true;
				refreshDisplay();
				searchBoxAwesomplete.close();
				initialStartup = true;
				var apppath = $.cookie("sidebarAppPath");
				var appname = $.cookie("sidebarAppName");
				if ( $.trim(apppath) ) {
					showSidebarApp(apppath,appname);
				}
			<? endif; ?>
		} else {
			post({action:"defaultSortOrder"},function() {
				updateContent();
				if ("<?=$startupDisplayed?>" == "true" && (document.referrer.indexOf("/Apps/") > 1) && ( document.referrer.indexOf("/Apps/ca_settings") < 1 ) && cookiesEnabled() && ("<?=$dockerConvertFlag?>" != "true") || $.cookie("ca_languageSwitch") ) {
					var apppath = $.cookie("sidebarAppPath");
					var appname = $.cookie("sidebarAppName");
					if ( $.trim(apppath) ) {
						showSidebarApp(apppath,appname);
					}
				}
			});
		}
		if ( document.referrer.indexOf("/Apps/") > 1 )
			actionCentreRestoreState = true;
		setupActionCentre();
	}
});
	<?endif;?>
function disableSort() {
	hideSortIcons();
}
function hideSortIcons() {
	$("#sortIconArea").hide();
}
function showSortIcons() {
	$("#sortIconArea").show();
}
<?if ($nchanCom):?>
function ca_openPlugin(cmd,title,plg,func) {
	setTimeout(function(){openPlugin(cmd,title,plg,func,"");},250);
}
<?endif;?>

function updateContent(button) {
	clearSearchBox();
	clearCategory();
	$(".caMenuItem").removeClass("selectedMenu");
	$(".subCategory").hide();

	startupScreen = $.cookie("ca_startupButton") ? $.cookie("ca_startupButton") : "onlynew";
	$(".caMenuItem[data-category='"+startupScreen+"']").addClass("selectedMenu");

	startupScreen = button ? $(button).data("category") : startupScreen;
	$.cookie("ca_startupButton",startupScreen,{expires:365,path:"/;SameSite=Lax",secure:true});
	$.cookie("ca_selectedMenu",startupScreen,{expires:365,path:"/;SameSite=Lax",secure:true});
	disableSearch();

	post({action:'force_update'}, function(result) {
		if ( result.data ) {
			updateDisplay(result.data);
		} else {
			data.searchActive = false;
			if ( startupSearch ) {
				doSearch(false,startupSearch);
				populateAutoComplete();
				startupSearch = "";
				$(".dockerSearch").hide();
			} else {
				getContent(true,'INITIALIZE',"","",startupScreen);
			}
		}
		getCategories();
		if ( $.cookie("ca_plugininstallpending" || ! button ) ) {
			var plugins = $.cookie("ca_plugininstallpending");
			$.removeCookie("ca_plugininstallpending");
			myCloseAlert();
	<?if ($nchanCom):?>
			post({action:'saveMultiPluginPending',plugin:plugins},function(data) {
				ca_openPlugin('multiplugin install '+plugins,"<?tr('Install Plugin Applications')?>",'','refresh');
			});
	<?else:?>
			openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.php&arg1='+plugins,"<?tr('Install Plugin Applications')?>",600,900,true);
	<?endif;?>
		}
	});
}

function stripTags(string) {
	if ( ! string )
		string = "";

	return string.replace(/(<([^>]+)>)/ig,"");
}

function setToolTip() {
	$('.ca_tooltip-warning').tooltipster({
		contentAsHTML:true,
		interactive:true,
		multiple:true,
		trigger:'custom',
		triggerOpen:{click: true, mouseenter: true},
		triggerClose:{click:true,scroll:true,mouseleave:true}
	});
}

function showSpecialCategory(button) {
	var sortButton = false;
	$(".sortIcons").each(function() {
		if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
			sortButton = true;
		}
	});
	if ( !sortButton) {
		$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
		post({action:"defaultSortOrder"},function(data) {
			$("#defaultSort").addClass("enabledIcon");
			showSpecials(button)
		});
	} else {
		showSpecials(button);
	}
}

function showSpecials(button) {
	showSortIcons();
	$(".caMenuItem").removeClass("selectedMenu");
	$(".multi_installDiv,.checkForUpdates").hide();
	data.selected_category = "DOESNTMATTERWHATSHERE";
	data.section = "AppStore";
	changeCategory(button,false);
	$("#Category").append(" - <?tr("Installs not allowed from this page");?>");
}

function changeCategory(button,subSwitch) {
	var description = $(button).text();
	var category = $(button).attr("data-category");

	$(".multi_installDiv,.checkForUpdates").hide();
	getContent(false,category,description,false);
}

function changePage(pageNumber) {
	var selected = data.selected;
	data.currentpage = pageNumber;

	post({action:'display_content',pageNumber:pageNumber,selected:selected},function(result) {
		updateDisplay(result.display);
		scrollToTop();
	});
}

function swalBackground(color) {
	$(".sweet-alert").css("background-color",color);
}

function myAlert(description,textdescription,textimage,imagesize, outsideClick, showCancel, showConfirm, alertType) {
	if ( !outsideClick ) outsideClick = false;
	if ( !showCancel )   showCancel = false;
	if ( !showConfirm )  showConfirm = false;
	if ( imagesize == "" ) { imagesize = "80"; }
	disableSearch();

	swal({
		title: description,
		text: textdescription,
		allowOutsideClick: outsideClick,
		showConfirmButton: showConfirm,
		showCancelButton: showCancel,
		cancelButtonText: "<?tr("Cancel")?>",
		type: alertType,
		animation: false,
		html: true
	});
}

function mySpinner() {
	$("div.spinner").show();
	$(".spinnerBackground").show();
}

function myCloseSpinner() {
	$("div.spinner,.spinnerBackground").hide();
}

function myCloseAlert() {
	swal.close();
	$("div.spinner, .sweet-alert").hide();
	swalBackground("<?=$swalBackground?>");
	enableSearch();
}

function doSidebarSearch(newSearch) {
	closeSidebar();
	doSearch(false,newSearch);
}

function doSearch(button,newSearch) {
	if ( data.searchInProgress )
		return;

	data.searchInProgress = true;


	if ( ! newSearch === false ) {
		$('#searchBox').val(newSearch);
	}
	var filter = $('#searchBox').val();
	filter = $.trim(filter);
	filter = stripTags(filter);
	if ( ! filter ) {
		$("#searchBox").val(filter);
		data.searchInProgress = false;
		return;
	}

	data.docker = "";
	data.section = "AppStore";

	$('#searchBox').val(filter);
	$(".multi_installDiv,.checkForUpdates").hide();

	if ($('#searchButton').hasClass('fa-search')) {
		if (filter) {
			$('#searchButton').toggleClass('fa-search fa-remove');
		}
	} else if (button) {
		clearSearchBox();
		filter = '';
	}

	scrollToTop();
	if (filter) {
		$("#sortIconArea").show();
		$("#Category").html(sprintf(tr("Search for %s"),filter));
		data.searchFlag = true;
	} else {
		updateContent();
		data.searchFlag = false;
		data.searchInProgress = false;
		return;
	}
	data.searchActive = true;
	if ( ! dockerNotEnabled && (filter.indexOf(" Repository") < 1) ) {
		$('.dockerSearch').show();
	} else {
		$('.dockerSearch').hide();
	}

	data.searchInProgress = true;
	post({action:'get_content',filter:filter},function(result) {
		enableButtons();
		$(".selectedMenu").removeClass("selectedMenu");
		$(".subCategory").hide();
		$(".allApps").addClass("selectedMenu");
		updateDisplay(result.display);
		data.section = "AppStore";
		post({action:'getCategoriesPresent'},function(result) {
			$(".categoryMenu").removeClass("caMenuEnabled").addClass("caMenuDisabled");
			result.forEach(function(category) {
				var menuItem = $.find(".caMenuItem[data-category='"+category+"']");
				$(menuItem).removeClass("caMenuDisabled").addClass("caMenuEnabled");
			});
			data.searchInProgress = false;
		});
	});
}

function enableButtons() {
	data.selected_category = "";
}

function refreshDisplay() {
	changeSortOrder(null,null,null);
}

function changeSortOrder(button,buttonClass,previousApps) {
	var pageNumber = data.currentpage;
	var selected = data.selected;
	var startup = false;
	if ( button || buttonClass || previousApps) {
		data.searchFlag = false;
	}

	$(".startupButton").each(function(){
		if ($(this).hasClass("selectedMenu")) {
			startup = "true";
		}
	});
	post({action:'display_content',pageNumber:pageNumber,selected:selected,startup:startup},function(result) {
		updateDisplay(result.display);
	});
}

function getContent(init,category,description,newApp,startupDisplay) {
	data.currentpage = 1;
	var initialize;

	enableSearch();

	if ( category != "NONE" ) {
		if ( category == "INITIALIZE" ) {
			initializeAppStore();
			category = "NONE";
			initialize = true;
			enableButtons();
		}

		if ( (category == "New") || (category == "All") ) { category = ""; }
		var el_dl = $.find(".sortIcons[data-sortby='downloads']");
		var el_tr = $.find(".sortIcons[data-sortby='trending']");

		if ( category == "repos" ) {
			$(el_dl).html("<?=tr("Number Of Apps")?>");
			$(el_tr).html("<?=tr("Average Trend")?>");
		} else {
			$(el_dl).html("<?=tr("Downloads")?>");
			$(el_tr).html("<?=tr("Trend")?>");
		}

		var filter = $('#searchBox').val();
		if ( ! filter ) {
			$('.dockerSearch').hide();
		}
		if ( description && ! filter ) {
			$("#Category").html(description);
		}
		post({action:'get_content',filter:filter,category:category,newApp:newApp,startupDisplay:startupDisplay},function(result) {
			updateDisplay(result.display);
			if ( initialize ) {
				populateAutoComplete();
				downloadStatistics();
			}
		});
	}
}

function downloadStatistics() {
	postNoSpin({action:'downloadStatistics'});
}

function populateAutoComplete() {
	postNoSpin({action:'populateAutoComplete'},function(result) {
		searchBoxAwesomplete.list = result.autocomplete;
		searchBoxAwesomplete.maxItems = 20;
		searchBoxAwesomplete.minChars = 3;
		Awesomplete.$('#searchBox').removeEventListener('awesomplete-selectcomplete',awesompleteSearch);
		Awesomplete.$('#searchBox').addEventListener('awesomplete-selectcomplete',awesompleteSearch);
		searchBoxAwesomplete.close(); // otherwise it opens automatically during restore state
	});
}

function awesompleteSearch() {
	// this is the check sort order function
	var sortButton = false;
	$(".sortIcons").each(function() {
		if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
			sortButton = true;
		}
	});
	if ( !sortButton) {
		$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
		post({action:"defaultSortOrder"},function(data) {
			$("#defaultSort").addClass("enabledIcon");
			doSearch(false);
		});
	} else {
		doSearch(false);
	}
}

function openNewWindow(newURL,target='_self') {
	saveState();
	var popUp = window.open(newURL,target);
	if ( !popUp || popUp.closed || typeof popUp == "undefined" ) {
		addBannerWarning("<?tr("Popup Blocked.  CA requires popups to be enabled under certain circumstances.  You must white list your server within your browser to allow popups")?>",true,true);
	}
}

function clearSearchBox() {
	$(".categoryMenu").removeClass("caMenuDisabled").addClass("caMenuEnabled");
	$("#searchBox").val("");
	hideSortIcons();
	if ($('#searchButton').hasClass('fa-remove')) {
		$('#searchButton').toggleClass('fa-remove fa-search');
	}
}

function closeSidebar(cookie=false,visible=false) {
	if ( ! cookie ) {
		$.cookie("sidebarAppPath","",{path:"/;SameSite=Lax"});
		$.cookie("sidebarAppName","",{path:"/;SameSite=Lax"});
	}
	context.destroy("#supportPopup");
	context.destroy("#actionsPopup");

	$(".sidenav").removeClass("sidenavShow").addClass("sidenavHide");
	$("#sidenavContent").html("");
	$(".back_to_top").removeClass("back_to_top_hide");
	$("body").removeClass("body_sidebarScroll");
	$(".sidebar").fadeOut();
	<? if ($unRaid612): ?>
		$(".nav-user.show").show();
	<?endif;?>		
}

function installPlugin(pluginURL,update=false,comment="",requires="") {
	post({action:"checkPluginInProgress"},function(data) {
		if (data.inProgress) {
			swal({
				title: "<?tr("Installation already in progress")?>",
				text: "<?tr("Another plugin installation or update is already in progress, and this one cannot start.  Wait until the current installation or update is completed and try again")?>",
				allowOutsideClick: false,
				showConfirmButton: true,
				showCancelButton: false,
				confirmButtonText: "<?tr("OK")?>",
				type: "error"
			},function(isConfirm) {
				enableSearch();
			});
		} else {
			if ( update && requires ) {
				post({action:"checkRequirements",requires:requires},function(data) {
					if (! data.met) {
						swal({
							title: "<?tr("Requirements not met")?>",
							text: "<?tr("The requirements for this upgrade have not been met on your system")?><br><br>"+comment,
							allowOutsideClick: false,
							showConfirmButton: true,
							showCancelButton: false,
							confirmButtonText: "<?tr("OK")?>",
							type: "error",
							html: true
						},function(isConfirm) {
							enableSearch();
						});
					} else {
						actuallyInstallPlugin(pluginURL,update,comment);
					}
				});
			} else {
				actuallyInstallPlugin(pluginURL,update,comment);
			}
		}
	});
}
function actuallyInstallPlugin(pluginURL,update=false,comment="") {
	type = update ? "update" : "install";
	title = update ? "<?tr("Update Plugin")?>" : "<?tr("Install Plugin")?>";
	closeSidebar(true);
//	disableSearch();
	if ( $.trim(comment) ) {
		swal({
			title: "<?tr("Attention")?>",
			text: comment,
			allowOutsideClick: true,
			showConfirmButton: true,
			showCancelButton: true,
			confirmButtonText: "<?tr("OK")?>",
			cancelButtonText: "<?tr("CANCEL")?>",
			animation: false,
			type: "warning",
			html: true
		}, function (isConfirm) {
			if (isConfirm) {
				hidePluginPending(pluginURL);

				if ( $(".selectedMenu").data("category") == "action_centre" ) {
					var postFunction = "actionCentre";
				} else {
					var postFunction = "OpenSidebarAndRefreshDisplay";
				}
				data.deprecated = false; // global var here to trigger a rescan of action centre
				if ( pluginURL.includes("&deprecated") || pluginURL.includes("&incompatible")   ) {
					data.deprecated = true;
					pluginURL = pluginURL.replace("&deprecated","");
					pluginURL = pluginURL.replace("&incompatible","");

				}
				<?if ($nchanCom):?>
					ca_openPlugin('plugin '+type+' '+pluginURL,title,'',postFunction);
				<?else:?>
					openBox('/plugins/community.applications/scripts/pluginInstall.php&arg1='+type+'&arg2='+pluginURL,title,600,900,true,postFunction);
				<?endif;?>
			} else {
				enableSearch();
			}
		});
	} else {
		hidePluginPending(pluginURL);

		if ( $(".selectedMenu").data("category") == "action_centre" ) {
			var postFunction = "actionCentre";
		} else {
			var postFunction = "OpenSidebarAndRefreshDisplay";
		}
		data.deprecated = false; // global var here to trigger a rescan of action centre
		if ( pluginURL.includes("&deprecated") || pluginURL.includes("&incompatible")  ) {
			data.deprecated = true;
			pluginURL = pluginURL.replace("&deprecated","");
			pluginURL = pluginURL.replace("&incompatible","");
		}
<?if ($nchanCom):?>
		ca_openPlugin('plugin '+type+' '+pluginURL,title,'',postFunction);
<?else:?>
		openBox('/plugins/community.applications/scripts/pluginInstall.php&arg1='+type+'&arg2='+pluginURL,title,600,900,true,postFunction);
<?endif;?>
	}
}

function hidePluginPending(pluginURL) {
	if ( pluginURL.includes("/") ) {
		$(".actionsButton").each(function() {
			if ( $(this).data("pluginurl") == pluginURL || $(this).data("pluginurl")+"&deprecated" == pluginURL ) {
				$(this).hide();
			}
		});
	} else {
		$(".actionsButton").each(function() {
			if ( $(this).data("pluginurl").basename() == pluginURL ) {
				$(this).hide();
			}
		});
	}
}

function hideLanguagePending(language) {
	language = language.replace("lang-","");
	language = language.replace(".xml","");
	if ( ! language )
		return;

	$(".actionsButton").each(function() {
		if ( $(this).data("languagepack") == language ) {
			$(this).hide();
		}
	});
}

function OpenSidebarAndRefreshDisplay() {
	post({action:"onStartupScreen"},function(result) {
		if (result.status) {
			window.location.reload();
		} else {
			var apppath = $.cookie("sidebarAppPath");
			var appname = $.cookie("sidebarAppName");

			appname = stripTags(appname);

			refreshDisplay();
			if ( $.trim(apppath) ) {
				showSidebarApp(apppath,appname);
			}
			if ( data.deprecated ) {
				data.deprecated = false;
				setupActionCentre();
			}

		}
	});
}

function showDesc_openBox(cmd,title,height,width,load,func) {
	// open shadowbox window (run in foreground)
	var run = cmd.split('?')[0].substr(-4)=='.php' ? cmd : '/logging.htm?cmd='+cmd+'&csrf_token=<?=$var['csrf_token']?>';
	var options = load ? {modal:false,onClose:function(){ eval(func); }} : {modal:true};
	Shadowbox.open({content:run, player:'iframe', title:title, height:height, width:width, options:options});
}

function showModeration(script,title) {
	$("#sb-nav-close").css("visisbility","visible");
	showDesc_openBox("/plugins/<?=$plugin?>/scripts/showStatistics.php?arg1="+script,title,550,900,true,false);
}

function previousApps(installed,dontClear=false,filter="") {
	clearCategory();
	setPageOne();
	data.docker = "";

	clearSearchBox();
	$(".dockerSearch").hide();
	showSortIcons();

	// this is the checkSortOrder function running to prevent a race condition
	var sortButton = false;
	$(".sortIcons").each(function() {
		if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
			sortButton = true;
		}
	});
	if ( installed == "action" )
		$(".multi_installButton").addClass("actionCenter");
	else
		$(".multi_installButton").removeClass("actionCenter");

	if ( !sortButton) {
		$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
		post({action:"defaultSortOrder"},function(data) {
			$("#defaultSort").addClass("enabledIcon");
			getPrevApps(installed,filter,dontClear);
			enableMultiInstall();
		});
	} else {
		getPrevApps(installed,filter,dontClear);
	}
}

function actionCentre() {
	clearCategory();
	setPageOne();
	data.docker = "";
	clearSearchBox();
	$(".dockerSearch").hide();
	showSortIcons();

	// this is the checkSortOrder function running to prevent a race condition
	var sortButton = false;
	$(".sortIcons").each(function() {
		if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
			sortButton = true;
		}
	});
	if ( !sortButton) {
		$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
		post({action:"defaultSortOrder"},function(data) {
			$("#defaultSort").addClass("enabledIcon");
			getPrevApps("action");
		});
	} else {
		getPrevApps("action");
	}
}


function getPrevApps(installed,filter,dontClear) {
	post({action:'previous_apps',installed:installed,filter:filter},function(result) {
		if ( installed == true ) {
			$(".multi_installDiv").hide();
			$(".checkForUpdates").show();
		} else {
			$(".multi_installDiv").show();
			$(".checkForUpdates").hide();
			if ( ! dontClear ) {
				clearMultiInstall();
			}
			if ( installed == "action" )
				$(".multi_deleteButton,.multi_installButton").addClass("actionCenter");
			else
				$(".multi_deleteButton,.multi_installButton").removeClass("actionCenter");
		}
		switch(installed) {
			case true:
				var msg = "<?tr("Installed Apps");?>";
				break;
			case false:
				var msg = "<?tr("Previous Apps");?>";
				break;
			case "action":
				var msg = "<?tr("Action Centre");?>";
				break;
		}
		$("#Category").html(msg);
		changeSortOrder(null,null,"true");
		enableMultiInstall();
//		saveState();
	});
}

function removeApp(application, humanName) {
	closeSidebar();
	disableSearch();
	swal({
		title: "<?tr("Delete Template?")?>",
		text: sprintf(tr("Are you sure you want to delete %s from the list of previously installed applications?"),"<span class='ca_italic ca_bold caHighlight'>"+humanName+"</span>")+"<br><font size='0'>"+application+"</font>",
		type: "warning",
		confirmButtonText: "<?tr("Yes, delete it!")?>",
		cancelButtonText: "<?tr("Cancel")?>",
		showCancelButton: true,
		showConfirmButton: true,
		allowOutsideClick: true,
		html: true
	}, function(isConfirm) {
		if (isConfirm) {
			$('input[type="checkbox"][data-humanName="'+humanName+'"]').prop("checked",false);			// remove the checkbox from the app
			enableMultiInstall(); // update the count
			post({action:'remove_application',application:application}, function(result) {
				enableSearch();
				$(".caMenuItem").removeClass("selectedMenu");
				var menuItem = $.find(".caMenuItem[data-category='previous_apps']");
				$(menuItem).addClass("selectedMenu");
				previousApps(false,true,data.previousAppsSection);
			});
		} else {
			enableSearch();
		}
	});
}

function uninstallApp(application,humanName) {
	closeSidebar();
	post({action:"checkPluginInProgress"},function(data) {
		if (data.inProgress) {
			swal({
				title: "<?tr("Installation already in progress")?>",
				text: "<?tr("Another plugin installation or update is already in progress and this one cannot start.  Wait until the current installation or update is completed and try again")?>",
				allowOutsideClick: false,
				showConfirmButton: true,
				showCancelButton: false,
				confirmButtonText: "<?tr("OK")?>",
				type: "error"
			},function(isConfirm) {
				enableSearch();
			});
		} else {
			swal({
				title: "<?tr("Uninstall Application?")?>",
				text: sprintf(tr("Are you sure you want to uninstall %s?"),"<span class='ca_italic ca_bold caHighlight'>"+humanName+"</span>"),
				type: "warning",
				showCancelButton: true,
				showConfirmButton: true,
				cancelButtonText: "<?tr("Cancel")?>",
				confirmButtonText: "<?tr("Yes uninstall it")?>",
				closeOnConfirm: true,
				showLoaderOnConfirm: false,
				allowOutsideClick: true,
				html: true
			}, function(isConfirm) {
				if (isConfirm) {
					application = application.basename();
					hidePluginPending(application);
		<?if ($nchanCom):?>
					ca_openPlugin('plugin remove '+application,"<?tr('Uninstall Plugin')?>",'','postUninstallPlugin');
		<?else:?>
					openBox('/plugins/community.applications/scripts/pluginInstall.php&arg1=remove&arg2='+application,"<?tr('Uninstall Plugin')?>",600,900,true,"postUninstallPlugin");
		<?endif;?>
				} else {
					enableSearch();
				}
			});
		}
	});
}

function postUninstallPlugin() {
	enableSearch();
	$(".selectedMenu").trigger("click");
	setupActionCentre();
}

String.prototype.basename = function() {
	return this.split('/').reverse()[0];
}

function uninstallDocker(application,humanName) {
	closeSidebar();
	disableSearch();
	swal({
		title: "<?tr("Uninstall Application?")?>",
		text: sprintf(tr("Are you sure you want to uninstall %s?"),"<span class='ca_italic ca_bold caHighlight'>"+humanName+"</span>"),
		type: "warning",
		showCancelButton: true,
		showConfirmButton: true,
		cancelButtonText: "<?tr("Cancel")?>",
		confirmButtonText: "<?tr("Yes uninstall it")?>",
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		allowOutsideClick: true,
		html: true
	}, function( isConfirm ) {
		if ( isConfirm ) {
			myAlert("",sprintf(tr("Uninstalling %s"),humanName));
			post({action:'uninstall_docker',application:application,noSpinner:true},function(result) {
				myCloseAlert();
				enableSearch();
				if ( $(".selectedMenu").data("category") == "action_centre" ) {
					post({action:'getPortsInUse'},function(data) {
						portsInUse = data.portsInUse;
						actionCentre();
					});
				} else {
					post({action:'getPortsInUse'},function(data) {
						portsInUse = data.portsInUse;
						$(".selectedMenu").trigger("click");
					});
				}
			});
		} else {
			enableSearch();
		}
	});
}

function appStore() {
	data.nextpage = 0;
	data.prevpage = 0;
	initializeAppStore();
	updateContent();
	clearCategory();
	data.docker = "";
}

function initializeAppStore() {
	data.section = "AppStore";
	data.selected_category = "";
	$(".multi_installDiv,.checkForUpdates").hide();
}

function checkPLGupdate() {
	var filename = data.plgfilename;
	post({action:'updatePLGstatus',filename:filename},function(result) {
		var pageNumber = data.currentpage;
		changePage(pageNumber);
	});
}

function pinApp(button,repository,name) {
	$(button).toggleClass("pinned unpinned");
	var pinned = ( $(button).hasClass("unpinned") ) ? "<?tr("Click to pin this application")?>" : "<?tr("Click to unpin this application")?>";
	var pinnedText = ( $(button).hasClass("unpinned") ) ? "<?tr("Pin app")?>" : "<?tr("Unpin App")?>";
	$(button).attr('title',pinned);
	$(button).text(pinnedText);

	var app = $.find(".pinnedCard[data-pindata='"+repository+name+"']");
	$(app).toggle("slow");

	post({action:'pinApp',repository:repository,name:name},function(data) {
		if ( data.status ) {
			$('.caPinnedMenu').removeClass('caMenuDisabled').addClass('caMenuEnabled');
		} else {
			$('.caPinnedMenu').removeClass('caMenuEnabled').addClass('caMenuDisabled');
		}
	});
}

function setPageOne() {
	data.currentpage = 1;
}

function clearCategory() {
	$("#Category").html("&nbsp;");
}

function pinnedApps() {
	var sortButton = false;
	$(".sortIcons").each(function() {
		if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
			sortButton = true;
		}
	});
	if ( !sortButton) {
		$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
		post({action:"defaultSortOrder"},function(data) {
			$("#defaultSort").addClass("enabledIcon");
			pins();
		});
	} else {
		pins();
	}
}

function pins() {
	setPageOne();
	data.docker = "";
	clearSearchBox();
	clearCategory();
	showSortIcons();
	$("#Category").html("<?tr("Pinned Apps");?>");
	$(".dockerSearch,.multi_installDiv,.checkForUpdates").hide();
	post({action:'pinnedApps'},function(result) {
		refreshDisplay();
		myCloseAlert();
	});
}

function displayTags(leadTemplate,rename=false,comment="",ports="") {
	event.stopPropagation();
	closeSidebar();
	var flag = false;

	if ( ports ) {
		ports = JSON.parse(ports);
		if ( ports ) {
			ports.forEach(function(port){
				portsInUse.forEach(function(used) {
					if (port == used)
						flag = true;
				});
			});
		}
		if (flag) {
			comment = comment.concat("<br><?tr("One or more ports used by this application are already in use by another service or app running on your server.  You will need to adjust the host ports accordingly on the template")?>");
		}
	}
	if (comment) {
		swal({
			title: "<?tr("Attention")?>",
			text: comment,
			allowOutsideClick: true,
			showConfirmButton: true,
			showCancelButton: true,
			confirmButtonText: "<?tr("OK")?>",
			cancelButtonText: "<?tr("Cancel")?>",
			animation: false,
			type: "warning",
			html: true,
			closeOnConfirm: false
		},function(isConfirm) {
			if (isConfirm) {
				post({action:'displayTags',leadTemplate:leadTemplate,noSpinner:true,rename:rename},function(result) {
					disableSearch();
					swal({
						title: "<?tr("Choose A Branch To Install")?>",
						text: result.tags,
						html: true,
						type: "warning",
						showCancelButton: true,
						showConfirmButton: false,
						cancelButtonText: "<?tr("Cancel")?>",
						allowOutsideClick: true
					}, function(isConfirm) {
						if ( ! isConfirm ) {
							enableSearch();
						}
					});
				});
			}
		});
	} else {
		post({action:'displayTags',leadTemplate:leadTemplate,noSpinner:true,rename:rename},function(result) {
			disableSearch();
			swal({
				title: "<?tr("Choose A Branch To Install")?>",
				text: result.tags,
				html: true,
				type: "warning",
				showCancelButton: true,
				showConfirmButton: false,
				cancelButtonText: "<?tr("Cancel")?>",
				allowOutsideClick: true
			}, function(isConfirm) {
				if ( ! isConfirm ) {
					enableSearch();
				}
			});
		});
	}
}

function makePlural(string,count) {
	return ( (count > 1) || (count == 0) ) ? string + "s" : string;
}
function selectAllPrevious() {
	$(".ca_multiselect").each(function() {
		$(this).prop("checked",true);
	});
	getSelectedApps();
}

function getSelectedApps() {
	if ( data.selected ) {
		var selected = JSON.parse(data.selected);
		var deletePaths = selected.deletePaths;
		var docker = selected.docker;
		var plugin = selected.plugin;
		var language = selected.language;
	} else {
		var selected = new Object();
		var deletePaths = new Array();
		var docker = new Array();
		var plugin = new Array();
		var language = new Array();
	}
	$(".ca_multiselect").each(function() {
		var name = $(this).attr("data-name");
		var lingo = $(this).attr("data-language");
		var deletechecked = $(this).attr("data-deletepath");
		if ( $(this).is(':checked') ) {
			deletePaths.push(deletechecked);
			switch ( $(this).attr("data-type") ) {
				case 'plugin':
					plugin.push(name);
					break;
				case 'docker':
					docker.push(name);
					break;
				case 'language':
					language.push(lingo);
					break;
			}
		} else {
			var index= deletePaths.indexOf(deletechecked);
			if ( index > -1 ) {
				deletePaths.splice(index,1);
			}
			var index = plugin.indexOf(name);
			if ( index > -1 ) {
				plugin.splice(index,1);
			}
			var index = docker.indexOf(name);
			if (index > -1 ) {
				docker.splice(index,1);
			}
			var index = language.indexOf(lingo);
			if (index > -1) {
				language.splice(index,1);
			}
		}
	});
	selected.docker = uniqueArrayElements(docker);
	selected.plugin = uniqueArrayElements(plugin);
	selected.language = uniqueArrayElements(language);
	selected.deletePaths = uniqueArrayElements(deletePaths);
	data.selected = JSON.stringify(selected);
	return selected;
}

function uniqueArrayElements(sourceArray) {
	var uniqueEntries = new Array();
	$.each(sourceArray, function(i, el) {
		if ($.inArray(el,uniqueEntries) === -1) {
			uniqueEntries.push(el)
		}
	});
	return uniqueEntries;
}

function enableMultiInstall() {
	var selected = getSelectedApps();
	var count = selected.plugin.length + selected.docker.length + selected.language.length;
	var actionText = $(".multi_installButton").hasClass("actionCenter") ? "Update" : "Install";
	if ( count == 0 ) {
		$(".multi_install,.multi_installClear").attr("disabled",true);
		$(".multi_deleteButton").css("visibility","hidden");
		$(".multi_installButton").val(tr(actionText + " Selected Applications"));
	} else {
		$(".multi_install,.multi_installClear").attr("disabled",false);
		if ( ! $(".multi_deleteButton").hasClass("actionCenter") )
			$(".multi_deleteButton").css("visibility","visible");
		var buttonText = (count == 1) ? sprintf(tr(actionText + " %s Selected Application"),count) : sprintf(tr(actionText + " %s Selected Applications"),count);
		$(".multi_installButton").val(buttonText);
	}
	getSelectedApps();
}

function clearMultiInstall() {
	data.selected = "";
	$(".ca_multiselect").each(function() {
		$(this).prop("checked",false);
	});
	$(".multi_install,.multi_installClear").attr("disabled",true);
	enableMultiInstall();
}

function installSort(a,b) {
	if (a[0] === b[0]) {
		return 0;
	} else {
		return (a[0] < b[0]) ? -1 : 1;
	}
}

function deleteMulti() {
	var selected = getSelectedApps();
	swal({
		title: "<?tr("Delete Template?")?>",
		text: sprintf(tr("Are you sure you want to delete %s applications from the previously installed list?"),"<span class='caHighlight ca_bold'>"+selected.deletePaths.length+"</span>"),
		type: "warning",
		confirmButtonText: "<?tr("Delete")?>",
		cancelButtonText: "<?tr("Cancel")?>",
		showCancelButton: true,
		showConfirmButton: true,
		allowOutsideClick: true,
		html: true
	}, function(isConfirm) {
		if (isConfirm) {
			post({action:'remove_multiApplications',apps:selected.deletePaths}, function(result) {
				clearMultiInstall();
				enableSearch();
				previousApps(false,true);
			});
		} else {
			enableSearch();
		}
	});
}
function updateMulti() {
	var docker = new Array();
	var pluginArray = new Array();
	var languageArray = new Array();
	var plugin = "";
	var language = "";
	var pluginCount = 0;
	var dockerCount = 0;
	var languageCount = 0;
	var selected = getSelectedApps();
	var cookieWarning = "";

	$.each(selected.plugin,function(i,el) {
		pluginArray.push([el.basename().replace(".plg",""),el]);
		pluginCount += 1;
	});

	if (pluginCount) {
		pluginArray.forEach( function(value) {
			plugin += value[1] + "*";
		});
	}

	$.each(selected.docker,function(i,el) {
		docker.push(el);
		dockerCount += 1;
	});

	$.each(selected.language,function(i,el) {
		languageArray.push(el);
		languageCount += 1;
	});
	if ( languageCount ) {
		languageArray.forEach( function(value) {
			plugin += value + "*";
		});
	}

	swal({
		title: "<?tr("Update Applications")?>",
		text: sprintf(tr("Are you sure you want to update %s applications?"),languageCount+dockerCount+pluginCount),
		type: "info",
		showCancelButton: true,
		cancelButtonText: "<?tr("Cancel")?>",
		showConfirmButton: true,
		confirmButtonText: "<?tr("OK")?>",
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		allowOutsideClick: true,
		html: true
	}, function( isConfirm ) {
		if ( isConfirm ) {
			myCloseAlert();
			if ( docker.length && plugin.length ) {
				$.cookie("ca_plugininstallpending",plugin,{path:"/;SameSite=Lax"});
			}
			if ( docker.length ) {
				saveState();
				$("#sb-nav-close").css("visibility","hidden"); // Because docker install cannot be aborted so why allow window to close
				openBox('/plugins/<?=$plugin?>/scripts/installMulti.php?plugin='+plugin+'&docker='+docker,tr('Install '+makePlural("Application",dockerCount)),600,1100,true);
			} else {
<?if ($nchanCom):?>
				ca_openPlugin('multiplugin update '+plugin,tr('Install '+makePlural("Application",pluginCount)),'','refresh');
<?else:?>
				openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.php&arg1='+plugin,tr('Install '+makePlural("Application",pluginCount)),600,900,true);
<?endif;?>
				enableSearch();
			}
		} else {
			enableSearch();
		}
	});
}

function installMulti() {
	var docker = new Array();
	var pluginArray = new Array();
	var plugin = "";
	var pluginCount = 0;
	var dockerCount = 0;
	var selected = getSelectedApps();
	var cookieWarning = "";

	$.each(selected.plugin,function(i,el) {
		pluginArray.push([el.basename().replace(".plg",""),el]);
		pluginCount += 1;
	});
// Sort them so that the install in the same order as if the system was booting.
// NOTE: The sort drops the .plg from the order so that UD+ winds up installing after UD.  This differs from the boot sequence.
	pluginArray.sort(installSort);
	if (pluginCount) {
		pluginArray.forEach( function(value) {
			plugin += value[1] + "*";
		});
	}

	$.each(selected.docker,function(i,el) {
		docker.push(el);
		dockerCount += 1;
	});
	disableSearch();
	if ( ! cookiesEnabled() && dockerCount && pluginCount ) {
		pluginCount = 0;
		cookieWarning = "<br><?tr("Cookies not enabled.  Plugins must be separately installed from docker applications")?>";
	}
	if ( (dockerCount + pluginCount) > 1 ) {
		var buttonText = "<?tr("Yes, install them")?>";
	} else {
		var buttonText = "<?tr("Yes, install it")?>";
	}
	var text = sprintf(tr("Are you sure you want to install %s docker and %s plugin application(s)?"),dockerCount,pluginCount);
	text = text.concat(dockerCount ? "<br><span class='ca_italic'><?tr("Docker applications will be installed utilizing the most recently saved template with no user input on your part")?></span>" : "");
	text = text.concat(cookieWarning ? "<br><span class='caHighlight>"+cookieWarning+"</span>" : "");
	swal({
		title: dockerCount+pluginCount > 1 ? tr("Install Applications") : tr("Install Application"),
		text: text,
		type: "info",
		showCancelButton: true,
		cancelButtonText: "<?tr("Cancel")?>",
		showConfirmButton: true,
		confirmButtonText: buttonText,
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		allowOutsideClick: true,
		html: true
	}, function( isConfirm ) {
		if ( isConfirm ) {
			myCloseAlert();
			if ( docker.length && plugin.length ) {
				$.cookie("ca_plugininstallpending",plugin,{path:"/;SameSite=Lax"});
			}
			if ( docker.length ) {
				$("#sb-nav-close").css("visibility","hidden"); // Because docker install cannot be aborted so why allow window to close
				openBox('/plugins/<?=$plugin?>/scripts/installMulti.php?plugin='+plugin+'&docker='+docker,tr('Install '+makePlural("Application",dockerCount)),600,1100,true);
			} else {
			pluginArray.forEach(function(value) {
				hidePluginPending(value[1]);
			});
<?if ($nchanCom):?>
				post({action:'saveMultiPluginPending',plugin:plugin},function(data) {
					ca_openPlugin('multiplugin install '+plugin,tr('Install '+makePlural("Application",pluginCount)),'','refresh');
				});
<?else:?>
				openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.php&arg1='+plugin,tr('Install '+makePlural("Application",pluginCount)),600,900,true);
<?endif;?>
				enableSearch();
			}
		} else {
			enableSearch();
		}
	});
}

function updateDisplay(content) {
	// This has to be first.  If this doesn't happen, performance gets worse the more you click around
	$(".supportButtonCardContext,.actionsButtonContext").each(function() {
		var ID = $(this).attr("id");
		context.destroy("#"+ID);
	});

	$("#templates_content").html(content);
	setToolTip();
	enableSearch();
	$('img').on("error",function() {
		if ( $(this).hasClass("spotlightIcon") )
			$(this).attr('src','<?=$caPaths['SpotlightIcon-backup']?>');
		else
			$(this).attr('src',"/plugins/dynamix.docker.manager/images/question.png");
	});
	context.init();
	$('.supportButtonCardContext').each(function() {
		var supportContext = $(this).data("context");
		if (supportContext) {
			var ID = $(this).attr("id");
			var opts = [];
			supportContext.forEach(function(item,index){
				opts.push({text:item.text,icon:item.icon,action:function(){openNewWindow(item.link,'_blank');}});
			});
			context.attach('#'+ID, opts);
		}
	});

	$('.actionsButtonContext').each(function() {
		var actionsContext = $(this).data("context");
		if (actionsContext) {
			var ID = $(this).attr("id");
			var opts = [];
			actionsContext.forEach(function(item,index){
				if ( item.divider ) {
					opts.push({divider:true});
				} else {
					opts.push({text:item.text,icon:item.icon,action:function(){eval(item.action);}});
				}
			});
			context.attach('#'+ID, opts);
		}
	});
	$(".cardDesc").each(function() {
		var description = $(this).html();
		while (isOverflown(this)) {
			description = description.slice(0,-5);
			if ( description.length < 5 ) // Safari under certain circumstances thinks that non-displayed cards are always overflown
				return false;
			$(this).html(description + "... <span class='card_readmore'><?=tr("Read more")?></span>");
		}
	});
	$(".ca_applicationName").each(function() {
		var newSize = 100;
		while (isOverflown(this)) {
			console.log(this);
			var existingSize = $(this).css("font-size");
			var size = parseInt(existingSize);
			if ( size == newSize + 1 ) {  // looks like browsers in Chinese have a minimum enforced font-size
				break;
			}
			var newSize = size - 1;
			if (newSize == 8)
				break;
			
			$(this).css("font-size",newSize+"px");
		}
	});
	$(".betaPopupText,.installedCardText,.upgradePopupText,.ltofficialPopupText").each(function() {
		var newSize = 100;
		while (isOverflown(this,true)) {
			var existingSize = $(this).css("font-size");
			var size = parseInt(existingSize);
			if ( size == newSize + 1 ) {  // looks like browsers in Chinese have a minimum enforced font-size
				break;
			}
			var newSize = size - 1;
			if (newSize == 0)
				break;
			
			$(this).css("font-size",newSize+"px");
		}
	});	
	if ( $("html").hasClass("translated-ltr") || $("html").hasClass("translated-rtl") || $("head").hasClass("translated-ltr") || $("head").hasClass("translated-rtl") ) {
		data.translationBanner = addBannerWarning("<?=tr("Browser translation detected.  Display issues may result")?>");
	}	else {
		removeBannerWarning(data.translationBanner);
	}
//	saveState();

	if ( ! $(".startupButton").hasClass("selectedMenu") && ! data.docker) {
		$(".maxPerPage").show();
	}

}

function isOverflown(el,type=false){
	if (type)
		return (el.scrollWidth > el.clientWidth);
	else
		return (el.scrollHeight > el.clientHeight);
	
	return (el.scrollHeight > el.clientHeight) || (el.scrollWidth > el.clientWidth)||(el.offsetWidth < el.scrollWidth);
}

function saveState() {
	<? if ( $cfg['debugging'] == "yes" ):?>
		console.log("Save State");
	<?endif;?>
	$.cookie("ca_categoryText",$("#Category").html(),{path:"/;SameSite=Lax"});
	$.cookie("ca_data",JSON.stringify(data),{path:"/;SameSite=Lax"});
	$.cookie("ca_searchActive",data.searchActive,{path:"/;SameSite=Lax"});
	$.cookie("ca_installMulti",$(".multi_installDiv").is(":visible"),{path:"/;SameSite=Lax"});
	var selectedMenu = $(".selectedMenu").data("category");
	if ( ! selectedMenu ) {
		selectedMenu = "";
	}
	var categoriesEnabled = new Array();
	$(".caMenuEnabled").each(function(){
		categoriesEnabled.push($(this).data("category"));
	});
	$.cookie("ca_selectedMenu",selectedMenu,{path:"/;SameSite=Lax"});
	$.cookie("ca_filter",$("#searchBox").val(),{path:"/;SameSite=Lax"});
	$.cookie("ca_categoryName",$(".categoryMenuName").html(),{path:"/;SameSite=Lax"});
}

function restoreState() {
	swalBackground("transparent");

	<? if ( $cfg['debugging'] == "yes" ):?>
		console.log("Restore State");
	<?endif;?>
	$.removeCookie("ca_languageSwitch",{path:'/'});

	$("#Category").html($.cookie("ca_categoryText"));
	if ( $.cookie("ca_installMulti") == "true" ) {
		$(".multi_installDiv").show();
	} else {
		$(".multi_installDiv").hide();
	}
	$.removeCookie("ca_categoryText");

	data = JSON.parse($.cookie("ca_data"));
	$.removeCookie("ca_data");
	data.searchActive = evaluateBoolean($.cookie("ca_searchActive"));
	restoreStateMenu = $.cookie("ca_selectedMenu");
	$(".categoryMenuName").html($.cookie("ca_categoryName"));
	var filter = $.cookie("ca_filter");
	$("#searchBox").val(filter);
	if (filter)
		$("#searchButton").removeClass("fa-search").addClass("fa-remove");

	var ca_sortIcon = $.cookie("ca_sortIcon");
//	enableIcon("#sortIcon",ca_sortIcon);
	post({action:"getSortOrder"},function(sortOrder) {
		$(".sortIcons").removeClass("enabledIcon");
		$(".sortIcons").each(function() {
			if ( ($(this).attr("data-sortBy") == sortOrder.sortBy) && ($(this).attr("data-sortDir") == sortOrder.sortDir) ) {
				$(this).addClass("enabledIcon");
			}
		});
	});
	populateAutoComplete();
	clearMultiInstall();
}

function disableSearch() {
	$("#searchBox").prop("disabled",true);
}

function enableSearch() {
	$("#searchBox").prop("disabled",false);
}

function evaluateBoolean(str) {
	regex=/^\s*(true|1|on)\s*$/i
	return regex.test(str);
}

function cookiesEnabled() {
	return evaluateBoolean(navigator.cookieEnabled);
}

function showCredits() {
	$(".multi_installDiv,.dockerSearch,.checkForUpdates").hide();
	clearCategory(); clearSearchBox();
	var credits = $('#caCredits').html();
	updateDisplay(credits);
	$(".maxPerPage").hide();
}

function showStatistics() {
	$(".multi_installDiv,.dockerSearch,.checkForUpdates").hide();
	clearCategory(); clearSearchBox();
	post({action:'statistics'},function(result) {
		updateDisplay(result.statistics);
		$(".maxPerPage").hide();
		disableSearch();
	});
}

function caChangeLog() {
	$(".multi_installDiv,.dockerSearch,.checkForUpdates").hide();
	clearCategory(); clearSearchBox();
	post({action:'caChangeLog'},function(result) {
		updateDisplay(result.changelog);
	});
}

function scrollToTop() {
	$('html,body').animate({scrollTop:0},0);
}

function addDockerWarning(enableDisable) {
	if (enableDisable) {
		switch (enableDisable) {
			case 1:
				var msg = "<?tr('Docker Service Not Enabled - Only Plugins Available To Be Installed Or Managed')?>";
				break;
			case 2:
				var msg = "<?tr('Docker system failed to start - Only Plugins Available To Be Installed Or Managed')?>";
				break;
			case 3:
				var msg = "<?tr('Array not started - Only Plugins Available To Be Installed Or Managed')?>";
				break;
			default:
				var msg = "Docker apps not available to install - Unknown reason why";
				break;
		}
		if ( dockerWarningAdded === false) {
			dockerWarningAdded = addBannerWarning(msg,true,false);
			$(".dockerSpecific").removeClass("caMenuEnabled").addClass("caMenuDisabled");
		}
	} else {
		if ( dockerWarningAdded !== false ) {
			removeBannerWarning(dockerWarningAdded);
			$(".dockerSpecific").removeClass("caMenuDisabled").addClass("caMenuEnabled");
			dockerWarningAdded = false;
		}
	}
}

String.prototype.escapeHTML = function() {
	return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
}

function postNoSpin(options,callback) {
	var URL = "/plugins/<?=$plugin?>/include/exec.php";

	if ( typeof options === "function" ) {
		callback = options;
	} else {
		<? if ( $cfg['debugging'] == "yes" ):?>
			var msg = "No Spin Post: ";
			console.log(msg+JSON.stringify(options));
		<?endif;?>
	}
	var URL = "/plugins/<?=$plugin?>/include/exec.php";

	if ( typeof options === "function" ) {
		callback = options;
	}
	if ( typeof callback === "function" ) {
		$.post(URL,options,function(retval){
			try {
				console.log(retval);
				var result = JSON.parse(retval);
				if (result.error) {
					alert(result.error);
				}
			} catch(e) {
				myCloseAlert();
				myCloseSpinner();
				if ( ! $.trim(retval) ) {
					retval = "<?tr("No data was returned.  It is probable that another browser session has rebooted your server.  Reloading this browser tab will probably fix this error")?>";
				}
				if ( retval.indexOf("<!DOCTYPE html>") === 0 ) {
					alert("<?tr("You have been logged out")?>");
					window.location.reload();
				}	else {
					$("#templates_content").html(sprintf(tr("Something really wrong went on during %s"),options.action)+"<br><?tr("Post the ENTIRE contents of this message in the Community Applications Support Thread")?><br><br>OS: <?=$unRaidSettings['version']?> <?=$md5Error ? "<br>Modified CA" : ""?><br>Browser: <?=$_SERVER['HTTP_USER_AGENT']?><br>Language: <?=$_SESSION['locale']?><br><br>"+retval.escapeHTML());
					throw new Error("Something went badly wrong!"+options.action);
				}
			}
			<? if ( $cfg['debugging'] == "yes" ):?>
				console.groupCollapsed("Result "+options.action);
				console.log(result);
				console.groupEnd();
			<?endif;?>
			try {
				eval(callback(result));
			} catch(e) {
				post({action:'javascriptError',postCall:options.action,retval:result});
				alert("Fatal error during "+options.action+" "+e);
			}
			if (result.script) {
				try {
					eval(result.script);
				} catch(e) {
					alert("Could not execute Script "+e);
				}
			}
		});
	} else {
		$.post(URL,options);
	}
}
function post(options,callback) {
	var URL = "/plugins/<?=$plugin?>/include/exec.php";

	if ( typeof options === "function" ) {
		callback = options;
	} else {
		<? if ( $cfg['debugging'] == "yes" ):?>
			var msg = postCount > 0 ? "Embedded Post: " : "Post: ";
			console.log(msg+JSON.stringify(options));
		<?endif;?>
	}

	if ( postCount == 0 && ! options.noSpinner ) {
		mySpinner();
	}
	postCount++;
	<? if ( $cfg['debugging'] == "yes" ):?>
		console.log("Post Count: "+postCount);
	<?endif;?>
	if ( typeof callback === "function" ) {
		$.post(URL,options,function(retval){
			try {
				var result = JSON.parse(retval);
				if (result.error) {
					alert(result.error);
				}
			} catch(e) {
				myCloseAlert();
				myCloseSpinner();
				if ( ! $.trim(retval) ) {
					retval = "<?tr("No data was returned.  It is probable that another browser session has rebooted your server.  Reloading this browser tab will probably fix this error")?>";
				}
				if ( retval.indexOf("<!DOCTYPE html>") === 0 ) {
					myCloseSpinner();
					myCloseAlert();
					alert("<?tr("You have been logged out")?>");
					window.location.reload();
				}	else {
					$("#templates_content").html(sprintf(tr("Something really wrong went on during %s"),options.action)+"<br><?tr("Post the ENTIRE contents of this message in the Community Applications Support Thread")?><br><br>OS: <?=$unRaidSettings['version']?> <?=$md5Error ? "<br>Modified CA" : ""?><br>Browser: <?=$_SERVER['HTTP_USER_AGENT']?><br>Language: <?=$_SESSION['locale']?><br><br>"+retval.escapeHTML());
					throw new Error("Something went badly wrong!"+options.action);
				}
			}
			<? if ( $cfg['debugging'] == "yes" ):?>
				console.groupCollapsed("Result "+options.action);
				console.log(result);
				console.groupEnd();
			<?endif;?>
			try {
				eval(callback(result));
			} catch(e) {
				post({action:'javascriptError',postCall:options.action,retval:result});
				alert("Fatal error during "+options.action+" "+e);
			}
			if (result.script) {
				try {
					eval(result.script);
				} catch(e) {
					alert("Could not execute Script "+e);
				}
			}
			if (result.globalScript) {
				try {
					eval(result.globalScript);
				} catch(e) {
					alert("Could not execute Script "+e);
				}
			}
			postCount--;
			if (postCount < 0) postCount = 0;
			if ( postCount == 0 && ! options.noSpinner) {
				myCloseSpinner();
			}
		});
	} else {
		$.post(URL,options);
		postCount--;
		if ( postCount < 0 ) postCount = 0;
		if ( postCount == 0) {
			myCloseSpinner();
		}
	}
	if ( ! cookiesEnabled() ) {
		if ( cookieWarning === false) {
			cookieWarning = addBannerWarning("<?tr("Community Applications works best when cookies are enabled in your browser.  Certain features may not be available.")?>");
		}
	} else {
		if ( cookieWarning !== false ) {
			removeBannerWarning(cookieWarning);
			cookieWarning = false;
		}
	}
}

function setFavRepoSearch() {
	post({action:'getFavourite'},function(result) {
		if (result.favourite) {
			$(".favouriteRepo").addClass("caMenuEnabled").removeClass("caMenuDisabled");
		} else {
			$(".favouriteRepo").addClass("caMenuDisabled").removeClass("caMenuEnabled");
		}
		$(".favouriteRepo").attr("data-repository",result.favourite);
	});
}

function getCategories() {
	post({action:'get_categories'},function(result) {
		$("#category_list").html(result.categories);
		$(".caMenuItem").each(function() {
			if ( ! ( $(this).hasClass("favouriteRepo") || $(this).hasClass("caPinnedMenu") ) ) {
				$(this).addClass("caMenuEnabled").removeClass("caMenuDisabled");
			}
		});
		setFavRepoSearch();

		post({action:'areAppsPinned'},function(result) {
			if (!result.status) {
				$(".caPinnedMenu").removeClass("caMenuEnabled").addClass("caMenuDisabled");
			} else {
				$(".caPinnedMenu").removeClass("caMenuDisabled").addClass("caMenuEnabled");
			}
		});

		if ( ! restoreStateMenu )
			restoreStateMenu = $.cookie("ca_startupButton");

		<? if ( $cfg['debugging'] == "yes" ):?>
			console.log(restoreStateMenu);
		<?endif;?>
		var menuItem = $.find(".caMenuItem[data-category='"+restoreStateMenu+"']");
		$(".caMenuItem").each(function(){
			$(this).removeClass("selectedMenu");
		});
		$(menuItem).addClass("selectedMenu");
		$(menuItem).parent().show();
		$(menuItem).next().show();
		restoreStateMenu = false;

		if ( $("#searchBox").val() ) {
			post({action:'getCategoriesPresent'},function(result) {
				$(".categoryMenu").removeClass("caMenuEnabled").addClass("caMenuDisabled");
				result.forEach(function(category) {
					var menuItem = $.find(".caMenuItem[data-category='"+category+"']");
					$(menuItem).removeClass("caMenuDisabled").addClass("caMenuEnabled");
					document.referrer = "/Apps";
				});
				var selectedMenu = $.cookie("ca_selectedMenu");
				if ( selectedMenu ) {
					var menuItem = $.find(".caMenuItem[data-category='"+selectedMenu+"']");
					$(menuItem).addClass("selectedMenu");
				}	else
					$(".allApps").addClass("selectedMenu");

			});
		}
	});
}

function feedWarning(currentServer) {
	if ( currentServer != "Primary Server" ) {
		if ( currentServer == "" ) {
			addBannerWarning("<?tr("Unknown error happened.  Please post a screenshot in the support thread of the Statistics screen")?>");
		} else {
				if ( !backupServerWarning ) {
				backupServerWarning = addBannerWarning("<?tr("Backup Server Active.  Some icons may not appear, and plugin installations may be affected")?>",true,true);
			} else {
				removeBannerWarning(backupServerWarning);
				backupServerWarning = false;
			}
		}
	} else if ( backupServerWarning ) {
		removeBannerWarning(backupServerWarning);
		backupServerWarning = false;
	}
}

function tr(string) {
	<?if ( ! ($_SESSION['locale'] == "" || $_SESSION['locale'] == "en_US") ) : ?>
		return _(string);
	<?else: ?>
		return string;
	<?endif;?>
}

function CAswitchLanguage(language) {
	if ( language == "en_US" || ! language)
		var oldlanguage = '<?=$locale?>';
	else
		var oldlanguage = "";

	data.searchActive = true; // so the system doesn't resort
	saveState();
	$.cookie('locale',oldlanguage,{path:"/;SameSite=Lax"}); // save the previous locale
	post({action:'switchLanguage',language:language},function(result) {
		$.cookie("ca_languageSwitch","switched",{expires:365,path:"/;SameSite=Lax"});
		myCloseSpinner();
		window.location.reload();
	});
}

function installLanguage(languageURL,language) {
	hideLanguagePending(language);
	disableSearch();
<?if ($nchanCom):?>
	ca_openPlugin('language install '+languageURL,"<?tr('Install Language Pack')?>",'','postLanguageRefresh');
<?else:?>
	openBox('/plugins/community.applications/scripts/languageInstall.sh&arg1=install&arg2='+languageURL,"<?tr('Install Language Pack')?>",600,900,true,"postLanguageRefresh");
<?endif;?>
}

function updateLanguage(language) {
	hideLanguagePending(language);
	disableSearch();
	$.cookie("updateLanguage",language,{SameSite:'Lax'});
<?if ($nchanCom):?>
	ca_openPlugin('language update '+language,"<?tr('Update Language Pack')?>",'','postUpdateLanguage');
<?else:?>
	openBox('/plugins/community.applications/scripts/languageInstall.sh&arg1=update&arg2='+language,"<?tr('Update Language Pack')?>",600,900,true,"postUpdateLanguage");
<?endif;?>
}

function postUpdateLanguage() {
	var languageUpdate = $.cookie("updateLanguage");
	var currentLanguage = "<?=$_SESSION['locale']?>";

	if (languageUpdate == currentLanguage)
		window.location.reload();
	else {
		if ( $(".selectedMenu").data("category") == "action_centre" ) {
			actionCentre();
		} else {
			var apppath = $.cookie("sidebarAppPath");
			var appname = $.cookie("sidebarAppName");
			showSidebarApp(apppath,appname);
			refreshDisplay();
		}
	}
}
function removeLanguage(language) {
	hideLanguagePending(language);
	closeSidebar();
<?if ($nchanCom):?>
	ca_openPlugin('language remove '+language,"<?tr('Remove Language Pack')?>",'','postLanguageRemove');
<?else:?>
	openBox('/plugins/community.applications/scripts/languageInstall.sh&arg1=remove&arg2='+language,"<?tr('Remove Language Pack')?>",600,900,true,"postLanguageRemove");
<?endif;?>
}

function postLanguageRefresh() {
	var apppath = $.cookie("sidebarAppPath");
	var appname = $.cookie("sidebarAppName");
	if ( $.trim(apppath) ) {
		showSidebarApp(apppath,appname);
	}
	refreshDisplay();
}

function postLanguageRemove() {
	$(".selectedMenu").trigger("click");
/* 	var cat = $(".selectedMenu").data("category");
	if ( cat == "installed_apps" || cat == "inst_plugins" || cat == "inst_docker" ) {
		postUninstallPlugin();
		return;
	}
	postLanguageRefresh(); */
}

function updateDocker(container) {
	closeSidebar();
	$("#sb-nav-close").css("visibility","hidden"); // Because docker install cannot be aborted so why allow window to close
	if ( $(".selectedMenu").data("category") == "action_centre" ) {
		var postFunction = "actionCentre";
	} else {
		var postFunction = "refreshDisplay";
	}
	openBox('/plugins/community.applications/scripts/installUpdate.php?ct[]='+encodeURIComponent(container),tr('Update Container'),600,1100,true,postFunction);
}

function setToolTipForFavourite() {
	$(".ca_fav").each(function(){
		if ( $(this).hasClass("ca_favouriteRepo") ) {
			$(this).attr("title","<?tr("Click to remove favourite repository");?>");
		} else {
			var repository = $(this).data("repository");
			repository = repository.replace("'s Repository","").replace("' Repository","").replace(" Repository","");
			$(this).attr("title",sprintf("Click to set %s as favourite repository",repository));
		}
	});
}

function setFavourite(button) {
	$(button).toggleClass("fav nonfav");
	var repo = $(button).data("repository");
	clearTimeout(repoBannerTimer);

	post({action:'toggleFavourite',repository:repo},function(data) {
		if ( repoBanner !== false )
			removeBannerWarning(repoBanner);
		if ( data.fav ) {
			var bannerMessage = repo.replace("'s Repository","").replace("' Repository","").replace(" Repository","");
			repoBanner = addBannerWarning(sprintf("%s set as favourite repository",bannerMessage),false,true);
		} else {
			var bannerMessage = repo.replace("'s Repository","").replace("' Repository","").replace(" Repository","");
			repoBanner = addBannerWarning(sprintf("%s removed as favourite repository",bannerMessage),false,true);
		}
		repoBannerTimer = setTimeout(function() {
			removeBannerWarning(repoBanner);
			repoBanner = false;
		},5000);
		$(".favCardBackground").each(function() {
			if ( $(this).data("repository") == data.fav.replace("'","") )
				$(this).show("slow");
			else
				$(this).hide("slow");
		});
		setFavRepoSearch();
	});
}

function popupInstallXML(xml,type,comment="",ports="") {
	event.stopPropagation();
	saveState();
	var flag = false;
	if ( ports ) {
		ports = JSON.parse(ports);
		if ( ports ) {
			ports.forEach(function(port){
				portsInUse.forEach(function(used) {
					if (port == used)
						flag = true;
				});
			});
		}
		if (flag) {
			comment = comment.concat("<br><?tr("One or more ports used by this application are already in use by another service or app running on your server.  You will need to adjust the host ports accordingly on the template")?>");
		}
	}
	if ( $.trim(comment) ) {
		swal({
			title: "<?tr("Attention")?>",
			text: comment,
			allowOutsideClick: true,
			showConfirmButton: true,
			showCancelButton: true,
			confirmButtonText: "<?tr("OK")?>",
			cancelButtonText: "<?tr("Cancel")?>",
			animation: false,
			type: "warning",
			html: true
		}, function (isConfirm) {
			if (isConfirm) {
				installXML(xml,type);
			}
		});
	} else {
		installXML(xml,type);
	}
}
function installXML(xml,type) {
	post({action:'createXML',xml:xml,type:type},function(result){
		if ( result.status == "ok" ) {
			if (type == "second") {
				type = "default";
			}
			openNewWindow("/Apps/AddContainer?xmlTemplate="+type+":"+xml);
		}
	});
}

function popUpChart(descData) {
	if ( $("#trendChart").length ) {
		var fontSize = 14;

		if (descData.trendLabel.length > 3) {
			var fontSize = 12;
		}

		var ctx = document.getElementById("trendChart").getContext('2d');
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					data: descData.trendData,
					borderColor: '#FF8C2F',
					trendlineLinear: {
						style: "rgb(255 ,66 ,255)",
						lineStyle: "dotted",
						width: 2
					}
				}],
				labels: descData.trendLabel
			},
			options: {
				tooltips: {
					callbacks: {
						label: function(tooltipItem,data) {
							return tooltipItem.yLabel.toLocaleString()+"%";
						}
					}
				},
				title: {
					display: true,
					text: "<?tr("Trend Per Month");?>",
					fontSize: 16,
					fontColor: '<?=$tooltipsterContent?>',
				},
				legend: {
					display: false
				},
				events: ["mousemove","mouseout"],
				scales: {
					yAxes: [{
						gridLines: {
							color: '<?=$chartGrid?>'
						},
						ticks: {
							callback: function(label,index,labels) {
								return label + " %";
							},
							precision: 0,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}],
					xAxes: [{
						gridLines: {
							color: '<?=$chartGrid?>'
						},
						ticks: {
							fontSize: fontSize,
							fontColor: '<?=$tooltipsterContent?>',
							color: '#ffffff'
						}
					}]
				}
			}
		});
	}
	if ( $("#downloadChart").length ) {
		var ctx = document.getElementById("downloadChart").getContext('2d');
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					data: descData.downloadtrend,
					borderColor: '#FF8C2F',
					trendlineLinear: {
						style: "rgb(255 ,66 ,255)",
						lineStyle: "dotted",
						width: 2
					}
				}],
				labels: descData.downloadLabel
			},
			options: {
				tooltips: {
					callbacks: {
						label: function(tooltipItem,data) {
							return tooltipItem.yLabel.toLocaleString();
						}
					}
				},
				title: {
					display: true,
					text: "<?tr("Downloads Per Month")?>",
					fontSize: 16,
					fontColor: '<?=$tooltipsterContent?>'
				},
				legend: {
					display: false
				},
				events: ["mousemove","mouseout"],
				scales: {
					yAxes: [{
						gridLines: {
							color: '<?=$chartGrid?>'
						},
						ticks: {
							callback: function(label,index,labels) {
								return label.toLocaleString();
							},
							fontColor: '<?=$tooltipsterContent?>'
						}
					}],
					xAxes: [{
						gridLines: {
							color: '<?=$chartGrid?>'
						},
						ticks: {
							fontSize: fontSize,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}]
				}
			}
		});
	}
	if ( $("#totalDownloadChart").length ) {
		var ctx = document.getElementById("totalDownloadChart").getContext('2d');
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					data: descData.totaldown,
					borderColor: '#FF8C2F'
				}],
				labels: descData.totaldownLabel
			},
			options: {
				tooltips: {
					callbacks: {
						label: function(tooltipItem,data) {
							return tooltipItem.yLabel.toLocaleString();
						}
					}
				},
				title: {
					display: true,
					text: "<?tr("Total Downloads");?>",
					fontSize: 16,
					fontColor: '<?=$tooltipsterContent?>'
				},
				legend: {
					display: false
				},
				events: ["mousemove","mouseout"],
				scales: {
					yAxes: [{
						gridLines: {
							color: '<?=$chartGrid?>'
						},
						ticks: {
							callback: function(label,index,labels) {
								return label.toLocaleString();
							},
							fontColor: '<?=$tooltipsterContent?>'
						}
					}],
					xAxes: [{
						gridLines: {
							color: '<?=$chartGrid?>'
						},
						ticks: {
							fontSize: fontSize,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}]
				}
			}
		});
	}
}

function showSidebarApp(apppath,appname) {
	clearTimeout(iconHoverTimer);
	$.cookie("sidebarAppPath",apppath,{path:"/;SameSite=Lax"});
	$.cookie("sidebarAppName",appname,{path:"/;SameSite=Lax"});
	data.sidebarapppath = apppath;
	data.sidebarappname = appname;
	$("body").addClass("body_sidebarScroll");
	<? if ($unRaid612): ?>
		$(".nav-user.show").hide();
	<?endif;?>
	$("#sidenavContent").html("");
	$(".sidebar").fadeIn();
	$(".back_to_top").addClass("back_to_top_hide");
	$(".sidenav").removeClass("sidenavHide").addClass("sidenavShow");
	setTimeout(function() {
		post({action:'getPopupDescription',appName:appname,appPath:apppath},function(result) {
			$("#sidenavContent").html(result.description);
			$('img').on("error",function() {
				if ( $(this).hasClass("spotlightIcon") )
					$(this).attr('src','<?=$caPaths['SpotlightIcon-backup']?>');
				else
					if ( ! $(this).hasClass("licence") ) {
						$(this).attr('src',"/plugins/dynamix.docker.manager/images/question.png");
					}
			});
			$('.screenshot').magnificPopup({
				closeMarkup: "<span class='mfp-close narrow'>"+tr("CLOSE")+"</span>",
				closeOnContentClick: true,
				type:'image',
				removalDelay: 300,
				mainClass: 'mfp-fade',
				gallery: true,
				zoom: {
					enabled: true,
					duration: 500,
					easing: 'ease-in-out'
				},
				callbacks: {
					open: function() {
						$('body').addClass("dimScreenShot");
						closeSidebar();
					},
					close: function() {
						$('body').removeClass("dimScreenShot");
						showSidebarApp(data.sidebarapppath,data.sidebarappname);
					}
				}
			});
			$('.popup_readmore').readmore({maxHeight:250,moreLink:"<i class='ca_readmore fa fa-chevron-down'> <?=tr("SHOW MORE")?></i>",lessLink:"<i class='ca_readmore fa fa-chevron-up'> <?=tr("SHOW LESS")?></i>"})
			popUpChart(result);
			if ( result.supportContext ) {
				var opts = [];
				result.supportContext.forEach(function(item,index){
					opts.push({text:item.text,icon:item.icon,action:function(){openNewWindow(item.link,'_blank');}});
				});
				context.attach('#supportPopup', opts)
			}
			if ( result.actionsContext ) {
				var opts = [];
				result.actionsContext.forEach(function(item,index){
					if ( item.divider ) {
						opts.push({divider:true});
					} else {
						opts.push({text:item.text,icon:item.icon,action:function(){
							eval(item.action);
						}});
					}
				});
				context.attach("#actionsPopup",opts);
			}
			var newSize;
			$(".popupName,.betaPopupText,.popupTableRight,.popupTableLeft,.upgradePopupText,.installedPopupText").each(function() {
				while (isOverflown(this)) {
					var existingSize = $(this).css("font-size");
					var size = parseInt(existingSize);
					if ( size == newSize + 1 ) {  // looks like browsers in Chinese have a minimum enforced font-size
						return false;
					}
					var newSize = size - 1;
					if (newSize == 0)
						return false;

					$(this).css("font-size",newSize+"px");
				}
			});
			postNoSpin({action:'getLastUpdate',ID:result.ID},function(lastUpdate) {
				if (lastUpdate.lastUpdate) {
					$("#template"+result.ID).fadeOut("slow","linear",function() {
						$("#template"+result.ID).html(lastUpdate.lastUpdate);
						$("#template"+result.ID).fadeIn("slow");
					});
				}
			});
		})
	},500);
	$(".sidebar").focus();
}

function showRepoPopup(repository) {
	if ( !repository ) return;
	data.repository = repository;
	context.destroy("#supportPopup");
	context.destroy("#actionsPopup");
	var fromCard = false;

	if ( ! $(".sidebar").is(":visible") ) {
		$.cookie("sidebarAppName","",{path:"/;SameSite=Lax"});
		$.cookie("sidebarAppPath","",{path:"/;SameSite=Lax"});
		var fromCard = true;
	}
	var sidebarAppName = $.cookie("sidebarAppName");
	var sidebarAppPath = $.cookie("sidebarAppPath");

	$("#sidenavContent").html("");

	$(".sidenav").removeClass("sidenavHide").addClass("sidenavShow");
	$(".sidebar").fadeIn();
	$("body").addClass("body_sidebarScroll");
	$("body").css("overflow","hidden !important");
	<? if ($unRaid612): ?>
		$(".nav-user.show").hide();
	<?endif;?>	

	post({action:'getRepoDescription',repository:repository},function(result) {
		$("#sidenavContent").html(result.description);
		$('.popup_readmore').readmore({maxHeight:250,moreLink:"<i class='ca_readmore fa fa-chevron-down'> <?=tr("SHOW MORE")?></i>",lessLink:"<i class='ca_readmore fa fa-chevron-up'> <?=tr("SHOW LESS")?></i>"});
		if (fromCard) {
			$(".popUpBack").hide();
		}
		$('.screenshot').magnificPopup({
			type:'image',
			closeMarkup: "<span class='mfp-close narrow'>"+tr("CLOSE")+"</span>",
			closeOnContentClick: true,
			removalDelay: 300,
			mainClass: 'mfp-fade',
			zoom: {
				enabled: true,
				duration: 500,
				easing: 'ease-in-out'
			},
			callbacks: {
				open: function() {
					$('body').addClass("dimScreenShot");
					closeSidebar();
				},
				close: function() {
					$('body').removeClass("dimScreenShot");
					$(".sidebar").show();
					$.cookie("sidebarAppName",sidebarAppName,{path:"/;SameSite=Lax"});
					$.cookie("sidebarAppPath",sidebarAppPath,{path:"/;SameSite=Lax"});
					showRepoPopup(data.repository);
				}
			}
		});
	});
}

function checkSortOrder() {
	var sortButton = false;
	$(".sortIcons").each(function() {
		if ($(this).hasClass("enabledIcon") && ( ! $(this).hasClass("startupMore") ) ) {
			sortButton = true;
		}
	});
	if ( !sortButton) {
		$(".sortIcons").removeClass("enabledIcon").removeClass("startupMore");
		post({action:"defaultSortOrder"},function(data) {
			$("#defaultSort").addClass("enabledIcon");
		});
	}
}

function initDockerSearch() {
	dockerSearch(1);
	data.docker = "searching docker";
	data.section = "";
	data.selected_category = "";
	$(".selectedMenu").removeClass("selectedMenu");
	$(".nonDockerSearch").removeClass("caMenuEnabled").addClass("caMenuDisabled");
	hideSortIcons();
	$(".subCategory").hide();
	$(".maxPerPage").hide();
}

function dockerSearch(pageNumber) {
	scrollToTop();
	$(".selectedMenu").removeClass("selectedMenu");
	$(".nonDockerSearch").removeClass("caMenuEnabled").addClass("caMenuDisabled");
	var filter = $('#searchBox').val();
	var dockerURL = "https://registry.hub.docker.com/search?q=" + filter;
	data.docker = "searching docker";
	$(".dockerSearch,.multi_installDiv,.checkForUpdates").hide();
	$("#Category").html(sprintf(tr("DockerHub Search for %s"),filter)+" <span id='pageNumber'></span>");
	post({action:'search_dockerhub',filter:filter,page:pageNumber},function(result) {
		updateDisplay(result.display);
	});
}

function dockerConvert(dockerID) {
	saveState();
	swal({
		title: "<?tr("Determine configuration?")?>",
		text: '<?tr('Would you like CA to attempt to determine any applicable paths, ports, and variables for the template?  This will entail performing a test installation of the container.  It will be automatically deleted after processing.  The container will not be started.')?>',
		html: true,
		type: 'info',
		showCancelButton: true,
		showConfirmButton: true,
		confirmButtonText: "<?tr('Yes')?>",
		cancelButtonText: "<?tr('No')?>"
	}, function (isConfirm) {
		if ( isConfirm ) {
			$("#sb-nav-close").css("visibility","hidden"); // Because docker install cannot be aborted so why allow window to close
			openBox('/plugins/<?=$plugin?>/scripts/dockerConvert.php?ID='+dockerID,tr('Docker Test Install'),600,1100,true);
		} else {
			post({action:'convert_docker',ID:dockerID},function(result) {
				myCloseAlert();
				templateURL = "/Apps/AddContainer?xmlTemplate=default:" + $.trim(result.xml);
				openNewWindow(templateURL);
			});
		}
	});

}

function changeMax(max) {
	$("#maxPerPage").html(sprintf("<?tr("Results Per Page: %s")?>",max));
	context.destroy("#maxPerPage");
	context.attach("#maxPerPage",getPerPageOpts(max));
	post({action:"changeMaxPerPage",max:max},function(done) {
		if (done.status == "updated") {
			if ( ! $(".startupButton").hasClass("selectedMenu") ) {
				data.currentpage = 1;
				changeSortOrder(null,null,null);
			}
		}
	});
}

function getPerPageOpts(value) {
	var perPage = [24,48,96];
	var maxPerPageOpts = [];
	perPage.forEach(function(entry) {
		if ( entry != value ) {
			maxPerPageOpts.push({icon:" ",text:sprintf("<?tr("%s Results Per Page")?>",entry),action:function(){ changeMax(entry);}});
		} else {
			maxPerPageOpts.push({icon:"ca_fa-checkmark",text:"<span class='ca_green'>"+sprintf("<?tr("%s Results Per Page")?>",entry)+"</span>",action:function(){ changeMax(entry);}});
		}
	});

	return maxPerPageOpts;
}

function setupActionCentre() {
	// set up action centre - run in background without tying anything up
	var acBanner = false;
	$.post("/plugins/<?=$plugin?>/include/exec.php",{action:'enableActionCentre'},function(data) {
		var ret = JSON.parse(data);
		if ( ret.status == "action" ) {
			if ( !$(".actionCentre").is(":visible") ) {
				if ( ! actionCentreRestoreState ) {
					acBanner = addBannerWarning("<?tr("Action Centre Enabled")?>",false);
					setTimeout(function() {
						removeBannerWarning(acBanner);
					},10000);
				}
				$(".actionCentre").show();
			}
		} else
			$(".actionCentre").hide();
	});
}

function postCheckForUpdates() {
	setupActionCentre();
	$(".selectedMenu").click();
}
</script>

<?include "/usr/local/emhttp/plugins/$plugin/skins/Narrow/skin.html"?>

                )

            [ArrayDevices] => Array
                (
                    [Menu] => Main:1
                    [Title] => Array Devices
                    [Tag] => database
                    [file] => webGui/ArrayDevices.page
                    [root] => webGui
                    [name] => ArrayDevices
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function toggle_state(device,name,action) {
  var button = null;
  if (name) {
    var group = name.replace(/(\d+|\*)$/,'');
    if (name.slice(-1)!='*') {
      $('#dev-'+name).removeClass('fa-circle fa-square fa-warning fa-times').addClass('fa-refresh fa-spin');
    } else {
      if (group=='array') {
        $('[id^="dev-parity"]').removeClass('fa-circle fa-square fa-warning fa-times').addClass('fa-refresh fa-spin');
        $('[id^="dev-disk"]').removeClass('fa-circle fa-square fa-warning fa-times').addClass('fa-refresh fa-spin');
      } else {
        $('[id^="dev-'+group+'"]').removeClass('fa-circle fa-square fa-warning fa-times').addClass('fa-refresh fa-spin');
      }
    }
  } else if (device!='Clear') {
    $('[id^="dev-"]').removeClass('fa-circle fa-square fa-warning fa-times').addClass('fa-refresh fa-spin');
    button = '[id^=button-]';
  }
  devices.stop();
  $.post('/webGui/include/ToggleState.php',{device:device,name:name,action:action,state:'<?=$var['mdState']?>',csrf:'<?=$var['csrf_token']?>'},function(){setTimeout(function(){devices.start();},1000);if (button) $(button).prop('disabled',false);});
}
function display_diskio() {
  if ($.cookie('diskio')===undefined) {
    $('span.number').show(); $('span.diskio').hide();
  } else {
    $('span.diskio').show(); $('span.number').hide();
  }
}
function toggle_diskio(init) {
  if (!init) {
    if ($.cookie('diskio')===undefined) $.cookie('diskio','diskio',{expires:3650}); else $.removeCookie('diskio');
  }
  if ($.cookie('diskio')===undefined) {
    $('i.toggle').removeClass('fa-tachometer').addClass('fa-list');
  } else {
    $('i.toggle').removeClass('fa-list').addClass('fa-tachometer');
  }
  display_diskio();
}

<?if (_var($var,'fsState')=="Started"):?>
$('#tab1').bind({click:function() {$('i.toggle').show('slow');}});
<?endif;?>
</script>

<table class="disk_status wide">
<thead><tr><td>_(Device)_</td><td>_(Identification)_</td><td>_(Temp)_.</td><td>_(Reads)_</td><td>_(Writes)_</td><td>_(Errors)_</td><td>_(FS)_</td><td>_(Size)_</td><td>_(Used)_</td><td>_(Free)_</td></tr></thead>
<tbody id="array_devices">
<?
foreach ($disks as $disk):
  if (_var($disk,'type')=='Parity' or _var($disk,'type')=='Data')
    echo "<tr><td colspan='11'>&nbsp;</td></tr>";
endforeach;
if (_var($display,'total')) echo "<tr class='tr_last'><td colspan='11'>&nbsp;</td></tr>";
?>
</tbody>
</table>

:main_array_devices_help:

<?if (_var($var,'fsState')=="Stopped"):?>
<div></div>
:main_slots_help:
<?endif;?>

                )

            [ArrayOperation] => Array
                (
                    [Menu] => Main:5
                    [Title] => Array Operation
                    [Tag] => snowflake-o
                    [Nchan] => device_list,disk_load,parity_list
                    [file] => webGui/ArrayOperation.page
                    [root] => webGui
                    [name] => ArrayOperation
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$keyfile = file_exists(_var($var,'luksKeyfile'));
$missing = file_exists('/var/tmp/missing.tmp');
$encrypt = false;
$spot    = _var($var,'mdResyncPos',0)>0;

/* only one of $present, $missing, or $wrong will be true, or all will be false */
$forced = $present = $wrong = false;
foreach ($disks as $disk) {
  if (!isset($disk['fsType'])) continue;
  if (strpos(_var($disk,'fsType'),'luks:')!==false || (_var($disk,'fsType')=='auto' && (strpos(_var($var,'defaultFsType'),'luks:')!==false || _var($disk,'luksState',0)==2 || _var($disk,'luksState',0)==3))) {
    $encrypt = true;
    if (_var($disk,'luksState',0)==0) $forced = true;
    if (_var($disk,'luksState',0)==1) $present = true;
    if (_var($disk,'luksState',0)==2) $missing = true;
    if (_var($disk,'luksState',0)==3) $wrong = true;
  }
}
if ($forced && ($present || $missing || $wrong)) $forced = false;

function check_encryption() {
  global $forced, $missing, $wrong;
  if ($forced) $status = _('Enter new key');
  elseif ($missing) $status = _('Missing key');
  elseif ($wrong) $status = _('Wrong key');
  else return;
  echo "<tr><td></td><td class='gap'>",_('Encryption status').":</td><td><span class='red-text'>$status</span><span id='pass'><input name='luksReformat' type='checkbox' onchange='selectInput(this.form)'>permit reformat</span></td></tr>";
  echo "<tr><td></td><td class='gap'>",_('Encryption input').":</td><td>";
  echo "<select name='input' size='1' onchange='selectInput(this.form)'>";
  echo mk_option(1,'text',_('Passphrase'));
  echo mk_option(1,'file',_('Keyfile'));
  echo "</select></td></tr>";
  echo "<tr id='text'><td></td><td class='gap'>",_('Passphrase'),":</td><td><input type='password' name='text' maxlength='512' value='' onkeyup='selectInput(this.form)' placeholder=\""._('use printable characters only')."\"><input name='showPass' type='checkbox' onchange='selectInput(this.form)'>"._('show passphrase')."</td></tr>";
  echo "<tr id='copy'><td></td><td class='gap'>",_('Retype passphrase'),":</td><td><input type='password' name='copy' maxlength='512' value='' onkeyup='selectInput(this.form)'></td></tr>";
  echo "<tr id='file'><td></td><td class='gap'>",_('Keyfile'),":</td><td><input type='file' name='local' onchange='getFileContent(event,this.form)'></td></tr>";
}
function maintenance_mode() {
  echo "<tr>";
  echo "<td></td>";
  echo "<td><input type='checkbox' name='startMode' value='Maintenance'>",_('Maintenance mode'),"</td>";
  echo "<td><b>",_('Maintenance mode'),"</b> - ",_('if checked, Start array but do not mount disks'),"</td>";
  echo "</tr>";
}
function status_indicator() {
  global $var;
  switch (_var($var,'mdColor')) {
   case 'green-on': $orb = 'circle'; $color = 'green'; $help =_('Started, array protected'); break;
   case 'green-blink': $orb = 'circle'; $color = 'grey'; $help = _('Stopped'); break;
   case 'yellow-on': $orb = 'warning'; $color = 'yellow'; $help = _('Started, array unprotected'); break;
   case 'yellow-blink': $orb = 'warning'; $color = 'grey'; $help = _('Stopped'); break;
  }
  echo "<a class='info'><i class='fa fa-$orb orb $color-orb'></i><span>$help</span></a>";
}
function missing_cache() {
  global $disks;
  $missing = false;
  foreach (cache_filter($disks) as $disk) $missing |= (strpos(_var($disk,'status'),'_MISSING')!==false);
  return $missing;
}
function resync($d) {
  return in_array($d,['P','Q']) ? 'Parity-Sync' : 'Data-Rebuild';
}
function print_error($error) {
  return sprintf(_('Finding **%s** error'.($error==1?'':'s')),$error?:'0');
}
?>
<style>
tr#copy,tr#file{display:none}
td.gap{padding-left:26px!important}
td.wrap{white-space:normal!important}
span#pass{display:none;margin-left:20px}
input[type=checkbox]{margin-left:0}
</style>
<script>
var ctrl = '<span class="status <?=$tabbed?"":"vhshift"?>"><a style="cursor:pointer" class="tooltip_diskio" title="_(Toggle reads/writes display)_" onclick="toggle_diskio();return false"><i class="toggle fa"></i></a></span>';

function base64(str) {
  return window.btoa(unescape(encodeURIComponent(str)));
}
function selectInput(form) {
<?if ($wrong && $keyfile):?>
  form.input.value = 'file';
  form.input.disabled = true;
<?endif;?>
  if (form.input.value=='text') {
    form.file.value = '';
    form.local.value = '';
<?if ($forced):?>
    $('#text').show();
    $('#copy').show();
    $('#pass').hide();
    $('input[name="confirmStart"]').prop('disabled',true);
<?elseif ($missing):?>
    $('#text').show();
    $('#copy').hide();
    $('#pass').hide();
    $('input[name="confirmStart"]').prop('disabled',true);
<?elseif ($wrong):?>
    $('#text').show();
    if ($('input[name="luksReformat"]').prop('checked')) $('#copy').show(); else $('#copy').hide();
    $('#pass').show();
    $('input[name="confirmStart"]').prop('disabled',true);
<?endif;?>
    $('#file').hide();
    $('input[name="text"],input[name="copy"]').attr('type',$('input[name="showPass"]').prop('checked')?'text':'password');
    var item = $('input[name="confirmStart"]').length ? $('input[name="confirmStart"]') : $('#cmdStart');
    item.prop('disabled',$('#copy').is(':visible') ? (form.text.value!=form.copy.value || form.text.value=='') : form.text.value=='');
  } else {
    form.text.value = '';
    form.copy.value = '';
    $('#text').hide();
    $('#copy').hide();
    $('#file').show();
<?if ($wrong):?>
    $('#pass').show();
<?else:?>
    $('#pass').hide();
<?endif;?>
    var item = $('input[name="confirmStart"]').length ? $('input[name="confirmStart"]') : $('#cmdStart');
    item.prop('disabled',!form.file.value);
  }
}
function getFileContent(event,form) {
  var input = event.target;
  var reader = new FileReader();
  reader.onload = function(){form.file.value=reader.result;selectInput(form);};
  reader.readAsDataURL(input.files[0]);
}
function prepareInput(form,button) {
  if (button) button.disabled = true;
  $.post('/webGui/include/Report.php',{cmd:'state',pools:'<?=implode(',',$pools)?>'},function(state) {
    if (state.length==0) {
      $(form).append('<input type="hidden" name="cmdStart" value="Start">');
      if (form.input === undefined) {
        form.submit();
        return;
      }
      form.input.disabled = true;
      form.local.disabled = true;
      form.file.disabled = true;
      form.text.disabled = true;
      form.copy.disabled = true;
      if (form.text.value) {
        var valid = new RegExp('^[ -~]+$');
        if (valid.test(form.text.value)) {
          $(form).append('<input type="hidden" name="luksKey" value="'+base64(form.text.value)+'">');
          form.submit();
        } else {
          form.input.disabled = false;
          form.local.disabled = false;
          form.file.disabled = false;
          form.text.disabled = false;
          form.copy.disabled = false;
          swal({title:"_(Printable Characters Only)_",text:"_(Use **ASCII** characters from space ' ' to tilde '~')_<br>_(Otherwise use the **keyfile** method for UTF8 input)_",html:true,type:'error',confirmButtonText:"_(Ok)_"});
        }
        return;
      }
      var data = {};
      data['#file'] = 'unused';
      data['#include'] = 'webGui/include/KeyUpload.php';
      data['file'] = form.file.value;
      $.post('/update.php',data,function(){form.submit();});
    } else {
      swal({title:"_(Wrong Pool State)_",text:state,type:'error',html:true,confirmButtonText:"_(Ok)_"});
    }
  });
}
function parityWarning(form) {
  if (form.md_invalidslot.checked) {
<?if (strpos(_var($disks['parity2'],'status'),'_NP')===false):?>
    var text = "_(*Dual parity* valid requires **ALL** disks in their original slots)_";
<?else:?>
    var text = "_(*Parity valid* requires **ALL** disks to have their original content)_";
<?endif;?>
  } else {
    var text = "_(*Parity* disk(s) content will be overwritten)_";
  }
  swal({title:"_(Proceed to start)_",text:text,html:true,type:'warning',showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){prepareInput(form);});
}
function tab0() {
  $.removeCookie('one');
  $.cookie('tab','tab0');
}
function stopArray(form) {
  $(form).append('<input type="hidden" name="cmdStop" value="Stop">');
<?if ($confirm['stop']):?>
  swal({title:"_(Proceed)_?",text:"_(This will stop the array)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(p){if (p) form.submit(); else $('input[name="cmdStop"]').remove();});
<?else:?>
  form.submit();
<?endif;?>
}
function stopParity(form,text) {
  $(form).append('<input type="hidden" name="cmdCheckCancel" value="">');
<?if ($confirm['stop']):?>
  swal({title:"_(Proceed)_?",text:"_(This will stop the running operation)_: "+text,type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(p){if (p) form.submit(); else $('input[name="cmdCheckCancel"]').remove();});
<?else:?>
  form.submit();
<?endif;?>
}
function pauseParity(form) {
  $.post('/webGui/include/ParityControl.php',{action:'pause'},function(){
    $('#pauseButton').val("_(Resume)_").prop('disabled',true).prop('onclick',null).off('click').click(function(){resumeParity(form);});
    $(form).append('<input type="hidden" name="cmdCheckPause" value="">');
    form.submit();
  });
}
function resumeParity(form) {
  $.post('/webGui/include/ParityControl.php',{action:'resume'},function(){
    $('#pauseButton').val("_(Pause)_").prop('disabled',true).prop('onclick',null).off('click').click(function(){pauseParity(form);});
    $(form).append('<input type="hidden" name="cmdCheckResume" value="">');
    form.submit();
  });
}
function parityHistory() {
  openChanges("parity_history", "_(Parity Operation History)_", "phistory");
}
function shutdown_now(form,cmd) {
  $(form).append('<input type="hidden" name="cmd" value="'+cmd+'">');
<?if ($confirm['down']):?>
  switch (cmd) {
    case 'reboot': var text = "_(This will reboot the system)_"; break;
    case 'shutdown': var text = "_(This will shutdown the system)_"; break;
  }
  swal({title:"_(Proceed)_?",text:text,type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(p){if (p) form.submit(); else $('input[name="cmd"]').remove();});
<?else:?>
  form.submit();
<?endif;?>
}
function toggleApply(checked) {
  $('input[name="#apply"]').prop('disabled',!checked);
}
<?if ($tabbed):?>
$('.tabs').append(ctrl);
if ($.cookie('tab')=='tab0') $('i.toggle').hide();
$('#tab'+$('input[name$="tabs"]').length).click(function(){tab0(); $('i.toggle').hide('slow');});
<?else:?>
$('div[class=title]:not(":last, .disable_diskio")').each(function(){$(this).append(ctrl);});
<?endif;?>
$('.tooltip_diskio').tooltipster({delay:100,trigger:'custom',triggerOpen:{mouseenter:true},triggerClose:{click:false,scroll:true,mouseleave:true}});
toggle_diskio(true);

<?if (_var($var,'fsState')=='Started'):?>
var mymonitor = new NchanSubscriber('/sub/mymonitor',{subscriber:'websocket'});
mymonitor.on('message', function(state) {
  switch (state) {
  case '0': // normal operation
    $('#stop-button').prop('disabled',false);
    $('#stop-text').html("");
<?if (_var($var,'fsState')!="Stopped"):?>
    $('#spinup-button').prop('disabled',false);
    $('#spindown-button').prop('disabled',false);
<?endif;?>
<?if (_var($var,'shareUser')=='e' && $pool_devices):?>
    $('#mover-button').prop('disabled',false);
    $('#mover-text').html("<b>_(Move)_</b> _(will immediately invoke the Mover)_.&nbsp;<a href=\"/Main/Settings/Scheduler\"<?if($tabbed):?> onclick=\"$.cookie('one','tab2')\"<?endif;?>>(_(Schedule)_)</a>");
<?endif;?>
    break;
  case '1': // parity running
    $('#stop-button').prop('disabled',true);
    $('#stop-text').html("<br><small>_(Disabled)_ -- _(Parity operation is running)_</small>");
<?if (_var($var,'fsState')!="Stopped" && _var($var,'mdResync',0)>0):?>
    $('#spinup-button').prop('disabled',true);
    $('#spindown-button').prop('disabled',true);
<?endif;?>
<?if (_var($var,'shareUser')=='e' && $pool_devices):?>
    $('#mover-button').prop('disabled',true);
    $('#mover-text').html("_(Disabled)_ -- _(Parity operation is running)_");
<?endif;?>
    break;
  case '2': // mover running
    $('#stop-button').prop('disabled',true);
    $('#stop-text').html("<br><small>_(Disabled)_ -- _(Mover is running)_</small>");
<?if (_var($var,'shareUser')=='e' && $pool_devices):?>
    $('#mover-button').prop('disabled',true);
    $('#mover-text').html("_(Disabled)_ - _(Mover is running)_.");
<?endif;?>
    break;
  case '3': // btrfs running
    $('#stop-button').prop('disabled',true);
    $('#stop-text').html("<br><small>_(Disabled)_ -- _(BTRFS operation is running)_</small>");
<?if (_var($var,'shareUser')=='e' && $pool_devices):?>
    $('#mover-button').prop('disabled',true);
    $('#mover-text').html("_(Disabled)_ -- _(BTRFS operation is running)_");
<?endif;?>
    break;
  }
});
mymonitor.start();
<?endif;?>

var arraymonitor = new NchanSubscriber('/sub/arraymonitor',{subscriber:'websocket'});
arraymonitor.on('message', function(state) {
  if (state==1 && !timers.arraymonitor) timers.arraymonitor = setTimeout(refresh,1250);
});

var devices = new NchanSubscriber('/sub/devices<?=$spot?",parity":""?>',{subscriber:'websocket'});
devices.on('message', function(msg,meta) {
  switch (<?if($spot):?>meta.id.channel()<?else:?>0<?endif;?>) {
  case 0:
    // array + pool + ua devices
    var tables = msg.split('\0');
    // get array state
    var stopped = tables.pop();
    for (var n=0; n < tables.length; n++) {
      // get table name and content
      var table = tables[n].split('\n');
      $('#'+table[0]).html(table[1]);
    }
    display_diskio();
    // stop updating when array is stopped
    if (stopped==1) {
<?if (_var($var,'fsState')=='Started'):?>
      setTimeout(refresh,0);
<?else:?>
      if (!timers.stopped) timers.stopped = setTimeout(function(){devices.stop(); arraymonitor.start();},1000);
<?endif;?>
    }
    break;
  case 1:
    // running parity status
    $.each(msg.split(';'),function(k,v) {if ($('#line'+k).length>0) $('#line'+k).html(v);});
    // button control
    if ($('#pauseButton').length>0 && $('#pauseButton').prop('disabled')==false) {
      if (!msg && $('#cancelButton').length>0 && $('#cancelButton').val()=="_(Cancel)_") {
        $('#cancelButton').val("_(Done)_").prop('onclick',null).off('click').click(function(){refresh();});
        $('#pauseButton').prop('disabled',true);
        $('#cancelText').html('');
        $('#line4').html("_(completed)_");
      } else {
        var form = document.arrayOps;
        if ($('#pauseButton').val()=="_(Pause)_" && msg.search("_(paused)_")!=-1) {
          $('#pauseButton').val("_(Resume)_").prop('onclick',null).off('click').click(function(){resumeParity(form);});
        } else if ($('#pauseButton').val()=="_(Resume)_" && msg.search("_(paused)_")==-1) {
          $('#pauseButton').val("_(Pause)_").prop('onclick',null).off('click').click(function(){pauseParity(form);});
        }
      }
    }
    break;
  }
});
devices.start();

<?if (substr(_var($var,'fsState'),-3)=='ing'):?>
var fsState = new NchanSubscriber('/sub/fsState',{subscriber:'websocket'});
fsState.on('message', function(msg) {
  switch (msg) {
  case 'stop':
    if (!timers.fsState) timers.fsState = setTimeout(refresh,1250);
    break;
  default:
    if (msg) $('#fsState').html(msg);
    break;
  }
});
fsState.start();
<?elseif ($spot):?>
setTimeout(function(){$('#pauseButton').prop('disabled',false);$('#cancelButton').prop('disabled',false);},250);
<?else:?>
var paritymonitor = new NchanSubscriber('/sub/paritymonitor',{subscriber:'websocket'});
paritymonitor.on('message', function(busy){if (busy==1) refresh();});
setTimeout(function(){paritymonitor.start();},5000);
<?endif;?>

$(function(){
  var form = document.arrayOps;
  if (form.input !== undefined) selectInput(form);
});
function formatWarning(val) {
  if (val==true) {
    swal({
      title:"_(Format Unmountable disks)_",
      text: "_(Create an empty file system on the disks shown as **Unmountable** discarding all data currently on the disks and update parity to reflect this)_. "+
            "_(This is typically done when a new disk is added to the array to get it ready for files to be written to it)_.<br>"+
            "<p><br>**_(WARNING)_**"+
            "<p>_(A format is **NEVER** part of a data recovery or disk rebuild process and if done in such circumstances will normally lead to loss of all data on the disks being formatted)_.",
      type: "warning",
      html: true,
      confirmButtonText:"_(Ok)_"
    });
  }
}
</script>
<form name="arrayOps" method="POST" action="/update.htm" target="progressFrame">
<input type="hidden" name="startState" value="<?=htmlspecialchars(_var($var,'mdState'))?>">
<input type="hidden" name="file" value="">
<table markdown="1" class="array_status">
<?switch (_var($var,'fsState')):
  case "Started":?>
    <tr><td><?status_indicator()?>**_(Started)_<?=((_var($var,'startMode')=='Maintenance')?' - _(Maintenance Mode)_':'')?>**</td>
    <td><input type="button" id="stop-button" value="_(Stop)_" onclick="stopArray(this.form)"></td>
    <td>**_(Stop)_** _(will take the array off-line)_.<span id="stop-text"></span></td></tr>
<?  if (_var($var,'fsNumUnmountable',0)>0):?>
      <tr><td>**<?=_('Unmountable disk'.(_var($var,'fsNumUnmountable',0)==1?'':'s').' present')?>:**<br>
<?    $cache = [];
      foreach ($disks as $disk) if (substr(_var($disk,'fsStatus'),0,11)=='Unmountable' || in_array(prefix(_var($disk,'name')),$cache)) {
        if (strlen(_var($disk,'id'))) echo "<span class='blue-text'>".my_disk(_var($disk,'name'))."</span> &bullet; ".my_id(_var($disk,'id'))." ("._var($disk,'device').")<br>";
        if (in_array(_var($disk,'name'),$pools)) $cache[] = $disk['name'];
      }
?>    </td><td><input type="submit" id="btnFormat" name="cmdFormat" value="_(Format)_" disabled><input type="hidden" name="unmountable_mask" value="<?=_var($var,'fsUnmountableMask')?>"></td>
      <td>**_(Format)_** _(will create a file system in all **Unmountable** disks)_.<br>
      <a class="info none img nohand"><input type="checkbox" name="confirmFormat" value="OFF" onclick="formatWarning(this.checked),$('#btnFormat').prop('disabled',!arrayOps.confirmFormat.checked)">
     <small>_(Yes, I want to do this)_</small></a>
      </td></tr>
<?  endif;
    $action = preg_split('/\s+/',_var($var,'mdResyncAction'));
    if (!$spot):
      if ($action[0]=="recon"):
        $resync = resync($action[1]);
?>      <tr><td></td><td><input type="submit" name="cmdCheckSync" value="_(Sync)_"></td><td>**<?=_('Sync')?>** <?=_("will start **$resync**")?>.</td></tr>
<?    elseif ($action[0]=="clear"):?>
        <tr><td></td><td><input type="submit" name="cmdCheckClear" value="_(Clear)_"></td><td>**_(Clear)_** _(will start **Disk-Clear** of new data disk(s))_.</td></tr>
<?    else:
        if ($action[0]=="check" && count($action)>1):?>
          <tr><td>_(Parity is valid)_.</td><td><input type="submit" name="cmdCheck" value="_(Check)_"></td><td>**_(Check)_** _(will start **Parity-Check**)_.&nbsp;<a href="/Main/Settings/Scheduler"<?if ($tabbed):?> onclick="$.cookie('one','tab1')"<?endif;?>>(_(Schedule)_)</a>
          <br><input type="checkbox" name="optionCorrect" value="correct" checked><small>_(Write corrections to parity)_</small></td></tr>
<?      elseif ($action[0]=="check"):?>
          <tr><td></td><td><input type="submit" name="cmdCheck" value="_(Check)_"></td><td>**_(Check)_** _(will start **Read-Check** of all array disks)_.</td></tr>
<?      endif;?>
        <tr><td></td><td><input type="button" value="_(History)_" onclick="parityHistory()"></td>
<?      [$date,$duration,$speed,$status,$error,$action,$size] = last_parity_log();
        if (_var($var,'sbSyncExit',0)!=0):?>
          <td class="wrap"><?=sprintf(_('Last check incomplete on **%s**'),_(my_time(_var($var,'sbSynced2',0)).day_count(_var($var,'sbSynced2',0)),0))?><?if (_var($var,'sbSynced2')):?>
          <br><i class="fa fa-fw fa-dot-circle-o"></i> _(Error code)_: <?=my_error(_var($var,'sbSyncExit'))?>
          <br><i class="fa fa-fw fa-search"></i> <?=print_error(_var($var,'sbSyncErrs',0))?><?endif;?></td></tr>
<?      elseif (_var($var,'sbSynced',0)==0):
          if ($status==0):?>
            <td class="wrap"><?=sprintf(_('Last checked on **%s**'),_(my_time($date).day_count($date),0))?>
            <br><i class="fa fa-fw fa-clock-o"></i> _(Duration)_: <?=my_check($duration,$speed)?>
            <br><i class="fa fa-fw fa-search"></i> <?=print_error($error)?></td></tr>
<?        else:?>
            <td class="wrap"><?=sprintf(_('Last check incomplete on **%s**'),_(my_time($date).day_count($date),0))?>
            <br><i class="fa fa-fw fa-dot-circle-o"></i> _(Error code)_: <?=my_error($status)?>
            <br><i class="fa fa-fw fa-search"></i> <?=print_error($error)?></td></tr>
<?        endif;
        elseif (_var($var,'sbSynced2',0)==0):
          if ($status==0):?>
            <td class="wrap"><?=sprintf(_('Last checked on **%s**'),_(my_time(_var($var,'sbSynced',0)).day_count(_var($var,'sbSynced',0)),0))?>
            <br><i class="fa fa-fw fa-clock-o"></i> _(Duration)_: <?=my_check($duration,$speed)?>
            <br><i class="fa fa-fw fa-search"></i> <?=print_error($error)?></td></tr>
<?        else:?>
            <td class="wrap"><?=sprintf(_('Last check incomplete on **%s**'),_(my_time(_var($var,'sbSynced',0)).day_count(_var($var,'sbSynced',0)),0))?>
            <br><i class="fa fa-fw fa-dot-circle-o"></i> _(Error code)_: <?=my_error($status)?>
            <br><i class="fa fa-fw fa-search"></i> <?=print_error($error)?></td></tr>
<?        endif;
        else:?>
          <td class="wrap"><?=sprintf(_('Last check completed on **%s**'),_(my_time(_var($var,'sbSynced2',0)).day_count(_var($var,'sbSynced2',0)),0))?>
          <br><i class="fa fa-fw fa-clock-o"></i> _(Duration)_: <?=my_check($duration,$speed)?>
          <br><i class="fa fa-fw fa-search"></i> <?=print_error(_var($var,'sbSyncErrs',0))?></td></tr>
<?      endif;
      endif;
    else:
      if ($action[0]=="recon"):
        $resync = resync($action[1]);
?>      <tr><td><?=_("$resync in progress")?>.</td><td>
        <input type="button" id="pauseButton"<?if (_var($var,'mdResync')):?> value="_(Pause)_" onclick="pauseParity(this.form)"<?else:?> value="_(Resume)_" onclick="resumeParity(this.form)"<?endif;?> disabled>
        <input type="button" id="cancelButton" value="_(Cancel)_" onclick="stopParity(this.form,'<?=$resync?>')" disabled></td>
        <td id="cancelText"><?if (_var($var,'mdResync')):?>**<?=_('Pause')?>** <?=_("will pause $resync")?>.<?else:?>**<?=_('Resume')?>** <?=_("will resume $resync")?>.<?endif;?><br>**<?=_('Cancel')?>** <?=_("will stop $resync")?>.
        <br>_(WARNING: canceling may leave the array unprotected)_!</td></tr>
<?    elseif ($action[0]=="clear"):?>
        <tr><td>_(Disk-Clear in progress)_.</td><td>
        <input type="button" id="pauseButton"<?if (_var($var,'mdResync')):?> value="_(Pause)_" onclick="pauseParity(this.form)"<?else:?> value="_(Resume)_" onclick="resumeParity(this.form)"<?endif;?> disabled>
        <input type="button" id="cancelButton" value="_(Cancel)_" onclick="stopParity(this.form,'Disk-Clear')" disabled></td>
        <td id="cancelText"><?if (_var($var,'mdResync')):?>**_(Pause)_** _(will pause Disk-Clear)_.<?else:?>**_(Resume)_** _(will resume Disk-Clear)_.<?endif;?><br>**_(Cancel)_** _(will stop Disk-Clear)_.</td></tr>
<?    elseif ($action[0]=="check" && count($action)>1):?>
        <tr><td>_(Parity-Check in progress)_.</td><td>
        <input type="button" id="pauseButton"<?if (_var($var,'mdResync')):?> value="_(Pause)_" onclick="pauseParity(this.form)"<?else:?> value="_(Resume)_" onclick="resumeParity(this.form)"<?endif;?> disabled>
        <input type="button" id="cancelButton" value="_(Cancel)_" onclick="stopParity(this.form,'Parity-Check')" disabled></td>
        <td id="cancelText"><?if (_var($var,'mdResync')):?>**_(Pause)_** _(will pause Parity-Check)_.<?else:?>**_(Resume)_** _(will resume Parity-Check)_.<?endif;?><br>**_(Cancel)_** _(will stop Parity-Check)_.</td></tr>
<?    elseif ($action[0]=="check"):?>
        <tr><td>_(Read-Check in progress)_.</td><td>
        <input type="button" id="pauseButton"<?if (_var($var,'mdResync')):?> value="_(Pause)_" onclick="pauseParity(this.form)"<?else:?> value="_(Resume)_" onclick="resumeParity(this.form)"<?endif;?> disabled>
        <input type="button" id="cancelButton" value="_(Cancel)_" onclick="stopParity(this.form,'Read-Check')" disabled></td>
        <td id="cancelText"><?if (_var($var,'mdResync')):?>**_(Pause)_** _(will pause Read-Check)_.<?else:?>**_(Resume)_** _(will resume Read-Check)_.<?endif;?><br>**_(Cancel)_** _(will stop Read-Check)_.</td></tr>
<?    endif;
      $stamps = '/var/tmp/stamps.ini';
      $synced = file_exists($stamps) ? explode(',',file_get_contents($stamps)) : [];
      $sbSynced = array_shift($synced) ?: _var($var,'sbSynced');
      $sbUpdate = _var($var,'mdResyncDt') ? $sbSynced : _var($var,'sbUpdated');?>
      <tr><td></td><td><input type="button" value="_(History)_" onclick="parityHistory()"></td>
      <td><?=sprintf(_('Current operation %s on **%s**'),(_var($var,'mdResyncDt')?_('started'):_('paused')),_(my_time($sbUpdate).day_count($sbUpdate),0))?></td></tr>
      <tr><td>_(Total size)_:</td><td id="line0"></td><td></td></tr>
      <tr><td>_(Elapsed time)_:</td><td id="line1"></td><td></td></tr>
      <tr><td>_(Current position)_:</td><td id="line2"></td><td></td></tr>
      <tr><td>_(Estimated speed)_:</td><td id="line3"></td><td></td></tr>
      <tr><td>_(Estimated finish)_:</td><td id="line4"></td><td></td></tr>
<?    if ($action[0]=="check"):?>
<?    if (count($action)>1):?>
      <tr><td><?=_var($var,'mdResyncCorr')==0 ? _('Sync errors detected') : _('Sync errors corrected')?>:</td><td id="line5"></td><td></td></tr>
<?    else:?>
      <tr><td><?=_var($var,'mdResyncCorr')==0 ? _('Read errors detected') : _('Read errors corrected')?>:</td><td id="line5"></td><td></td></tr>
<?    endif;
      endif;
    endif;
    break;
  case "Starting":?>
    <tr><td><?status_indicator()?>**_(Starting)_...**</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td><td></td></tr>
    <tr><td></td><td><input type="button" value="_(History)_" onclick="parityHistory()"></td><td></td></tr>
<?  break;
  case "Formatting":?>
    <tr><td><?status_indicator()?>**_(Started, formatting)_...**</td><td><input type="submit" name="cmdStop" value="_(Stop)_" disabled></td><td></td></tr>
    <tr><td></td><td><input type="button" value="_(History)_" onclick="parityHistory()"></td><td></td></tr>
<?  break;
  case "Copying":?>
    <tr><td><?status_indicator()?>**_(Starting, copying)_... <span id="fsState"></span>**</td><td><input type="submit" name="cmdNoCopy" value="_(Cancel)_"></td><td></td></tr>
    <tr><td></td><td><input type="button" value="_(History)_" onclick="parityHistory()"></td>
    <td><?=sprintf(_('Current operation %s on **%s**'),_('started'),_(my_time(_var($var,'sbUpdated',0)).day_count(_var($var,'sbSynced',0)),0))?></td></tr>
<?  break;
  case "Clearing":?>
    <tr><td><?status_indicator()?>**_(Started, clearing)_... <span id="fsState"></span>**</td><td><input type="submit" name="cmdNoClear" value="_(Cancel)_"></td><td></td></tr>
    <tr><td></td><td><input type="button" value="_(History)_" onclick="parityHistory()"></td>
    <td><?=sprintf(_('Current operation %s on **%s**'),_('started'),_(my_time(_var($var,'sbUpdated',0)).day_count(_var($var,'sbSynced',0)),0))?></td></tr>
<?  break;
  case "Stopping":?>
    <tr><td><?status_indicator()?>**_(Stopping)_...**</td><td><input type="submit" name="cmdStop" value="_(Stop)_" disabled></td><td></td></tr>
<?  break;
  case "Stopped":
    if (_var($var,'configValid')=="error"):?>
      <tr><td><?status_indicator()?>**_(Stopped)_.**</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
      <td>_(Invalid, missing or expired)_ <a href="/Tools/Registration">_(registration key)_</a>.</td></tr>
<?  elseif (_var($var,'configValid')=="invalid"):?>
      <tr><td><?status_indicator()?>**_(Stopped)_.**</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
      <td>_(Too many attached devices. Please consider upgrading your)_ <a href="/Tools/Registration">_(registration key)_</a>.</td></tr>
<?  elseif (_var($var,'configValid')=="nokeyserver"):?>
      <tr><td><?status_indicator()?>**_(Stopped)_.**</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
      <td>_(Cannot contact key-server. Please check your)_ <a href="/Settings/NetworkSettings">_(network settings)_</a>.</td></tr>
<?  elseif (_var($var,'configValid')=="withdrawn"):?>
      <tr><td><?status_indicator()?>**_(Stopped)_.**</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
      <td>_(This Unraid OS release has been withdrawn and may no longer be used. Please)_ <a href="/Plugins">_(update)_</a> _(your server)_.</td></tr>
<?  else:
      switch (_var($var,'mdState')):
      case "STARTED":
?>      <tr><td><?status_indicator()?>**_(Stopped)_**. _(Configuration valid)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
        <td>**_(Start)_** _(will bring the array on-line)_.</td></tr>
<?      maintenance_mode();
        check_encryption();
        break;
      case "STOPPED":
        $action = explode(' ',_var($var,'mdResyncAction'));
        if ($action[0]=="recon"):
          $resync = resync($action[1]);
?>        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Configuration valid)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**<?=_('Start')?>** <?=_("will bring the array on-line and start **$resync**")?>.</td></tr>
<?      elseif ($action[0]=="clear"):?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(New data disk(s) detected)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**_(Start)_** _(will bring the array on-line and start **Disk-Clear** of new data disk(s))_.</td></tr>
<?      elseif (_var($var,'sbClean')!="yes" && $action[0]=="check" && count($action)>1):?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Unclean shutdown detected)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**_(Start)_** _(will bring the array on-line and start **Parity-Check**)_.
          <br><input type="checkbox" name="optionCorrect" value="correct" checked><small>_(Write corrections to parity)_</small></td></tr>
<?      elseif (_var($var,'sbClean')!="yes" && $action[0]=="check"):?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Unclean shutdown detected)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**_(Start)_** _(will bring the array on-line)_.</td></tr>
<?      elseif (missing_cache()):?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Missing Cache disk)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)" disabled></td>
          <td>**_(Start)_** _(will remove the missing cache disk and then bring the array on-line)_.
          <br><input type="checkbox" name="confirmStart" value="OFF" onclick="$('#cmdStart').prop('disabled',!arrayOps.confirmStart.checked)"><small>_(Yes, I want to do this)_</small></td></tr>
<?      else:?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Configuration valid)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**_(Start)_** _(will bring the array on-line)_.</td></tr>
<?      endif;
        maintenance_mode();
        check_encryption();
        break;
      case "NEW_ARRAY":
        if (strpos(_var($disks['parity'],'status'),"DISK_NP")===0 && strpos(_var($disks['parity2'],'status'),"DISK_NP")===0):?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Configuration valid)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**_(Start)_** _(will record all disk information and bring the array on-line)_.
          <br>_(The array will be immediately available, but **unprotected** since *parity* has not been assigned)_.</td></tr>
<?      else:?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Configuration valid)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="parityWarning(this.form,this)"></td>
          <td>**_(Start)_** _(will record all disk information, bring the array on-line, and start Parity-Sync)_.
          <br>_(The array will be immediately available, but **unprotected** until Parity-Sync completes)_.
          <br><input type="checkbox" name="md_invalidslot" value="99">_(Parity is already valid)_.</td></tr>
<?      endif;
        maintenance_mode();
        check_encryption();
        break;
      case "DISABLE_DISK":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Missing disk)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)" disabled></td>
        <td>**_(Start)_** _(will disable the missing disk and then bring the array on-line. Install a replacement disk as soon as possible)_.
        <br><input type="checkbox" name="confirmStart" value="OFF" onclick="$('#cmdStart').prop('disabled',!arrayOps.confirmStart.checked)"><small>_(Yes, I want to do this)_</small></td></tr>
<?      maintenance_mode();
        check_encryption();
        break;
      case "RECON_DISK":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Replacement disk installed)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
        <td>**_(Start)_** _(will start **Parity-Sync** and/or **Data-Rebuild**)_.</td></tr>
<?      maintenance_mode();
        check_encryption();
        break;
      case "SWAP_DSBL":
        if (_var($var,'fsCopyPrcnt')=="100"):?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Upgrading disk/swapping parity)_.</td><td><input type="button" id="cmdStart" value="_(Start)_" onclick="prepareInput(this.form,this)"></td>
          <td>**_(Start)_** _(will expand the file system of the data disk (if possible); then bring the array on-line and start Data-Rebuild)_.</td></tr>
<?        maintenance_mode();
          check_encryption();
        else:?>
          <tr><td><?status_indicator()?>**_(Stopped)_**. _(Upgrading disk/swapping parity)_.</td><td><input type="submit" name="cmdCopy" value="_(Copy)_" disabled></td>
          <td>**_(Copy)_** _(will copy the parity information to the new *parity* disk)_.
          <br>_(Once copy completes, the array may be Started, to initiate Data-Rebuild of the disabled disk)_.
          <br><input type="checkbox" name="confirmStart" value="OFF" onclick="arrayOps.cmdCopy.disabled=!arrayOps.confirmStart.checked"><small>_(Yes, I want to do this)_</small></td></tr>
<?      endif;
        break;
      case "ERROR:INVALID_EXPANSION":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Invalid expansion)_.</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
        <td>_(You may not add new disk(s) and also remove existing disk(s))_.</td></tr>
<?      break;
      case "ERROR:NEW_DISK_TOO_SMALL":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Replacement disk is too small)_.</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
        <td>_(The replacement disk must be as big or bigger than the original)_.</td></tr>
<?      break;
      case "ERROR:PARITY_NOT_BIGGEST":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Disk in parity slot is not biggest)_.</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
        <td>_(If this is a new array, move the largest disk into the *parity* slot)_.
        <br>_(If you are adding a new disk or replacing a disabled disk, try Parity-Swap)_.</td></tr>
<?      break;
      case "ERROR:TOO_MANY_MISSING_DISKS":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(Invalid configuration)_.</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
        <td>_(Too many wrong and/or missing disks)_!</td></tr>
<?      break;
      case "ERROR:NO_DATA_DISKS":?>
        <tr><td><?status_indicator()?>**_(Stopped)_**. _(No data disks)_.</td><td><input type="submit" name="cmdStart" value="_(Start)_" disabled></td>
        <td>_(No array data disks have been assigned)_!</td></tr>
<?      break;
      endswitch;
    endif;
  endswitch;?>
  <tr><td></td><td class="line" colspan="2"></td></tr>
</table>
</form>
<?if (_var($var,'fsState')!="Stopped"):?>
<?if ($keyfile):?>
<form name="delete_keyfile" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="unused">
<input type="hidden" name="#include" value="webGui/include/KeyUpload.php">
<table markdown="1" class="array_status noshift">
<tr><td></td><td><input type="submit" name="#apply" value="_(Delete)_" disabled></td><td>**_(Delete)_** _(will delete the encryption keyfile)_.
<br><input type="checkbox" onchange="toggleApply(this.checked)"><small>_(Yes, I want to do this)_</small></td></tr>
<tr><td></td><td class="line" colspan="2"></td></tr>
</table>
</form>
<?endif;?><!-- markdown fix -->
<table markdown="1" class="array_status noshift">
 <tr><td></td><td><input type="button" id="spinup-button" onclick="$('[id^=button-]').prop('disabled',true);toggle_state('up')" value="_(Spin Up)_"><input type="button" id="spindown-button" onclick="$('[id^=button-]').prop('disabled',true);toggle_state('down')" value="_(Spin Down)_"></td>
 <td>**_(Spin Up)_** _(will immediately spin up all disks)_.<br>**_(Spin Down)_** _(will immediately spin down all disks)_.</td></tr>
 <tr><td></td><td><input type="button" value="_(Clear Stats)_" onclick="toggle_state('Clear')"></td><td>**_(Clear Stats)_** _(will immediately clear all disk statistics)_.</td></tr>
 <tr><td></td><td class="line" colspan="2"></td></tr>
</table>
<?if (_var($var,'shareUser')=='e' && $pool_devices):?>
<form name="mover_schedule" method="POST" action="/update.htm" target="progressFrame">
<table markdown="1" class="array_status noshift">
<tr><td></td><td><input type="submit" id="mover-button" name="cmdStartMover" value="_(Move)_"></td><td id="mover-text"></td></tr>
</table>
</form>
<?endif;?>
<?elseif ($wrong && $keyfile):?>
<form name="delete_keyfile" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="unused">
<input type="hidden" name="#include" value="webGui/include/KeyUpload.php">
<table markdown="1" class="array_status noshift">
 <tr><td></td><td><input type="submit" name="#apply" value="_(Delete)_"></td><td>**_(Delete)_** _(will delete the encryption keyfile)_.</td></tr>
 <tr><td></td><td class="line" colspan="2"></td></tr>
</table>
</form>
<?endif;?><!-- markdown fix -->
<form name="shutdownOps" method="POST" action="/webGui/include/Boot.php">
<table markdown="1" class="array_status noshift">
 <tr><td></td><td><input type="button" name="reboot" value="_(Reboot)_" onclick="shutdown_now(this.form,'reboot')"><input type="button" name="shutdown" value="_(Shutdown)_" onclick="shutdown_now(this.form,'shutdown')"></td>
 <td>**_(Reboot)_** _(will activate a *clean* system reset)_.<br>**_(Shutdown)_** _(will activate a *clean* system power down)_.<br><input type="checkbox" name="safemode"><small>_(Reboot in safe mode)_</small></td></tr>
 <tr><td></td><td class="line" colspan="2"></td></tr>
</table>
</form>
<!-- markdown fix --></p><?if (isset($display['sleep'])) eval('?>'.parse_file($display['sleep']))?>

:array_status_help:
<?if (_var($var,'fsState')=="Stopped"):?>
:array_devices_help:

<?if ($encrypt):?>
<div></div>
:encryption_help:
<?endif;?>
<?endif;?>

                )

            [BootDevice] => Array
                (
                    [Menu] => Main:3
                    [Title] => Boot Device
                    [Tag] => paw
                    [file] => webGui/BootDevice.page
                    [root] => webGui
                    [name] => BootDevice
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
<?if (_var($var,'fsState')=="Started"):?>
$('#tab3').bind({click:function() {$('i.toggle').show('slow');}});
<?endif;?>
</script>

<table class="disk_status wide">
<thead><tr><td>_(Device)_</td><td>_(Identification)_</td><td>_(Temp)_.</td><td>_(Reads)_</td><td>_(Writes)_</td><td>_(Errors)_</td><td>_(FS)_</td><td>_(Size)_</td><td>_(Used)_</td><td>_(Free)_</td></tr></thead>
<tbody id="boot_device">
<?if (isset($disks['flash'])) echo "<tr><td colspan='11'>&nbsp;</td></tr>";?>
</tbody>
</table>

:boot_device_help:

                )

            [Browse] => Array
                (
                    [Title] => 
                    [Tag] => home
                    [Nchan] => file_manager
                    [file] => plugins/dynamix.file.manager/Browse.page
                    [root] => plugins/dynamix.file.manager
                    [name] => Browse
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function dfm_quote($text) {
  return "\"$text\"";
}
function dfm_array($array) {
  return implode(',',array_map('dfm_quote',$array));
}
function validdir($dir) {
  $path = realpath($dir);
  return in_array(explode('/',$path)[1]??'',['mnt','boot']) ? $path : '';
}
$dir     = validdir(htmlspecialchars_decode($dir));
[$none,$root,$main,$next,$rest] = my_explode('/',$dir,5);
$dir     = htmlspecialchars(str_replace('\\','\\\\',$dir));
$lock    = $root=='mnt' ? ($main ?: '---') : ($root=='boot' ? _('flash') : '---');
$isshare = $root=='mnt' && (!$main || !$next || ($main=='rootshare' && !$rest));
$editor  = '/boot/config/editor.cfg';
$newos   = version_compare(parse_ini_file('/etc/unraid-version')['version'],'6.11.9','>');

if (!file_exists($editor)) file_put_contents($editor,implode("\n",['','txt','js','php','page','plg','xml','old','bak','log','css']));
?>
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.filetree.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.switchbutton.css")?>">

<style>
div#ace_settingsmenu,table#controls,table#more-controls{margin-top:0;background-color:#f2f2f2}
tr.ace_optionsMenuEntry td{padding:4px;color:#1c1b1b}
tr.ace_optionsMenuEntry td select option{color:#1c1b1b;background-color:#e8e8e8}
<?if ($theme=='black'):?>
tr.ace_optionsMenuEntry td select{color:#1c1b1b;border-bottom:1px solid #1c1b1b;background-image:linear-gradient(66.6deg,transparent 60%,#1c1b1b 40%),linear-gradient(113.4deg, #1c1b1b 40%,transparent 60%)}
tr.ace_optionsMenuEntry td input[type=number]{color:#1c1b1b}
<?endif;?>
tr.ace_optionsMenuEntry td input[type=number]::-webkit-inner-spin-button{-webkit-appearance:auto;cursor:pointer}
tr.ace_optionsMenuEntry td input[type=number]{-moz-appearance:auto;margin:0}

.loc{text-align:left!important;padding-left:0!important}
<?if ($newos):?>
.title{letter-spacing:1px}
.title span.left{text-transform:none}
<?else:?>
#title{letter-spacing:1px}
#title span.left{text-transform:none}
<?endif;?>
table.tablesorter.indexer{margin-top:0}
table.tablesorter.indexer thead th:nth-child(1){width:12px;text-align:left;padding-left:11px}
table.tablesorter.indexer thead th:nth-child(2){width:3%!important}
table.tablesorter.indexer thead th:nth-child(3){width:auto!important}
table.tablesorter.indexer thead th:nth-child(n+4){width:10%!important}
table.tablesorter.indexer thead th:nth-child(9){width:3%!important}
table.tablesorter.indexer tbody tr:hover td{background-color:<?=$dfm['hover']?>}
table.tablesorter.indexer thead th{text-align:left}
table.tablesorter.indexer tbody td{text-align:left}
table.tablesorter.indexer thead th:last-child{text-align:right}
table.tablesorter.indexer tbody td:last-child{text-align:right}
i[id^="row_"],i[id^="check_"]{cursor:pointer;font-size:1.8rem;color:gray}
td[id^="name_"]{cursor:pointer}
i.fa-home{font-size:2rem}
i.fa-chevron-right{font-size:1.2rem;margin:0 8px}
div.autoheight{width:100%;overflow-y:auto;margin-top:<?=$themes1?'-30px':'0'?>}
div#buttons{display:none}
.dropdown-menu{z-index:10001}
</style>

<script src="<?autov("/webGui/javascript/jquery.filetree.js")?>"></script>
<script src="<?autov("/webGui/javascript/jquery.switchbutton.js")?>"></script>
<script>
// General variables
var dir = "<?=$dir?>";
var table = null;
var thead = null;

function autoscale(value) {
  var unit = ['B','kB','MB','GB','TB','PB','EB'];
  var base = value>1?Math.floor(Math.log(value)/Math.log(1000)):0;
  var data = base<unit.length ? value/Math.pow(1000, base) : 0;
  var scale = data<100?100:10;
  if (data==0) base=0;
  return ((Math.round(scale*data)/scale)+' '+unit[base]).replace('.','<?=$display['number'][0]?>')+'/s';
}
function folderContextMenu(id,button) {
  var opts = [];
  context.settings({button:button});
  if (dfm.running) {
    opts.push({text:"_(Job running)_", icon:"fa fa-ban"});
  } else {
    opts.push({header:"_(Action)_"});
    opts.push({text:"_(Delete)_", icon:"fa-trash-o", action:function(e){e.preventDefault();doAction(1,"_(Delete)_",id.dfm_proxy());}});
    opts.push({text:"_(Copy)_", icon:"fa-copy", action:function(e){e.preventDefault();doAction(3,"_(Copy)_",id.dfm_proxy());}});
    opts.push({text:"_(Move)_", icon:"fa-paste", action:function(e){e.preventDefault();doAction(4,"_(Move)_",id.dfm_proxy());}});
<?if (!$isshare):?>
    opts.push({text:"_(Rename)_", icon:"fa-edit", action:function(e){e.preventDefault();doAction(2,"_(Rename)_",id.dfm_proxy());}});
<?endif?>
    opts.push({divider:true});
    opts.push({text:"_(Owner)_", icon:"fa-user-o", action:function(e){e.preventDefault();doAction(11,"_(Change Owner)_",id.dfm_proxy());}});
    opts.push({text:"_(Permission)_", icon:"fa-address-book-o", action:function(e){e.preventDefault();doAction(12,"_(Change Permission)_",id.dfm_proxy());}});
    opts.push({text:"_(Calculate)_", icon:"fa-calculator", action:function(e){e.preventDefault();doAction(14,"_(Calculate Occupied Space)_",id.dfm_proxy());}});
    opts.push({text:"_(Search)_", icon:"fa-search", action:function(e){e.preventDefault();doAction(15,"_(Search)_",id.dfm_proxy());}});
<?if (!$isshare):?>
    opts.push({header:"_(Common)_"});
    opts.push({text:"_(Create)_", icon:"fa-folder-o", action:function(e){e.preventDefault();doAction(0,"_(Create)_",id.dfm_proxy());}});
<?if ($dir):?>
    opts.push({text:"_(Upload)_", icon:"fa-upload", action:function(e){e.preventDefault();$('#dfm_upload').click();}});
<?endif?>
<?endif?>
  }
  context.attach('#'+id, opts);
}
function fileContextMenu(id,button) {
  var opts = [];
  context.settings({button:button});
  if (dfm.running) {
    opts.push({text:"_(Job running)_", icon:"fa fa-ban"});
  } else {
    opts.push({header:"_(Action)_"});
    opts.push({text:"_(Delete)_", icon:"fa-trash-o", action:function(e){e.preventDefault();doAction(6,"_(Delete)_",id.dfm_proxy());}});
    opts.push({text:"_(Copy)_", icon:"fa-copy", action:function(e){e.preventDefault();doAction(8,"_(Copy)_",id.dfm_proxy());}});
    opts.push({text:"_(Move)_", icon:"fa-paste", action:function(e){e.preventDefault();doAction(9,"_(Move)_",id.dfm_proxy());}});
    opts.push({text:"_(Rename)_", icon:"fa-edit", action:function(e){e.preventDefault();doAction(7,"_(Rename)_",id.dfm_proxy());}});
    opts.push({divider:true});
    opts.push({text:"_(Owner)_", icon:"fa-user-o", action:function(e){e.preventDefault();doAction(11,"_(Change Owner)_",id.dfm_proxy());}});
    opts.push({text:"_(Permission)_", icon:"fa-address-book-o", action:function(e){e.preventDefault();doAction(12,"_(Change Permission)_",id.dfm_proxy());}});
    opts.push({text:"_(Download)_", icon:"fa-download", action:function(e){e.preventDefault();doAction(13,"_(Download)_",id.dfm_proxy());}});
<?if (!$isshare):?>
    opts.push({header:"_(Common)_"});
    opts.push({text:"_(Create)_", icon:"fa-folder-o", action:function(e){e.preventDefault();doAction(0,"_(Create)_",id.dfm_proxy());}});
<?if ($dir):?>
    opts.push({text:"_(Upload)_", icon:"fa-upload", action:function(e){e.preventDefault();$('#dfm_upload').click();}});
<?endif?>
<?endif?>
  }
  context.attach('#'+id, opts);
}
function deviceFolderContextMenu(dev,id) {
  var opts = [];
  context.settings({button:'both'});
  if (dfm.running) {
    opts.push({text:"_(Job running)_", icon:"fa fa-ban"});
  } else {
    opts.push({header:dev.split('/')[2]});
    opts.push({text:"_(Delete)_", icon:"fa-trash-o", action:function(e){e.preventDefault();doAction(1,"_(Delete)_",dev);}});
    opts.push({text:"_(Copy)_", icon:"fa-copy", action:function(e){e.preventDefault();doAction(3,"_(Copy)_",dev);}});
    opts.push({text:"_(Move)_", icon:"fa-paste", action:function(e){e.preventDefault();doAction(4,"_(Move)_",dev);}});
    opts.push({divider:true});
    opts.push({text:"_(Calculate)_", icon:"fa-calculator", action:function(e){e.preventDefault();doAction(14,"_(Calculate Occupied Space)_",dev);}});
  }
  context.attach('#device_'+id, opts);
}
function deviceFileContextMenu(dev,id) {
  var opts = [];
  context.settings({button:'both'});
  if (dfm.running) {
    opts.push({text:"_(Job running)_", icon:"fa fa-ban"});
  } else {
    opts.push({header:dev.split('/')[2]});
    opts.push({text:"_(Delete)_", icon:"fa-trash-o", action:function(e){e.preventDefault();doAction(6,"_(Delete)_",dev);}});
    opts.push({text:"_(Copy)_", icon:"fa-copy", action:function(e){e.preventDefault();doAction(8,"_(Copy)_",dev);}});
    opts.push({text:"_(Move)_", icon:"fa-paste", action:function(e){e.preventDefault();doAction(9,"_(Move)_",dev);}});
  }
  context.attach('#device_'+id, opts);
}
function home(source,target) {
  var equal = '?';
  $.ajax({
    async: false,
    url: '/plugins/dynamix.file.manager/include/Control.php',
    type: 'POST',
    dataType: 'text',
    data: {mode:'home',source:encodeURIComponent(dfm_htmlspecialchars(source)),target:encodeURIComponent(dfm_htmlspecialchars(target))},
    success: function(e){equal = e;}
  });
  return equal;
}
function resize() {
  $('div.autoheight').height(Math.max(window.innerHeight-320,330));
}
function selectAll() {
  if (dfm.running) {
    context.attach('#check_0', [{text:"_(Job running)_", icon:"fa fa-ban"}]);
    return;
  }
  context.destroy('#check_0');
  if ($('#check_0').hasClass('fa-square-o')) {
    $('i[id^="check_"]:visible').removeClass('fa-square-o').addClass('fa-check-square-o');
    $('input.extra').prop('disabled',false);
<?if (!$isshare):?>
    $('input.rename').prop('disabled',false);
<?endif;?>
  } else {
    $('i[id^="check_"]:visible').removeClass('fa-check-square-o').addClass('fa-square-o');
    $('input.extra').prop('disabled',true);
<?if (!$isshare):?>
    $('input.rename').prop('disabled',true);
<?endif;?>
  }
}
function selectOne(id,check=true) {
  if (dfm.running && check) {
    context.attach('#'+id, [{text:"_(Job running)_", icon:"fa fa-ban"}]);
    return;
  }
  context.destroy('#'+id);
  if ($('#'+id).hasClass('fa-square-o')) {
    $('#'+id).removeClass('fa-square-o').addClass('fa-check-square-o');
  } else {
    $('#'+id).removeClass('fa-check-square-o').addClass('fa-square-o');
  }
  var checked = 0;
  if (check) {
    $('i[id^="check_"]').each(function(){if ($(this).prop('id')!='check_0' && $(this).hasClass('fa-check-square-o')) checked++;});
    $('input.extra').prop('disabled',checked==0);
<?if (!$isshare):?>
    $('input.rename').prop('disabled',checked!=1);
<?endif;?>
  } else {
    $('i[id^="queue_"]').each(function(){if ($(this).hasClass('fa-check-square-o')) checked++;});
    $('.ui-dfm .ui-dialog-buttonset button:eq(1)').prop('disabled',checked==0);
  }
}
function errorSource() {
  swal({title:"_(Invalid source)_",text:"_(Not allowed to mix disk and user shares)_",html:true,type:'error',confirmButtonText:"_(Ok)_"});
}
function errorTarget() {
  swal({title:"_(Invalid target)_",text:"_(Enter a valid target)_",html:true,type:'error',confirmButtonText:"_(Ok)_"},function(x){dfm.window.find('#dfm_target').prop('disabled',false);});
}
function data(id) {
  var data = id.attr('data').dfm_quote();
<?if ($isshare):?>
  return id.attr('type')=='d' ? data+'/' : data;
<?else:?>
  return data;
<?endif;?>
}
function fileName(file) {
  return file.indexOf('/')>=0 ? file.split('/').pop() : file;
}
function fileExtension(file) {
  file = fileName(file);
  return file.indexOf('.')>=0 ? file.split('.').pop() : '';
}
function fileEdit(id) {
  const known = ["","cfg","conf",<?=dfm_array(file($editor,FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES))?>];
  var source = $('#'+id.dfm_proxy()).attr('data').dfm_quote();
  var ext = fileExtension(source);
  if (ext == 'zip') {
    // download zip files
    downloadFile(source);
    return;
  }
  dfm.window = $("#dfm_dialogWindow");
  if (!known.includes(ext)) {
    // file viewer - supported file extensions: .pdf, .jpg, .png, .jpeg, .gif
    dfm.window.html($("#dfm_templateViewFile").html().replace('{$0}',source).dfm_build());
    return;
  }
  // file editor dialog
  dfm.window.html($("#dfm_templateEditFile").html().replace('{$0}',source).dfm_build());
  dfm.window.dialog({
    dialogClass: 'ui-dfm',
    autoOpen: true,
    title: fileName(source),
    height: Math.min(window.innerHeight-80,800),
    width: Math.min(window.innerWidth,1200),
    resizable: false,
    modal: true,
    buttons: {
      "_(Save)_": function(){
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'save',file:encodeURIComponent(source), data:encodeURIComponent(editor.session.getValue())});
        dfm.window.dialog('destroy');
        setTimeout(loadList,100);
      },
      "_(Cancel)_": function(){
        dfm.window.dialog('destroy');
      }
    }
  });
  $('.ui-dfm .ui-dialog-titlebar-close').html('<i class="fa fa-expand"></i>').prop('title',"_(Expand)_").prop('onclick',null).off('click').click(function(){fullWindow();}).show();
}
function fullWindow() {
  if ($('.ui-dfm .ui-dialog-titlebar-close').html().indexOf('expand')>=0) {
    dfm.window.dialog('option','height',window.innerHeight-40);
    dfm.window.dialog('option','width',window.innerWidth);
    dfm.window.dialog('option','position',{my:'top',at:'top',of:window});
    $('.ui-dfm .ui-dialog-titlebar-close').html("<i class='fa fa-compress'></i>").prop("title","_(Compress)_");
  } else {
    dfm.window.dialog('option','height',Math.min(window.innerHeight-80,800));
    dfm.window.dialog('option','width',Math.min(window.innerWidth,1200));
    dfm.window.dialog('option','position',{my:'center',at:'center',of:window});
    $('.ui-dfm .ui-dialog-titlebar-close').html("<i class='fa fa-expand'></i>").prop("title","_(Expand)_");
  }
  editor.resize();
}
function doJobs(title) {
  dfm.window = $("#dfm_dialogWindow");
  dfm.window.html($('#dfm_templateJobs').html().dfm_build());
  dfm.window.dialog({
    dialogClass: 'ui-dfm',
    autoOpen: true,
    title: title,
    height: 630,
    width: 900,
    resizable: false,
    modal: true,
    buttons: {
      "_(Start)_": function(){
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'start'},function(queue){
          if (parseInt(queue) > 0) {
            if (dfm.window.find('i[id^="queue_"]').length < 2) $.removeCookie('dfm_control.jobs');
            dfm.window.dialog('close');
            dfm_openDialog();
            dfm_fileManager('start');
          }
        });
      },
      "_(Delete)_": function(){
        let row = [];
        dfm.window.find('i[id^="queue_"]').each(function(){if ($(this).hasClass('fa-check-square-o')) row.push((($(this).prop('id').split('_')[1]-1)*9)+1);});
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'undo',row:row.join(',')},function(queue){
          $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'jobs'},function(jobs){
            $('#dfm_jobs').html(jobs);
            if (dfm.window.find('i[id^="queue_"]').length==0) $.removeCookie('dfm_control.jobs');
          });
          if (parseInt(queue)==1) {
            setTimeout(function(){$('#dfm_jobs').html("<div id='dfm_joblist'><i class='fa fa-fw fa-minus-square-o grey-text job'></i>_(No jobs scheduled)_ ...</div>");},100);
            $('.ui-dfm .ui-dialog-buttonset button:eq(0)').prop('disabled',true);
            $('.dfm_control.jobs').prop('disabled',true);
            $.removeCookie('dfm_control.jobs');
          }
          $('.ui-dfm .ui-dialog-buttonset button:eq(1)').prop('disabled',true);
        });
      },
      "_(Done)_": function(){
        dfm.window.dialog('destroy');
      }
    }
  });
  $('.ui-dfm .ui-dialog-titlebar-close').css({'display':'none'});
  if (dfm.running) $('.ui-dfm .ui-dialog-buttonset button:eq(0)').prop('disabled',true);
  $('.ui-dfm .ui-dialog-buttonset button:eq(1)').prop('disabled',true);
}
var filemonitor = new NchanSubscriber('/sub/filemonitor',{subscriber:'websocket'});
filemonitor.on('message', function(state) {
  if (state==1 && !dfm.running && !timers.filemonitor) timers.filemonitor = setTimeout(function(){if (dfm.running) clearTimeout(timers.filemonitor); else refresh();},1500);
});
setTimeout(function(){filemonitor.start();},3000);

function doAction(action,title,id) {
  var link   = id.substr(0,1)=='/';
  var source = link ? id : data($('#'+id));
  var path   = source.substr(1).split('/');
  var zfs    = '';
<?if ($dfm['zfs']):?>
  if ([1,4].includes(action) && path[0]=='mnt') {
    switch (path.length) {
    case 3:
      if (path[2]=='') zfs = path[1]+'/';
      break;
    case 4:
      if (path[3]=='') zfs = path[1]+'/'+path[2];
      break;
    }
  }
<?endif;?>
  var access = ['mnt','boot'];
  if (!access.includes(path[0])) return;
  var user   = /^(user0?|rootshare)$/.test(path[1]);
  var root   = '/'+path[0]+(user ? '/'+path[1] : '');
  var share  = user||!path[2]||(link&&path.length==3) ? '' : path[2]+'/';
  var ud     = ['disks','remotes'].includes(path[1]); // unassigned devices
  var match  = ud||user ? '' : '^(?!\\/mnt\\/user0?\\/).*$';
  var name   = path.pop()||path.pop();
  var hdlink = "<?=$var['fuse_directio']==1?'1':''?>";
  dfm.window = $("#dfm_dialogWindow");
  switch (action) {
  case 0: // create folder
    dfm.window.html($('#dfm_templateCreateFolder').html());
    source = dir;
    dfm.height = 330;
    break;
  case 1: // delete folder
    dfm.window.html($('#dfm_templateDeleteFolder').html());
    dfm_createSource(source.dfm_strip());
    dfm.height = 330;
    break;
  case 2: // rename folder
    dfm.window.html($('#dfm_templateRenameFolder').html());
    dfm_createSource(name);
    dfm.window.find('#dfm_target').val(name);
    dfm.height = 330;
    break;
  case 3: // copy folder
    dfm.window.html($('#dfm_templateCopyFolder').html());
    dfm_createSource(source.dfm_strip());
    dfm.window.find('#dfm_target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match).fileTreeAttach(null,null,function(path){
      var bits = path.substr(1).split('/');
      var auto = bits.length>3 ? '' : share;
      dfm.window.find('#dfm_target').val(path+auto).change();
    });
    dfm.height = 630;
    break;
  case 4: // move folder
    dfm.window.html($('#dfm_templateMoveFolder').html());
    dfm_createSource(source.dfm_strip());
    dfm.window.find('#dfm_target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match).fileTreeAttach(null,null,function(path){
      var bits = path.substr(1).split('/');
      var auto = bits.length>3 ? '' : share;
      dfm.window.find('#dfm_target').val(path+auto).change();
    });
    dfm.height = 630;
    break;
  case 6: // delete file
    dfm.window.html($('#dfm_templateDeleteFile').html());
    dfm_createSource(source);
    dfm.height = 330;
    break;
  case 7: // rename file
    dfm.window.html($('#dfm_templateRenameFile').html());
    dfm_createSource(name);
    dfm.window.find('#dfm_target').val(name);
    dfm.height = 330;
    break;
  case 8: // copy file
    dfm.window.html($('#dfm_templateCopyFile').html());
    dfm_createSource(source);
    dfm.window.find('#dfm_target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match).fileTreeAttach(null,null,function(path){
      dfm.window.find('#dfm_target').val(path).change();
    });
    dfm.height = 630;
    break;
  case 9: // move file
    dfm.window.html($('#dfm_templateMoveFile').html());
    dfm_createSource(source);
    dfm.window.find('#dfm_target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match).fileTreeAttach(null,null,function(path){
      dfm.window.find('#dfm_target').val(path).change();
    });
    dfm.height = 630;
    break;
  case 11: // change owner
    dfm.window.html($('#dfm_templateChangeOwner').html());
    var owner = $('#'+id.dfm_bring('owner')).text();
    dfm_createSource(source.dfm_strip());
    dfm.window.find('#dfm_target').val(owner);
    dfm.height = 330;
    break;
  case 12: // change permission
    dfm.window.html($('#dfm_templateChangePermission').html());
    var perm = $('#'+id.dfm_bring('perm')).text();
    dfm_createSource(source.dfm_strip());
    dfm.window.find('#dfm_owner').val('u-'+perm.substr(1,2).dfm_patch());
    dfm.window.find('#dfm_group').val('g-'+perm.substr(4,2).dfm_patch());
    dfm.window.find('#dfm_other').val('o-'+perm.substr(7,2).dfm_patch());
    dfm.height = 330;
    break;
  case 13: // download file
    downloadFile(source,name);
    return;
  case 14: // calculate occupied space
    timers.calc = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
    $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'calc',source:encodeURIComponent(dfm_htmlspecialchars(source))},function(text){
      clearTimeout(timers.calc);
      $('div.spinner.fixed').hide('slow');
      swal({title:"_(Calculate Occupied Space)_",text:text,html:true,confirmButtonText:"_(Ok)_"});
    });
    return;
  case 15: // search
    dfm.window.html($('#dfm_templateSearch').html());
    dfm_createSource(source.dfm_strip());
    dfm.window.find('.dfm_loc').html('&nbsp;').css({'line-height':'normal'});
    dfm.window.find('.dfm_text').html('').css({'line-height':'normal'});
    dfm.height = 630;
    break;
  }
  dfm.window.dialog({
    dialogClass: 'ui-dfm',
    autoOpen: true,
    title: title,
    resizable: false,
    width: 900,
    height: dfm.height,
    modal: true,
    buttons: {
      "_(Start)_": function(){
        if (dfm.running) return;
        var target = dfm.window.find('#dfm_target');
        if (target.length) {
          target = target.val();
          switch (action) {
          case 0: // create folder
          case 2: // rename folder
          case 7: // rename file
            var valid = /^[^\/]*$/; // no slashes allowed
            break;
          case 4: // move folder
          case 9: // move file
            // disallow mixing of disk and user shares
            var valid = ud ? /^\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            // check if 'mv' can be used
            if (path.length > 2) {
              if (user) {
                if (home(source,target)==1) action++;
              } else {
                var mv = '/'+path[0]+'/'+path[1]+'/';
                if (target.substr(0,mv.length) == mv) action++;
              }
            }
            break;
          case 11: // change owner
            var valid = /.+/;
            target += (target=='root' ? ':root' : ':users');
            break;
          case 12: // change permission
            var valid = /.+/;
            target = [];
            target.push(dfm.window.find('#dfm_owner').val());
            target.push(dfm.window.find('#dfm_group').val());
            target.push(dfm.window.find('#dfm_other').val());
            target = target.join(',')+',ugo+X';
            break;
          case 15: // search
            var valid = /.+/;
            bulk = false;
            dfm.window.find('#dfm_target').prop('disabled',true);
            dfm.window.find('.dfm_loc').html('&nbsp;');
            dfm.window.find('#dfm_files').html('');
            break;
          default:
            // disallow mixing of disk and user shares
            var valid = ud ? /^\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            break;
          }
          if (!target || !valid.test(target)) {errorTarget(); return;}
        } else target = '';
        dfm.window.find('.dfm_text').removeClass('orange-text').html("_(Running)_...");
        dfm.window.find('#dfm_target').prop('disabled',true);
        dfm.window.find('#dfm_sparse').prop('disabled',true);
        dfm.window.find('#dfm_exist').prop('disabled',true);
        dfm.window.find('.dfm_sparse').css({'opacity':'0.5'});
        dfm.window.find('.dfm_exist').css({'opacity':'0.5'});
        if (action==11) {
          dfm.window.find('#dfm_owner').prop('disabled',true);
          dfm.window.find('#dfm_group').prop('disabled',true);
          dfm.window.find('#dfm_other').prop('disabled',true);
        }
        dfm_footer('hide');
        dfm_fileManager('start');
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',action:action,title:encodeURIComponent(title),source:encodeURIComponent(source),target:encodeURIComponent(target),hdlink:hdlink,sparse:dfm.window.find('#dfm_sparse').val(),exist:dfm.window.find('#dfm_exist').val(),zfs:encodeURIComponent(zfs)},function(){
          $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'read'},function(data){
            dfm_read = JSON.parse(data);
            dfm_read.action = parseInt(dfm_read.action);
          });
        });
      },
      "_(Queue)_": function(){
        var target = dfm.window.find('#dfm_target');
        if (target.length) {
          target = target.val();
          switch (action) {
          case 0: // create folder
          case 2: // rename folder
          case 7: // rename file
            var valid = /^[^\/]*$/; // no slashes allowed
            break;
          case 4: // move folder
          case 9: // move file
            // disallow mixing of disk and user shares
            var valid = ud ? /^\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            // check if 'mv' can be used
            if (path.length > 2) {
              if (user) {
                if (home(source,target)==1) action++;
              } else {
                var mv = '/'+path[0]+'/'+path[1]+'/';
                if (target.substr(0,mv.length) == mv) action++;
              }
            }
            break;
          case 11: // change owner
            var valid = /.+/;
            target += (target=='root' ? ':root' : ':users');
            break;
          case 12: // change permission
            var valid = /.+/;
            target = [];
            target.push(dfm.window.find('#dfm_owner').val());
            target.push(dfm.window.find('#dfm_group').val());
            target.push(dfm.window.find('#dfm_other').val());
            target = target.join(',')+',ugo+X';
            break;
          default:
            // disallow mixing of disk and user shares
            var valid = ud ? /^\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            break;
          }
          if (!target || !valid.test(target)) {errorTarget(); return;}
        } else target = '';
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',task:encodeURIComponent(title.toLowerCase()),action:action,title:encodeURIComponent(title),source:encodeURIComponent(source),target:encodeURIComponent(target),hdlink:hdlink,sparse:dfm.window.find('#dfm_sparse').val(),exist:dfm.window.find('#dfm_exist').val(),zfs:encodeURIComponent(zfs)});
        dfm.window.dialog('destroy');
        $('.dfm_control.jobs').prop('disabled',false);
        $.cookie('dfm_control.jobs','1');
      },
      "_(Cancel)_": function(){
        if (dfm.running) $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',action:99},function(){setTimeout(loadList,500);});
        dfm_fileManager('stop');
        dfm.window.dialog('destroy');
      }
    }
  });
  dfm_close_button();
  if (action==15) $('.ui-dfm .ui-dialog-buttonset button:eq(1)').prop('disabled',true);
  setTimeout(function(){if (dfm.window.find('#dfm_target').length) dfm.window.find('#dfm_target').focus().click(); else $('.ui-dfm .ui-dialog-buttonset button:eq(0)').focus();});
}
function doActions(action,title) {
  var source = [], type = [], owner = [], perm = [], zfs = [];
  if (action > 0) {
    $('i[id^="check_"]').each(function(){
      if ($(this).prop('id')!='check_0' && $(this).hasClass('fa-check-square-o')) {
        var id = $(this).prop('id');
        source.push(data($('#'+id.dfm_fetch('row'))));
        type.push($('#'+id.dfm_fetch('row')).attr('type'));
        owner.push($('#'+id.dfm_fetch('owner')).text());
        perm.push($('#'+id.dfm_fetch('perm')).text());
      }
    });
  }
  if (action > 0 && action < 15) {
    var bulk   = source.length > 1;
    var path   = source[0].substr(1).split('/');
    var access = ['mnt','boot'];
    if (!access.includes(path[0])) return;
    var user   = /^(user0?|rootshare)$/.test(path[1]);
    var root   = '/'+path[0]+(user ? '/'+path[1] : '');
    var share  = user||!path[2] ? '' : path[2]+'/';
    var ud     = ['disks','remotes'].includes(path[1]); // unassigned devices
    var match  = ud||user ? '' : '^(?!.*(user0?|rootshare)).*$';
    var name   = path.pop()||path.pop();
    var hdlink = "<?=$var['fuse_directio']==1?'1':''?>";
    var u      = false;
    var d      = false;
    if (bulk) {
      for (var i=0,s; s=source[i]; i++) {
        s = s.dfm_strip();
        source[i] = s;
        var p = s.substr(1).split('/');
        if (/^user0?$/.test(p[1])) u = true; else d = true;
<?if ($dfm['zfs']):?>
        if ([1,4].includes(action) && p[0]=='mnt' && type[i]=='d') {
          switch (p.length) {
          case 2:
            zfs.push(p[1]+'/');
            break;
          case 3:
            zfs.push(p[1]+'/'+p[2]);
            break;
          }
        }
      }
    } else {
      var p = source[0].substr(1).dfm_strip().split('/');
      if ([1,4].includes(action) && p[0]=='mnt' && type[0]=='d') {
        switch (p.length) {
        case 2:
          zfs.push(p[1]+'/');
          break;
        case 3:
          zfs.push(p[1]+'/'+p[2]);
          break;
        }
<?endif;?>
      }
    }
    if (u && d) {errorSource(); return;} // disallow mixing of disk and user shares
  }
  dfm.window = $("#dfm_dialogWindow");
  switch (action) {
  case 0: // create folder
    dfm.window.html($('#dfm_templateCreateFolder').html());
    source[0] = dir;
    dfm.height = 330;
    break;
  case 1: // delete object
    dfm.window.html($('#dfm_templateDeleteObject').html());
    dfm_createSource(source);
    dfm.height = 330;
    break;
  case 2: // rename object
    dfm.window.html($('#dfm_templateRenameObject').html());
    dfm_createSource(name);
    dfm.window.find('#dfm_target').val(name);
    dfm.height = 330;
    break;
  case 3: // copy object
    dfm.window.html($('#dfm_templateCopyObject').html());
    dfm_createSource(source);
    dfm.window.find('#dfm_target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match);
    if (bulk || type[0]=='d') dfm.window.find('#dfm_target').attr('data-pickfilter','HIDE_FILES_FILTER');
    dfm.window.find('#dfm_target').fileTreeAttach(null,null,function(path){
      var bits = path.substr(1).split('/');
      var auto = bulk || bits.length>3 ? '' : (type[0]=='d' ? share : '');
      dfm.window.find('#dfm_target').val(path+auto).change();
    });
    dfm.height = 630;
    break;
  case 4: // move object
    dfm.window.html($('#dfm_templateMoveObject').html());
    dfm_createSource(source);
    dfm.window.find('#dfm_target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match);
    if (bulk || type[0]=='d') dfm.window.find('#dfm_target').attr('data-pickfilter','HIDE_FILES_FILTER');
    dfm.window.find('#dfm_target').fileTreeAttach(null,null,function(path){
      var bits = path.substr(1).split('/');
      var auto = bulk || bits.length>3 ? '' : (type[0]=='d' ? share : '');
      dfm.window.find('#dfm_target').val(path+auto).change();
    });
    dfm.height = 630;
    break;
  case 11: // change owner
    dfm.window.html($('#dfm_templateChangeOwner').html());
    dfm_createSource(source);
    if (!bulk) dfm.window.find('#dfm_target').val(owner[0]);
    dfm.height = 330;
    break;
  case 12: // change permission
    dfm.window.html($('#dfm_templateChangePermission').html());
    dfm_createSource(source);
    if (!bulk) {
      dfm.window.find('#dfm_owner').val('u-'+perm[0].substr(1,2).dfm_patch());
      dfm.window.find('#dfm_group').val('g-'+perm[0].substr(4,2).dfm_patch());
      dfm.window.find('#dfm_other').val('o-'+perm[0].substr(7,2).dfm_patch());
    }
    dfm.height = 330;
    break;
  case 14: // calculate occupied space
    timers.calc = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
    $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'calc',source:encodeURIComponent(dfm_htmlspecialchars(source.join('\n')))},function(text){
      clearTimeout(timers.calc);
      $('div.spinner.fixed').hide('slow');
      swal({title:"_(Calculate Occupied Space)_",text:text,html:true,confirmButtonText:"_(Ok)_"});
    });
    return;
  case 15: // search
    dfm.window.html($('#dfm_templateSearch').html());
    // folders only
    for (var i=0,t; t=type[i]; i++) if (t != 'd') source[i] = '';
    source = source.filter(n=>n);
    if (source.length==0) source[0] = dir;
    dfm_createSource(source);
    dfm.window.find('.dfm_loc').html('&nbsp;').css({'line-height':'normal'});
    dfm.window.find('.dfm_text').html('').css({'line-height':'normal'});
    dfm.height = 630;
    break;
  }
  dfm.window.find('#dfm_source').attr('size',Math.min(dfm.tsize[action],source.length));
  dfm.window.dialog({
    dialogClass: 'ui-dfm',
    autoOpen: true,
    title: title,
    resizable: false,
    width: 900,
    height: dfm.height,
    modal: true,
    buttons: {
      "_(Start)_": function(){
        if (dfm.running) return;
        var target = dfm.window.find('#dfm_target');
        if (target.length) {
          target = target.val();
          switch (action) {
          case 0: // create folder
            bulk = false;
          case 2: // rename object
            var valid = /^[^\/]*$/; // no slashes allowed
            break;
          case 4: // move object
            // disallow mixing of disk and user shares
            var valid = ud ? /\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            // check if 'mv' can be used
            if (path.length > 2) {
              if (user) {
                if (home(source.join('\n'),target)==1) action++;
              } else {
                var mv = '/'+path[0]+'/'+path[1]+'/';
                if (target.substr(0,mv.length) == mv) action++;
              }
            }
            break;
          case 11: // change owner
            var valid = /.+/;
            target += (target=='root' ? ':root' : ':users');
            bulk = false;
            break;
          case 12: // change permission
            var valid = /.+/;
            target = [];
            target.push(dfm.window.find('#dfm_owner').val());
            target.push(dfm.window.find('#dfm_group').val());
            target.push(dfm.window.find('#dfm_other').val());
            target = target.join(',')+',ugo+X';
            bulk = false;
            break;
          case 15: // search
            var valid = /.+/;
            bulk = false;
            dfm.window.find('#dfm_target').prop('disabled',true);
            dfm.window.find('.dfm_loc').html('&nbsp;');
            dfm.window.find('#dfm_files').html('');
            break;
          default:
            // disallow mixing of disk and user shares
            var valid = ud ? /\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            break;
          }
          if (!target || !valid.test(target)) {errorTarget(); return;}
        } else target = '';
        if (bulk && target.length>0 && target.substr(-1)!='/') target += '/';
        dfm.window.find('#dfm_target').prop('disabled',true);
        dfm.window.find('#dfm_sparse').prop('disabled',true);
        dfm.window.find('#dfm_exist').prop('disabled',true);
        dfm.window.find('.dfm_sparse').css({'opacity':'0.5'});
        dfm.window.find('.dfm_exist').css({'opacity':'0.5'});
        if (action==12) {
          dfm.window.find('#dfm_owner').prop('disabled',true);
          dfm.window.find('#dfm_group').prop('disabled',true);
          dfm.window.find('#dfm_other').prop('disabled',true);
        }
        dfm.window.find('.dfm_text').removeClass('orange-text').html("_(Running)_...");
        dfm_footer('hide');
        dfm_fileManager('start');
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',action:action,title:encodeURIComponent(title),source:encodeURIComponent(source.join('\r')),target:encodeURIComponent(target),hdlink:hdlink,sparse:dfm.window.find('#dfm_sparse').val(),exist:dfm.window.find('#dfm_exist').val(),zfs:encodeURIComponent(zfs.join('\r'))},function(){
          $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'read'},function(data){
            dfm_read = JSON.parse(data);
            dfm_read.action = parseInt(dfm_read.action);
          });
        });
      },
      "_(Queue)_": function(){
        var target = dfm.window.find('#dfm_target');
        if (target.length) {
          target = target.val();
          switch (action) {
          case 0: // create folder
            bulk = false;
          case 2: // rename object
            var valid = /^[^\/]*$/; // no slashes allowed
            break;
          case 4: // move object
            // disallow mixing of disk and user shares
            var valid = ud ? /\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            // check if 'mv' can be used
            if (path.length > 2) {
              if (user) {
                if (home(source.join('\n'),target)==1) action++;
              } else {
                var mv = '/'+path[0]+'/'+path[1]+'/';
                if (target.substr(0,mv.length) == mv) action++;
              }
            }
            break;
          case 11: // change owner
            var valid = /.+/;
            target += (target=='root' ? ':root' : ':users');
            bulk = false;
            break;
          case 12: // change permission
            var valid = /.+/;
            target = [];
            target.push(dfm.window.find('#dfm_owner').val());
            target.push(dfm.window.find('#dfm_group').val());
            target.push(dfm.window.find('#dfm_other').val());
            target = target.join(',')+',ugo+X';
            bulk = false;
            break;
          default:
            // disallow mixing of disk and user shares
            var valid = ud ? /\/mnt\/.+/ : (user ? /^\/mnt\/(user0?|rootshare)\/.+/ : /^\/mnt\/(?!.*(user0?|rootshare)).+$|^\/boot\/.+/);
            break;
          }
          if (!target || !valid.test(target)) {errorTarget(); return;}
        } else target = '';
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',task:encodeURIComponent(title.toLowerCase()),action:action,title:encodeURIComponent(title),source:encodeURIComponent(source.join('\r')),target:encodeURIComponent(target),hdlink:hdlink,sparse:dfm.window.find('#dfm_sparse').val(),exist:dfm.window.find('#dfm_exist').val(),zfs:encodeURIComponent(zfs.join('\r'))});
        dfm.window.dialog('destroy');
        $('.dfm_control.jobs').prop('disabled',false);
        $.cookie('dfm_control.jobs','1');
      },
      "_(Cancel)_": function(){
        if (dfm.running) $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',action:99},function(){setTimeout(loadList,500);});
        dfm_fileManager('stop');
        dfm.window.dialog('destroy');
      }
    }
  });
  dfm_close_button();
  if (action==15) $('.ui-dfm .ui-dialog-buttonset button:eq(1)').prop('disabled',true);
  setTimeout(function(){if (dfm.window.find('#dfm_target').length) dfm.window.find('#dfm_target').focus().click(); else $('.ui-dfm .ui-dialog-buttonset button:eq(0)').focus();});
}
function stopUpload(file,error) {
  window.onbeforeunload = null;
  $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'stop',file:encodeURIComponent(dfm_htmlspecialchars(file))});
  $('#dfm_uploadButton').val("_(Upload)_").prop('onclick',null).off('click').click(function(){$('#dfm_upload').click();});
  $('#dfm_uploadStatus').html('');
  $('#dfm_upload').val('');
  dfm.running = false;
  loadList();
  if (error) setTimeout(function(){swal({title:"_(Upload Error)_",text:"_(File is removed)_",html:true,confirmButtonText:"_(Ok)_"});},200);
}
function downloadFile(source) {
  var a = document.createElement('a');
  a.setAttribute('href',source);
  a.setAttribute('download',source.split('/').pop());
  a.style.display = 'none';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}
function uploadFile(files,index,start,time) {
  var file = files[index];
  var slice = 2097152; // 2M
  var next = start + slice;
  var blob = file.slice(start, next);
  reader.onloadend = function(e){
    if (e.target.readyState !== FileReader.DONE) return;
    $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'upload',file:encodeURIComponent(dir+'/'+dfm_htmlspecialchars(file.name)),start:start,data:window.btoa(e.target.result),cancel:cancel},function(reply){
      if (reply=='stop') {stopUpload(file.name); return;}
      if (reply=='error') {stopUpload(file.name,true); return;}
      if (next < file.size) {
        var total = 0;
        for (var i=0,f; f=files[i]; i++) {
          if (i < index) start += f.size;
          total += f.size;
        }
        const d = new Date();
        var speed = autoscale(((start + slice) * 8) / (d.getTime() - time));
        var percent = Math.floor((start + slice) / total * 100);
        $('#dfm_uploadStatus').html("_(Uploading)_: <span class='dfm_percent'>"+percent+"%</span><span class='dfm_speed'>Speed: "+speed+"</span><span class='orange-text'> ["+(index+1)+'/'+files.length+']&nbsp;&nbsp;'+file.name+"</span>");
        uploadFile(files,index,next,time);
      } else if (index < files.length-1) {
        uploadFile(files,index+1,0,time);
      } else {stopUpload(file.name); return;}
    });
  };
  reader.readAsBinaryString(blob);
}
var reader = {};
var cancel = 0;

function startUpload(files) {
  if (files.length==0) return;
  reader = new FileReader();
  window.onbeforeunload = function(e){return '';};
  $('#dfm_uploadButton').val("_(Cancel)_").prop('onclick',null).off('click').click(function(){cancel=1;});
  dfm.running = true;
  const d = new Date();
  uploadFile(files,0,0,d.getTime());
}
function filter(ext) {
  $('td.ext').each(function(){
    if ($(this).attr('data').search(ext)==-1) $(this).parent().hide(); else $(this).parent().show();
  });
}
function toggleTime(init) {
  $('.my_time').toggle();
  $('.my_age').toggle();
  if (init) return;
  $.cookie('my_time')==null ? $.cookie('my_time','age') : $.removeCookie('my_time');
}
function loadList() {
  var col = $.cookie('col')||2;
  var ord = $.cookie('dir')||0;
  $('#check_0').removeClass('fa-check-square-o').addClass('fa-square-o');
  timers.browse = setTimeout(function(){$('div.spinner.fixed').show();},500);
  $.get('/plugins/dynamix.file.manager/include/Browse.php',{dir:encodeURIComponent(dir),path:"<?=$path?>"},function(data){
    clearTimeout(timers.browse);
    $('div.spinner.fixed').hide();
    table.find('tbody,tfoot').remove();
    thead.after(data);
    table.tablesorter({headers:{0:{sorter:false},8:{sorter:false}},sortList:[[col,ord],[2,0]],sortAppend:[[2,0]],textAttribute:'data'});
    table.trigger('update',[true]);
    if ($.cookie('my_time')!=null) toggleTime(true);
    $('div#buttons').show();
  });
}
function xlink(link) {
  swal({title:'',text:decodeURIComponent(link),html:true,confirmButtonText:"_(Ok)_"});
}
$(function(){
  caPluginUpdateCheck('dynamix.file.manager.plg',{name:'Dynamix File Manager'});
  var dirs = dir.split('/'), url = [];
  if (dirs.length > 1) {
    for (var n=1; n < dirs.length; n++) {
      var subdir = dirs.slice(1,n+1);
      url.push('<a class="none" href="/<?=$path?>?dir=/'+encodeURIComponent(subdir.join('/'))+'" oncontextmenu="xlink(\'/'+encodeURIComponent(subdir.join('/'))+'\');return false">'+(n==1 ? '<i class="fa fa-home"></i>' : dirs[n])+'</a>');
    }
  } else {
    url.push('<i class="fa fa-home red-text"></i>');
  }
  $('span.left').html(url.join('<i class="fa fa-chevron-right"></i>')).append('<span class="right"><span class="dfm_filter"><input type="text" class="dfm_filter" oninput="filter(this.value)" autocomplete="off" spellcheck="false" placeholder="_(file type)_"><i class="fa fa-filter dfm_filter"></i></span><i class="fa fa-toggle-off" onclick="toggleTime()" style="cursor:pointer;margin-left:20px" title="_(Toggle Time/Age display)_"></i></span>');
  table = $('table.indexer');
  thead = table.find('thead');
  table.bind('sortEnd',function(e,t){
    var sort = e.target.config.sortList.toString().split(',');
    $.cookie('col',sort[0]);
    $.cookie('dir',sort[1]);
  });
<?if ($display['resize']):?>
  resize();
  $(window).bind('resize',function(){resize();});
<?endif;?>
  loadList();
<?if (!$dir||$isshare):?>
  $.cookie('dfm_control.common','1');
<?else:?>
  $.removeCookie('dfm_control.common');
<?endif;?>
});
</script>
<div class="autoheight">
<table class="indexer tablesorter shift"><thead><tr><th><?if($dir){?><i id="check_0" class="fa fa-fw fa-square-o" onclick="selectAll()"></i><?}?></th><th>_(Type)_</th><th class='sorter-text'>_(Name)_</th><th>_(Owner)_</th><th>_(Permission)_</th><th>_(Size)_</th><th>_(Last Modified)_</th><th style="width:200px">_(Location)_</th><th>_(Action)_</th></tr></thead></table>
</div>
<div id="buttons">
<input type="button" value="_(Done)_" onclick="done('Browse')">
<input type="button" value="_(Jobs)_" class="dfm_control jobs" onclick="doJobs('_(Scheduled Jobs)_')"<?=$dfm['jobs']?'':' disabled'?>>
<input type="button" value="_(Search)_" class="dfm_control basic" onclick="doActions(15,this.value)"<?=$dfm['running']?' disabled':''?>>
<input type="button" value="_(Delete)_" class="dfm_control extra" onclick="doActions(1,this.value)" disabled>
<input type="button" value="_(Copy)_" class="dfm_control extra" onclick="doActions(3,this.value)" disabled>
<input type="button" value="_(Move)_" class="dfm_control extra" onclick="doActions(4,this.value)" disabled>
<input type="button" value="_(Rename)_" class="dfm_control rename" onclick="doActions(2,this.value)" disabled>
<input type="button" value="_(Owner)_" class="dfm_control extra" onclick="doActions(11,this.value)" disabled>
<input type="button" value="_(Permission)_" class="dfm_control extra" onclick="doActions(12,this.value)" disabled>
<input type="button" value="_(Calculate)_" class="dfm_control extra" onclick="doActions(14,this.value)" disabled>
<input type="button" value="_(Create)_" class="dfm_control common" onclick="doActions(0,this.value)"<?if(!$dir||$isshare){?> disabled<?}?>>
<input type="button" value="_(Upload)_" class="dfm_control common" id="dfm_uploadButton" onclick="$('#dfm_upload').click()"<?if(!$dir||$isshare){?> disabled<?}?>><span id="dfm_uploadStatus"></span>
</div>

                )

            [CPUisol] => Array
                (
                    [Menu] => CPUset:3
                    [Title] => CPU Isolation
                    [Tag] => icon-cpu
                    [file] => webGui/CPUisol.page
                    [root] => webGui
                    [name] => CPUisol
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
*/
?>
<form name="is">
<input type="hidden" name="names" value="isolcpus">
<table class='tablesorter shift' style='width:auto'>
<thead><tr><th><i class="fa fa-list"></i> _(Isolation)_</th><?create()?></tr></thead>
<tbody id="table-is"><?=$spinner?></tbody>
</table>
<input type="button" value="_(Apply)_" onclick="apply(this.form)" disabled><input type="button" value="_(Done)_" onclick="done()"><span id="wait-is" class="red-text" style="display:none"><i class="fa fa-spinner fa-spin"></i> _(Please wait)_...</span>
</form>
<?if (!$safemode):?>
<?else:?>
<div class="notice">_(CPU isolation is prohibited while system is running in SAFE MODE)_!</div>
<?endif;?>

:cpu_isolation_help:

                )

            [CPUpin] => Array
                (
                    [Menu] => CPUset:2
                    [Title] => CPU Pinning Docker
                    [Tag] => icon-cpu
                    [file] => webGui/CPUpin.page
                    [root] => webGui
                    [name] => CPUpin
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
*/
?>
<?if ($dockerd):?>
<form name="ct">
<input type="hidden" name="names" id="names-ct" value="">
<table class='tablesorter shift' style='width:auto'>
<thead><tr><th><i class="fa fa-list"></i> _(Container)_</th><?create()?></tr></thead>
<tbody id="table-ct"><?=$spinner?></tbody>
</table>
<input type="button" value="_(Apply)_" onclick="apply(this.form)" disabled><input type="button" value="_(Done)_" onclick="done()"><span id="wait-ct" class="red-text" style="display:none"><i class="fa fa-spinner fa-spin"></i> _(Please wait)_...</span>
</form>
<?else:?>
<div class="notice">_(No CPU pinning available. Docker service must be started)_</div>
<?endif;?>

:cpu_pinning_help:

                )

            [CPUset] => Array
                (
                    [Menu] => OtherSettings
                    [Title] => CPU Pinning
                    [Type] => xmenu
                    [Icon] => icon-cpu-pinning
                    [file] => webGui/CPUset.page
                    [root] => webGui
                    [name] => CPUset
                    [text] => 
                )

            [CPUvms] => Array
                (
                    [Menu] => CPUset:1
                    [Title] => CPU Pinning VM
                    [Tag] => icon-cpu
                    [file] => webGui/CPUvms.page
                    [root] => webGui
                    [name] => CPUvms
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
*/
?>
<?
$libvirtd = pgrep('libvirtd')!==false;
$dockerd  = pgrep('dockerd')!==false;

$cpus = cpu_list();
$total = count($cpus);
$spinner = "<tr><td colspan='".($total+2)."'><div class='spinner'></div></td></tr>";
$cpuset = implode(';',$cpus);

function create() {
  // create the table header. Make multiple rows when CPU cores are many ;)
  global $total,$cpus;
  $loop = floor(($total-1)/32)+1;
  $text = [];
  for ($c = 0; $c < $loop; $c++) {
    $max = ($c==$loop-1 ? ($total%32?:32) : 32);
    for ($n = 0; $n < $max; $n++) {
      [$cpu1, $cpu2] = my_preg_split('/[,-]/',$cpus[$c*32+$n]);
      if (empty($text[$n])) $text[$n] = '';
      $text[$n] .= "$cpu1<br>";
      if ($cpu2) $text[$n] .= "$cpu2<br>";
    }
  }
  $label = implode('<br>',array_fill(0,$loop,'CPU:'.($cpu2 ? '<br>HT:':'')));
  echo "<th>$label</th>".implode(array_map(function($t){return "<th>$t</th>";},$text));
}
?>
<style>
table.tablesorter tr>th+th{text-align:right;vertical-align:top}
table.tablesorter tr>td+td+td{vertical-align:top}
table.tablesorter tr>th+th+th,table.tablesorter tr>td+td{text-align:center}
table.tablesorter th:first-child,table.tablesorter td:first-child{width:180px;text-align:left}
input.flat{margin:0}
input.lock{margin:0}
</style>
<script>
String.prototype.strip = function(){return this.replace(/ |\(|\)|\[|\]/g,'');}
String.prototype.encode = function(){return this.replace(/\./g,'%2e');}

function apply(form) {
  // disable buttons
  $(form).find('input[value="_(Apply)_"]').prop('disabled',true);
  $(form).find('input[value="_(Reset)_"]').val("_(Done)_").prop('onclick',null).off('click').click(function(){done();});
  $('input[value="_(Done)_"]').prop('disabled',true);
  var wait = 0;
  var id = $(form).prop('name');
  var args = {};
  args['id'] = id;
  args['names'] = form.names.value.encode();
  // get the 'checked' cpus
  $(form).find('input[type=checkbox]').each(function(){
    if ($(this).prop('checked')) args[$(this).prop('name').encode()] = 'on';
  });
  // show the instant wait message
  $('#wait-'+id).show();
  // step 1: prepare the update and report back the changes
  $.post('/webGui/include/UpdateOne.php',args,function(reply){
    if (reply.error) {
      swal({type:'error',title:"_(Assignment error)_",text:reply.error,html:true,confirmButtonText:"_(Ok)_"},function(){
        $('#wait-'+id).hide();
        $(form).find('input[value="_(Done)_"]').val("_(Reset)_").prop('disabled',false).prop('onclick',null).off('click').click(function(){reset($('form[name="'+id+'"]'));});
      });
    } else if (reply.success) {
      var data = reply.success.split(';');
      wait = data.length;
      for (var i=0; i < data.length; i++) {
        var name = data[i];
        $('#'+id+'-'+name.strip()).show('slow');
        // step 2: apply the changes by updating the vm or container
        $.post('/webGui/include/UpdateTwo.php',{id:id,name:encodeURIComponent(name)},function(reply){
          if (reply.error) {
            // report error and reload table
            swal({type:'error',title:"_(Execution error)_",text:reply.error,html:true,confirmButtonText:"_(Ok)_"},function(){
              $('#wait-'+id).hide();
              $('input[value="_(Done)_"]').prop('disabled',false);
              reset($('form[name="'+id+'"]'));
            });
          } else {
            $('#'+id+'-'+reply.success.strip()).hide('slow');
            // cleanup when all is done
            if (!--wait) {
              setTimeout(function(){$('#wait-'+id).hide();},500);
              $('input[value="_(Done)_"]').prop('disabled',false);
              // isolated cpus, need reboot notice?
              if (id == 'is') notice();
            }
          }
        });
      }
    } else {
      $('#wait-'+id).hide();
      $('input[value="_(Done)_"]').prop('disabled',false);
      if (id == 'is') notice();
    }
  });
}
function vm() {
  // fetch the current vm assignments
  $.post('/webGui/include/CPUset.php',{id:'vm',cpus:'<?=$cpuset?>'},function(d){
    var data = d.split('\0');
    $('#table-vm').html(data[0]);
    $('#names-vm').val(data[1]);
    buttons(document.vm);
  });
}
function thread2containers(n) {
  const selector = $('form[name=ct]').find(`[name$=":${n}"]`);
  const checkboxes = selector.length;
  const checked = selector.filter(':checked').length;
  selector.prop('checked', (checkboxes - checked > checked ? true : false)).change();
}
function ct() {
  // fetch the current container assignments
  $.post('/webGui/include/CPUset.php',{id:'ct',cpus:'<?=$cpuset?>'},function(d){
    var data = d.split('\0');
    $('#table-ct').html(data[0]);
    $('#names-ct').val(data[1]);
    buttons(document.ct);
    // inject thread to containers toggles
    if($('a[onclick^="thread2containers"]').length === 0) {
      $('form[name=ct]').find('thead tr th:gt(1)').each((i, elem) => {
        elem.innerHTML = elem.innerHTML.replace(/(\d+)/g, '<a href="#" onclick="thread2containers(this.innerText);return false;" title="_(Toggle thread to containers)_">$1</a>');
      });
    }
  });
}
function is() {
  // fetch the current isolcpu assignments
  $.post('/webGui/include/CPUset.php',{id:'is',cpus:'<?=$cpuset?>'},function(d){
    $('#table-is').html(d);
    buttons(document.is);
<?if ($safemode):?>
    $('#table-is').find('input[type=checkbox]').prop('disabled',true);
<?endif;?>
  });
}
function notice() {
  // notice to reboot system after changes
  var message = "_(CPU Isolation: A reboot is required to apply changes)_";

  $.post('/webGui/include/CPUset.php',{id:'cmd'},function(d){
    if (d==1) addRebootNotice(message); else removeRebootNotice(message);
  });
}
function reset(form) {
  // undo changes without a complete refresh of the page
  $(form).find('input[value="_(Apply)_"]').prop('disabled',true);
  $(form).find('input[value="_(Reset)_"]').val("_(Done)_").prop('onclick',null).off('click').click(function(){done();});
  switch ($(form).prop('name')) {
    case 'vm': $('#table-vm').html("<?=$spinner?>"); $('div.spinner').html(unraid_logo); vm(); break;
    case 'ct': $('#table-ct').html("<?=$spinner?>"); $('div.spinner').html(unraid_logo); ct(); break;
    case 'is': $('#table-is').html("<?=$spinner?>"); $('div.spinner').html(unraid_logo); is(); break;
  }
}
function buttons(form) {
  $(form).find('input[type=checkbox]').each(function(){$(this).on('change',function(){
    var total = $(form).find('input[type=checkbox]').length;
    var checked = 'input[name^="'+$(this).prop('name').split(':')[0]+':'+'"]:checked';
    var cores = $(form).find(checked).length;
    // vms must have at least one core selected
    if ($(form).prop('name')=='vm') $(form).find(checked).prop('disabled',cores<2);
    // isolation may not have all cores selected
    if ($(form).prop('name')=='is' && $(this).prop('checked')) $(this).prop('checked',cores<total);
    // we need the Apply and Done buttons react on checkbox changes
    $(form).find('input[value="_(Apply)_"]').prop('disabled',false);
    $(form).find('input[value="_(Done)_"]').val("_(Reset)_").prop('onclick',null).off('click').click(function(){reset(form);});
  });});
}
$(function(){
<?if ($libvirtd):?>
  vm();
<?endif;?>
<?if ($dockerd):?>
  ct();
<?endif;?>
  is();
  notice();
});
</script>
<?if ($libvirtd):?>
<form name="vm">
<input type="hidden" name="names" id="names-vm" value="">
<table class='tablesorter shift' style='width:auto'>
<thead><tr><th><i class="fa fa-list"></i> _(VM)_</th><?create()?></tr></thead>
<tbody id="table-vm"><?=$spinner?></tbody>
</table>
<input type="button" value="_(Apply)_" onclick="apply(this.form)" disabled><input type="button" value="_(Done)_" onclick="done()"><span id="wait-vm" class="red-text" style="display:none"><i class="fa fa-spinner fa-spin"></i> _(Please wait)_...</span>
</form>
<?else:?>
<div class="notice">_(No CPU pinning available. VM service must be started)_</div>
<?endif;?>

:cpu_vms_help:

                )

            [CacheDevices] => Array
                (
                    [Menu] => Main:2
                    [Title] => Pool Devices
                    [Tag] => bullseye
                    [Cond] => ($pool_devices || $var['fsState']=='Stopped')
                    [file] => webGui/CacheDevices.page
                    [root] => webGui
                    [name] => CacheDevices
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function makeList($list) {
  return implode(',',array_map('escapestring',$list));
}
function sharename($share) {
  return basename($share,'.cfg');
}
$bgcolor = strstr('white,azure',$display['theme']) ? '#f2f2f2' : '#1c1c1c';
?>
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.ui.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-{$display['theme']}.css")?>">
<style>
table.divider{margin-top:20px}
</style>
<script>
function validate(poolname) {
  var valid = /^[a-z]([a-z0-9_-]*[a-z_-])*$/;
  var reserved = [<?=makeList(explode(',',_var($var,'reservedNames')))?>];
  var shares = [<?=makeList(array_map('sharename',glob('boot/config/shares/*.cfg',GLOB_NOSORT)))?>];
  var pools = [<?=makeList($pools)?>];
  if (!poolname.trim()) return false;
  if (reserved.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Do not use reserved names)_",html:true,type:'error',confirmButtonText:"_(Ok)_"});
    return false;
  } else if (shares.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Do not use user share names)_",html:true,type:'error',confirmButtonText:"_(Ok)_"});
    return false;
  } else if (pools.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Pool name already exists)_",html:true,type:'error',confirmButtonText:"_(Ok)_"});
    return false;
  } else if (!valid.test(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Use only lowercase with no special characters or leading/trailing digits)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  return true;
}
function addPoolPopup() {
  var popup = $('#dialogAddPool');
  // Load popup with the template info
  popup.html($("#templatePopupPool").html());
  // Start Dialog section
  popup.dialog({
    title: "_(Add Pool)_",
    resizable: false,
    width: 600,
    modal: true,
    show : {effect:'fade', duration:250},
    hide : {effect:'fade', duration:250},
    buttons: {
    "_(Add)_": function() {
        if (validate($(this).find('input[name="poolName"]').val())) {
          $(this).find('form').submit();
          $(this).dialog('close');
        }
      },
    "_(Cancel)_": function() {
        $(this).dialog('close');
      }
    }
  });
  $(".ui-dialog .ui-dialog-titlebar").addClass('menu');
  $('.ui-dialog .ui-dialog-titlebar-close').css({'display':'none'});
  $(".ui-dialog .ui-dialog-title").css({'text-align':'center','width':'100%'});
  $(".ui-dialog .ui-dialog-content").css({'padding-top':'15px','vertical-align':'bottom'});
  $(".ui-widget-content").css({'background':'<?=$bgcolor?>'});
  $(".ui-button-text").css({'padding':'0px 5px'});
}

<?if (_var($var,'fsState')=="Started"):?>
$('#tab2').bind({click:function() {$('i.toggle').show('slow');}});
<?endif;?>
</script>

<?$i = 0?>
<?foreach ($pools as $pool):?>
<?if (isset($disks[$pool]['devices']) or _var($var,'fsState')=="Stopped"):?>
<table class="disk_status wide<?=$i?' divider':''?>">
<thead><tr><td>_(Device)_</td><td>_(Identification)_</td><td>_(Temp)_.</td><td>_(Reads)_</td><td>_(Writes)_</td><td>_(Errors)_</td><td>_(FS)_</td><td>_(Size)_</td><td>_(Used)_</td><td>_(Free)_</td></tr></thead>
<tbody id="pool_device<?=$i++?>">
<?foreach (cache_filter($disks) as $disk) if (prefix($disk['name'])==$pool) echo "<tr><td colspan='11'>&nbsp;</td></tr>"?>
</tbody>
</table>
<?endif;?>
<?endforeach;?>
<?if (_var($var,'fsState')=="Stopped"):?>
<input type="button" value="_(Add Pool)_" style="margin:0" onclick="addPoolPopup()">

<div id="dialogAddPool" style="display:none"></div>
<div id="templatePopupPool" style="display:none">
<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="return validate(this.poolName.value)">
<input type="hidden" name="changeSlots" value="apply">
_(Name)_:
: <input type="text" name="poolName" maxlength="40" value="<?=count($pools)==0?'cache':''?>">

_(Slots)_:
: <select name="poolSlots">
  <?for ($n=1; $n<=_var($var,'MAX_CACHESZ',0); $n++):?>
  <?=mk_option(1,$n,$n)?>
  <?endfor;?>
  </select>

</form>
</div>
<?endif;?>

:cache_devices_help:

<?if (_var($var,'fsState')=="Stopped"):?>
<div></div>
:cache_slots_help:
<?endif;?>

                )

            [Confirmations] => Array
                (
                    [Menu] => UserPreferences
                    [Title] => Confirmations
                    [Icon] => icon-confirmations
                    [Tag] => check-square
                    [file] => webGui/Confirmations.page
                    [root] => webGui
                    [name] => Confirmations
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>

<form markdown="1" name="confirm_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg"/>
<input type="hidden" name="#section" value="confirm"/>
_(Confirm reboot & powerdown commands)_:
: <select name="down">
  <?=mk_option($confirm['down'], "0", _('No'))?>
  <?=mk_option($confirm['down'], "1", _('Yes'))?>
  </select>

:confirm_reboot_help:

_(Confirm array stop command)_:
: <select name="stop">
  <?=mk_option($confirm['stop'], "0", _('No'))?>
  <?=mk_option($confirm['stop'], "1", _('Yes'))?>
  </select>

:confirm_array_stop_help:

<?if (isset($confirm['sleep'])):?>
_(Confirm sleep command)_:
: <select name="sleep">
  <?=mk_option($confirm['sleep'], "0", _('No'))?>
  <?=mk_option($confirm['sleep'], "1", _('Yes'))?>
  </select>
<?endif;?>

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [Credits] => Array
                (
                    [Menu] => About
                    [Title] => Credits
                    [Icon] => icon-credits
                    [Tag] => trophy
                    [file] => webGui/Credits.page
                    [root] => webGui
                    [name] => Credits
                    [text] => **Unraid webGUI** Copyright &copy; 2005-2023, [Lime Technology, Inc.](http://lime-technology.com)

**Dynamix** Copyright &copy; 2012-2023, Bergware International.

**Extended Docker Configuration Page** Copyright &copy; 2014-2021, Guilherme Jardim.

**VM Manager** Copyright &copy; 2015-2021, Eric Schultz, Derek Macias.

**APC UPS Configuration Page** Copyright &copy; 2015, Dan Landon.

**Simple Features** Copyright &copy; 2012, Andrew Hamer-Adams.

**SysDev UI** Copyright &copy; 2020, Justin Nolan

**Community Applications** Copyright &copy; 2015-2023, Andrew Zawadzki

The Software comprising the Unraid webGui, which is all files within this repository **except** for
files listed below, is licensed under GPL version 2.

* The Lime Technology and Unraid logos are property of Lime Technology, Inc.
and may not be used in any other project without written permission from Lime Technology, Inc.

* Settings, Tools and Case icons. Copyright &copy; 2018-2020, [Magnus Engø.](http://www.magnusengo.net/) Used with permission.

**Unraid**&reg; is a registered trademark of [Lime Technology, Inc.](http://lime-technology.com)

This file shall be included in all copies or substantial portions of the Software.

<?
require_once "$docroot/plugins/dynamix.plugin.manager/include/PluginHelpers.php";

$plugins = '/var/log/plugins';
$credits = [];

foreach (glob("$plugins/lang-*.xml", GLOB_NOSORT) as $link) {
  $xml_file = @readlink($link);
  if ($xml_file === false) continue;
  $lang = language('Language', $xml_file);
  $local = language('LanguageLocal', $xml_file);
  $author = language('Author', $xml_file);
  $credits[] = "<li><p><i>$lang ($local)</i> translation by $author</p></li>";
}
if (count($credits)) echo '<br><b>Language Translations</b> Copyright &copy; 2020-2023, <a href="http://lime-technology.com">Lime Technology, Inc.</a><br><ul>'.implode('',$credits).'</ul>';
?>
<br><input type="button" value="_(Done)_" onclick="done()">

                )

            [DashStats] => Array
                (
                    [Menu] => Dashboard
                    [Nchan] => wg_poller,update_1,update_2,update_3,ups_status:stop
                    [file] => webGui/DashStats.page
                    [root] => webGui
                    [name] => DashStats
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
*/
?>
<?
function dmidecode($key,$n,$all=true) {
  $entries = array_filter(explode($key,shell_exec("dmidecode -qt$n")??""));
  $properties = [];
  foreach ($entries as $entry) {
    $property = [];
    foreach (explode("\n",$entry) as $line) if (strpos($line,': ')!==false) {
      [$key,$value] = my_explode(': ',trim($line));
      $property[$key] = $value;
    }
    $properties[] = $property;
  }
  return $all ? $properties : $properties[0]??null;
}
function export_settings($protocol,$share) {
  if ($protocol!='yes' || $share['export']=='-') return "-";
  if ($share['export']=='e') return _(ucfirst($share['security']));
  return '<em>'._(ucfirst($share['security'])).'</em>';
}
function vpn_peers($file) {
  $peers = [];
  $entries = array_filter(array_map('trim',preg_split('/\[(Interface|Peer)\]/',file_get_contents($file))));
  foreach($entries as $key => $entry) {
    $noname = true;
    foreach (explode("\n",$entry) as $row) {
      if ($key>1 && $row[0]=='#') {$peers[$key-1] = substr($row,1); $noname = false;}
    }
    if ($key>1 && $noname) $peers[$key-1] = "Peer ".($key-1);
  }
  return $peers;
}
function customTiles($column) {
  global $mytiles;
  if (isset($mytiles)) foreach ($mytiles as $tile) if (!empty($tile[$column])) echo $tile[$column];
}

// adjust the text color in log window
$fgcolor = in_array($theme,['white','azure']) ? '#1c1c1c' : '#f2f2f2';
exec("sed -ri 's/^\.logLine\{color:#......;/.logLine{color:$fgcolor;/' $docroot/plugins/dynamix.docker.manager/log.htm >/dev/null &");

exec("/etc/rc.d/rc.docker status >/dev/null",$dummy,$dockerd);
exec("/etc/rc.d/rc.libvirt status >/dev/null",$dummy,$libvirtd);
$dockerd = $dockerd==0;
$libvirtd = $libvirtd==0;
$apcupsd = file_exists('/var/run/apcupsd.pid');
$conf  = glob('/etc/wireguard/wg*.conf');
$wireguard = is_executable('/usr/bin/wg') && count($conf);
$started = _var($var,'fsState')=='Started';
$sleep = isset($display['sleep']);
$array_size = $array_used = 0;
$extra_size = $extra_used = 0;
$cache_size = $cache_used = [];
$cache_type = $cache_rate = [];

$parity = _var($var,'mdResync');
$mover = file_exists('/var/run/mover.pid');
$btrfs = exec('pgrep -cf /sbin/btrfs');
$dot = _var($display,'number','.,')[0];
$zfs = file_exists('/proc/spl/kstat/zfs/arcstats');

foreach ($disks as $disk) {
  switch (_var($disk,'type')) {
  case 'Data':
    if (isset($disk['fsFree'])) {
      $array_size += _var($disk,'fsSize',0);
      $array_used += _var($disk,'fsSize',0)-_var($disk,'fsFree',0);
    }
    break;
  case 'Cache':
    $name = _var($disk,'name');
    if (in_array($name,$pools)) {
      $cache_size[$name] = _var($disk,'fsSize',0);
      $cache_used[$name] = _var($disk,'fsSize',0)-_var($disk,'fsFree',0);
      $cache_type[$name] = _var($disk,'rotational') ? (_var($disk,'luksState') ? 'disk-encrypted' : 'disk') : 'nvme';
      $cache_rate[$name] = number_format(100*$cache_used[$name]/($cache_size[$name] ?: 1),1,$dot,'');
      if (empty($disks[$name]['devices'])) unset($pools[array_search($name,$pools)]);
    }
    break;
  }
}
foreach ($devs as $disk) {
  $extra_size += _var($disk,'sectors',0)*_var($disk,'sector_size',0);
}
$array_percent = number_format(100*$array_used/($array_size ?: 1),1,$dot,'');
exec('cat /sys/devices/system/cpu/*/topology/thread_siblings_list|sort -nu', $cpus);
$wg_up = $wireguard ? exec("wg show interfaces") : '';
$wg_up = $wg_up ? explode(' ',$wg_up) : [];
$up    = count($wg_up);
$down  = max(count($conf)-$up,0);
$fans  = exec("sensors -uA 2>/dev/null|grep -c 'fan[0-9]_input'");
$autofan = is_executable("$docroot/plugins/dynamix.system.autofan/scripts/rc.autofan");
$group = _var($var,'shareSMBEnabled')=='yes' | _var($var,'shareNFSEnabled')=='yes';
$names = [];
$cache_only = $encrypted = 0;
foreach ($shares as $share) {
  if ($share['useCache']=='only') $cache_only++;
  if ($share['luksStatus']>0) $encrypted++;
}
$passwd = $nopass = 0;
foreach ($users as $user) if ($user['passwd']=='yes') $passwd++; else $nopass++;

$boot   = "/boot/config/plugins/dynamix";
$myfile = "case-model.cfg";
$mycase = file_exists("$boot/$myfile") ? file_get_contents("$boot/$myfile") : false;

$board  = dmidecode('Base Board Information','2',0);
$serial = _("s/n").": ".($board['Serial Number'] ?? "--");
$board  = ($board['Manufacturer'] ?? "").' '.($board['Product Name'] ?? "").' '.(isset($board['Version']) ? ", "._("Version")." ".$board['Version'] : "");

$bios = dmidecode('BIOS Information','0',0);
$biosdate = _("BIOS dated").": "._(my_time(strtotime($bios['Release Date'] ?? ""),$display['date']),0);
$bios = $bios['Vendor'].(isset($bios['Version']) ? ", "._("Version")." ".$bios['Version'] : "");

$cpu = dmidecode('Processor Information','4',0);
$cpumodel = str_ireplace(["Processor","(C)","(R)","(TM)"],["","&#169;","&#174;","&#8482;"],exec("grep -Pom1 '^model name\s+:\s*\K.+' /proc/cpuinfo") ?: $cpu['Version']);
$cpumodel .= (strpos($cpumodel,'@')===false && !empty($cpu['Current Speed']) ? " @ {$cpu['Current Speed']}" : "");

$total = exec("awk '/^MemTotal/{print $2*1024}' /proc/meminfo");
unset($ports); exec("ls /sys/class/net|grep -Po '^(lo|(bond|eth)\d+)$'",$ports);

$sizes = ['MB','GB','TB'];
$memory_type = $ecc = '';
$memory_installed = $memory_maximum = 0;
$memory_devices = dmidecode('Memory Device','17');
foreach ($memory_devices as $device) {
  if (!is_numeric($device['Size'][0])) continue;
  [$size, $unit] = my_explode(' ',$device['Size']??'');
  $base = array_search($unit,$sizes);
  if ($base!==false) $memory_installed += $size*pow(1024,$base);
  if (!$memory_type && isset($device['Type']) && $device['Type']!='Unknown') $memory_type = $device['Type'];
}
$memory_array = dmidecode('Physical Memory Array','16');
foreach ($memory_array as $device) {
  [$size, $unit] = my_explode(' ',$device['Maximum Capacity']??'');
  $base = array_search($unit,$sizes);
  if ($base>=1) $memory_maximum += $size*pow(1024,$base);
  if (!$ecc && isset($device['Error Correction Type']) && $device['Error Correction Type']!='None') $ecc = "{$device['Error Correction Type']} ";
}
if ($memory_installed >= 1024) {
  $memory_installed = round($memory_installed/1024);
  $memory_maximum = round($memory_maximum/1024);
  $unit = 'GiB';
} else $unit = 'MiB';

// If maximum < installed then roundup maximum to the next power of 2 size of installed. E.g. 6 -> 8 or 12 -> 16
$low = $memory_maximum < $memory_installed;
if ($low) $memory_maximum = pow(2,ceil(log($memory_installed)/log(2)));

switch ($display['theme']) {
  case 'white': $color = '#1c1b1b'; $grid = '#e3e3e3'; break;
  case 'black': $color = '#f2f2f2'; $grid = '#2b2b2b'; break;
  case 'azure': $color = '#606e7f'; $grid = '#f3f0f4'; break;
  case 'gray' : $color = '#606e7f'; $grid = '#0c0f0b'; break;
  default     : $color = '#1c1b1b'; $grid = '#e3e3e3'; break;
}
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">
<style>
div.frame{padding-top:14px;padding-bottom:160px}
div.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(<?=$themes1?'610px':'580px'?>,1fr));column-gap:20px}
div.tile,i.tile{display:none}
div#iframe-popup{display:none;-webkit-overflow-scrolling:touch}
div.last{padding-bottom:12px}
div.leftside{float:left;width:66%}
div.rightside{float:right;margin:0;text-align:center}
div[id$=chart]{margin:-12px 8px -24px -18px}
span.green,span.red,span.orange{padding-left:0}
span.ctrl{float:right;margin-top:0;margin-right:10px}
span.ctrl span{font-size:2rem!important}
span.outer{float:left}
span.inner{width:143px}
span.rx{width:80px;display:inline-block}
span.busy,i.inactive{opacity:0.5}
span.dense{width:180px;display:inline-block}
span#ups_model{margin-right:30px}
span#chart-toggle{float:right}
span.header,tr.header{font-size:1.1rem!important;text-transform:uppercase;letter-spacing:1px}
span.wg1{font-size:1.1rem;text-indent:24px}
span.wg2{font-size:1.1rem}
span[id^=cpu],span[id^=sys]{width:0}
span[class^="fa "]{font-size:1.6rem;margin-right:18px}
span.load{font-size:85%}
span.fan{width:36%;display:inline-block}
span.w18{width:18%;display:inline-block;float:left}
span.w26{width:26%;display:inline-block;float:left}
span.w36{width:36%;display:inline-block;float:left}
span.w44{width:44%;display:inline-block;float:left}
span.w72{width:72%;display:inline-block;float:left}
select#cpuline,select#netline{border:none;padding:0 12px 0 0}
select[name=enter_share]{margin-top:0}
img#mycase{width:auto;max-width:128px;height:auto;max-height:128px}
i.heat{margin-left:8px}
i.ups{margin-right:8px;font-size:1.4rem!important}
i.vpn{font-size:1.4rem!important;cursor:pointer}
i.indent{display:inline-block;width:18px}
i.f32{font-size:32px!important}
i.f14{font-size:1.4rem!important}
i.fa.orb{margin-left:0}
i.fa-wrench.tile{color:#0099ff!important;background-color:rgba(0,153,255,0.1)!important}
i[class^="icon-"]{font-size:1.6rem;margin-right:8px}
i[class^="icon-u-"]{font-size:inherit}
i#mycase[class^="case-"]{font-size:128px}
i#mycase[class^="fa "]{font-size:96px}
a.cpu_close,span.hand{cursor:pointer;z-index:1001}
tr#var0,tr#var1,tr#var2,tr#var3,tr#var4{cursor:alias}
tr#var1,tr#var4,tr#cpu_chart,.cpu_open{display:none}
td.none{text-align:center;padding-top:12px}
input[value=Edit]{margin:12px 0 0 0;padding:5px 10px}
.share1,.share3,.user1,.user3,.view1,.view2,.view3,.view4,.unused{display:none}
.port_view,.control,#apps,#vms{z-index:10000}
.flat{height:0;lineheight:0}
.wrap{white-space:normal}
.switch-button-background{margin-left:0;margin-top:4px}
.switch-button-label{margin-top:3px}
.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset button[disabled]{cursor:default;color:#808080;background:-webkit-gradient(linear,left top,right top,from(#404040),to(#808080)) 0 0 no-repeat,-webkit-gradient(linear,left top,right top,from(#404040),to(#808080)) 0 100% no-repeat,-webkit-gradient(linear,left bottom,left top,from(#404040),to(#404040)) 0 100% no-repeat,-webkit-gradient(linear,left bottom,left top,from(#808080),to(#808080)) 100% 100% no-repeat;background:linear-gradient(90deg,#404040 0,#808080) 0 0 no-repeat,linear-gradient(90deg,#404040 0,#808080) 0 100% no-repeat,linear-gradient(0deg,#404040 0,#404040) 0 100% no-repeat,linear-gradient(0deg,#808080 0,#808080) 100% 100% no-repeat;background-size:100% 2px,100% 2px,2px 100%,2px 100%}
</style>
<script src="<?autov('/webGui/javascript/jquery.apexcharts.js')?>"></script>
<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script src="<?autov('/plugins/dynamix.docker.manager/javascript/docker.js')?>"></script>
<script src="<?autov('/plugins/dynamix.vm.manager/javascript/vmmanager.js')?>"></script>

<div class='frame'>
<div class='grid'>
<div class='tile' id='tile1'>
<table id='db-box1' class='share_status dashboard'>
<tbody class='system'>
<tr><td><i class='icon-performance f32'></i><div class='section'><?=_var($var,'NAME')?><br>
<span><?=_var($var,'COMMENT')?></span><br></div>
<a href='/Dashboard/Settings/Identification'><i class='fa fa-fw fa-cog control' title="_(Go to identification settings)_"></i></a><i class='fa fa-fw fa-wrench control tile' onclick='contentMgmt()' title="_(Tile Management)_"></i>
<span class='ctrl'>
<?if ($parity||$mover||$btrfs):?>
<span class='fa fa-fw fa-<?=$started?'stop':'play'?>-circle busy' title="<?=$started?_("Stop the array"):_("Start the array")?>"></span>
<?else:?>
<span class='fa fa-fw fa-<?=$started?'stop':'play'?>-circle hand' title="<?=$started?_("Stop the array"):_("Start the array")?>" onclick='<?=$started?'Stop':'Start'?>Array()'></span>
<?endif;?>
<?if ($sleep):?><span class='fa fa-fw fa-moon-o hand' title="_(Put system to sleep)_" onclick='Sleep()'></span><?endif;?>
<span class='fa fa-fw fa-refresh hand' title="_(Reboot the system)_" onclick='Reboot()'></span>
<span class='fa fa-fw fa-power-off hand' title="_(Shutdown the system)_" onclick='Shutdown()'></span></span>
</td></tr>
<tr><td>
<div class='leftside'>
<span class='header'><i class='indent fa fa-file-text-o'></i>_(Model)_</span><br><i class='indent'></i><?=_var($var,'SYS_MODEL')?:'---'?><br><br>
<span class='header'><i class='indent fa fa-id-badge'></i>_(Registration)_</span><br><i class='indent'></i>Unraid OS <b><em><?=_var($var,'regTy')?></em></b><br><br>
<span class='header'><i class='indent fa fa-clock-o'></i>_(Uptime)_</span><br><i class='indent'></i><span class='uptime'></span>
</div>
<div class='rightside'>
<span id='casing'>
<?if ($mycase):?>
<?if (substr($mycase,-4)!='.png'):?>
<i id='mycase' class='case-<?=$mycase?>'></i><br>
<?else:?>
<img id='mycase' src='<?=autov("/webGui/images/$mycase")?>'><br>
<?endif;?>
<?else:?>
<i id='mycase' class='fa fa-hdd-o'></i><br>
<?endif;?>
</span>
<input type='button' value="_(Edit)_" style="margin-right:0" onclick='openChanges("select_case <?=$myfile?>", "_(Select Case Model)_", "selectcase")'>
</div>
</td></tr>
</tbody>

<tbody title="_(Motherboard Information)_">
<tr><td><i class='icon-motherboard f32'></i><div class='section'>_(Motherboard)_<br><span id='mb-temp'></span><br></div>
<a href='#' onclick='InfoButton();' title="_(Show Information)_"><i class='fa fa-fw fa-info-circle control'></i></a>
</td></tr>
<tr><td><?=$board?><br><?=$bios?><br><?=$biosdate?></td></tr>
</tbody>

<tbody title="_(Processor Information)_" data="toggleCPU(true)">
<tr><td><i class='icon-cpu f32'></i><div class='section'>_(Processor)_<br><span id='cpu-temp'></span><br></div>
<a href='/Dashboard/Settings/CPUset' title="_(Go to CPU pinning settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr><td><?=$cpumodel?></td></tr>
<tr><td><span class='w26'>_(Overall Load)_:</span><span class='w72'><span class='cpu load'>0%</span><div class='usage-disk sys'><span id='cpu'></span><span></span></div></span></td></tr>
<tr id='cpu_main'><td><a onclick='toggleCPU()' title="_(Click to toggle details)_" class='cpu_close'>_(Show details)_</a><span id='chart-toggle'>
<span><select id='cpuline' class='auto' title="_(Select time frame)_" onchange='changeCPUline(this.value)'>
<?=mk_option("","10", _("10 s"));?>
<?=mk_option("","30", _("30 s"));?>
<?=mk_option("","60", _("1 m"));?>
<?=mk_option("","120", _("2 m"));?>
<?=mk_option("","300", _("5 m"));?>
</select></span><a onclick='toggleChart()' title="_(Click to toggle CPU chart)_"><span class="fa fa-fw fa-bar-chart hand"></span></a></span></td></tr>
<?
foreach ($cpus as $pair) {
  [$cpu1, $cpu2] = my_preg_split('/[,-]/',$pair);
  echo "<tr class='cpu_open'>";
  if ($cpu2)
    echo "<td><span class='w26'>CPU $cpu1 - HT $cpu2</span><span class='dashboard w36'><span class='cpu$cpu1 load'>0%</span><div class='usage-disk sys'><span id='cpu$cpu1'></span><span></span></div></span><span class='dashboard w36'><span class='cpu$cpu2 load'>0%</span><div class='usage-disk sys'><span id='cpu$cpu2'></span><span></span></div></span></td>";
  else
    echo "<td><span class='w26'>CPU $cpu1</span><span class='w72'><span class='cpu$cpu1 load'>0%</span><div class='usage-disk sys'><span id='cpu$cpu1'></span><span></span></div></span></td>";
  echo "</tr>";
}
?>
<tr id='cpu_chart'><td><div id='cpuchart'></div></td></tr>
</tbody>

<tbody title="_(Memory Utilization)_">
<tr><td><i class='icon-ram f32'></i><div class='section'>_(System)_<br><span><i class='ups fa fa-line-chart'></i>_(Memory)_: <?="$memory_installed $unit $memory_type $ecc"?></span><br></div>
<a href='/Dashboard/Tools/Processes' title="_(View Running Processes)_"><i class='fa fa-fw fa-info-circle control'></i></a>
</td></tr>
<tr><td><span class='w36'><i class='ups fa fa-compress'></i>_(Usable size)_: <?=my_scale($total,$unit,1,null,1024)." $unit"?></span><i class='ups fa fa-expand'></i>_(Maximum size)_: <?="$memory_maximum $unit"?><?=$low?'*':''?></td></tr>
<tr id='var0'><td><span class='w26'><i class='ups fa fa-fw fa-microchip'></i>_(RAM)_</span><span class='w72'><span class='sys0 load'>0%</span><div class='usage-disk sys'><span id='sys0'></span><span></span></div></span></td></tr>
<tr id='var1'><td><span class='w26'><i class='ups fa fa-fw fa-shield'></i>_(ZFS)_</span><span class='w72'><span class='sys1 load'>0%</span><div class='usage-disk sys'><span id='sys1'></span><span></span></div></span></td></tr>
<tr id='var2'><td><span class='w26'><i class='ups fa fa-fw fa-suitcase'></i>_(Flash)_</span><span class='w72'><span class='sys2 load'>0%</span><div class='usage-disk sys'><span id='sys2'></span><span></span></div></span></td></tr>
<tr id='var3'><td><span class='w26'><i class='ups fa fa-fw fa-file-text'></i>_(Log)_</span><span class='w72'><span class='sys3 load'>0%</span><div class='usage-disk sys'><span id='sys3'></span><span></span></div></span></td></tr>
<tr id='var4'><td><span class='w26'><i class='ups fa fa-fw fa-docker'></i>_(Docker)_</span><span class='w72'><span class='sys4 load'>0%</span><div class='usage-disk sys'><span id='sys4'></span><span></span></div></span></td></tr>
</tbody>

<tbody title="_(Interface Information)_" class="mixed">
<tr><td><i class='icon-ethernet f32'></i><div class='section'>_(Interface)_<br>
<span><span class='dense'><i class='ups fa fa-angle-double-down'></i>_(Inbound)_: <span id='inbound'>---</span></span><span class='dense'><i class='ups fa fa-angle-double-up'></i>_(Outbound)_: <span id='outbound'>---</span></span>
<i class='ups fa fa-angle-right'></i><select name="port_select" onchange="portSelect(this.value)">
<?foreach ($ports as $port):?>
<?=mk_option("",$port,_($port))?>
<?endforeach;?>
</select></span>
<br></div>
<a href='/Dashboard/Settings/NetworkSettings' title="_(Go to network settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr><td><span class='w26'><select name="enter_view" onchange="changeView(this.value)">
<?=mk_option("", "0", _("General info"))?>
<?=mk_option("", "1", _("Counters info"))?>
<?=mk_option("", "2", _("Errors info"))?>
<?=mk_option("", "3", _("Network traffic"))?>
</select></span>
<span class='w36'><i class='view1'>_(Mode of operation)_</i><i class='view2'>_(Received packets)_</i><i class='view3'>_(Receive counters)_</i><i class='fa fa-fw fa-arrow-down view4 red-text'></i>&nbsp;<i class='view4 red-text'>_(Inbound)_</i></span>
<span class='w36'><i class='view1'></i><i class='view2'>_(Transmitted packets)_</i><i class='view3'>_(Transmit counters)_</i><i class='fa fa-fw fa-arrow-up view4 orange-text'></i>&nbsp;<i class='view4 orange-text'>_(Outbound)_</i>
<span class='view4' style='float:right'><select id='netline' class='auto' title="_(Select time frame)_" onchange='changeNetline(this.value)'>
<?=mk_option("","10", _("10 s"))?>
<?=mk_option("","30", _("30 s"))?>
<?=mk_option("","60", _("1 m"))?>
<?=mk_option("","120", _("2 m"))?>
<?=mk_option("","300", _("5 m"))?>
</select></span></span></td></tr>
<?
$c = 0;
foreach ($ports as $port) {
  $last = $port=='lo' ? ' last' : '';
  echo "<tr class='view1{$last}'><td><span class='w26'>$port</span><span class='w72' id='main".($c++)."'></span></td></tr>";
}
$c = 0;
foreach ($ports as $port) {
  $last = $port=='lo' ? ' last' : '';
  echo "<tr class='view2{$last}'><td><span class='w26'>$port</span><span class='w36' id='port{$c}'></span><span class='w36' id='port".($c+1)."'></span></td></tr>";
  $c += 2;
}
$c = 0;
foreach ($ports as $port) {
  $last = $port=='lo' ? ' last' : '';
  echo "<tr class='view3{$last}'><td><span class='w26'>$port</span><span class='w36' id='link{$c}'></span><span class='w36' id='link".($c+1)."'></span></td></tr>";
  $c += 2;
}
?>
<tr class="view4"><td><div id="netchart"></div></td></tr>
</tbody>

<?if ($wireguard):?>
<tbody title="_(VPN Connections)_">
<tr><td><i class='icon-vpn f32'></i><div class='section'>_(VPN)_<br><span><span class='dense'><i class='ups fa fa-play-circle'></i>_(Active tunnels)_: <span id='vpn-active'><?=$up?></span></span><i class='ups fa fa-pause-circle'></i>_(Inactive tunnels)_: <span id='vpn-inactive'><?=$down?></span></span><br></div>
<a href='/Settings/VPNmanager' title="_(Go to VPN settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<?foreach ($conf as $wg):?>
<?$vpn = basename($wg,'.conf'); $peers = vpn_peers($wg);?>
<tr><td class='vpn'><span class='w26'><i class='icon-vpn vpn<?=in_array($vpn,$wg_up)?'':' inactive'?>' onclick="toggleVPN($(this),'<?=$vpn?>')" title="Toggle tunnel state"></i><?="Tunnel $vpn"?></span>
<span class='w36 vpn right'>_(Activity)_</span><span class='w36 vpn right'>_(Handshake)_</span></td></tr>
<?foreach ($peers as $i => $peer):?>
<tr><td><span class='w26 wg1'><?=$peer?></span><span class='w36 wg2' id='<?="$vpn-rx-".($i-1)?>'>---</span><span class='w36 wg2' id='<?="$vpn-hs-".($i-1)?>'>_(inactive)_</span></td></tr>
<?endforeach;?>
<?endforeach;?>
</tbody>
<?endif;?>

<?if ($apcupsd):?>
<tbody title="_(Power Status)_">
<tr><td><i class='icon-ups f32'></i><div class='section'>_(Power)_<br>
<span><i class='ups fa fa-bar-chart'></i>_(UPS Model)_: </span><span id='ups_model'></span><br></div>
<a href='/Dashboard/Settings/UPSsettings' title="_(Go to UPS settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr><td><span class='w36'><i class='ups fa fa-fw fa-plug'></i>_(UPS status)_:</span><span id='ups_status'></span></td></tr>
<tr><td><span class='w36'><i class='ups fa fa-fw fa-bars'></i>_(UPS Load)_: </span><span id='ups_loadpct'></span></td></tr>
<tr><td><span class='w36'><i class='ups fa fa-fw fa-battery'></i>_(Battery charge)_:</span><span id='ups_bcharge'></span></td></tr>
<tr><td><span class='w36'><i class='ups fa fa-fw fa-clock-o'></i>_(Runtime left)_:</span><span id='ups_timeleft'></span></td></tr>
<tr><td><span class='w36'><i class='ups fa fa-fw fa-bolt'></i>_(Nominal power)_:</span><span id='ups_nompower'></span></td></tr>
<tr><td><span class='w36'><i class='ups fa fa-fw fa-ellipsis-h'></i>_(Output voltage)_:</span><span id='ups_outputv'></span></td></tr>
</tbody>
<?endif;?>

<?if ($fans):?>
<tbody title="_(Fan Information)_">
<tr><td><i class='icon-fan f32'></i><div class='section'>_(Airflow)_<br><span><i class='ups fa fa-sort-amount-asc'></i>_(Fan count)_: <?=$fans?></span><br></div>

<?if ($autofan):?>
<a href='/Dashboard/Settings/FanSettings' title="_(Go to fan settings)_"><i class='fa fa-fw fa-cog control'></i></a>
<?endif;?>
</td></tr>
<?
$label = $value = [];
$i = 0;
for ($fan=0; $fan<$fans; $fan++) {
  if ($fan > 0 && $fan % 3 == 0) $i++;
  $class = $fan % 3 == 2 ? "" : " class='fan'";
  $label[$i][] = "<span{$class}>"._('FAN')." ".($fan+1)."</span>";
}
$i = 0;
for ($fan=0; $fan<$fans; $fan++) {
  if ($fan > 0 && $fan % 3 == 0) $i++;
  $class = $fan % 3 == 2 ? "" : " class='fan'";
  $value[$i][] = "<span{$class} id='fan$fan'>--</span>";
}
echo "<tr><td>";
for ($i = 0; $i < count($label); $i++) {
  foreach ($label[$i] as $data) echo $data;
  echo "<br>";
  foreach ($value[$i] as $data) echo $data;
  echo "<br>";
  if ($i < count($value)-1) echo "<br>";
}
echo "</td></tr>";
?>
</tbody>
<?endif;?>
<?customTiles('column1');?>
</table>
</div>

<div class='tile' id='tile2'>
<table id='db-box2' class='share_status dashboard'>
<?if ($display['dashapps']!='none'):?>
<?if ($dockerd && ($display['dashapps']=='icons' || $display['dashapps']=='docker')):?>
<tbody id='docker_view' title="_(Docker Containers)_" data="noApps()">
<tr><td><i class='icon-docker f32'></i><div class='section'>_(Docker Containers)_<br>
<span class='apps'><input type='checkbox' id='apps'></span><br></div>
<a href='/Dashboard/Settings/DockerSettings' title="_(Go to Docker settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
</tbody>
<?endif;?>
<?if ($libvirtd && ($display['dashapps']=='icons' || $display['dashapps']=='vms')):?>
<tbody id='vm_view' title="_(Virtual Machines)_" data="noVMs()">
<tr><td><i class='icon-virtualization f32'></i><div class='section'>_(Virtual Machines)_<br>
<span class='vms'><input type='checkbox' id='vms'></span><br></div>
<a href='/Dashboard/Settings/VMSettings' title="_(Go to VM settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
</tbody>
<?endif;?>
<?endif;?>

<tbody title="_(Shares Information)_"<?if ($group):?> class="mixed"<?endif;?>>
<tr><td><i class='icon-folder f32'></i><div class='section'>_(Shares)_
<?if ($group):?>
<select name="enter_share" onchange="changeMode(this.value)">
<?if (_var($var,'shareSMBEnabled')=='yes'):?>
<?=mk_option("", "0", "SMB")?>
<?endif;?>
<?if (_var($var,'shareNFSEnabled')=='yes'):?>
<?=mk_option("", "2", "NFS")?>
<?endif;?>
</select>
<?endif;?>
<br><span>
<?=sprintf(_("Share count: %s with %s cache only and %s encrypted"),count($shares),$cache_only,$encrypted)?>
</span><br></div>
<a href='/Shares' title="_(Go to Share settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr class='header'><td><span class='w26'>_(Name)_</span><span class='w44'>_(Description)_</span><span class='w18'>_(Security)_</span><span>_(Streams)_</span></td></tr>
<?
if (_var($var,'shareSMBEnabled')=='yes') {
  $i = 0;
  foreach ($shares as $name => $share) {
    $i++;
    $list = "<a href=\"/Dashboard/Shares/Share?name=".urlencode($name)."\" class=\"blue-text\" title=\"$name settings\">".compress($name,20)."</a>";
    if ($share['luksStatus']>0) $list = str_replace('blue-text','green-text',$list);
    elseif ($share['useCache']=='only') $list = str_replace('blue-text','orange-text',$list);
    $comment = compress($share['comment'],40) ?: '&nbsp;';
    $security = export_settings(_var($var,'shareSMBEnabled'), $sec[$name]);
    $last = $name==array_key_last($shares) ? ' last' : '';
    echo "<tr class='smb share share1{$last}'><td><span class='w26'><i class='icon-folder f14'></i>$list</span><span class='w44'>$comment</span><span class='w18'>$security</span><span id='share{$i}'>0</span></td></tr>";
  }
  if (!count($shares)) echo "<tr class='smb share share1'><td class='none'>"._("No shares present")."</td></tr>";
}
if (_var($var,'shareNFSEnabled')=='yes') {
  foreach ($shares as $name => $share) {
    $list = "<a href=\"/Dashboard/Shares/Share?name=".urlencode($name)."\" class=\"blue-text\" title=\"$name settings\">".compress($name,20)."</a>";
    if ($share['luksStatus']>0) $list = str_replace('blue-text','green-text',$list);
    elseif ($share['useCache']=='only') $list = str_replace('blue-text','orange-text',$list);
    $comment = compress($share['comment'],40) ?: '&nbsp;';
    $security = export_settings(_var($var,'shareNFSEnabled'), $sec_nfs[$name]);
    $last = $name==array_key_last($shares) ? ' last' : '';
    echo "<tr class='nfs share share3{$last}'><td><span class='w26'><i class='icon-folder f14'></i>$list</span><span class='w44'>$comment</span><span class='w18'>$security</span><span>-</span></td></tr>";
  }
  if (!count($shares)) echo "<tr class='nfs share share3'><td class='none'>"._("No shares present")."</td></tr>";
}
if (!$group) {
  foreach ($shares as $name => $share) {
    $list = "<a href=\"/Dashboard/Shares/Share?name=".urlencode($name)."\" class=\"blue-text\" title=\"$name settings\">".compress($name,20)."</a>";
    if ($share['luksStatus']>0) $list = str_replace('blue-text','green-text',$list);
    elseif ($share['useCache']=='only') $list = str_replace('blue-text','orange-text',$list);
    $comment = compress($share['comment'],40) ?: '&nbsp;';
    echo "<tr class='share'><td><span class='w26'><i class='icon-folder f14'></i>$list</span><span class='w44'>$comment</span><span class='w18'>-</span><span>-</span></td></tr>";
  }
  if (!count($shares)) echo "<tr class='share'><td class='none'>"._("No shares present")."</td></tr>";
}
?>
</tbody>

<tbody title="_(Users Information)_"<?if ($group):?> class="mixed"<?endif;?>>
<tr><td><i class='icon-users f32'></i><div class='section'>_(Users)_
<?if ($group):?>
<select name="enter_user" class="unused">
<?if (_var($var,'shareSMBEnabled')=='yes'):?>
<?=mk_option("", "0", "SMB")?>
<?endif;?>
<?if (_var($var,'shareNFSEnabled')=='yes'):?>
<?=mk_option("", "2", "NFS")?>
<?endif;?>
</select>
<?endif;?>
<br><span>
<?=sprintf(_("User count: %s with %s unprotected"),count($users),$nopass)?>
</span><br></div>
<a href='/Users' title="_(Go to User settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr class='header'><td><span class='w26'>_(Name)_</span><span class='w44'>_(Description)_</span><span class='w18'>_(Write)_</span><span>_(Read)_</span></td></tr>
<?
if (_var($var,'shareSMBEnabled')=='yes') {
  foreach ($users as $user) {
    $name = $user['name'];
    $list = "<a href=\"/Dashboard/Users/UserEdit?name=".urlencode($name)."\" class=\"blue-text\" title=\"$name settings\">".compress($name,20)."</a>";
    $desc = compress($user['desc'],40) ?: '&nbsp;';
    if ($name=='root') {
      $write = $read = '-';
    } else {
      $write = $read = 0;
      foreach ($shares as $share) {
        $access = $sec[$share['name']];
        if ($access['export']=='-') continue;
        switch ($access['security']) {
        case 'public':
          $write++;
          $read++;
          break;
        case 'secure':
          if (in_array($name,explode(',',$access['writeList']))) {$write++; $read++;} else $read++;
          break;
        case 'private':
          if (in_array($name,explode(',',$access['writeList']))) {$write++; $read++;}
          if (in_array($name,explode(',',$access['readList']))) $read++;
          break;
        }
      }
    }
    if ($user['passwd']!='yes') $list = str_replace('blue-text','orange-text',$list);
    $last = $name==array_key_last($users) ? ' last' : '';
    echo "<tr class='smb user user1{$last}'><td><span class='w26'><i class='icon-user f14'></i>$list</span><span class='w44'>$desc</span><span class='w18'>$write</span><span>$read</span></td></tr>";
  }
}
if (_var($var,'shareNFSEnabled')=='yes') {
  foreach ($users as $user) {
    $name = $user['name'];
    $list = "<a href=\"/Dashboard/Users/UserEdit?name=".urlencode($name)."\" class=\"blue-text\" title=\"$name settings\">".compress($name,20)."</a>";
    $desc = compress($user['desc'],40) ?: '&nbsp;';
    $write = '-'; $read = '-';
    if ($user['passwd']!='yes') $list = str_replace('blue-text','orange-text',$list);
    $last = $name==array_key_last($users) ? ' last' : '';
    echo "<tr class='nfs user user3{$last}'><td><span class='w26'><i class='icon-user f14'></i>$list</span><span class='w44'>$desc</span><span class='w18'>$write</span><span>$read</span></td></tr>";
  }
}
if (!$group) {
  foreach ($users as $user) {
    $name = $user['name'];
    $list = "<a href=\"/Dashboard/Users/UserEdit?name=".urlencode($name)."\" class=\"blue-text\" title=\"$name settings\">".compress($name,20)."</a>";
    $desc = compress($user['desc'],40) ?: '&nbsp;';
    if ($user['passwd']!='yes') $list = str_replace('blue-text','orange-text',$list);
    echo "<tr class='user'><td><span class='w26'><i class='icon-user f14'></i>$list</span><span class='w44'>$desc</span><span class='w18'>-</span><span>-</span></td></tr>";
  }
}
?>
</tbody>
<?customTiles('column2');?>
</table>
</div>

<div class='tile' id='tile3'>
<table id='db-box3' class='share_status dashboard'>
<tbody title="_(Parity Information)_">
<tr><td><i class='icon-health f32'></i><div class='section'>_(Parity)_<br>
<span class='parity'></span><br></div>
<a href='/Dashboard/Settings/Scheduler' title="_(Go to scheduler settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
</td></tr>
<tr><td id='parity' class="wrap"></td></tr>
<tr><td id='program' class="wrap"></td></tr>
</tbody>

<tbody id='array_list' title="_(Array Information)_">
<tr><td><i class='icon-disks f32'></i><div class='section'>_(Array)_<?if (!$started):?> (_(stopped)_)<?endif;?><br>
<span><?if ($started):?><?=sprintf(_("%s used of %s (%s %%)"),my_scale($array_used*1024,$unit)." $unit",my_scale($array_size*1024,$unit,-1,-1)." $unit",$array_percent)?><?endif;?></span><br></div>
<a href='/Dashboard/Settings/DiskSettings' title="_(Go to disk settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr><td id='array_info'></td></tr>
<tr class='header'><td><span class='w26'>_(Device)_</span><span class='w18'>_(Status)_</span><span class='w18'>_(Temp)_</span><span class='w18'>_(SMART)_</span><span class='w18'>_(Utilization)_</span></td></tr>
</tbody>

<?$i=0?>
<?foreach ($pools as $pool):?>
<tbody id='pool_list<?=$i?>' title="_(<?=ucfirst($pool)?> Information)_">
<tr><td><i class='icon-disk f32'></i><div class='section'><?=ucfirst($pool)?><?if (!$started):?> (_(stopped)_)<?endif;?><br>
<span><?if ($started):?><?=sprintf(_("%s used of %s (%s %%)"),my_scale($cache_used[$pool]*1024,$unit)." $unit",my_scale($cache_size[$pool]*1024,$unit,-1,-1)." $unit",$cache_rate[$pool])?><?endif;?></span><br></div>
<a href='/Dashboard/Settings/Device?name=<?=$pool?>' title="_(Go to disk settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr><td id='pool_info<?=$i++?>'></td></tr>
<tr class='header'><td><span class='w26'>_(Device)_</span><span class='w18'>_(Status)_</span><span class='w18'>_(Temp)_</span><span class='w18'>_(SMART)_</span><span class='w18'>_(Utilization)_</span></td></tr>
</tbody>
<?endforeach;?>

<?if ($devs):?>
<tbody id='devs_list' title="_(Unassigned Devices)_">
<tr><td><i class='icon-disc f32'></i><div class='section'>_(Unassigned)_<?if (!$started):?> (_(stopped)_)<?endif;?><br>
<span></span><br></div>
<a href='/Dashboard/Settings/DiskSettings' title="_(Go to disk settings)_"><i class='fa fa-fw fa-cog control'></i></a>
</td></tr>
<tr><td id='devs_info'></td></tr>
<tr class='header'><td><span class='w26'>_(Device)_</span><span class='w18'>_(Status)_</span><span class='w18'>_(Temp)_</span><span class='w18'>_(SMART)_</span><span class='w18'>_(Utilization)_</span></td></tr>
</tbody>
<?endif;?>
<?customTiles('column3');?>
</table>
</div>
</div>
</div>

<form name='boot' method='POST' action='/webGui/include/Boot.php'>
<input type='hidden' name='csrf_token' value='<?=_var($var,'csrf_token')?>'>
<input type='hidden' name='cmd' value=''>
</form>
<div id="iframe-popup"></div>

<div id="templateContentMgmt" class="template">
<!--!
<style>
.item{display:inline-block;width:210px;float:left;height:4rem}
</style>
<script>
var table = $('table.dashboard');
var index = [], sort = [], checked = [];
table.find('tbody').not('.system').each(function(){
  index.push($(this).attr('title'));
  sort.push($(this).attr('sort'));
  checked.push($(this).is(':visible') ? 'checked' : '');
});
for (var n=0,x; x=index[n]; n++) {
  $('div#list').append("<span class='item'><input class='checker' type='checkbox' "+checked[n]+">"+x+"</span>");
}
function hideShow() {
  var n = 0, inactive = [];
  var count = {'db-box1':0, 'db-box2':0, 'db-box3':0};
  $('input.checker').each(function(){
    var tbody = $('table.dashboard').find('tbody[sort="'+sort[n]+'"]');
    var id = tbody.parent().prop('id');
    if ($(this).prop('checked')) {
      tbody.show();
      count[id]++;
    } else {
      tbody.hide();
      inactive.push(sort[n]);
    }
    n++;
  });
  count[table.find('tbody.system').parent().prop('id')]++;
  if (count['db-box1']>0) $('div#tile1').show(); else $('div#tile1').hide();
  if (count['db-box2']>0) $('div#tile2').show(); else $('div#tile2').hide();
  if (count['db-box3']>0) $('div#tile3').show(); else $('div#tile3').hide();
  if (inactive.length>0) {
    $.cookie('inactive_content',inactive.join(';'),{expires:3650});
  } else {
    $.removeCookie('inactive_content');
  }
}
</script>
<div id="list"></div>
!-->
</div>

<script>
Number.prototype.pad = function(size){var s=String(this);while(s.length<(size||2)){s='0'+s;}return s;}
Array.prototype.tail = function(t){return this.slice(-t).map(function(o){return o.y;}).join(';');}
String.prototype.build = function(){return this.replace(/\n(<!--!|!-->)\n/g,'');}
String.prototype.md5 = function() {
  // Original copyright (c) Paul Johnston & Greg Holt.
  var hc = '0123456789abcdef';
  function rh(n){var j,s='';for(j=0;j<=3;j++) s+=hc.charAt((n>>(j*8+4))&0x0F)+hc.charAt((n>>(j*8))&0x0F);return s;}
  function ad(x,y){var l=(x&0xFFFF)+(y&0xFFFF);var m=(x>>16)+(y>>16)+(l>>16);return (m<<16)|(l&0xFFFF);}
  function rl(n,c){return (n<<c)|(n>>>(32-c));}
  function cm(q,a,b,x,s,t){return ad(rl(ad(ad(a,q),ad(x,t)),s),b);}
  function ff(a,b,c,d,x,s,t){return cm((b&c)|((~b)&d),a,b,x,s,t);}
  function gg(a,b,c,d,x,s,t){return cm((b&d)|(c&(~d)),a,b,x,s,t);}
  function hh(a,b,c,d,x,s,t){return cm(b^c^d,a,b,x,s,t);}
  function ii(a,b,c,d,x,s,t){return cm(c^(b|(~d)),a,b,x,s,t);}
  function sb(x) {
    var i;var nblk=((x.length+8)>>6)+1;var blks=new Array(nblk*16);for(i=0;i<nblk*16;i++) blks[i]=0;
    for(i=0;i<x.length;i++) blks[i>>2]|=x.charCodeAt(i)<<((i%4)*8);
    blks[i>>2]|=0x80<<((i%4)*8);blks[nblk*16-2]=x.length*8;return blks;
  }
  var i,x=sb(''+this),a=1732584193,b=-271733879,c=-1732584194,d=271733878,olda,oldb,oldc,oldd;
  for(i=0;i<x.length;i+=16) {olda=a;oldb=b;oldc=c;oldd=d;
    a=ff(a,b,c,d,x[i+ 0], 7, -680876936);d=ff(d,a,b,c,x[i+ 1],12, -389564586);c=ff(c,d,a,b,x[i+ 2],17,  606105819);
    b=ff(b,c,d,a,x[i+ 3],22,-1044525330);a=ff(a,b,c,d,x[i+ 4], 7, -176418897);d=ff(d,a,b,c,x[i+ 5],12, 1200080426);
    c=ff(c,d,a,b,x[i+ 6],17,-1473231341);b=ff(b,c,d,a,x[i+ 7],22,  -45705983);a=ff(a,b,c,d,x[i+ 8], 7, 1770035416);
    d=ff(d,a,b,c,x[i+ 9],12,-1958414417);c=ff(c,d,a,b,x[i+10],17,     -42063);b=ff(b,c,d,a,x[i+11],22,-1990404162);
    a=ff(a,b,c,d,x[i+12], 7, 1804603682);d=ff(d,a,b,c,x[i+13],12,  -40341101);c=ff(c,d,a,b,x[i+14],17,-1502002290);
    b=ff(b,c,d,a,x[i+15],22, 1236535329);a=gg(a,b,c,d,x[i+ 1], 5, -165796510);d=gg(d,a,b,c,x[i+ 6], 9,-1069501632);
    c=gg(c,d,a,b,x[i+11],14,  643717713);b=gg(b,c,d,a,x[i+ 0],20, -373897302);a=gg(a,b,c,d,x[i+ 5], 5, -701558691);
    d=gg(d,a,b,c,x[i+10], 9,   38016083);c=gg(c,d,a,b,x[i+15],14, -660478335);b=gg(b,c,d,a,x[i+ 4],20, -405537848);
    a=gg(a,b,c,d,x[i+ 9], 5,  568446438);d=gg(d,a,b,c,x[i+14], 9,-1019803690);c=gg(c,d,a,b,x[i+ 3],14, -187363961);
    b=gg(b,c,d,a,x[i+ 8],20, 1163531501);a=gg(a,b,c,d,x[i+13], 5,-1444681467);d=gg(d,a,b,c,x[i+ 2], 9,  -51403784);
    c=gg(c,d,a,b,x[i+ 7],14, 1735328473);b=gg(b,c,d,a,x[i+12],20,-1926607734);a=hh(a,b,c,d,x[i+ 5], 4,    -378558);
    d=hh(d,a,b,c,x[i+ 8],11,-2022574463);c=hh(c,d,a,b,x[i+11],16, 1839030562);b=hh(b,c,d,a,x[i+14],23,  -35309556);
    a=hh(a,b,c,d,x[i+ 1], 4,-1530992060);d=hh(d,a,b,c,x[i+ 4],11, 1272893353);c=hh(c,d,a,b,x[i+ 7],16, -155497632);
    b=hh(b,c,d,a,x[i+10],23,-1094730640);a=hh(a,b,c,d,x[i+13], 4,  681279174);d=hh(d,a,b,c,x[i+ 0],11, -358537222);
    c=hh(c,d,a,b,x[i+ 3],16, -722521979);b=hh(b,c,d,a,x[i+ 6],23,   76029189);a=hh(a,b,c,d,x[i+ 9], 4, -640364487);
    d=hh(d,a,b,c,x[i+12],11, -421815835);c=hh(c,d,a,b,x[i+15],16,  530742520);b=hh(b,c,d,a,x[i+ 2],23, -995338651);
    a=ii(a,b,c,d,x[i+ 0], 6, -198630844);d=ii(d,a,b,c,x[i+ 7],10, 1126891415);c=ii(c,d,a,b,x[i+14],15,-1416354905);
    b=ii(b,c,d,a,x[i+ 5],21,  -57434055);a=ii(a,b,c,d,x[i+12], 6, 1700485571);d=ii(d,a,b,c,x[i+ 3],10,-1894986606);
    c=ii(c,d,a,b,x[i+10],15,   -1051523);b=ii(b,c,d,a,x[i+ 1],21,-2054922799);a=ii(a,b,c,d,x[i+ 8], 6, 1873313359);
    d=ii(d,a,b,c,x[i+15],10,  -30611744);c=ii(c,d,a,b,x[i+ 6],15,-1560198380);b=ii(b,c,d,a,x[i+13],21, 1309151649);
    a=ii(a,b,c,d,x[i+ 4], 6, -145523070);d=ii(d,a,b,c,x[i+11],10,-1120210379);c=ii(c,d,a,b,x[i+ 2],15,  718787259);
    b=ii(b,c,d,a,x[i+ 9],21, -343485551);a=ad(a,olda);b=ad(b,oldb);c=ad(c,oldc);d=ad(d,oldd);
  }
  return rh(a)+rh(b)+rh(c)+rh(d);
}
jQuery.prototype.hideMe = function() {
  var hidden = $.cookie('hidden_content');
  hidden = hidden==null ? [] : hidden.split(';');
  if (hidden.indexOf(this.attr('sort'))>=0) this.find('tr:gt(0)').hide();
}
jQuery.prototype.mixedView = function(s) {
  if (s==0) {
    this.find('tr:gt(0)').hide();
    return;
  }
  this.find('tr:gt(0)').show();
  if (this.attr('data')) {
    setTimeout(this.attr('data'));
  }
  if (this.hasClass('mixed')) {
    var select = this.find('select[name^="enter"]');
    select = parseInt(select.val())+1;
    this.find('tr:gt(0)').each(function(){
      var names = ($(this).attr('class')||'').split(' ');
      for (var n=0,name; name=names[n]; n++) if (/[0-9]/.test(name.slice(-1)) && name.slice(-1)!=select) $(this).hide();
    });
  }
}

var ports   = [<?=implode(',',array_map('escapestring',$ports))?>];
var cpu     = [];
var rxd     = [];
var txd     = [];
var cputime = 0;
var nettime = 0;
var cpuline = $.cookie('cpuline')||30;
var netline = $.cookie('netline')||30;
var update2 = true;
var box     = null;
var startup = true;

var options_cpu = {
  series:[{name:'load', data:cpu.slice()}],
  chart:{height:120, type:'line', fontFamily:'clear-sans', animations:{enabled:true, easing:'linear', dynamicAnimation:{speed:1000}}, toolbar:{show:false}, zoom:{enabled:false}},
  dataLabels:{enabled:false},
  tooltip:{enabled:false},
  stroke:{curve:'smooth', width:1},
  colors:['#ff8c2f'],
  markers:{size:0},
  xaxis:{type:'datetime', range:cpuline-1, labels:{show:false}, axisTicks:{show:false}, axisBorder:{show:false}},
  yaxis:{max:100, tickAmount:4, labels:{formatter:function(v,i){return v.toFixed(0)+' %';}, style:{colors:'<?=$color?>'}}, axisBorder:{show:false}, axisTicks:{show:false}},
  grid:{show:true, borderColor:'<?=$grid?>'},
  legend:{show:false}
};
var options_net = {
  series:[{name:'receive', data:rxd.slice()},{name:'transmit', data:txd.slice()}],
  chart:{height:120, type:'line', fontFamily:'clear-sans', animations:{enabled:true, easing:'linear', dynamicAnimation:{speed:1000}}, toolbar:{show:false}, zoom:{enabled:false}},
  dataLabels:{enabled:false},
  tooltip:{enabled:false},
  stroke:{curve:'smooth', width:1},
  colors:['#e22828','#ff8c2f'],
  markers:{size:0},
  xaxis:{type:'datetime', range:netline-1, labels:{show:false}, axisTicks:{show:false}, axisBorder:{show:false}},
  yaxis:{tickAmount:4, labels:{formatter:function(v,i){return autoscale(v,'bps',1);}, style:{colors:'<?=$color?>'}}, axisBorder:{show:false}, axisTicks:{show:false}},
  grid:{show:true, borderColor:'<?=$grid?>'},
  legend:{show:false}
};

var cpuchart = new ApexCharts(document.querySelector('#cpuchart'), options_cpu);
var netchart = new ApexCharts(document.querySelector('#netchart'), options_net);

if ($.cookie('port_select')!=null && !ports.includes($.cookie('port_select'))) $.removeCookie('port_select');
var port_select = $.cookie('port_select')||ports[0];

function initCharts(clear) {
  $.post('/webGui/include/InitCharts.php',{cmd:'get'},function(data) {
    data = JSON.parse(data);
    // initialize graphs entries
    var now = new Date().getTime();
    if (!clear) {
      var c = data.cpu.split(';');
      var r = data.rxd.split(';');
      var t = data.txd.split(';');
      for (var i=0; i < cpuline; i++) {
        var x = now + i;
        var y = c[i]||0; cpu.push({x,y});
      }
      cputime = x + 1;
    } else {
      // clear network graph
      var r = ''; var t = '';
      rxd = []; txd = [];
    }
    for (var i=0; i < netline; i++) {
      var x = now + i;
      var y = r[i]||0; rxd.push({x,y});
      var y = t[i]||0; txd.push({x,y});
    }
    nettime = x + 1;
  });
}
function resetCharts() {
  // prevent unlimited graph growing
  cpu = cpu.slice(-cpuline);
  rxd = rxd.slice(-netline);
  txd = txd.slice(-netline);
}
function addChartCpu(load) {
  cputime++;
  var i = cpu.length - cpuline;
  if (i > 0) { // clear value outside graph
    i = i - 1;
    cpu[i].x = cputime - cpuline;
    cpu[i].y = 0;
  }
  cpu.push({x:cputime, y:load});
}
function addChartNet(rx, tx) {
  nettime++;
  var i = rxd.length - netline;
  if (i > 0) { // clear value outside graph
    i = i - 1;
    rxd[i].x = nettime - netline;
    rxd[i].y = 0;
    txd[i].x = nettime - netline;
    txd[i].y = 0;
  }
  rxd.push({x:nettime, y:rx});
  txd.push({x:nettime, y:tx});
}
<?if ($wireguard):?>
function toggleVPN(id,vtun) {
  var up = $('#vpn-active');
  var down = $('#vpn-inactive');
  if (id.hasClass('inactive')) {
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'toggle','#wg':'start','#vtun':vtun},function(on){if (on){
      id.removeClass('inactive');
      up.text(up.text()*1+1);
      if (down.text()>0) down.text(down.text()*1-1);
    }});
  } else {
    $.post('/webGui/include/update.wireguard.php',{'#cmd':'toggle','#wg':'stop','#vtun':vtun});
    id.addClass('inactive');
    down.text(down.text()*1+1);
    if (up.text()>0) up.text(up.text()*1-1);
    $('span[id^="'+vtun+'-hs"]').text('inactive');
    $('span[id^="'+vtun+'-rx"]').text('---');
  }
}
<?endif;?>
function noApps() {
  if ($('span.outer.apps:visible').length==0) $('#no_apps').show(); else $('#no_apps').hide();
}
function noVMs() {
  if ($('span.outer.vms:visible').length==0) $('#no_vms').show(); else $('#no_vms').hide();
}
function loadlist(init) {
  if (init) {
    $('#apps').switchButton({labels_placement:'right', off_label:"_(All Apps)_", on_label:"_(Started only)_", checked:$.cookie('my_apps')=='startedOnly'});
    $('#vms').switchButton({labels_placement:'right', off_label:"_(All VMs)_", on_label:"_(Started only)_", checked:$.cookie('my_vms')=='startedOnly'});
    $('#apps').change(function(){
      $('span.outer.apps.stopped').finish().toggle('fast',function(){noApps();})
      $('#apps').is(':checked') ? $.cookie('my_apps','startedOnly',{expires:3650}) : $.removeCookie('my_apps');
    });
    $('#vms').change(function(){
      $('span.outer.vms.stopped').finish().toggle('fast',function(){noVMs();});
      $('#vms').is(':checked') ? $.cookie('my_vms','startedOnly',{expires:3650}) : $.removeCookie('my_vms');
    });
  }
  $.post('/webGui/include/DashboardApps.php',{display:'<?=$display['dashapps']?>',docker:'<?=$dockerd?>',vms:'<?=$libvirtd?>'},function(d) {
    var data = d.split('\0');
    $('#docker_view tr.updated').remove();
    $('#docker_view').append(data[0]).hideMe();
    $('#vm_view tr.updated').remove();
    $('#vm_view').append(data[1]).hideMe();
    if ($.cookie('my_apps')!=null) $('span.apps.stopped').hide(0,noApps());
    if ($.cookie('my_vms')!=null) $('span.vms.stopped').hide(0,noVMs());
  });
}
function getCase() {
  $.post('/webGui/include/SelectCase.php',{mode:'get',file:'<?=$myfile?>'},function(model){
    if (!model) {
      $('#casing').html("<i id='mycase' class='fa fa-hdd-o'></i><br>");
    } else if (model.indexOf('.png')<0) {
      $('#casing').html("<i id='mycase' class='case-"+model+"'></i><br>");
    } else {
      var now = new Date();
      $('#casing').html("<img id='mycase' src='/webGui/images/"+model+"?v="+now.getTime()+"'><br>");
    }
  });
}
function changeMode(item) {
  if (item==0) $.removeCookie('enter_share'); else $.cookie('enter_share',item,{expires:3650});
<?if (_var($var,'shareSMBEnabled')=='yes'):?>
  if (startup || $('.smb.share1').parent().find('tr:eq(1)').is(':visible')) {
    if (item==0) $('.smb.share1').show(); else $('.smb.share1').hide();
  }
  if (startup || $('.smb.user1').parent().find('tr:eq(1)').is(':visible')) {
    if (item==0) $('.smb.user1').show(); else $('.smb.user1').hide();
  }
<?endif;?>
<?if (_var($var,'shareNFSEnabled')=='yes'):?>
  if ($('.nfs.share3').parent().find('tr:eq(1)').is(':visible')) {
    if (item==2) $('.nfs.share3').show(); else $('.nfs.share3').hide();
  }
  if ($('.nfs.user3').parent().find('tr:eq(1)').is(':visible')) {
    if (item==2) $('.nfs.user3').show(); else $('.nfs.user3').hide();
  }
<?endif;?>
  $('select[name="enter_user"]').val(item);
}
function changeView(item) {
  if (item==0) $.removeCookie('enter_view'); else $.cookie('enter_view',item,{expires:3650});
  if (item==0) $('.view1').show(); else $('.view1').hide();
  if (item==1) $('.view2').show(); else $('.view2').hide();
  if (item==2) $('.view3').show(); else $('.view3').hide();
  if (item==3) $('.view4').show(); else $('.view4').hide();
}
function changeCPUline(val) {
  cpuline = val;
  if (val==30) $.removeCookie('cpuline'); else $.cookie('cpuline',val,{expires:3650});
  cpuchart.updateOptions({xaxis:{range:cpuline-1}});
}
function changeNetline(val) {
  netline = val;
  if (val==30) $.removeCookie('netline'); else $.cookie('netline',val,{expires:3650});
  netchart.updateOptions({xaxis:{range:netline-1}});
}
function smartMenu(table) {
  $(table).find('[id^="smart-"]').each(function() {
    var opts = [];
    var id = '#'+$(this).attr('id');
    var page = $(this).attr('name');
    var view = $(this).attr('class');
    var disk = id.substr(id.indexOf('-')+1);
    opts.push({text:"_(Attributes)_",icon:'fa-sitemap',action:function(e){e.preventDefault();attributes(page,disk);}});
    opts.push({divider:true});
    opts.push({text:"_(Capabilities)_",icon:'fa-user',action:function(e){e.preventDefault();capabilities(page,disk);}});
    opts.push({divider:true});
    opts.push({text:"_(Identity)_",icon:'fa-home',action:function(e){e.preventDefault();identity(page,disk);}});
    if (view.search('green-text') == -1) {
      opts.push({divider:true});
      opts.push({text:"_(Acknowledge)_",icon:'fa-check-square-o',action:function(e){e.preventDefault();acknowledge(id,disk);}});
    }
    $(id).bind('click',function(){update2=false;}).bind('mouseout',function(){setTimeout(function(){update2=true;},15000);});
    context.attach(id,opts);
  });
}
function portMenu() {
  var select = 'select[name="port_select"]';
  var option = $(select+' option');
  for (var i=0; i < option.length; i++) {
    if (option[i].value == port_select) {option[i].selected = true; break;}
  }
}
function portSelect(name) {
  $.cookie('port_select',name,{expires:3650});
  initCharts(true);
  port_select = name;
}
function moreInfo(data,table) {
  var info = [];
  if (data[1]>0) info.push(data[1]+" _(failed device)_"+(data[1]==1?'':'s'));
  if (data[2]>0) info.push(data[2]+" _(heat warning)_"+(data[2]==1?'':'s'));
  if (data[3]>0) info.push(data[3]+" _(SMART error)_"+(data[3]==1?'':'s'));
  if (data[4]>0) info.push(data[4]+" _(utilization warning)_"+(data[4]==1?'':'s'));
  return info.length ? "<div class='last'><i class='icon-u-triangle failed'></i><span class='failed'>"+table+" _(has)_ "+info.join('. ')+".</span></div>" : "";
}
function autoscale(value,text,size,kilo) {
  if (kilo==null) kilo = 1000;
  var unit = kilo==1024 ? ['','ki','Mi','Gi','Ti','Pi','Ei'] : ['','k','M','G','T','P','E'];
  var base = value>1?Math.floor(Math.log(value)/Math.log(kilo)):0;
  var data = base<unit.length?value/Math.pow(kilo, base):0;
  var scale = (data<100?100:10)/size;
  if (data==0) base=0;
  return ((Math.round(scale*data)/scale)+' '+unit[base]+text).replace(".","<?=_var($display,'number','.,')[0]?>");
}
function update900() {
  // prevent chart overflowing, reset every 15 minutes
  resetCharts();
  setTimeout(update900,900000);
}
function attributes(page,disk) {
  var tab = page=='New' ? 'tab2' : 'tab3';
  $.cookie('one',tab);
  location.replace('/Dashboard/'+page+'?name='+disk);
}
function capabilities(page,disk) {
  var tab = page=='New' ? 'tab3' : 'tab4';
  $.cookie('one',tab);
  location.replace('/Dashboard/'+page+'?name='+disk);
}
function identity(page,disk) {
  var tab = page=='New' ? 'tab4' : 'tab5';
  $.cookie('one',tab);
  location.replace('/Dashboard/'+page+'?name='+disk);
}
function acknowledge(id,disk) {
  $.post('/webGui/include/Acknowledge.php',{disk:disk},function(){$(id).removeClass('fa-thumbs-o-down orange-text').addClass('fa-thumbs-o-up green-text');$(id.replace('smart','text')).text("<?=_('healthy')?>");});
}
function dropdown(menu) {
  var select = 'select[name="'+menu+'"]';
  var size   = $(select+' option').length;
  var option = $.cookie(menu)||0;
  if (option >= size) option = 0;
  $(select+' option')[option].selected = true;
  $(select).change();
}
function toggleCPU(init) {
  if (!init) {if ($.cookie('cpu')==null) $.cookie('cpu','close',{expires:3650}); else $.removeCookie('cpu');}
  if ($.cookie('cpu')==null) {
    $('.cpu_open').show();
    $('.cpu_close').text("_(Hide details)_");
  } else {
    $('.cpu_open').hide();
    $('.cpu_close').text("_(Show details)_");
  }
  setTimeout(function(){toggleChart(true);});
}
function toggleChart(init) {
  if (!init) {if ($.cookie('cpu-chart')==null) $.cookie('cpu-chart','close',{expires:3650}); else $.removeCookie('cpu-chart');}
  $('#cpu_main').removeClass('last');
  $('.cpu_open:last').removeClass('last');
  if ($.cookie('cpu-chart')==null) {
    var hidden = $.cookie('hidden_content');
    hidden = hidden==null ? [] : hidden.split(';');
    if (hidden.indexOf($('#cpu_main').parent().attr('sort'))==-1) {
      $('#cpu_chart').show();
      $('#cpuline').show();
    } else {
      $('#cpu_chart').hide();
      $('#cpuline').hide();
    }
  } else {
    $('#cpu_chart').hide();
    $('#cpuline').hide();
    if ($('.cpu_open').is(':visible')) $('.cpu_open:last').addClass('last'); else $('#cpu_main').addClass('last');
  }
}
function StopArray() {
<?if ($confirm['stop']):?>
  swal({title:"_(Proceed)_?",text:"_(This will stop the array)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){StopArrayNow();});
<?else:?>
   StopArrayNow();
<?endif;?>
}
function StopArrayNow() {
  $('span.hand').prop('onclick',null).off('click').addClass('busy').css('cursor','default');
  $.post('/update.htm',{startState:'<?=_var($var,'mdState')?>',cmdStop:'Stop',csrf_token:'<?=_var($var,'csrf_token')?>'},function(){refresh();});
}
function StartArray() {
<?if ($confirm['stop']):?>
  swal({title:"_(Proceed)_?",text:"_(This will start the array)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){StartArrayNow();});
<?else:?>
  StartArrayNow();
<?endif;?>
}
function StartArrayNow() {
  $('span.hand').prop('onclick',null).off('click').addClass('busy').css('cursor','default');
  $.post('/update.htm',{startState:'<?=_var($var,'mdState')?>',cmdStart:'Start',csrf_token:'<?=_var($var,'csrf_token')?>'},function(){refresh();});
}
function Reboot() {
<?if ($confirm['down']):?>
  swal({title:"_(Proceed)_?",text:"_(This will reboot the system)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){RebootNow();});
<?else:?>
  RebootNow();
<?endif;?>
}
function RebootNow() {
  document.boot.cmd.value = 'reboot';
  document.boot.submit();
}
function Shutdown() {
<?if ($confirm['down']):?>
  swal({title:"_(Proceed)_?",text:"_(This will shutdown the system)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){ShutdownNow();});
<?else:?>
  ShutdownNow();
<?endif;?>
}
function ShutdownNow() {
  document.boot.cmd.value = 'shutdown';
  document.boot.submit();
}
<?if ($sleep):?>
function Sleep() {
<?if ($confirm['sleep']):?>
  swal({title:"_(Proceed)_?",text:"_(This will put the system to sleep)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){SleepNow();});
<?else:?>
  SleepNow();
<?endif;?>
}
function SleepNow() {
  $('#statusraid').append('&nbsp;&bullet;&nbsp;<span class="warning" style="font-weight:bold">System in sleep mode</span>');
  $.get('/plugins/dynamix.s3.sleep/include/SleepMode.php',function(){refresh();});
}
<?endif;?>
function sortTables() {
  $('table.dashboard').each(function(){
    var table = $(this);
    var index = $.cookie(table.prop('id'));
    // sorting list exists
    if (index != null) {
      index = index.split(';');
      for (var i=0,n; n=index[i]; i++) {
        var tbody = table.find('tbody[sort="'+n+'"]');
        // element not in this table?
        if (tbody.length==0) {
          // search the other tables to find the element
          $('table.dashboard').not(table).each(function(){
            var other = $(this).find('tbody[sort="'+n+'"]');
            if (other.length) tbody = other;
          });
        }
        tbody.appendTo(table);
      }
    }
  });
}
function addProperties() {
  $('div.frame tbody.system').addClass('sortable').attr('sort','_system_information_'.md5());
  $('div.frame tbody.system').find('td:first').prepend("<i class='fa fa-fw fa-eject control' onclick='openClose()' title=\"_(Show/Hide All Content)_\"></i>");
  $('div.frame tbody').each(function(){
    $(this).find('td:first').prepend("<i class='fa fa-fw fa-chevron-up control openclose' onclick='openClose($(this))' title=\"_(Show/Hide Content)_\"></i>");
  });
  $('div.frame tbody').not('.system').each(function(){
    $(this).addClass('sortable').attr('sort',$(this).attr('title').md5());
    $(this).find('td:first').prepend("<i class='fa fa-fw fa-close control tile' onclick='dismiss($(this))' title=\"_(Close Tile)_\"></i>");
  });
  $('div.frame tr').attr('title','');
  $('tr#var0').hover(function(){$.post('/webGui/include/DashboardApps.php',{sys:0},function(val){$('.sys0').text(val);})});
<?if ($zfs):?>
  $('tr#var1').show().hover(function(){$.post('/webGui/include/DashboardApps.php',{sys:1},function(val){$('.sys1').text(val);})});
<?endif;?>
  $('tr#var2').hover(function(){$.post('/webGui/include/DashboardApps.php',{sys:2},function(val){$('.sys2').text(val);})});
  $('tr#var3').hover(function(){$.post('/webGui/include/DashboardApps.php',{sys:3},function(val){$('.sys3').text(val);})});
<?if ($dockerd):?>
  $('tr#var4').show().hover(function(){$.post('/webGui/include/DashboardApps.php',{sys:4},function(val){$('.sys4').text(val);})});
<?endif;?>
}
function showContent() {
  var count = {'db-box1':$('table#db-box1 tbody').length, 'db-box2':$('table#db-box2 tbody').length, 'db-box3':$('table#db-box3 tbody').length}
  var inactive = $.cookie('inactive_content');
  if (inactive) {
    inactive = inactive.split(';');
    for (var n=0,md5; md5=inactive[n]; n++) {
      var tbody = $('table.dashboard tbody[sort="'+md5+'"]');
      var id = tbody.parent().prop('id');
      count[id]--;
      tbody.hide();
    }
  }
  var hidden = $.cookie('hidden_content');
  if (hidden) {
    hidden = hidden.split(';');
    for (var n=0,md5; md5=hidden[n]; n++) {
      var tbody = $('div.frame tbody[sort="'+md5+'"]');
      tbody.find('.openclose').removeClass('fa-chevron-up fa-chevron-down').addClass('fa-chevron-down');
      tbody.find('tr:gt(0)').hide();
    }
  }
  if (count['db-box1']>0) $('div#tile1').show();
  if (count['db-box2']>0) $('div#tile2').show();
  if (count['db-box3']>0) $('div#tile3').show();
}
function setColor(l, t1, t2) {
  switch (true) {
  case (t1 > 0 && l >= t1): return 'redbar';
  case (t2 > 0 && l >= t2): return 'orangebar';
  default: return '';}
}
function openClose(button) {
  var hidden = $.cookie('hidden_content');
  hidden = hidden==null ? [] : hidden.split(';');
  if (button) {
    // show/hide single tile content
    var tbody = button.closest('tbody');
    if (button.hasClass('fa-chevron-up')) {
      button.removeClass('fa-chevron-up fa-chevron-down').addClass('fa-chevron-down');
      tbody.mixedView(0);
      hidden.push(tbody.attr('sort'));
    } else {
      button.removeClass('fa-chevron-up fa-chevron-down').addClass('fa-chevron-up');
      tbody.mixedView(1);
      hidden.splice(hidden.indexOf(tbody.attr('sort')),1);
    }
    $.cookie('hidden_content',hidden.join(';'),{expires:3650});
  } else {
    // show/hide all tiles content
    if (hidden.length==0) {
      $('div.frame tbody').each(function(){
        $(this).find('.openclose').removeClass('fa-chevron-up fa-chevron-down').addClass('fa-chevron-down');
        $(this).mixedView(0);
        hidden.push($(this).attr('sort'));
      });
      $.cookie('hidden_content',hidden.join(';'),{expires:3650});
    } else {
      $('div.frame tbody').each(function(){
        $(this).find('.openclose').removeClass('fa-chevron-up fa-chevron-down').addClass('fa-chevron-up');
        $(this).mixedView(1);
      });
      $.removeCookie('hidden_content');
    }
  }
}
function dismiss(button) {
  var tbody = button.closest('tbody');
  var table = tbody.parent();
  var tile = table.parent();
  var inactive = $.cookie('inactive_content');
  tbody.hide();
  if (table.find('tbody:visible').length>0) tile.show(); else tile.hide();
  inactive = inactive==null ? [] : inactive.split(';');
  inactive.push(tbody.attr('sort'));
  $.cookie('inactive_content',inactive.join(';'),{expires:3650});
}
function contentMgmt() {
  box = $("#iframe-popup");
  box.html($("#templateContentMgmt").html().build());
  box.dialog({
    title: "_(Tile Management)_",
    height: 350,
    width: 900,
    resizable: false,
    modal: true,
    show: {effect:'fade', duration:250},
    hide: {effect:'fade', duration:250},
    buttons: {
      "_(Reset)_": function(){
        $.removeCookie('db-box1');
        $.removeCookie('db-box2');
        $.removeCookie('db-box3');
        $.removeCookie('inactive_content');
        $.removeCookie('hidden_content');
        box.dialog('close');
        location.reload();
      },
      "_(All)_": function(){
        $('input.checker').each(function(){$(this).prop('checked',true);});
      },
      "_(None)_": function(){
        $('input.checker').each(function(){$(this).prop('checked',false);});
      },
      "_(Apply)_": function(){
        hideShow();
        box.dialog('close');
      },
      "_(Cancel)_": function(){
        box.dialog('close');
      }
    }
  });
  $('.ui-dialog-titlebar-close').css({'display':'none'});
  $('.ui-dialog-title').css({'text-align':'center','width':'100%','font-size':'1.8rem'});
  $('.ui-dialog-content').css({'padding-top':'15px','vertical-align':'bottom'});
  $('.ui-button-text').css({'padding':'0px 5px'});
}

var sortableHelper = function(e,ui){
  ui.find('tr:first').children().each(function(){$(this).width($(this).width());});
  return ui;
};

function LockButton() {
  if ($.cookie('lockbutton') == null) {
    $.cookie('lockbutton','lockbutton');
<?if ($themes1):?>
    $('div.nav-item.LockButton a').prop('title',"_(Lock sortable items)_");
    $('div.nav-item.LockButton b').removeClass('icon-u-lock green-text').addClass('icon-u-lock-open red-text');
<?endif;?>
    $('i.tile').show();
    $('tbody.sortable').css({'cursor':'move'});
    $('div.nav-item.LockButton span').text("_(Lock sortable items)_");
    $('#db-box1,#db-box2,#db-box3').sortable({connectWith:'#db-box1,#db-box2,#db-box3'});
    $('table.dashboard').sortable({helper:sortableHelper,items:'.sortable',cursor:'grab',delay:100,opacity:0.5,zIndex:9999,forcePlaceholderSize:true,
    receive:function(e,ui){
      var table = ui.sender, index = [];
      var tile = table.parent();
      if (table.find('tbody:visible').length > 0) tile.show(); else tile.hide();
      table.find('tbody').each(function(){index.push($(this).attr('sort'));});
      $.cookie(table.prop('id'),index.join(';'),{expires:3650});
    },
    stop:function(e,ui){
      var table = ui.item.parent(), index = [];
      table.find('tbody').each(function(){index.push($(this).attr('sort'));});
      $.cookie(table.prop('id'),index.join(';'),{expires:3650});
    }});
  } else {
    $.removeCookie('lockbutton');
<?if ($themes1):?>
    $('div.nav-item.LockButton a').prop('title',"_(Unlock sortable items)_");
    $('div.nav-item.LockButton b').removeClass('icon-u-lock-open red-text').addClass('icon-u-lock green-text');
<?endif;?>
    $('i.tile').hide();
    $('tbody.sortable').css({'cursor':'default'});
    $('div.nav-item.LockButton span').text("_(Unlock sortable items)_");
    $('table.dashboard').sortable('destroy');
  }
}
var dashboard = new NchanSubscriber('/sub/cpuload,update1,update2,update3<?=$wireguard?",wireguard":""?>',{subscriber:'websocket'});
dashboard.on('message',function(msg,meta) {
  switch (meta.id.channel()) {
  case 0:
    var ini = parseINI(msg);
    // cpu load
    $.each(ini,function(k,v) {
      var load = v['host'];
      var color = setColor(load, 90, 70);
      if (k=='cpu') {
        addChartCpu(load);
        cpuchart.updateSeries([{data:cpu}]);
      }
      $('.'+k).text(load+'%');
      $('#'+k).finish().animate({width:load+'%'},{step:function(){$('#'+k).css('overflow','visible').removeClass().addClass(color);}});
    });
    break;
  case 1:
    var part = msg.split('\1');
    // memory & disk load
    $.each(part[0].split('\0'),function(k,v) {
      var load = v.slice(0,-1);
      var color = k==1 ? '' : setColor(load,<?=_var($display,'critical',0)?>,<?=_var($display,'warning',0)?>);
      $('.sys'+k).text(v);
      $('#sys'+k).finish().animate({width:v},{step:function(){$('#sys'+k).css('overflow','visible').removeClass().addClass(color);}});
    });
<?if ($fans):?>
    // fans rpm
    $.each(part[1].split('\0'),function(k,v) {$('#fan'+k).html(v);});
<?endif;?>
<?if (_var($var,'fsState')=='Started' && $group):?>
    // stream counters (smb only)
    var tag = $('.smb').is(':visible') ? 'smb' : $('.nfs').is(':visible') ? 'nfs' : '';
    if (tag == 'smb') $.each(part[2].split('\0'),function(k,v) {$('#share'+(k+1)).html(v);});
<?endif;?>
    break;
  case 2:
    if (!update2) break;
    var part = msg.split('\1');
    var data = part[0].split('\0');
    var info = moreInfo(data,"_(Array)_");
    // array devices
    $('#array_list tr.updated').remove();
    $('#array_list').append(data[0]).hideMe();
    $('#array_info').parent().css('display',info?'':'none');
    $('#array_info').html(info);
    smartMenu('#array_list');
    // pool devices
    var text = part[1].split('\r');
    for (var i=0,t; t=text[i]; i++) {
      var data = t.split('\0');
      var info = moreInfo(data,"_(Pool)_");
      $('#pool_list'+i+' tr.updated').remove();
      $('#pool_list'+i).append(t).hideMe();
      $('#pool_info'+i).parent().css('display',info?'':'none');
      $('#pool_info'+i).html(info);
      smartMenu('#pool_list'+i);
    }
<?if ($devs):?>
    // unassigned devices
    var data = part[2].split('\0');
    var info = moreInfo(data,"_(Unassigned)_");
    $('#devs_list tr.updated').remove();
    $('#devs_list').append(data[0]).hideMe();
    $('#devs_info').parent().css('display',info?'':'none');
    $('#devs_info').html(info);
    smartMenu('#devs_list');
<?endif;?>
    // parity status
    $('span.parity').html(part[3]);
    // parity schedule
    var data = part[4].split('\0');
    $('#parity').html(data[0]);
    $('#program').html(data[1]);
    break;
  case 3:
    var part = msg.split('\1');
    var ports = part[0].split('\n');
    // rx & tx speeds
    for (var i=0,port; port=ports[i]; i++) {
      var data = port.split('\0');
      if (data[0] == port_select) {
        $('#inbound').text(data[1]);
        $('#outbound').text(data[2]);
        addChartNet(data[3], data[4]);
        netchart.updateSeries([{data:rxd},{data:txd}]);
        break;
      }
    }
    // port counters
    $.each(part[1].split('\0'),function(k,v) {$('#main'+k).html(v);});
    $.each(part[2].split('\0'),function(k,v) {$('#port'+k).html(v);});
    $.each(part[3].split('\0'),function(k,v) {$('#link'+k).html(v);});
    break;
  case 4:
    // wireguard tunnels
    var n = {};
    var rows = msg.split('\0');
    for (var i=0,row; row=rows[i]; i++) {
      var info = row.split(';');
      var vtun = info[0];
      if (typeof n[vtun]=='undefined') n[vtun] = 0; else n[vtun]++;
      if (info[1] == 0) {
        $('span#'+vtun+'-hs-'+n[vtun]).text("_(not received)_");
      } else if (info[1] > 86400) {
        var d = parseInt(info[1]/86400);
        var s = d==1 ? " _(day)_" : " _(days)_";
        $('span#'+vtun+'-hs-'+n[vtun]).text(sprintf("_(%s ago)_",d+s));
      } else {
        var h = parseInt(info[1]/3600).pad();
        var m = parseInt(info[1]/60%60).pad();
        var s = parseInt(info[1]%60).pad();
        $('span#'+vtun+'-hs-'+n[vtun]).text(sprintf("_(%s ago)_",h+':'+m+':'+s));
      }
      $('span#'+vtun+'-rx-'+n[vtun]).html('<span class="rx"><i class="fa fa-fw fa-arrow-down"></i>&nbsp;'+info[2]+'</span><span><i class="fa fa-fw fa-arrow-up"></i>&nbsp;'+info[3]+'</span>');
    }
    break;
  }
});
<?if ($apcupsd):?>
var apcups = new NchanSubscriber('/sub/apcups',{subscriber:'websocket'});
apcups.on('message',function(data) {
  data = data.split(';');
  $('#ups_model').html(data[0]);
  $('#ups_status').html(data[1]);
  $('#ups_bcharge').html(data[2]);
  $('#ups_timeleft').html(data[3]);
  $('#ups_nompower').html(data[4]);
  $('#ups_loadpct').html(data[5]);
  $('#ups_outputv').html(data[6]);
});
<?endif;?>

$(function() {
  initCharts();
  cpuchart.render();
  netchart.render();
  addProperties();
<?if ($group):?>
  dropdown('enter_share');
<?endif;?>
  dropdown('enter_view');
  startup = false;
  dashboard.start();
<?if ($apcupsd):?>
  apcups.start();
<?endif;?>
  update900();
  toggleChart(true);
  toggleCPU(true);
  portMenu();
  loadlist(true);
  sortTables();
  showContent();
  $('#cpuline').val(cpuline);
  $('#netline').val(netline);
  $.removeCookie('lockbutton');
  // remember latest graph values
  $(window).on('beforeunload',function(e){
    var data = {};
    data.cpu = cpu.tail(cpuline);
    data.rxd = rxd.tail(netline);
    data.txd = txd.tail(netline);
    $.post('/webGui/include/InitCharts.php',{cmd:'set',data:JSON.stringify(data)});
  });
});
</script>

                )

            [Dashboard] => Array
                (
                    [Menu] => Tasks:1
                    [Type] => xmenu
                    [Tabs] => false
                    [Code] => e943
                    [Lock] => true
                    [Load] => 30
                    [file] => webGui/Dashboard.page
                    [root] => webGui
                    [name] => Dashboard
                    [text] => 
                )

            [DateTime] => Array
                (
                    [Menu] => OtherSettings
                    [Title] => Date and Time
                    [Icon] => icon-clock
                    [Tag] => clock-o
                    [file] => webGui/DateTime.page
                    [root] => webGui
                    [name] => DateTime
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?$keys = explode("\n", file_get_contents('webGui/include/timezones.key'));?>

<form markdown="1" name="datetime_settings" method="POST" action="/update.htm" target="progressFrame">
_(Current date and time)_:
: <?=_(my_time(time()),0)?>

_(Time zone)_:
: <select name="timeZone" size="1"><?
  foreach ($keys as $key) {
    [$timezone, $city] = my_explode('|', $key);
    echo mk_option($var['timeZone'], $timezone, $city);
  }
?></select>

:timezone_help:

_(Use NTP)_:
: <select name="USE_NTP" size="1" onchange="checkDateTimeSettings(this.form)">
  <?=mk_option($var['USE_NTP'], "yes", _('Yes'))?>
  <?=mk_option($var['USE_NTP'], "no", _('No'))?>
  </select>

:use_ntp_help:

_(NTP server)_ 1:
: <input type="text" name="NTP_SERVER1" maxlength="40" class="narrow" value="<?=htmlspecialchars($var['NTP_SERVER1'])?>">

:ntp_server1_help:

_(NTP server)_ 2:
: <input type="text" name="NTP_SERVER2" maxlength="40" class="narrow" value="<?=htmlspecialchars($var['NTP_SERVER2'])?>">

:ntp_server2_help:

_(NTP server)_ 3:
: <input type="text" name="NTP_SERVER3" maxlength="40" class="narrow" value="<?=htmlspecialchars($var['NTP_SERVER3'])?>">

:ntp_server3_help:

_(NTP server)_ 4:
: <input type="text" name="NTP_SERVER4" maxlength="40" class="narrow" value="<?=htmlspecialchars($var['NTP_SERVER4'])?>">

:ntp_server4_help:

_(New date and time)_:
: <input type="text" name="newDateTime" maxlength="20" class="narrow" value="<?=my_time(time(), "%F %T")?>">

:current_time_help:

&nbsp;
: <input type="submit" name="setDateTime" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<script>
function checkDateTimeSettings() {
  form = document.datetime_settings;
  if (form.USE_NTP.value=="yes") {
    form.newDateTime.disabled=true;
    form.NTP_SERVER1.disabled=false;
    form.NTP_SERVER2.disabled=false;
    form.NTP_SERVER3.disabled=false;
    form.NTP_SERVER4.disabled=false;
  } else {
    form.newDateTime.disabled=false;
    form.NTP_SERVER1.disabled=true;
    form.NTP_SERVER2.disabled=true;
    form.NTP_SERVER3.disabled=true;
    form.NTP_SERVER4.disabled=true;
  }
}
$(checkDateTimeSettings);
</script>

                )

            [Device] => Array
                (
                    [Type] => xmenu
                    [Tabs] => true
                    [file] => webGui/Device.page
                    [root] => webGui
                    [name] => Device
                    [text] => 
                )

            [DeviceAttributes] => Array
                (
                    [Menu] => Device New
                    [Title] => Attributes
                    [Tag] => address-card-o
                    [Cond] => strpos(_var($disks[$name],'status'),'_NP')===false
                    [file] => webGui/DeviceAttributes.page
                    [root] => webGui
                    [name] => DeviceAttributes
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
$(function() {
  $.post("/webGui/include/SmartInfo.php",{cmd:'attributes',port:'<?=$dev?>',name:'<?=$name?>'}, function(data) {
    $('#disk_attributes').html(data);
  });
});
</script>
<table class='share_status small'>
<thead><td style="width:40px">#</td><td>_(Attribute Name)_</td><td>_(Flag)_</td><td>_(Value)_</td><td>_(Worst)_</td><td>_(Threshold)_</td><td>_(Type)_</td><td>_(Updated)_</td><td>_(Failed)_</td><td style="width:145px">_(Raw Value)_</td></thead>
<tbody id="disk_attributes"><tr><td colspan='10'><div class="spinner"></div></td></tr></tbody>
</table>
<input type="button" value="_(Done)_" onclick="done()">

:smart_attributes_help:


                )

            [DeviceCapabilities] => Array
                (
                    [Menu] => Device New
                    [Title] => Capabilities
                    [Tag] => building
                    [Cond] => strpos(_var($disks[$name],'status'),'_NP')===false
                    [file] => webGui/DeviceCapabilities.page
                    [root] => webGui
                    [name] => DeviceCapabilities
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
$(function() {
  $.post("/webGui/include/SmartInfo.php",{cmd:'capabilities',port:'<?=$dev?>',name:'<?=$name?>'}, function(data) {
    $('#disk_capabilities_div').html(data);
  });
});
</script>
<div id="disk_capabilities_div" class='share_status small'>

</div>
<input type="button" value="_(Done)_" onclick="done()">

:smart_capabilities_help:

                )

            [DeviceIdentify] => Array
                (
                    [Menu] => Device New
                    [Title] => Identity
                    [Tag] => user
                    [Cond] => strpos(_var($disks[$name],'status'),'_NP')===false
                    [file] => webGui/DeviceIdentify.page
                    [root] => webGui
                    [name] => DeviceIdentify
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style>
input[type=date]{border:none;margin-left:-2px;padding-left:0;background:transparent;box-shadow:none}
select.noframe{border:none;margin-left:0;padding-left:0;background:transparent;box-shadow:none}
</style>
<script>
function disklog(disk,key,value) {
  $.post('/webGui/include/DiskLog.php',{disk:disk,key:key,value:value});
}
$(function() {
  $.post("/webGui/include/SmartInfo.php",{cmd:'identify',port:'<?=$dev?>',name:'<?=$name?>'}, function(data) {
    $('#disk_identify').html(data);
  });
});
</script>

<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="disk_identify"><tr><td colspan='2'><div class="spinner"></div></td></tr></tbody>
</table>
<input type="button" value="_(Done)_" onclick="done()">

:smart_identity_help:

                )

            [DeviceInfo] => Array
                (
                    [Menu] => Device:1
                    [Title] => $name _(Settings)_
                    [Tag] => hdd-o
                    [file] => webGui/DeviceInfo.page
                    [root] => webGui
                    [name] => DeviceInfo
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License verssion 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/webGui/include/Preselect.php";

$unassigned = array_key_exists($name, $devs);
$disks      = array_merge_recursive($disks, $devs);
$disk       = &$disks[$name] ?? [];
$dev        = _var($disk,'device');
$disk['id'] = _var($disk,'id');
$events     = explode('|',$disk['smEvents'] ?? $var['smEvents'] ?? $numbers);
$bgcolor    = in_array($display['theme'],['white','azure']) ? '#f2f2f2' : '#1c1c1c';
$mode       = ['Disabled','Hourly','Daily','Weekly','Monthly'];
$days       = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];

function sanitize(&$val) {
  $data = explode('.',str_replace([' ',','],['','.'],$val));
  $last = array_pop($data);
  $val = count($data) ? implode($data).".$last" : $last;
  $val = preg_replace('/[^0-9.]/','',$val);
}
function presetSpace($val) {
  global $disk,$display;
  if (!$val or strcasecmp($val,'NaN')==0) return;
  sanitize($val);
  $size = _var($disk,'fsSize',0);
  $size = $size>0 ? round(100*$val/$size,1) : 0;
  $unit = '%';
  if ($size < 1) {
    $units = ['KB','MB','GB','TB','PB','EB','ZB','YB'];
    $base = $val>0 ? floor(log($val,1000)) : 0;
    $size = round($val/pow(1000,$base),1);
    $unit = _var($units,$base);
  }
  [$dot,$comma] = str_split(_var($display,'number','.,'));
  return $size>0 ? number_format($size,$size-floor($size)?1:0,$dot,$comma).' '.$unit : '';
}
function fsSize() {
  global $disks,$pools;
  $fsSize = [];
  foreach ($pools as $pool) $fsSize[] = '"'.$pool.'":"'._var($disks[$pool],'fsSize',0).'"';
  return implode(',',$fsSize);
}
function fsType($type) {
  global $disk;
  return strpos(_var($disk,'fsType'),$type)!==false;
}
function diskStatus($status) {
  global $disk;
  return strpos(_var($disk,'status'),$status)!==false;
}
function diskType(...$types) {
  global $disk;
  $pass = false;
  foreach ($types as $type) $pass |= _var($disk,'type')==$type;
  return $pass;
}
function makeList($list) {
  return implode(',',array_map('escapestring',$list));
}
function sharename($share) {
  return basename($share,'.cfg');
}
function displayTemp($temp) {
  global $display;
  return (_var($display,'unit')=='F' && is_numeric($temp)) ? round($temp*9/5)+32 : $temp;
}
function maintenance_mode() {
  global $var;
  return _var($var,'fsState')=="Started" && _var($var,'startMode')=="Maintenance" && _var($disk,'luksState',0)<=1;
}
function isPool($name) {
  global $pools;
  return in_array($name,$pools);
}
$sheets = []; $i = $n = 0;
foreach ($disks as $sheet) {
  if (_var($sheet,'type')=="Flash" || _var($sheet,'color')=="grey-off" || empty($sheet['name'])) continue;
  $sheets[] = $sheet['name'];
  if ($sheet['name']==$name) {$i = $n;}
  $n++;
}
$tag  = _var($disk,'name');
$end  = count($sheets)-1;
$prev = $i>0 ? $sheets[$i-1] : $sheets[$end];
$next = $i<$end ? $sheets[$i+1] : $sheets[0];

$text = isPool($name) ? _('This will ERASE content of ALL devices in the pool') : _('This will ERASE ALL device content');
?>
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.ui.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-{$display['theme']}.css")?>">
<style>
input.option{display:none;width:40px}
select.option,#autosize{display:none}
span#devtext{display:none;font-weight:bold}
span#helptext{display:none;font-style:italic}
span.code{display:inline-block;width:186px}
i.fa-info.i{margin-right:10px}
</style>
<script>
if ($.cookie('deletepool')) {
  $.removeCookie('deletepool');
  done();
}
function setFloor() {
  if ($('#shareFloor').length==0) return;
  const fsSize = {<?=fsSize()?>};
  const units = ['K','M','G','T','P','E','Z','Y'];
  var val  = $('#shareFloor').val();
  var full = fsSize["<?=$tag?>"];
  var size = parseInt(full * 0.1); // 10% of available size
  var number = val.replace(/[A-Z%\s]/gi,'').replace(',','.').split('.');
  var last = number.pop();
  number = number.length ? number.join('')+'.'+last : last;
  if (number==0 && size>0) {
    size = size.toString();
    $.cookie('autosize-<?=$tag?>','1',{expires:365});
  } else {
    size = val;
    $.removeCookie('autosize-<?=$tag?>');
  }
  var unit = size.replace(/[0-9.,\s]/g,'');
  if (unit=='%') {
    number = (number > 0 && number <= 100) ? parseInt(full * number / 100) : '';
  } else {
    var base = unit.length==2 ? 1000 : (unit.length==1 ? 1024 : 0);
    number = base>0 ? number * Math.pow(base,(units.indexOf(unit.toUpperCase().replace('B',''))||0)) : size;
  }
  $('#shareFloor').val(isNaN(number) ? '' : number);
}
<?if (fsType('btrfs')):?>
function presetBTRFS(form,hour) {
  var mode = form.mode.value;
  form.min.disabled = mode==0;
  form.day.disabled = mode==0 || mode!=3;
  form.dotm.disabled = mode==0 || mode!=4;
  form.hour1.disabled = mode==0;
  form.hour2.disabled = mode==0;
  form.day.value = form.day.disabled ? '*' : (form.day.value=='*' ? 0 : form.day.value);
  form.dotm.value = form.dotm.disabled ? '*' : (form.dotm.value=='*' ? 1 : form.dotm.value);
  if (mode==1) {$(hour+'1').hide(); $(hour+'2').show();} else {$(hour+'2').hide(); $(hour+'1').show();}
}
function prepareBTRFS(form) {
  var include = '';
  var mode = form.mode.value;
  form.hour.value = mode!=1 ? form.hour1.value : form.hour2.value;
  form.min.value = mode!=1 ? form.min.value : 0;
  form.hour1.disabled = true;
  form.hour2.disabled = true;
  if (form.usage.value != '') {
    var job = $(form).find('input[name="#job"]');
    job.val(job.val().replace('=50','='+form.usage.value));
  }
}
<?endif;?>

<?if (fsType('zfs')):?>
function presetZFS(form,hour) {
  var mode = form.mode.value;
  form.min.disabled = mode==0;
  form.day.disabled = mode==0 || mode!=3;
  form.dotm.disabled = mode==0 || mode!=4;
  form.hour1.disabled = mode==0;
  form.hour2.disabled = mode==0;
  form.day.value = form.day.disabled ? '*' : (form.day.value=='*' ? 0 : form.day.value);
  form.dotm.value = form.dotm.disabled ? '*' : (form.dotm.value=='*' ? 1 : form.dotm.value);
  if (mode==1) {$(hour+'1').hide(); $(hour+'2').show();} else {$(hour+'2').hide(); $(hour+'1').show();}
}
function prepareZFS(form) {
  var include = '';
  var mode = form.mode.value;
  form.hour.value = mode!=1 ? form.hour1.value : form.hour2.value;
  form.min.value = mode!=1 ? form.min.value : 0;
  form.hour1.disabled = true;
  form.hour2.disabled = true;
  if (form.usage.value != '') {
    var job = $(form).find('input[name="#job"]');
    job.val(job.val().replace('=50','='+form.usage.value));
  }
}
<?endif;?>

function selectDiskFsWidth(num_devices,selected_width) {
  $('#diskFsWidthZFS').empty();
  if (num_devices == 0) {
    $('#diskFsWidthZFS').prop('disabled',true).append($('<option>', {
      value: 0,
      text: "<?=_('no devices')?>"
    }));
  } else if ($('#diskFsProfileZFS').val() == '') {
    var label = (num_devices == 1) ? "device" : "devices";
    $('#diskFsWidthZFS').append($('<option>', {
      value: 1,
      text: _(sprintf('%s '+label,num_devices))
    }));
  } else if ($('#diskFsProfileZFS').val() == 'mirror') {
    var width;
    for (width=2; width<=Math.min(num_devices,4); width++) {
      if ((num_devices % width) == 0) {
        var groups = num_devices / width;
        var label = (groups == 1) ? "group" : "groups";
        $('#diskFsWidthZFS').append($('<option>', {
          value: width,
          text: _(sprintf('%s '+label+' of %s devices',groups,width)),
          selected: (width == selected_width)
        }));
      }
    }
  } else {
    var width, min_width;
    if ($('#diskFsProfileZFS').val() == 'raidz1') min_width = 3;
    else if ($('#diskFsProfileZFS').val() == 'raidz2') min_width = 4;
    else if ($('#diskFsProfileZFS').val() == 'raidz3') min_width = 5;
    for (width=min_width; width<=num_devices; width++) {
      if ((num_devices % width) == 0) {
        var groups = num_devices / width;
        var label = (groups == 1) ? "group" : "groups";
        $('#diskFsWidthZFS').append($('<option>', {
          value: width,
          text: _(sprintf('%s '+label+' of %s devices',groups,width)),
          selected: (width == selected_width)
        }));
      }
    }
  }
}
function selectDiskFsProfile(num_devices, width, init) {
  var t = init ? null : 'slow';
  if (($('#diskFsType').val()||'').indexOf('auto') != -1) {
    $('#diskFsProfileBTRFS').prop('disabled',true).hide();
    $('#diskFsProfileZFS').prop('disabled',true).hide();
    $('#diskFsWidthZFS').prop('disabled',true).hide();;
    $('#compression').hide(t);
    $('#autotrim').hide(t);
  } else if (($('#diskFsType').val()||'').indexOf('btrfs') != -1) {
    if (!init) $('#diskFsProfileBTRFS').prop('disabled',false);
    $('#diskFsProfileBTRFS').show();
    $('#diskFsProfileZFS').prop('disabled',true).hide();
    $('#diskFsWidthZFS').prop('disabled',true).hide();
    $('#compression').show(t);
<?if (diskType('Cache')):?>
    $('#autotrim').show(t);
<?endif;?>
  } else if (($('#diskFsType').val()||'').indexOf('zfs') != -1) {
    $('#diskFsProfileBTRFS').prop('disabled',true).hide();
    if (!init) {
      $('#diskFsProfileZFS').prop('disabled',false);
      $('#diskFsWidthZFS').prop('disabled',false);
    }
    $('#diskFsProfileZFS').show();
    $('#diskFsWidthZFS').show();
    selectDiskFsWidth(num_devices, width);
    $('#compression').show(t);
<?if (diskType('Cache')):?>
    $('#autotrim').show(t);
  } else if (($('#diskFsType').val()||'').indexOf('xfs') != -1) {
    $('#autotrim').show(t);
<?endif;?>
  }
}
function changeFsType() {
  var fstype = ($('#diskFsType').val()||'').replace('luks:','');
  if (['btrfs', 'zfs'].includes(fstype)) $('#compression').show('slow'); else $('#compression').hide('slow');
<?if (diskType('Cache')):?>
  if (['xfs', 'btrfs', 'zfs'].includes(fstype)) $('#autotrim').show('slow'); else $('#autotrim').hide('slow');
<?endif;?>
  if (fstype=='reiserfs') $('#reiserfs').show(); else $('#reiserfs').hide(); 
}
function prepareDeviceInfo(form) {
  var events = [];
  for (var i=0; i < <?=count($preselect)?>; i++) {
    if (form.elements['at'+i].checked) events.push(form.elements['at'+i].value);
    form.elements['at'+i].disabled = true;
  }
  var custom = form.smCustom.value.trim();
  custom = custom.length ? custom.split(',') : [];
  for (var i=0; i < custom.length; i++) events.push(custom[i].trim());
  form.smEvents.value = events.join('|');
  if (form.smEvents.value == '<?=$numbers?>') form.smEvents.value = '';
  if (form.smLevel.value == 1.00) form.smLevel.value = '';
<?if (_var($display,'unit')=='F'):?>
  if (form.hotTemp.value>0) form.hotTemp.value = Math.round((form.hotTemp.value-32)*5/9);
  if (form.maxTemp.value>0) form.maxTemp.value = Math.round((form.maxTemp.value-32)*5/9);
<?endif;?>
}
function setGlue(form,reset) {
  var data =
  [{glue:'' ,more:0,dev:0,type:''},                                                        // auto
   {glue:'' ,more:0,dev:0,type:''},                                                        // ata
   {glue:',',more:1,dev:0,type:'input',min1:'',max1:'0xffffffff'},                         // nvme
   {glue:',',more:2,dev:0,type:'select',min11:'',min12:'auto',min21:'',min22:12,min23:16}, // sat
   {glue:'' ,more:0,dev:0,type:''},                                                        // scsi
   {glue:',',more:1,dev:1,type:'',min1:0,max1:127},                                        // 3ware
   {glue:',',more:3,dev:1,type:'',min1:0,max1:15,min2:0,max2:7,min3:0,max3:15},            // adaptec
   {glue:'/',more:2,dev:1,type:'',min1:1,max1:128,min2:1,max2:8},                          // areca
   {glue:'/',more:3,dev:1,type:'',min1:1,max1:4,min2:1,max2:128,min3:1,max3:4},            // highpoint
   {glue:'' ,more:1,dev:1,type:'',min1:0,max1:15},                                         // hp cciss
   {glue:'' ,more:0,dev:0,type:''},                                                        // marvell
   {glue:',',more:1,dev:1,type:'',min1:0,max1:127}                                         // megaraid
  ];
  var n = form.smType.selectedIndex>0 ? form.smType.selectedIndex-1 : <?=_var($var,'smIndex',0)?>;
  var x = data[n]['more'];
  var t = data[n]['type'];
  for (var i=1; i <= x; i++) {
    switch (t) {
    case 'input':
      var min = data[n]['min'+i];
      var max = data[n]['max'+i];
      var len = max.toString().length;
      if (reset) $('input[name="smPort'+i+'"]').val('');
      $('select[name="smPort'+i+'"]').prop('disabled',true).hide();
      $('input[name="smPort'+i+'"]').css('width',80).attr('maxlength',len).attr('placeholder',min).prop('disabled',false).show();
      break;
    case 'select':
      var options = [];
      var c = 1;
      do {
        var option = data[n]['min'+i+(c++)];
        if (typeof(option)!='undefined') {
          var selected = option==$('input[name="smPort'+i+'"]').val() ? ' selected':'';
          options.push('<option value="'+option+'"'+selected+'>'+option+'</option>');
        } else break;
      } while (true);
      if (reset) $('select[name="smPort'+i+'"]').val('');
      $('input[name="smPort'+i+'"]').prop('disabled',true).hide();
      $('select[name="smPort'+i+'"]').html(options.join('')).prop('disabled',false).show();
      break;
    default:
      var min = data[n]['min'+i];
      var max = data[n]['max'+i];
      var len = max.toString().length;
      if (reset) $('input[name="smPort'+i+'"]').val('');
      $('select[name="smPort'+i+'"]').prop('disabled',true).hide();
      $('input[name="smPort'+i+'"]').css('width',40).attr('maxlength',len).attr('placeholder',min+'...'+max).prop('disabled',false).show();
    }
  }
  for (var i=x+1; i <= 3; i++) {
    $('input[name="smPort'+i+'"]').val('').prop('disabled',false).hide();
    $('select[name="smPort'+i+'"]').prop('disabled',true).hide();
  }
  if (data[n]['dev']==1) {
    $('#devtext').show();
    $('input[name="smDevice"]').show();
    $('#helptext').show();
  } else {
    $('#devtext').hide();
    $('input[name="smDevice"]').val('').hide();
    $('#helptext').hide();
  }
  form.smGlue.value = form.smType.selectedIndex>0 ? data[n]['glue'] : "<?=_var($var,'smGlue')?>";
}
function prepareFS(form,cookie,value) {
  if ($(form).find('input[type="submit"]').val()=='Cancel') $.removeCookie(cookie); else $.cookie(cookie,value);
}
function btrfsBalance(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'btrfs-balance',path:path},function(data) {
    if (data.indexOf('running')>0) {
      $('#btrfs-balance').text(data);
      setTimeout(function(){btrfsBalance(path);},1000);
    } else {
      $.removeCookie('btrfs-balance-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function btrfsScrub(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'btrfs-scrub',path:path},function(data) {
    if (data.indexOf('running')>0) {
      $('#btrfs-scrub').text(data);
      setTimeout(function(){btrfsScrub(path);},1000);
    } else {
      $.removeCookie('btrfs-scrub-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function btrfsCheck(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'btrfs-check',path:path},function(data) {
    $('#btrfs-check').text(data);
    if (data.slice(-1)!='\0') {
      setTimeout(function(){btrfsCheck(path);},1000);
    } else {
      $.removeCookie('btrfs-check-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function zfsScrub(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'zfs-scrub',path:path},function(data) {
    if (data.indexOf('scrub in progress')>0) {
      $('#zfs-pool').text(data);
      setTimeout(function(){zfsScrub(path);},1000);
    } else {
      $.removeCookie('zfs-scrub-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function zfsResilver(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'zfs-resilver',path:path},function(data) {
    if (data.indexOf('resilver in progress')>0) {
      $('#zfs-button').prop('disabled',true);
      $('#zfs-pool').text(data);
      setTimeout(function(){zfsResilver(path);},1000);
    } else {
      $.removeCookie('zfs-resilver-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function rfsCheck(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'rfs-check',path:path},function(data) {
    $('#rfs-check').text(data);
    if (data.slice(-1)!='\0') {
      setTimeout(function(){rfsCheck(path);},1000);
    } else {
      $.removeCookie('rfs-check-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function xfsCheck(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'xfs-check',path:path},function(data) {
    $('#xfs-check').text(data);
    if (data.slice(-1)!='\0') {
      setTimeout(function(){xfsCheck(path);},1000);
    } else {
      $.removeCookie('xfs-check-<?=$tag?>');
      refresh();
    }
  });
  return false;
}
function updateMode(form,mode) {
  $(form).find('input[name="#arg[3]"]').val(mode);
}
function validate(poolname) {
  var valid = /^[a-z_]([a-z0-9_-]*[a-z_])*$/;
  var reserved = [<?=makeList(explode(',',_var($var,'reservedNames')))?>];
  var shares = [<?=makeList(array_map('sharename',glob('boot/config/shares/*.cfg',GLOB_NOSORT)))?>];
  var pools = [<?=makeList($pools)?>];
  if (!poolname.trim()) return false;
  if (reserved.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Do not use reserved names)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else if (shares.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Do not use user share names)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else if (pools.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Pool name already exists)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else if (!valid.test(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Use only lowercase with no special characters or leading/trailing digits)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  return true;
}
function renamePoolPopup() {
  var popup = $('#dialogRenamePool');
  // Load popup with the template info
  popup.html($("#templatePopupPool").html());
  // Start Dialog section
  popup.dialog({
    title: "_(Rename Pool)_",
    resizable: false,
    width: 600,
    modal: true,
    show : {effect:'fade', duration:250},
    hide : {effect:'fade', duration:250},
    buttons: {
    "_(Rename)_": function() {
        if (validate($(this).find('input[name="poolName"]').val())) {
          $(this).find('form').submit();
          $(this).dialog('close');
        }
      },
    "_(Cancel)_": function() {
        $(this).dialog('close');
      }
    }
  });
  $(".ui-dialog .ui-dialog-titlebar").addClass('menu');
  $('.ui-dialog .ui-dialog-titlebar-close').css({'display':'none'});
  $(".ui-dialog .ui-dialog-title").css({'text-align':'center','width':'100%'});
  $(".ui-dialog .ui-dialog-content").css({'padding-top':'15px','vertical-align':'bottom'});
  $(".ui-widget-content").css({'background':'<?=$bgcolor?>'});
  $(".ui-button-text").css({'padding':'0px 5px'});
}
function deletePool() {
  $.cookie('deletepool','deletepool');
  document.deletepool.submit();
}
function eraseDisk(name) {
  swal({
    title:"_(Erase Device Content)_?",
    text:"<?=$text?><p style='font-weight:bold;color:red;margin:8px 0'>_(Existing content is permanently lost)_</p>",
    html:true,
    type:'input',
    inputPlaceholder:"<?=sprintf(_('To confirm your action type: %s'),$name)?>",
    showCancelButton:true,
    closeOnConfirm:false,
    confirmButtonText:"_(Proceed)_",
    cancelButtonText:"_(Cancel)_"
  },
  function(confirm){
    if (confirm == "<?=$name?>") {
      swal.close();
      $('#doneButton').prop('disabled',true);
      $('#eraseButton').prop('disabled',true);
      $('div.spinner.fixed').show();
      $.get("/update.htm",{cmdWipefs:name,csrf_token:"<?=_var($var,'csrf_token')?>"},function(){
        $('div.spinner.fixed').hide();
        refresh();
      });
    } else {
      if (confirm.length) swal({title:"_(Incorrect confirmation)_",text:"_(Please try again)_!",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    }
  });
}
</script>

<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="setFloor()">
<?if (_var($var,'fsState')=="Stopped" && isPool($name)):?>
_(Name)_:
: <a onclick="renamePoolPopup()" style="cursor:pointer" title="_(Rename Pool)_"><?=$name?></a>

<?else:?>
_(Name)_:
: <?=_(my_disk($name),3)?>

<?endif;?>
<?if (diskStatus('_NP')):?>
_(Identification)_:
: _(No device)_

<?else:?>
_(Identification)_:
: <?=my_id(_var($disk,'id'))?>&nbsp;(<?=$dev?>)

<?endif;?>
<?if (!$unassigned):?>
<?if (diskType('Data') || (diskType('Cache') && isPool(_var($disk,'name')))):?>
_(Comments)_:
: <input type="text" name="diskComment.<?=_var($disk,'idx',0)?>" maxlength="256" value="<?=htmlspecialchars(_var($disk,'comment'))?>">

:info_comments_help:

<?endif;?>
_(Partition size)_:
: <?=my_number(_var($disk,'sizeSb',0))?> KB (K=1024)

_(Partition format)_:
: <?=_(_var($disk,'format'))?>

<?if (_var($var,'spinupGroups')=="yes" && diskType('Data','Parity')):?>
_(Spinup group(s))_:
: <input type="text" name="diskSpinupGroup.<?=_var($disk,'idx',0)?>" maxlength="256" value="<?=_var($disk,'spinupGroup')?>">

<?endif;?>
_(Spin down delay)_:
: <select name="diskSpindownDelay.<?=_var($disk,'idx',0)?>">
  <?=mk_option(_var($disk,'spindownDelay'), "-1", _('Use default'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "0",  _('Never'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "15", "15 "._('minutes'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "30", "30 "._('minutes'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "45", "45 "._('minutes'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "1",  "1 "._('hour'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "2",  "2 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "3",  "3 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "4",  "4 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "5",  "5 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "6",  "6 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "7",  "7 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "8",  "8 "._('hours'))?>
  <?=mk_option(_var($disk,'spindownDelay'), "9",  "9 "._('hours'))?>
  </select><span id="smart_selftest" class='orange-text'></span>
<?endif;?>

<?if (diskType('Data') || isPool($tag)):?>
_(File system status)_:
: <?=_(_var($disk,'fsStatus'))?>&nbsp;

<?$disabled = ((_var($var,'fsState')=="Stopped" && _var($var,'mdState')=="SWAP_DSBL") || _var($var,'fsState')=="Started" || _var($disk,'fsStatus')=='Mounted') || _var($disk,'uuid') ? "disabled" : ""?>
<?if (diskType('Data') || _var($disk,'slots',0)==1):?>
_(File system type)_:
: <select id="diskFsType" name="diskFsType.<?=_var($disk,'idx',0)?>" onchange="changeFsType()" <?=$disabled?>>
  <?=mk_option(_var($disk,'fsType'), "auto", _('auto'))?>
  <?=mk_option(_var($disk,'fsType'), "xfs", _('xfs'))?>
  <?=mk_option(_var($disk,'fsType'), "zfs", _('zfs'))?>
  <?=mk_option(_var($disk,'fsType'), "btrfs", _('btrfs'))?>
  <?=mk_option(_var($disk,'fsType'), "reiserfs", _('reiserfs'))?>
  <?=mk_option(_var($disk,'fsType'), "luks:xfs", _('xfs')." - "._('encrypted'))?>
  <?=mk_option(_var($disk,'fsType'), "luks:zfs", _('zfs')." - "._('encrypted'))?>
  <?=mk_option(_var($disk,'fsType'), "luks:btrfs", _('btrfs')." - "._('encrypted'))?>
  <?=mk_option(_var($disk,'fsType'), "luks:reiserfs", _('reiserfs')." - "._('encrypted'))?>
  </select><span id="reiserfs" class="warning"<?if (!fsType('reiserfs')):?> style="display:none"<?endif;?>><i class="fa fa-warning"></i>&nbsp;_(ReiserFS is deprecated, please use another file system)_!</span>

:info_file_system_help:

<?elseif (_var($disk,'slots',0)>1):?>
_(File system type)_:
: <select id="diskFsType" name="diskFsType.<?=_var($disk,'idx',0)?>" onchange="selectDiskFsProfile(<?=_var($disk,'devices',0)?>,0)" <?=$disabled?>>
  <?=mk_option(_var($disk,'fsType'), "auto", _('auto'))?>
  <?=mk_option(_var($disk,'fsType'), "zfs", _('zfs'))?>
  <?=mk_option(_var($disk,'fsType'), "btrfs", _('btrfs'))?>
  <?=mk_option(_var($disk,'fsType'), "luks:zfs", _('zfs')." - "._('encrypted'))?>
  <?=mk_option(_var($disk,'fsType'), "luks:btrfs", _('btrfs')." - "._('encrypted'))?>
  </select>
  <select id="diskFsProfileBTRFS" name="diskFsProfile.<?=_var($disk,'idx',0)?>" style="display:none" <?=$disabled?>>
  <?=mk_option(_var($disk,'fsProfile'),"single", _('single'))?>
  <?if (_var($disk,'devices',0)>=2) echo mk_option(_var($disk,'fsProfile'),"raid0", _('raid0'))?>
  <?if (_var($disk,'devices',0)>=2) echo mk_option(_var($disk,'fsProfile'),"raid1", _('raid1'))?>
  <?if (_var($disk,'devices',0)>=3) echo mk_option(_var($disk,'fsProfile'),"raid1c3", _('raid1c3'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(_var($disk,'fsProfile'),"raid1c4", _('raid1c4'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(_var($disk,'fsProfile'),"raid10", _('raid10'))?>
  <?if (_var($disk,'devices',0)>=3) echo mk_option(_var($disk,'fsProfile'),"raid5", _('raid5'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(_var($disk,'fsProfile'),"raid6", _('raid6'))?>
  </select>
  <select id="diskFsProfileZFS" name="diskFsProfile.<?=_var($disk,'idx',0)?>" style="display:none" onchange="selectDiskFsWidth(<?=_var($disk,'devices',0)?>,0)" <?=$disabled?>>
  <?if (_var($disk,'devices',0)==1) echo mk_option(_var($disk,'fsProfile'),"", _('single'))?>
  <?if (_var($disk,'devices',0)>=2) echo mk_option(_var($disk,'fsProfile'),"", _('raid0'))?>
  <?if ((_var($disk,'devices',0)%2)==0 || (_var($disk,'devices',0)%3)==0 || (_var($disk,'devices',0)%4)==0) echo mk_option(_var($disk,'fsProfile'),"mirror", _('mirror'))?>
  <?if (_var($disk,'devices',0)>=3) echo mk_option(_var($disk,'fsProfile'),"raidz1", _('raidz'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(_var($disk,'fsProfile'),"raidz2", _('raidz2'))?>
  <?if (_var($disk,'devices',0)>=5) echo mk_option(_var($disk,'fsProfile'),"raidz3", _('raidz3'))?>
  </select>
  <select id="diskFsWidthZFS" name="diskFsWidth.<?=_var($disk,'idx',0)?>" style="display:none" <?=$disabled?>>
  </select>
<?endif;?>

<div markdown="1" id="compression" style="display:none">
_(Compression)_:
<?$disabled = _var($disk,'fsStatus')=='Mounted' ? "disabled" : ""?>
: <select id="diskCompression" name="diskCompression.<?=_var($disk,'idx',0)?>" <?=$disabled?>>
  <?=mk_option(_var($disk,'compression'), "off", _('Off'))?>
  <?=mk_option(_var($disk,'compression'), "on", _('On'))?>
  </select>

:info_compression_help:
</div>

<div markdown="1" id="autotrim" style="display:none">
_(Autotrim)_:
<?$disabled = _var($disk,'fsStatus')=='Mounted' ? "disabled" : ""?>
: <select id="diskAutotrim" name="diskAutotrim.<?=_var($disk,'idx',0)?>" <?=$disabled?>>
  <?=mk_option(_var($disk,'autotrim'), "on", _('On'))?>
  <?=mk_option(_var($disk,'autotrim'), "off", _('Off'))?>
  </select>

:info_autotrim_help:
</div>
<?if (isPool($name)):?>
_(Enable user share assignment)_:
<?$disabled = _var($var,'fsState')!="Stopped" ? "disabled" : ""?>
: <select id="shareEnabled" name="diskShareEnabled.<?=_var($disk,'idx',0)?>" onchange="freeSpace(this.value)" <?=$disabled?>>
  <?=mk_option(_var($disk,'shareEnabled'), "yes", _('Yes'))?>
  <?=mk_option(_var($disk,'shareEnabled'), "no", _('No'))?>
  </select>

:info_share_assignment_help:

_(Minimum free space)_:
: <input type="text" id="shareFloor" name="diskShareFloor.<?=_var($disk,'idx',0)?>" maxlength="16" autocomplete="off" spellcheck="false" value="<?=presetSpace(_var($disk,'shareFloor',0))?>" class="narrow" placeholder="0">
  <span id="autosize"><i class="fa fa-info i"></i>_(Calculated free space value)_</span>

:info_free_space_help:

<?endif;?>
_(Warning disk utilization threshold)_ (%):
: <input type="number" min="0" max="100" name="diskWarning.<?=_var($disk,'idx',0)?>" autocomplete="off" spellcheck="false" class="narrow" value="<?=_var($disk,'warning')?>" placeholder="<?=_var($display,'warning')?>">

:info_warning_utilization_help:

_(Critical disk utilization threshold)_ (%):
: <input type="number" min="0" max="100" name="diskCritical.<?=_var($disk,'idx',0)?>" autocomplete="off" spellcheck="false" class="narrow" value="<?=_var($disk,'critical')?>" placeholder="<?=_var($display,'critical')?>")>

:info_critical_utilization_help:

<?endif;?>
&nbsp;
: <input type="submit" name="changeDisk" value="_(Apply)_" disabled><input type="button" id="doneButton" value="_(Done)_" onclick="done()">
  <?$erasable=false?>
  <?if (diskType('Parity','Data')):?>
    <?if (_var($var,'fsState')=="Stopped" && diskStatus('_NEW')):?>
      <?$erasable=true?>
    <?endif;?>
    <?if (_var($var,'fsState')=="Started" && _var($var,'startMode')!="Normal" && diskType('Data')):?>
      <?$erasable=true?>
    <?endif;?>
    <input type="button" id="eraseButton" value="_(Erase)_" onclick="eraseDisk('<?=$name?>')"<?=$erasable?'':'  disabled'?>>
  <?endif;?>
  <?if (isPool($name)):?>
    <?if (_var($var,'fsState')=="Stopped" || (_var($var,'fsState')=="Started" && _var($var,'startMode')!="Normal")):?>
      <?$erasable=true?>
    <?endif;?>
    <input type="button" id="eraseButton" value="_(Erase)_" onclick="eraseDisk('<?=$name?>')"<?=$erasable?'':'  disabled'?>>
  <?endif;?>
  <?if (_var($var,'fsState')=="Stopped" && isPool($name)):?>
    <?$empty = _var($disk,'devices',0)==0?>
    <input type="button" value="_(Delete Pool)_" onclick="deletePool()"<?=$empty?'':' disabled'?>><?if (!$empty):?>_(Unassign **ALL** devices to delete this pool)_<?endif;?>
  <?endif;?>
</form>

<?if (fsType('btrfs')):?>
<div class="title nocontrol"><span class="left"><i class="title fa fa-balance-scale"></i>_(Balance Status)_</span></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'btrfs-balance-<?=$tag?>','/mnt/<?=$tag?>')">
<?if (_var($disk,'fsStatus')=="Mounted"):?>
<?exec("$docroot/webGui/scripts/btrfs_balance status /mnt/$tag", $balance_status, $retval)?>
<?$usage = exec("/sbin/btrfs fi usage /mnt/$tag|grep -Pom1 '^Data,.+ \\(\\K[^%]+'");?>

_(btrfs filesystem df)_:
: <?echo "<pre>".shell_exec("/sbin/btrfs filesystem df /mnt/$tag")."</pre>"?>

_(btrfs balance status)_:
: <?echo "<pre id='btrfs-balance'>".implode("\n", $balance_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_balance">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/mnt/<?=$tag?>">
<input type="hidden" name="#arg[3]" value="">

&nbsp;
: &nbsp;_(Current usage ratio)_: <?=round($usage,1)?> % --- <?=($usage > 0 && $usage <= 50) ? "_(Full Balance recommended)_" : "_(No Balance required)_"?>

&nbsp;
: <input type="submit" value="_(Balance)_">
<?if (_var($disk,'devices',0)>1):?>
  <select onchange="updateMode(this.form,this.value)">
  <?=mk_option(1,'',_('Perform full balance'))?>
  <?if (_var($disk,'devices',0)>=1) echo mk_option(1,'-dconvert=single,soft -mconvert=dup,soft',_('Convert to single mode'))?>
  <?if (_var($disk,'devices',0)>=2) echo mk_option(1,'-dconvert=raid0,soft -mconvert=raid1,soft',_('Convert to raid0 mode'))?>
  <?if (_var($disk,'devices',0)>=2) echo mk_option(1,'-dconvert=raid1,soft -mconvert=raid1,soft',_('Convert to raid1 mode'))?>
  <?if (_var($disk,'devices',0)>=3) echo mk_option(1,'-dconvert=raid1c3,soft -mconvert=raid1c3,soft',_('Convert to raid1c3 mode'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(1,'-dconvert=raid1c4,soft -mconvert=raid1c4,soft',_('Convert to raid1c4 mode'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(1,'-dconvert=raid10,soft -mconvert=raid10,soft',_('Convert to raid10 mode'))?>
  <?if (_var($disk,'devices',0)>=3) echo mk_option(1,'-dconvert=raid5,soft -mconvert=raid1,soft',_('Convert to raid5 mode *see help'))?>
  <?if (_var($disk,'devices',0)>=4) echo mk_option(1,'-dconvert=raid6,soft -mconvert=raid1c3,soft',_('Convert to raid6 mode *see help'))?>
  </select>
<?else:?>
  *_(Perform full balance)_*
<?endif;?>

:info_btrfs_balance_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_balance">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/mnt/<?=$tag?>">

&nbsp;
: <input type="submit" value="_(Cancel)_">

:info_balance_cancel_help:

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="_(Balance)_" disabled><?=$tag==prefix($tag) ? "<b>"._('Balance')."</b> "._('is only available when array is Started') : sprintf(_('See %s Settings'),ucfirst(prefix($tag)))?>

<?endif;?>
</form>
<hr>
<?$balance = str_replace('-','_',"balance_$tag")?>
<form markdown="1" name="balance_schedule" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareBTRFS(this)">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="<?=$balance?>">
<input type="hidden" name="#include" value="/webGui/include/update.btrfs.php">
<input type="hidden" name="#job" value="balance_<?=$tag?>;<?=$docroot?>/plugins/dynamix/scripts/btrfs_balance start /mnt/<?=$tag?> -dusage=50">
<input type="hidden" name="hour" value="">
_(Balance schedule)_:
: <select name="mode" onchange="presetBTRFS(this.form,'#balance-hour')">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option(_var($$balance,'mode'), strval($m), _($mode[$m]).($m<4 ? '': ' ('._('recommended').')'))?>
  <?endfor;?>
  </select>

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option(_var($$balance,'day'), strval($d), _($days[$d]),0)?>
  <?endfor;?>
  <?=mk_option(_var($$balance,'day'), "*", "--------", _("disabled"))?>
  </select>

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option(_var($$balance,'dotm'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option(_var($$balance,'dotm'), "*", "--------", _("disabled"))?>
  </select>

_(Time of the day)_:
: <span id="balance-hour1" style="display:none"><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option(_var($$balance,'hour'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option(_var($$balance,'min'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="balance-hour2" style="display:none"><select name="hour2">
  <?=mk_option(_var($$balance,'hour'), "*/1", _("Every hour"))?>
  <?=mk_option(_var($$balance,'hour'), "*/2", _("Every 2 hours"))?>
  <?=mk_option(_var($$balance,'hour'), "*/3", _("Every 3 hours"))?>
  <?=mk_option(_var($$balance,'hour'), "*/4", _("Every 4 hours"))?>
  <?=mk_option(_var($$balance,'hour'), "*/6", _("Every 6 hours"))?>
  <?=mk_option(_var($$balance,'hour'), "*/8", _("Every 8 hours"))?>
  </select></span>

_(Block group usage)_ (%):
: <input type="number" name="usage" class="narrow" min="0" max="100" value="<?=_var($$balance,'usage')?>" placeholder="50">

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">
</form>

<div class="title nocontrol"><span class="left"><i class="title fa fa-paint-brush"></i>_(Scrub Status)_</span></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'btrfs-scrub-<?=$tag?>','/mnt/<?=$tag?>')">
<?if (_var($disk,'fsStatus')=="Mounted"):?>
<?exec("$docroot/webGui/scripts/btrfs_scrub status /mnt/$tag", $scrub_status, $retval)?>

_(btrfs scrub status)_:
: <?echo "<pre id='btrfs-scrub'>".implode("\n", $scrub_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_scrub">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/mnt/<?=$tag?>">
<input type="hidden" name="#arg[3]" value="-r">

&nbsp;
: <input type="submit" value="_(Scrub)_"><label><input type="checkbox" name="#arg[3]" value=""> _(Repair corrupted blocks)_</label>

:info_btrfs_scrub_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_scrub">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/mnt/<?=$tag?>">

&nbsp;
: <input type="submit" value="_(Cancel)_">

:info_scrub_cancel_help:

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="_(Scrub)_" disabled><?=$tag==prefix($tag) ? "<b>"._('Scrub')."</b> "._('is only available when array is Started') : sprintf(_('See %s Settings'),ucfirst(prefix($tag)))?>

<?endif;?>
</form>
<hr>
<?$scrub = str_replace('-','_',"scrub_$tag")?>
<form markdown="1" name="scrub_schedule" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareBTRFS(this)">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="<?=$scrub?>">
<input type="hidden" name="#include" value="/webGui/include/update.btrfs.php">
<input type="hidden" name="#job" value="scrub_<?=$tag?>;<?=$docroot?>/plugins/dynamix/scripts/btrfs_scrub start /mnt/<?=$tag?> -r">
<input type="hidden" name="hour" value="">
_(Scrub schedule)_:
: <select name="mode" onchange="presetBTRFS(this.form,'#scrub-hour')">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option(_var($$scrub,'mode'), strval($m), _($mode[$m]))?>
  <?endfor;?>
  </select>

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option(_var($$scrub,'day'), strval($d), _($days[$d]),0)?>
  <?endfor;?>
  <?=mk_option(_var($$scrub,'day'), "*", "--------", _("disabled"))?>
  </select>

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option(_var($$scrub,'dotm'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option(_var($$scrub,'dotm'), "*", "--------", _("disabled"))?>
  </select>

_(Time of the day)_:
: <span id="scrub-hour1" style="display:none"><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option(_var($$scrub,'hour'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option(_var($$scrub,'min'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="scrub-hour2" style="display:none"><select name="hour2">
  <?=mk_option(_var($$scrub,'hour'), "*/1", _("Every hour"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/2", _("Every 2 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/3", _("Every 3 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/4", _("Every 4 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/6", _("Every 6 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/8", _("Every 8 hours"))?>
  </select></span>

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">
</form>

<div class="title nocontrol"><span class="left"><i class="title fa fa-shield"></i>_(Check Filesystem Status)_</span></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'btrfs-check-<?=$tag?>','/dev/<?=_var($disk,'deviceSb')?> <?=_var($disk,'id')?>')">
<?if (maintenance_mode()):?>
<?exec("$docroot/webGui/scripts/btrfs_check status /dev/"._var($disk,'deviceSb')." "._var($disk,'id'), $check_status, $retval)?>

_(btrfs check status)_:
: <?echo "<pre id='btrfs-check'>".implode("\n", $check_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_check">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/dev/<?=_var($disk,'deviceSb')?>">
<input type="hidden" name="#arg[3]" value="<?=_var($disk,'id')?>">

&nbsp;
: <input type="submit" value="_(Check)_"><input type="text" name="#arg[4]" class="narrow" maxlength="256" value="--readonly"> _(Options (see Help))_

:info_btrfs_check_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_check">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/dev/<?=_var($disk,'deviceSb')?>">
<input type="hidden" name="#arg[3]" value="<?=_var($disk,'id')?>">

&nbsp;
: <input type="submit" value="_(Cancel)_"> *_(Running)_*

:info_check_cancel_help:

<?endif;?>
<?else:?>

<?if ($tag==prefix($tag)):?>
&nbsp;
: <input type="submit" value="_(Check)_" disabled> **_(Check)_** _(is only available when array is Started in **Maintenance** mode)_.

<?else:?>
&nbsp;
: <input type="submit" value="_(Check)_" disabled> <?=sprintf(_('See %s Settings'),ucfirst(prefix($tag)))?>.
<?endif;?>

<?endif;?>
</form>
<?endif;?>
<?if (fsType('zfs')):?>
<div class="title nocontrol"><span class="left"><i class="title fa fa-info"></i>_(Pool Status)_</span></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'zfs-scrub-<?=$tag?>','<?=$tag?>')">
<?if (_var($disk,'fsStatus')=="Mounted"):?>
<?exec("$docroot/webGui/scripts/zfs_scrub status $tag", $zfs_status, $retval); $zfs_status = implode("\n",$zfs_status)?>
<?$zfs_cmd = strpos($zfs_status,"'zpool clear'")===false ? 'start' : 'clear'?>

_(zfs pool status)_:
: <pre id='zfs-pool'><?=$zfs_status?></pre>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/zfs_scrub">
<input type="hidden" name="#arg[1]" value="<?=$zfs_cmd?>">
<input type="hidden" name="#arg[2]" value="<?=$tag?>">

&nbsp;
: <input type="submit" id="zfs-button" value="<?=$zfs_cmd=='start' ? _('Scrub') : _('Clear')?>">

:info_zfs_scrub_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/zfs_scrub">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="<?=$tag?>">

&nbsp;
: <input type="submit" value="_(Cancel)_">

:info_scrub_cancel_help:

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="_(Scrub)_" disabled><?=$tag==prefix($tag) ? "<b>"._('Scrub')."</b> "._('is only available when array is Started') : sprintf(_('See %s Settings'),ucfirst(prefix($tag)))?>

<?endif;?>
</form>
<hr>
<?$scrub = str_replace('-','_',"scrub_$tag")?>
<form markdown="1" name="scrub_schedule" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareZFS(this)">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="<?=$scrub?>">
<input type="hidden" name="#include" value="/webGui/include/update.zfs.php">
<input type="hidden" name="#job" value="scrub_<?=$tag?>;<?=$docroot?>/plugins/dynamix/scripts/zfs_scrub start <?=$tag?>">
<input type="hidden" name="hour" value="">
_(Scrub schedule)_:
: <select name="mode" onchange="presetZFS(this.form,'#scrub-hour')">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option(_var($$scrub,'mode'), strval($m), _($mode[$m]))?>
  <?endfor;?>
  </select>

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option(_var($$scrub,'day'), strval($d), _($days[$d]),0)?>
  <?endfor;?>
  <?=mk_option(_var($$scrub,'day'), "*", "--------", _("disabled"))?>
  </select>

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option(_var($$scrub,'dotm'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option(_var($$scrub,'dotm'), "*", "--------", _("disabled"))?>
  </select>

_(Time of the day)_:
: <span id="scrub-hour1" style="display:none"><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option(_var($$scrub,'hour'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option(_var($$scrub,'min'), strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="scrub-hour2" style="display:none"><select name="hour2">
  <?=mk_option(_var($$scrub,'hour'), "*/1", _("Every hour"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/2", _("Every 2 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/3", _("Every 3 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/4", _("Every 4 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/6", _("Every 6 hours"))?>
  <?=mk_option(_var($$scrub,'hour'), "*/8", _("Every 8 hours"))?>
  </select></span>

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">
</form>
<?endif;?>
<?if (fsType('reiserfs')):?>
<div class="title nocontrol"><span class="left"><i class="title fa fa-shield"></i>_(Check Filesystem Status)_</span></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'rfs-check-<?=$tag?>','/dev/<?=_var($disk,'deviceSb')?> <?=_var($disk,'id')?>')">
<?if (maintenance_mode()):?>
<?exec("$docroot/webGui/scripts/reiserfs_check status /dev/"._var($disk,'deviceSb')." "._var($disk,'id'), $check_status, $retval)?>

_(reiserfsck status)_:
: <?echo "<pre id='rfs-check'>".implode("\n", $check_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/reiserfs_check">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/dev/<?=_var($disk,'deviceSb')?>">
<input type="hidden" name="#arg[3]" value="<?=_var($disk,'id')?>">

&nbsp;
: <input type="submit" value="_(Check)_"><input type="text" name="#arg[4]" class="narrow" maxlength="256" value=""> _(Options (see Help))_

:info_reiserfs_check_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/reiserfs_check">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/dev/<?=_var($disk,'deviceSb')?>">
<input type="hidden" name="#arg[3]" value="<?=_var($disk,'id')?>">

&nbsp;
: <input type="submit" value="_(Cancel)_"> *_(Running)_*

:info_reiserfs_cancel_help:

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="_(Check)_" disabled> **_(Check)_** _(is only available when array is Started in **Maintenance** mode)_.

<?endif;?>
</form>
<?endif;?>
<?if (fsType('xfs')):?>
<div class="title nocontrol"><span class="left"><i class="title fa fa-shield"></i>_(Check Filesystem Status)_</span></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'xfs-check-<?=$tag?>','/dev/<?=_var($disk,'deviceSb')?> <?=_var($disk,'id')?>')">
<?if (maintenance_mode()):?>
<?exec("$docroot/webGui/scripts/xfs_check status /dev/"._var($disk,'deviceSb')." "._var($disk,'id'), $check_status, $retval)?>

_(xfs_repair status)_:
: <?echo "<pre id='xfs-check'>".implode("\n", $check_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/xfs_check">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/dev/<?=_var($disk,'deviceSb')?>">
<input type="hidden" name="#arg[3]" value="<?=_var($disk,'id')?>">

&nbsp;
: <input type="submit" value="_(Check)_"><input type="text" name="#arg[4]" class="narrow" maxlength="256" value="-n"> _(Options (see Help))_

:info_xfs_check_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/xfs_check">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/dev/<?=_var($disk,'deviceSb')?>">

&nbsp;
: <input type="submit" value="_(Cancel)_"> *_(Running)_*

:info_xfs_cancel_help:

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="_(Check)_" disabled> **_(Check)_** _(is only available when array is Started in **Maintenance** mode)_.

<?endif;?>
</form>
<?endif;?>

<?if (!diskStatus('_NP')):?>
<div class="title"><span class="left"><i class="title fa fa-plus-square"></i>_(SMART Settings)_</span></div>

<form markdown="1" name="smart_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareDeviceInfo(this)">
<input type="hidden" name="#file"    value="/boot/config/smart-one.cfg">
<input type="hidden" name="#include" value="webGui/include/update.smart.php">
<input type="hidden" name="#section" value="<?=_var($disk,'id')?>">
<input type="hidden" name="#cleanup" value="true">
<input type="hidden" name="smEvents" value="">
<input type="hidden" name="smGlue"   value="<?=_var($var,'smGlue')?>">
_(Warning disk temperature threshold)_ (&deg;<?=_var($display,'unit','C')?>):
: <input type="number" min="0" max="300" name="hotTemp" class="narrow" value="<?=displayTemp(_var($disk,'hotTemp'))?>" placeholder="<?=displayTemp(_var($display,'hot'))?>">

:info_warning_temp_help:

_(Critical disk temperature threshold)_ (&deg;<?=_var($display,'unit','C')?>):
: <input type="number" min="0" max="300" name="maxTemp" class="narrow" value="<?=displayTemp(_var($disk,'maxTemp'))?>" placeholder="<?=displayTemp(_var($display,'max'))?>">

:info_critical_temp_help:

_(SMART notification value)_:
: <select name="smSelect">
  <?=mk_option(_var($disk,'smSelect'), "-1", _('Use default'))?>
  <?=mk_option(_var($disk,'smSelect'), "0", _('Raw'))?>
  <?=mk_option(_var($disk,'smSelect'), "1", _('Normalized'))?>
  </select>

:info_smart_notifications_help:

_(SMART notification tolerance level)_:
: <select name="smLevel">
  <?=mk_option(_var($disk,'smLevel'), "-1", _('Use default'))?>
  <?=mk_option(_var($disk,'smLevel'), "1.00", _('Absolute'))?>
  <?=mk_option(_var($disk,'smLevel'), "1.05", "5%")?>
  <?=mk_option(_var($disk,'smLevel'), "1.10", "10%")?>
  <?=mk_option(_var($disk,'smLevel'), "1.15", "15%")?>
  <?=mk_option(_var($disk,'smLevel'), "1.20", "20%")?>
  <?=mk_option(_var($disk,'smLevel'), "1.25", "25%")?>
  <?=mk_option(_var($disk,'smLevel'), "1.50", "50%")?>
  </select>

:info_tolerance_level_help:

_(SMART controller type)_:
: <select name="smType" onchange="setGlue(this.form,true)">
  <?=mk_option(_var($disk,'smType'), "-1", _('Use default'))?>
  <?=mk_option(_var($disk,'smType'), " ", _('Automatic'))?>
  <?=mk_option(_var($disk,'smType'), "-d ata", "ATA")?>
  <?=mk_option(_var($disk,'smType'), "-d nvme", "NVMe")?>
  <?=mk_option(_var($disk,'smType'), "-d sat", "SAT")?>
  <?=mk_option(_var($disk,'smType'), "-d scsi", "SCSI")?>
  <?=mk_option(_var($disk,'smType'), "-d 3ware", "3Ware")?>
  <?=mk_option(_var($disk,'smType'), "-d aacraid", "Adaptec")?>
  <?=mk_option(_var($disk,'smType'), "-d areca", "Areca")?>
  <?=mk_option(_var($disk,'smType'), "-d hpt", "HighPoint")?>
  <?=mk_option(_var($disk,'smType'), "-d cciss", "HP cciss")?>
  <?=mk_option(_var($disk,'smType'), "-d marvell", "Marvell")?>
  <?=mk_option(_var($disk,'smType'), "-d megaraid", "MegaRAID")?>
  </select>
  <input type="text" name="smPort1" value="<?=_var($disk,'smPort1')?>" class="option"><select name="smPort1" class="narrow option" disabled></select>
  <input type="text" name="smPort2" value="<?=_var($disk,'smPort2')?>" class="option"><select name="smPort2" class="narrow option" disabled></select>
  <input type="text" name="smPort3" value="<?=_var($disk,'smPort3')?>" class="option"><select name="smPort3" class="narrow option" disabled></select><span id="devtext">/dev/</span>
  <input type="text" name="smDevice" value="<?=_var($disk,'smDevice')?>" class="option" placeholder="<?=$dev?>"><span id="helptext">_(enter disk index and device name as applicable to your controller)_</span>

:info_controller_type_help:

_(SMART attribute notifications)_:
: <input type="text" name="smCustom" value="<?=$disk['smCustom']??$var['smCustom']??''?>" class="narrow">_(Custom attributes (use comma to separate numbers))_

<?for ($x=0; $x<count($preselect); $x++):?>
&nbsp;
: <input type="checkbox" name="at<?=$x?>" value="<?=_var($preselect[$x],'code')?>"<?=in_array(_var($preselect[$x],'code'),$events)?' checked':''?>><span class="code">_(Attribute)_ = <?=_var($preselect[$x],'code')?></span><?=_var($preselect[$x],'text')?>
<?endfor;?>

:info_attribute_notifications_help:

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>
<?endif?>

<div id="dialogRenamePool" style="display:none"></div>

<div id="templatePopupPool" style="display:none">
<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="return validate(this.poolName.value)">
<input type="hidden" name="poolNameOrig" value="<?=$name?>">
<input type="hidden" name="changeSlots" value="apply">
_(Name)_:
: <input type="text" name="poolName" maxlength="40" value="<?=$name?>">

</form>
</div>

<form name="deletepool" method="POST" action="/update.htm" target="progressFrame" style="display:none">
<input type="hidden" name="changeSlots" value="apply">
<input type="hidden" name="poolName" value="<?=$name?>">
<input type="hidden" name="poolSlots" value="0">
<input type='hidden' name='csrf_token' value='<?=_var($var,'csrf_token')?>'>
</form>

<script>
$(function() {
<?if (count($sheets)>1):?>
  var ctrl  = "<span class='status <?=$tabbed?'vhshift':'vshift'?>'><span class='waitmsg fa fa-circle-o-notch fa-span fa-fw' style='display:none;margin-right:8px'></span><a href='/<?=$path?>?name=<?=$prev?>' title='_(previous device)_'>";
      ctrl += "<button type='button' style='margin-right:4px' onclick='this.disabled=true;$(\".waitmsg\").show();'><i class='fa fa-chevron-left fa-fw'></i></button></a>";
      ctrl += "<a href='/<?=$path?>?name=<?=$next?>' title='_(next device)_'><button type='button' onclick='this.disabled=true;$(\".waitmsg\").show();'><i class='fa fa-chevron-right fa-fw'></i></button></a></span>";
<?if ($tabbed):?>
  $('.tabs').append(ctrl);
<?else:?>
  $('div[class=title]:first').append(ctrl);
<?endif;?>
<?endif;?>
<?if (!diskStatus('_NP')):?>
  var form = document.smart_settings;
<?if (!isset($disk['smType'])):?>
  form.smType.selectedIndex = 0;
<?endif;?>
  setGlue(form,false);
<?endif;?>
  var status = true;
  if ($.cookie('autosize-<?=$tag?>')) $('#autosize').show();
  if ($.cookie('btrfs-balance-<?=$tag?>')) status = btrfsBalance($.cookie('btrfs-balance-<?=$tag?>'));
  if ($.cookie('btrfs-scrub-<?=$tag?>')) status = btrfsScrub($.cookie('btrfs-scrub-<?=$tag?>'));
  if ($.cookie('btrfs-check-<?=$tag?>')) status = btrfsCheck($.cookie('btrfs-check-<?=$tag?>'));
  if ($.cookie('zfs-scrub-<?=$tag?>')) status = zfsScrub($.cookie('zfs-scrub-<?=$tag?>'));
  if ($.cookie('zfs-resilver-<?=$tag?>')) status = zfsResilver($.cookie('zfs-resilver-<?=$tag?>'));
  if ($.cookie('rfs-check-<?=$tag?>')) status = rfsCheck($.cookie('rfs-check-<?=$tag?>'));
  if ($.cookie('xfs-check-<?=$tag?>')) status = xfsCheck($.cookie('xfs-check-<?=$tag?>'));
  if (status) {
    $.post('/webGui/include/FileSystemStatus.php',{cmd:'status',path:'<?=$tag?>'},function(a){
      var action = a.split(',');
      for (var i=0,busy; busy=action[i]; i++) {
        switch (busy) {
        case 'btrfs-balance':
          $.cookie('btrfs-balance-<?=$tag?>','/mnt/<?=$tag?>');
          btrfsBalance($.cookie('btrfs-balance-<?=$tag?>'));
          break;
        case 'btrfs-scrub':
          $.cookie('btrfs-scrub-<?=$tag?>','/mnt/<?=$tag?>');
          btrfsScrub($.cookie('btrfs-scrub-<?=$tag?>'));
          break;
        case 'btrfs-check':
          $.cookie('btrfs-check-<?=$tag?>','/mnt/<?=$tag?>');
          btrfsCheck($.cookie('btrfs-check-<?=$tag?>'));
          break;
        case 'zfs-scrub':
          $.cookie('zfs-scrub-<?=$tag?>','<?=$tag?>');
          zfsScrub($.cookie('zfs-scrub-<?=$tag?>'));
          break;
        case 'zfs-resilver':
          $.cookie('zfs-resilver-<?=$tag?>','<?=$tag?>');
          zfsResilver($.cookie('zfs-resilver-<?=$tag?>'));
          break;
        }
      }
    });
  }
  var groups = <?=_var($disk,'fsGroups',0)?:0?>;
  var width = <?=_var($disk,'fsWidth',0)?:0?>;
  var devices = (groups==0 || width==0) ? <?=_var($disk,'devices',0)?:0?> : groups * width;
  selectDiskFsProfile(devices,width,true);
<?if (fsType('btrfs')):?>
  presetBTRFS(document.balance_schedule,'#balance-hour');
  presetBTRFS(document.scrub_schedule,'#scrub-hour');
<?elseif (fsType('zfs')):?>
  presetZFS(document.scrub_schedule,'#scrub-hour');
<?endif;?>
});
</script>

                )

            [Diagnostics] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => Diagnostics
                    [Icon] => icon-diagnostics
                    [Tag] => tv
                    [file] => webGui/Diagnostics.page
                    [root] => webGui
                    [name] => Diagnostics
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$zip = htmlspecialchars(str_replace(' ','_',strtolower($var['NAME'])));
?>
<style>
ul,li{margin:0;padding-top:0;padding-bottom:0}
pre.pre{margin:30px 0}
pre>p{margin:0;padding:0}
pre#swaltext{height:600px!important}
@media (max-width:960px){pre#swaltext{height:400px!important}}
@media (max-width:960px){.sweet-alert.nchan{height:600px;width:900px;margin-left:-470px}}
@media (max-height:768px){pre#swaltext{height:400px!important}}
@media (max-height:768px){.sweet-alert.nchan{height:600px;width:900px;margin-left:-470px}}
</style>

<script>
var diagnosticsFile = "";
var nchan_diagnostics = new NchanSubscriber('/sub/diagnostics',{subscriber:'websocket'});

nchan_diagnostics.on('message', function(data) {
  if (data == '_DONE_') {
    nchan_diagnostics.stop();
    $('.sweet-alert').hide('fast').removeClass('nchan');
    swal.close();
    location = diagnosticsFile;
    setTimeout(cleanUp,4000);
  } else if (data) {
    let box = $('pre#swaltext');
    box.html(box.html()+'<br>'+data).scrollTop(box[0].scrollHeight);
  }
});

function cleanUp() {
  if (document.hasFocus()) {
    $.post('/webGui/include/Download.php',{cmd:'delete',file:diagnosticsFile});
    $("#download").attr("disabled",false);
    diagnosticsFile = "";
  } else {
    setTimeout(cleanUp,2000);
  }
}

function zipfile(){
  var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
  var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0,-1);
  return '<?=$zip?>-diagnostics-'+localISOTime.substr(0,16).replace(/[-:]/g,'').replace('T','-')+'.zip';
}

function diagnostics(file) {
  var anonymize = $('#anonymize').is(':checked') ? '' : '-a';
  nchan_diagnostics.start();
  $.post('/webGui/include/Download.php',{cmd:'diag',file:file,anonymize:anonymize},function(zip) {
    if (zip) {
      diagnosticsFile = zip;
      swal({title:"_(Downloading)_...",text:"/boot/logs"+zip+"<hr><pre id='swaltext'></pre>",html:true,animation:'none',showConfirmButton:false});
      $('.sweet-alert').addClass('nchan');
      $('button.confirm').prop('disabled',true);
    } else {
      nchan_diagnostics.stop();
      $("#download").attr("disabled",false);
    }
  });
}
</script>

:diagnostics_1_plug:
This utility is used for troubleshooting purposes. It will collect all of the system information and configuration files, and package these files in a single ZIP file which can be saved locally.
Subsequently, this file can be included in your correspondence with Limetech or the Unraid forum.

This will help others to quickly get the inside information of your system and provide better support to your problem. The following information
and configuration files are collected:
:end

<pre class="pre" markdown="1">
:diagnostics_2_plug:
+ */config*
  <br>copy all *\*.cfg files*, *go* file and the *super.dat* file. These are configuration files.
+ */config/shares*
  <br>copy all *\*.cfg* files. These are user share settings files.
+ *Syslog file(s)*
  <br>copy the current *syslog* file and any previous existing *syslog* files.
+ *System*
  <br>save output of the following commands:
  <br>lsscsi, lspci, lsusb, free, lsof, ps, ethtool & ifconfig.
  <br>display of iommu groups.
  <br>display of command line parameters (e.g. pcie acs override, pci stubbing, etc).
  <br>save system variables.
+ *SMART reports*
  <br>save a SMART report of each individual disk present in your system.
+ *Docker*
  <br>save files *docker.log*, *libvirtd.log*, *libvirt/qemu/\*.log* and *vfio-pci*.
:end
</pre>

:diagnostics_3_plug:
Clicking **Download** will start the collection process and then instruct your browser to save the zip file locally.

*No personal information such as user names, passwords, or any other file contents not specified above is included
by Unraid OS; however, your server name, IP address, and user share names* **will** *be included.*

*Note that 3rd-party plugins **may** or may not store personal information in plugin-specific configuration files and/or output
to the system log.*

*Use* **Anonymize diagnostics** *when publishing the diagnostics file in the public forum. In private communication with Limetech it is recommended to uncheck this setting and capture all information unaltered.*
:end

<input id='download' type="button" value="_(Download)_" onclick="$(this).attr('disabled',true);diagnostics(zipfile())"><input type="button" value="_(Done)_" onclick="done()"><input type="checkbox" id="anonymize" checked>_(Anonymize diagnostics)_

                )

            [Disk] => Array
                (
                    [Type] => xmenu
                    [file] => webGui/Disk.page
                    [root] => webGui
                    [name] => Disk
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function clone_list($disk) {
  global $pools;
  return strpos($disk['status'],'_NP')===false && ($disk['type']=='Data' || in_array($disk['name'],$pools));
}
if (count($pages)==2) $tabbed = false;
$refs = []; $n = 0;

foreach ($disks as $ref) {
  if ($ref['type']!='Data' && !in_array($ref['name'],$pools)) continue;
  if ($ref['fsColor']=='grey-off') continue;
  $refs[] = $ref['name'];
  if ($ref['name']==$name) $i = $n;
  $n++;
}
$end  = count($refs)-1;
$prev = urlencode($i>0 ? $refs[$i-1] : $refs[$end]);
$next = urlencode($i<$end ? $refs[$i+1] : $refs[0]);
?>
<style>
div.clone1{position:absolute;right:0;margin-top:0}
div.clone2{position:absolute;right:0;margin-top:48px}
<?if ($themes1):?>
span.wrap{display:inline-block;width:128px}
select.clone{min-width:123px;margin-right:0}
<?else:?>
span.wrap{display:inline-block;width:150px}
select.clone{min-width:145px;margin-right:0}
<?endif;?>
input.clone{margin-left:8px;margin-right:0}
span.clone,i.clone{margin-right:4px}
</style>
<script>
function toggleButton(button,id) {
  var disabled = true;
  switch (id) {
  case false:
  case true:
    disabled = id;
    break;
  default:
    $('select#'+id+' option').each(function(){if ($(this).prop('selected')==true) disabled = false;});
  }
  $('input#'+button).prop('disabled',disabled);
}

var ctrl = "<span class='ctrl2 status <?=$tabbed?'vhshift':'vshift'?>'><a href='/Shares/Disk?name=<?=$prev?>' title='previous disk share'><button type='button' style='margin-right:4px'><i class='fa fa-chevron-left fa-fw'></i></button></a><a href='/Shares/Disk?name=<?=$next?>' title='next disk share'><button type='button'><i class='fa fa-chevron-right fa-fw'></i></button></a></span>";

$(function() {
<?if ($tabbed):?>
  $('.tabs').append(ctrl);
<?else:?>
  $('div[class=title]:first').append(ctrl);
<?endif;?>
});
</script>

                )

            [DiskList] => Array
                (
                    [Menu] => Shares:2
                    [Title] => Disk Shares
                    [Tag] => user-circle-o
                    [Cond] => _var($var,'fsState')!='Stopped' && _var($var,'shareDisk')!='no'
                    [file] => webGui/DiskList.page
                    [root] => webGui
                    [name] => DiskList
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style>
table.share_status thead tr td:first-child{width:15%}
table.share_status thead tr td:nth-child(n+3){width:10%}
</style>

<table class="share_status">
<thead><tr><td>_(Name)_</td><td>_(Comment)_</td><td>_(SMB)_</td><td>_(NFS)_</td><td>_(Type)_</td><td>_(Size)_</td><td>_(Free)_</td></tr></thead>
<tbody id="disk_list"></tbody>
</table>

<input id="compute-disks" type="button" value="_(Compute All)_" onclick="$(this).prop('disabled',true);diskList('',-1)">

:disk_list_help:

<script>
function diskList(name,all) {
  timers.diskList = setTimeout(function(){$('div.spinner.fixed').show();},500);
  $.post('/webGui/include/DiskList.php',{compute:name,path:"<?=rawurlencode($path)?>",all:all},function(data){
    clearTimeout(timers.diskList);
    $('div.spinner.fixed').hide();
    $('#disk_list').html(data);
    if (all!=1) $('#compute-disks').prop('disabled',!data||data.indexOf('colspan=')!=-1);
  });
}
function computeDisk(name,status) {
  status.html("<i class='fa fa-circle-o-notch fa-spin'></i> _(Please wait)_...");
  diskList(name,1);
}
$(diskList('',0));
</script>

                )

            [DiskSettings] => Array
                (
                    [Menu] => OtherSettings
                    [Title] => Disk Settings
                    [Icon] => icon-disks
                    [Tag] => icon-disk
                    [file] => webGui/DiskSettings.page
                    [root] => webGui
                    [name] => DiskSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/webGui/include/Preselect.php";
$events = explode('|',$var['smEvents'] ?? $numbers);

function displayTemp($temp) {
  global $display;
  return (is_numeric($temp) && _var($display,'unit')=='F') ? round(9/5*$temp)+32 : $temp;
}
?>
<style>
span.code{display:inline-block;width:186px}
</style>
<script>
function doDispatch(form) {
  var fields = {};
<?if (_var($display,'unit')=='F'):?>
  form.display_hot.value = Math.round((form.display_hot.value-32)*5/9);
  form.display_max.value = Math.round((form.display_max.value-32)*5/9);
<?endif;?>
  fields['#cfg'] = "/boot/config/plugins/dynamix/dynamix.cfg";
  fields['#cleanup'] = true;
  $(form).find('input[name^="display_"]').each(function(){fields[$(this).attr('name')] = $(this).val(); $(this).prop('disabled',true);});
  $.post('/webGui/include/Dispatcher.php',fields);
}
function prepareDiskSettings(form) {
  var events = [];
  for (var i=0; i < <?=count($preselect)?>; i++) {
    if (form.elements['at'+i].checked) events.push(form.elements['at'+i].value);
    form.elements['at'+i].disabled = true;
  }
  var custom = form.smCustom.value.trim();
  var custom = custom.length ? custom.split(',') : [];
  for (var i=0; i < custom.length; i++) events.push(custom[i].trim());
  form.smEvents.value = events.join('|');
  if (form.smEvents.value == '<?=$numbers?>') form.smEvents.value = '';
  if (form.smLevel.value == 1.00) form.smLevel.value = '';
}
function setIndex(form) {
  form.smIndex.value = form.smType.selectedIndex;
}
</script>

<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="doDispatch(this)">
_(Enable auto start)_:
: <select name="startArray" size="1">
  <?=mk_option($var['startArray'], "no", _('No'))?>
  <?=mk_option($var['startArray'], "yes", _('Yes'))?>
  </select>

:disk_enable_autostart_help:

_(Default spin down delay)_:
: <select name="spindownDelay" size="1">
  <?=mk_option($var['spindownDelay'], "0",  _('Never'))?>
  <?=mk_option($var['spindownDelay'], "15", "15 "._('minutes'))?>
  <?=mk_option($var['spindownDelay'], "30", "30 "._('minutes'))?>
  <?=mk_option($var['spindownDelay'], "45", "45 "._('minutes'))?>
  <?=mk_option($var['spindownDelay'], "1",  "1 "._('hour'))?>
  <?=mk_option($var['spindownDelay'], "2",  "2 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "3",  "3 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "4",  "4 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "5",  "5 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "6",  "6 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "7",  "7 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "8",  "8 "._('hours'))?>
  <?=mk_option($var['spindownDelay'], "9",  "9 "._('hours'))?>
  </select>

:disk_spindown_delay_help:

_(Enable spinup groups)_:
: <select name="spinupGroups" size="1">
  <?=mk_option($var['spinupGroups'], "no", _('No'))?>
  <?=mk_option($var['spinupGroups'], "yes", _('Yes'))?>
  </select>

:disk_spinup_groups_help:

_(Default file system)_:
: <select name="defaultFsType" size="1">
  <?=mk_option($var['defaultFsType'], "xfs", _('xfs'));?>
  <?=mk_option($var['defaultFsType'], "zfs", _('zfs'));?>
  <?=mk_option($var['defaultFsType'], "btrfs", _('btrfs'));?>
  <?=mk_option($var['defaultFsType'], "reiserfs", _('reiserfs'));?>
  <?=mk_option($var['defaultFsType'], "luks:xfs", _('xfs')." - "._('encrypted'));?>
  <?=mk_option($var['defaultFsType'], "luks:zfs", _('zfs')." - "._('encrypted'));?>
  <?=mk_option($var['defaultFsType'], "luks:btrfs", _('btrfs')." - "._('encrypted'));?>
  <?=mk_option($var['defaultFsType'], "luks:reiserfs", _('reiserfs')." - "._('encrypted'));?>
  </select>

:disk_default_file_system_help:

_(Shutdown time-out)_:
: <input type="text" name="shutdownTimeout" maxlength="10" value="<?=$var['shutdownTimeout']?>" class="narrow">

:disk_shutdown_timeout_help:

_(Tunable (poll_attributes))_:
: <input type="text" name="poll_attributes" maxlength="10" value="<?=$var['poll_attributes']?>" class="narrow"><?=_($var['poll_attributes_status'])?>

:disk_tunable_poll_attributes_help:

_(Tunable (enable NCQ))_:
: <select name="queueDepth" size="1">
  <?=mk_option($var['queueDepth'], "auto", _('Auto'))?>
  <?=mk_option($var['queueDepth'], "1", _('No'))?>
  </select>

:disk_tunable_enable_ncq_help:

_(Tunable (nr_requests))_:
: <input type="text" name="nr_requests" maxlength="10" value="<?=$var['nr_requests']?>" class="narrow"><?=_($var['nr_requests_status'])?>

:disk_tunable_nr_requests_help:

_(Tunable (scheduler))_:
: <select name="md_scheduler" size="1">
  <?=mk_option($var['md_scheduler'], "auto", _('Auto'))?>
  <?=mk_option($var['md_scheduler'], "mq-deadline", _('mq-deadline'))?>
  <?=mk_option($var['md_scheduler'], "kyber", _('kyber'))?>
  <?=mk_option($var['md_scheduler'], "bfq", _('bfq'))?>
  <?=mk_option($var['md_scheduler'], "none", _('none'))?>
  </select>

:disk_tunable_scheduler_help:

_(Tunable (md_num_stripes))_:
: <input type="text" name="md_num_stripes" maxlength="10" value="<?=$var['md_num_stripes']?>" class="narrow"><?=_($var['md_num_stripes_status'])?>

:disk_tunable_md_num_stripes_help:

_(Tunable (md_queue_limit))_:
: <input type="text" name="md_queue_limit" maxlength="10" value="<?=$var['md_queue_limit']?>" class="narrow"><?=_($var['md_queue_limit_status'])?>

:disk_tunable_md_queue_limit_help:

_(Tunable (md_sync_limit))_:
: <input type="text" name="md_sync_limit" maxlength="10" value="<?=$var['md_sync_limit']?>" class="narrow"><?=_($var['md_sync_limit_status'])?>

:disk_tunable_md_sync_limit_help:

_(Tunable (md_write_method))_:
: <select name="md_write_method" size="1">
  <?=mk_option($var['md_write_method'], "auto", _('Auto'))?>
  <?=mk_option($var['md_write_method'], "0", _('read/modify/write'))?>
  <?=mk_option($var['md_write_method'], "1", _('reconstruct write'))?>
  </select>

:disk_tunable_md_write_method_help:

_(Default warning disk utilization threshold)_ (%):
: <input type="number" min="0" max="100" name="display_warning" class="narrow" value="<?=_var($display,'warning')?>">

:disk_default_warning_utilization_help:

_(Default critical disk utilization threshold)_ (%):
: <input type="number" min="0" max="100" name="display_critical" class="narrow" value="<?=_var($display,'critical')?>">

:disk_default_critical_utilization_help:

_(Default warning disk temperature threshold)_ (&deg;<?=_var($display,'unit','C')?>):
: <input type="number" min="0" max="300" name="display_hot" class="narrow" value="<?=displayTemp(_var($display,'hot'))?>">

:disk_default_warning_temperature_help:

_(Default critical disk temperature threshold)_ (&deg;<?=_var($display,'unit','C')?>):
: <input type="number" min="0" max="300" name="display_max" class="narrow" value="<?=displayTemp(_var($display,'max'))?>">

:disk_default_critical_temperature_help:

&nbsp;
: <input type="submit" name="changeDisk" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<div class="title"><span class="left"><i class="title fa fa-plus-square"></i>_(Global SMART Settings)_</span></div>

<form markdown="1" name="smart_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareDiskSettings(this)">
<input type="hidden" name="#file" value="/boot/config/smart-all.cfg">
<input type="hidden" name="#include" value="webGui/include/update.smart.php">
<input type="hidden" name="#cleanup" value="true">
<input type="hidden" name="#top" value="1">
<input type="hidden" name="smEvents" value="">
<input type="hidden" name="smIndex" value="0">
_(Default SMART notification value)_:
: <select name="smSelect" size="1">
  <?=mk_option(_var($var,'smSelect'), "0", _('Raw'))?>
  <?=mk_option(_var($var,'smSelect'), "1", _('Normalized'))?>
  </select>

:disk_default_smart_notification_help:

_(Default SMART notification tolerance level)_:
: <select name="smLevel" size="1">
  <?=mk_option(_var($var,'smLevel'), "1.00", _('Absolute'))?>
  <?=mk_option(_var($var,'smLevel'), "1.05", "5%")?>
  <?=mk_option(_var($var,'smLevel'), "1.10", "10%")?>
  <?=mk_option(_var($var,'smLevel'), "1.15", "15%")?>
  <?=mk_option(_var($var,'smLevel'), "1.20", "20%")?>
  <?=mk_option(_var($var,'smLevel'), "1.25", "25%")?>
  <?=mk_option(_var($var,'smLevel'), "1.50", "50%")?>
  </select>

:disk_default_smart_tolerance_help:

_(Default SMART controller type)_:
: <select name="smType" size="1" onchange="setIndex(this.form)">
  <?=mk_option(_var($var,'smType'), "", _('Automatic'))?>
  <?=mk_option(_var($var,'smType'), "-d ata", "ATA")?>
  <?=mk_option(_var($var,'smType'), "-d nvme", "NVMe")?>
  <?=mk_option(_var($var,'smType'), "-d sat", "SAT")?>
  <?=mk_option(_var($var,'smType'), "-d scsi", "SCSI")?>
  <?=mk_option(_var($var,'smType'), "-d 3ware", "3Ware")?>
  <?=mk_option(_var($var,'smType'), "-d aacraid", "Adaptec")?>
  <?=mk_option(_var($var,'smType'), "-d areca", "Areca")?>
  <?=mk_option(_var($var,'smType'), "-d hpt", "HighPoint")?>
  <?=mk_option(_var($var,'smType'), "-d cciss", "HP cciss")?>
  <?=mk_option(_var($var,'smType'), "-d marvell", "Marvell")?>
  <?=mk_option(_var($var,'smType'), "-d megaraid", "MegaRAID")?>
  </select>

:disk_default_smart_controller_help:

_(Default SMART attribute notifications)_:
: <input type="text" name="smCustom" value="<?=_var($var,'smCustom')?>" class="narrow">_(Custom attributes (use comma to separate numbers))_

<?for ($x = 0; $x < count($preselect); $x++):?>
&nbsp;
: <input type="checkbox" name="at<?=$x?>" value="<?=_var($preselect[$x],'code')?>"<?=in_array(_var($preselect[$x],'code'),$events)?' checked':''?>><span class="code">_(Attribute)_ = <?=_var($preselect[$x],'code')?></span><?=_var($preselect[$x],'text')?>
<?endfor;?>

:disk_default_smart_attribute_help:

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [DisplaySettings] => Array
                (
                    [Menu] => UserPreferences
                    [Title] => Display Settings
                    [Icon] => icon-display
                    [Tag] => desktop
                    [file] => webGui/DisplaySettings.page
                    [root] => webGui
                    [name] => DisplaySettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$void = "<img src='/webGui/images/banner.png' id='image' width='330' height='30' onclick='$(&quot;#drop&quot;).click()' style='cursor:pointer' title='_(Click to select PNG file)_'>";
$icon = "<i class='fa fa-trash top' title='_(Restore default image)_' onclick='restore()'></i>";
$plugins = '/var/log/plugins';

require_once "$docroot/plugins/dynamix.plugin.manager/include/PluginHelpers.php";
?>
<style>
span#dropbox{margin-right:20px;}
i.top{position:relative;padding-left:4px;cursor:pointer;}
select.fixed{max-width:166px}
</style>

<script src="<?autov('/webGui/javascript/jquery.filedrop.js')?>"></script>
<script>
var path = '/boot/config/plugins/dynamix';
var filename = '';

function restore() {
  // restore original image and activate APPLY button
  $('#dropbox').html("<?=$void?>");
  $('select[name="banner"]').trigger('change');
  filename = 'reset';
}
function upload() {
  // save or delete upload when APPLY is pressed
  if (filename=='reset') {
    $.post("/webGui/include/FileUpload.php",{cmd:'delete',path:path,filename:'banner.png'});
  } else if (filename) {
    $.post("/webGui/include/FileUpload.php",{cmd:'save',path:path,filename:filename,output:'banner.png'});
  }
}
function presetTime(form) {
  var system = form.date.selectedIndex==0;
  if (system) form.time.selectedIndex = 0;
  form.time.disabled = system;
}
function presetBanner(form) {
  if (form.banner.selectedIndex == 0) $('.js-bannerSettings').hide(); else $('.js-bannerSettings').show();
}
function presetRefresh(form) {
  for (var i=0,item; item=form.refresh.options[i]; i++) item.value *= -1;
}
function presetPassive(index) {
  if (index==0) $('#passive').hide(); else $('#passive').show();
}
function updateDirection(lang) {
  // var rtl = ['ar_AR','fa_FA'].includes(lang) ? "dir='rtl' " : "";
  // RTL display is not giving the desired results, we keep LTR
  var rtl = "";
  $('input[name="rtl"]').val(rtl);
}

$(function() {
  var dropbox = $('#dropbox');
  // attach the drag-n-drop feature to the 'dropbox' element
  dropbox.filedrop({
    maxfiles:1,
    maxfilesize:512, // KB
    data: {"csrf_token": "<?=$var['csrf_token']?>"},
    url:'/webGui/include/FileUpload.php',
    beforeEach:function(file) {
      if (!file.type.match(/^image\/.*/)) {
        swal({title:"_(Warning)_",text:"_(Only PNG images are allowed)_!",type:"warning",html:true,confirmButtonText:"_(Ok)_"});
        return false;
      }
    },
    error: function(err, file, i) {
      switch (err) {
      case 'BrowserNotSupported':
        swal({title:"_(Browser error)_",text:"_(Your browser does not support HTML5 file uploads)_!",type:"error",html:true,confirmButtonText:"_(Ok)_"});
        break;
      case 'TooManyFiles':
        swal({title:"_(Too many files)_",text:"_(Please select one file only)_!",html:true,type:"error"});
        break;
      case 'FileTooLarge':
        swal({title:"_(File too large)_",text:"_(Maximum file upload size is 512K)_ (524,288 _(bytes)_)",type:"error",html:true,confirmButtonText:"_(Ok)_"});
        break;
      }
    },
    uploadStarted:function(i,file,count) {
      var image = $('img', $(dropbox));
      var reader = new FileReader();
      image.width = 330;
      image.height = 30;
      reader.onload = function(e){image.attr('src',e.target.result);};
      reader.readAsDataURL(file);
    },
    uploadFinished:function(i,file,response) {
      if (response == 'OK 200') {
        if (!filename || filename=='reset') $(dropbox).append("<?=$icon?>");
        $('select[name="banner"]').trigger('change');
        filename = file.name;
      } else {
        swal({title:"_(Upload error)_",text:response,type:"error",html:true,confirmButtonText:"_(Ok)_"});
      }
    }
  });
  // simulate a drop action when manual file selection is done
  $('#drop').bind('change', function(e) {
    var files = e.target.files;
    if ($('#dropbox').triggerHandler({type:'drop',dataTransfer:{files:files}})==false) e.stopImmediatePropagation();
  });
  presetTime(document.display_settings);
  presetBanner(document.display_settings);
});
</script>

:display_settings_help:

<form markdown="1" name="display_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="upload()">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="display">
<input type="hidden" name="rtl" value="<?=$display['rtl']?>">
_(Language)_:
: <select name="locale" class="fixed" onchange="updateDirection(this.value)">
<?echo mk_option($display['locale'], "","English");
  foreach (glob("$plugins/lang-*.xml",GLOB_NOSORT) as $xml_file) {
    $lang = language('Language', $xml_file);
    $home = language('LanguageLocal', $xml_file);
    $name = language('LanguagePack', $xml_file);
    echo mk_option($display['locale'], $name, "$home ($lang)");
  }
?></select>

_(Font size)_:
: <select name="font" id='font'>
  <?=mk_option($display['font'], "50",_('Very small'))?>
  <?=mk_option($display['font'], "56.25",_('Small'))?>
  <?=mk_option($display['font'], "",_('Normal'))?>
  <?=mk_option($display['font'], "68.75",_('Large'))?>
  <?=mk_option($display['font'], "75",_('Very large'))?>
  <?=mk_option($display['font'], "80",_('Huge'))?>
  </select>

:display_font_size_help:

_(Terminal font size)_:
: <select name="tty" id="tty">
  <?=mk_option($display['tty'], "11",_('Very small'))?>
  <?=mk_option($display['tty'], "13",_('Small'))?>
  <?=mk_option($display['tty'], "15",_('Normal'))?>
  <?=mk_option($display['tty'], "17",_('Large'))?>
  <?=mk_option($display['tty'], "19",_('Very large'))?>
  <?=mk_option($display['tty'], "21",_('Huge'))?>
  </select>

:display_tty_size_help:

_(Date format)_:
: <select name="date" onchange="presetTime(this.form)">
  <?=mk_option($display['date'], "%c","_(System Setting)_")?>
  <?=mk_option($display['date'], "%A, %Y %B %e",_('Day, YYYY Month D'))?>
  <?=mk_option($display['date'], "%A, %e %B %Y",_('Day, D Month YYYY'))?>
  <?=mk_option($display['date'], "%A, %B %e, %Y",_('Day, Month D, YYYY'))?>
  <?=mk_option($display['date'], "%A, %m/%d/%Y",_('Day, MM/DD/YYYY'))?>
  <?=mk_option($display['date'], "%A, %d-%m-%Y",_('Day, DD-MM-YYYY'))?>
  <?=mk_option($display['date'], "%A, %d.%m.%Y",_('Day, DD.MM.YYYY'))?>
  <?=mk_option($display['date'], "%A, %Y-%m-%d",_('Day, YYYY-MM-DD'))?>
  </select>

_(Time format)_:
: <select name="time">
  <?=mk_option($display['time'], "%I:%M %p",_('12 hours'))?>
  <?=mk_option($display['time'], "%R",_('24 hours'))?>
  </select>

_(Number format)_:
: <select name="number">
  <?=mk_option($display['number'], ".,",_('[D] dot : [G] comma'))?>
  <?=mk_option($display['number'], ". ",_('[D] dot : [G] space'))?>
  <?=mk_option($display['number'], ".",_('[D] dot : [G] none'))?>
  <?=mk_option($display['number'], ",.",_('[D] comma : [G] dot'))?>
  <?=mk_option($display['number'], ", ",_('[D] comma : [G] space'))?>
  <?=mk_option($display['number'], ",",_('[D] comma : [G] none'))?>
  </select>

_(Number scaling)_:
: <select name="scale">
  <?=mk_option($display['scale'], "-1",_('Automatic'))?>
  <?=mk_option($display['scale'], "0",_('Disabled'))?>
  <?=mk_option($display['scale'], "1",_('KB'))?>
  <?=mk_option($display['scale'], "2",_('MB'))?>
  <?=mk_option($display['scale'], "3",_('GB'))?>
  <?=mk_option($display['scale'], "4",_('TB'))?>
  <?=mk_option($display['scale'], "5",_('PB'))?>
  </select>

_(Page view)_:
: <select name="tabs">
  <?=mk_option($display['tabs'], "0",_('Tabbed'))?>
  <?=mk_option($display['tabs'], "1",_('Non-tabbed'))?>
  </select>

:display_page_view_help:

_(Placement of Users menu)_:
: <select name="users">
  <?=mk_option($display['users'], "Tasks:3",_('Header menu'))?>
  <?=mk_option($display['users'], "UserPreferences",_('Settings menu'))?>
  </select>

:display_users_menu_help:

_(Listing height)_:
: <select name="resize">
  <?=mk_option($display['resize'], "0",_('Automatic'))?>
  <?=mk_option($display['resize'], "1",_('Fixed'))?>
  </select>

:display_listing_height_help:

_(Display device name)_:
: <select name="raw">
  <?=mk_option($display['raw'], "",_('Normalized'))?>
  <?=mk_option($display['raw'], "1",_('Raw'))?>
  </select>

_(Display world-wide-name in device ID)_:
: <select name="wwn">
  <?=mk_option($display['wwn'], "0",_('Disabled'))?>
  <?=mk_option($display['wwn'], "1",_('Automatic'))?>
  </select>

:display_wwn_device_id_help:

_(Display array totals)_:
: <select name="total">
  <?=mk_option($display['total'], "0",_('No'))?>
  <?=mk_option($display['total'], "1",_('Yes'))?>
  </select>

_(Show array utilization indicator)_:
: <select name="usage">
  <?=mk_option($display['usage'], "0",_('No'))?>
  <?=mk_option($display['usage'], "1",_('Yes'))?>
  </select>

_(Temperature unit)_:
: <select name="unit">
  <?=mk_option($display['unit'], "C",_('Celsius'))?>
  <?=mk_option($display['unit'], "F",_('Fahrenheit'))?>
  </select>

:display_temperature_unit_help:

_(Show Dashboard apps)_:
: <select name="dashapps">
  <?=mk_option($display['dashapps'], "icons",_('Docker + VMs'))?>
  <?=mk_option($display['dashapps'], "docker",_('Docker only'))?>
  <?=mk_option($display['dashapps'], "vms",_('VMs only'))?>
  <?=mk_option($display['dashapps'], "none",_('None'))?>
  </select>

_(Dynamix color theme)_:
: <select name="theme">
  <?foreach (glob("$docroot/webGui/styles/dynamix-*.css") as $themes):?>
  <?$theme = substr(basename($themes,'.css'),8);?>
  <?=mk_option($display['theme'], $theme, _(ucfirst($theme)))?>
  <?endforeach;?>
  </select>

_(Used / Free columns)_:
: <select name="text">
  <?=mk_option($display['text'], "0",_('Text'))?>
  <?=mk_option($display['text'], "1",_('Bar (gray)'))?>
  <?=mk_option($display['text'], "2",_('Bar (color)'))?>
  <?=mk_option($display['text'], "10",_('Text - Bar (gray)'))?>
  <?=mk_option($display['text'], "20",_('Text - Bar (color)'))?>
  <?=mk_option($display['text'], "11",_('Bar (gray) - Text'))?>
  <?=mk_option($display['text'], "21",_('Bar (color) - Text'))?>
  </select>

_(Header custom text color)_:
: <input type="text" class="narrow" name="header" value="<?=$display['header']?>" maxlength="6" pattern="([0-9a-fA-F]{3}){1,2}" title="_(HTML color code of 3 or 6 hexadecimal digits)_">

:display_custom_text_color_help:

_(Header custom secondary text color)_:
: <input type="text" class="narrow" name="headermetacolor" value="<?=$display['headermetacolor']?>" maxlength="6" pattern="([0-9a-fA-F]{3}){1,2}" title="_(HTML color code of 3 or 6 hexadecimal digits)_">

_(Header custom background color)_:
: <input type="text" class="narrow" name="background" value="<?=$display['background']?>" maxlength="6" pattern="([0-9a-fA-F]{3}){1,2}" title="_(HTML color code of 3 or 6 hexadecimal digits)_">

:display_custom_background_color_help:

_(Header show description)_:
: <select name="headerdescription">
  <?=mk_option($display['headerdescription'], "yes",_('Yes'))?>
  <?=mk_option($display['headerdescription'], "no",_('No'))?>
  </select>

_(Show banner)_:
: <select name="banner" onchange="presetBanner(this.form)">
  <?=mk_option($display['banner'], "",_('No'))?>
  <?=mk_option($display['banner'], "image",_('Yes'))?>
  </select>

<div class="js-bannerSettings" markdown="1" style="display:none">
_(Custom banner)_:
<input type="hidden" name="#custom" value="">
: <span id="dropbox">
<?if (file_exists($banner)):?>
  <img src="<?=autov($banner)?>" width="330" height="30" onclick="$('#drop').click()" style="cursor:pointer" title="_(Click to select PNG file)_"><?=$icon?>
<?else:?>
  <?=$void?>
<?endif;?>
  </span><em>_(Drag-n-drop a PNG file or click the image at the left)_.</em><input type="file" id="drop" accept="image/*" style="display:none">

:display_custom_banner_help:
</div>

<div class="js-bannerSettings" markdown="1" style="display:none">
_(Show banner background color fade)_:
: <select name="showBannerGradient">
  <?=mk_option($display['showBannerGradient'], "no",_('No'))?>
  <?=mk_option($display['showBannerGradient'], "yes",_('Yes'))?>
  </select>
</div>

<input type="submit" name="#default" value="_(Default)_" onclick="filename='reset'">
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [Eth0] => Array
                (
                    [Menu] => NetworkSettings:100
                    [Title] => _(Interface)_ eth0
                    [Tag] => icon-ethernet
                    [file] => webGui/Eth0.page
                    [root] => webGui
                    [name] => Eth0
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$members = parse_ini_file('state/network.ini',true);

$build = false;
$template = "$docroot/webGui/EthX.page";
$ini = '/var/local/emhttp/network.ini';

$validIP4 = "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}";
$validIP6 = "(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(:|([0-9a-fA-F]{1,4}:)+):(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?)";
$width    = [166,300];

// get available ethernet ports (excluding eth0)
exec("ls --indicator-style=none /sys/class/net|grep -P '^eth[1-9][0-9]*$'",$ports);

function locked($source,$port) {
  global $members;
  foreach ($members as $member => $value) {
    if ($member == $source) continue;
    if ($value['BONDING']=='yes' && in_array($port,explode(',',$value['BONDNICS']))) return $value['BONDNAME'].' '.$member;
    if ($value['BRIDGING']=='yes' && in_array($port,explode(',',$value['BRNICS']))) return $value['BRNAME'].' '.$member;
  }
  return false;
}
function vlanID($cfg) {
  return array_filter($cfg,function($key){return strpos($key,'VLANID:')===0;},ARRAY_FILTER_USE_KEY);
}
function index($key) {
  return filter_var($key,FILTER_SANITIZE_NUMBER_INT);
}
// remove non-existing ethernet ports
foreach (glob("$docroot/webGui/Eth[1-9]*.page",GLOB_NOSORT) as $port) {
  if (!in_array(strtolower(basename($port,'.page')), $ports)) {
    @unlink($port);
    $build = true;
  }
}
// add new ethernet ports
foreach ($ports as $ethX) {
  $file = "$docroot/webGui/".ucfirst($ethX).".page";
  if (!file_exists($file)) {
    $X = filter_var($ethX,FILTER_SANITIZE_NUMBER_INT);
    file_put_contents($file,str_replace(['parentname:nnn','tabX','bondX','brX','ethX'],['NetworkSettings:'.($X+100),'tab'.($X+1),'bond'.$X,'br'.$X,$ethX],file_get_contents($template)));
    $build = true;
  }
}
// enable interface only when VMs and Docker are stopped
$service = exec("pgrep libvirt") ? _('VM manager') : '';
$service .= exec("pgrep docker") ? ($service ? ' '._('and').' ' : '')._('Docker service') : '';

// eth0 port status
$no_eth0 = exec("ip link show eth0|grep -Pom1 '(NO-CARRIER|state DOWN)'");

// get VLAN interfaces
$vlan_eth0 = $sort_eth0 = [];
if (isset($eth0)) foreach (vlanID($eth0) as $key => $val) {$vlan_eth0[] = index($key); $sort_eth0[] = (int)$val;}
array_multisort($sort_eth0,$vlan_eth0);
?>
<style>
span.red{color:#E68A00}
span.blue{color:#00529B}
span.green{color:#4F8A10}
span.vshift{margin-top:0!important}
input.gap{margin-right:6px}
input.form{font-size:1rem;padding:5px 10px;margin-left:10px}
div.shade-white{background-color:#ededed;margin-top:10px;padding:8px 0 3px 0}
div.shade-black{background-color:#212121;margin-top:10px;padding:8px 0 3px 0}
div.shade-azure{background-color:#edeaef;margin-top:10px;padding:8px 0 3px 0}
div.shade-gray{background-color:#121510;margin-top:10px;padding:8px 0 3px 0}
select.slim{min-width:47px;margin-left:4px}
input.slim{width:32px;margin-left:8px}
</style>
<script>
<?if ($build):?>
refresh(); // automatically include new ethernet ports
<?endif;?>
Array.prototype.same = function(){return this.sort().filter(function(v,i,o){return i&&v===o[i-1]?v:0;}).length;}

function prepareSettings(form) {
  var metrics = [];
  var metrics6 = [];
  if ($(form).find('input[name="#arg[1]"]').val()=='none') return true;
  $(form).find('input[name^="METRIC:"]').each(function(){if($(this).val()>0) metrics.push($(this).val());});
  $(form).find('input[name^="METRIC6:"]').each(function(){if($(this).val()>0) metrics6.push($(this).val());});
  if (metrics.same() || metrics6.same()) {
    swal({title:'Duplicate metrics',text:'List of default gateways contains duplicate metric values',type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  if (form.TYPE.value == 'access') {
    $(form).find('input[name^="VLANID:"]').prop('disabled',false).val('');
    $(form).find('input[name^="DESCRIPTION:"]').not('input[name$=":0"]').prop('disabled',false).val('');
    $(form).find('select[name^="PROTOCOL:"]').not('select[name$=":0"]').prop('disabled',false).val('');
    $(form).find('select[name^="USE_DHCP:"]').not('select[name$=":0"]').prop('disabled',false).val('');
    $(form).find('select[name^="USE_DHCP6:"]').not('select[name$=":0"]').prop('disabled',false).val('');
    $(form).find('input[name^="IPADDR:"]').not('input[name$=":0"]').prop('disabled',false).val('');
    $(form).find('input[name^="IPADDR6:"]').not('input[name$=":0"]').prop('disabled',false).val('');
    $(form).find('select[name^="NETMASK:"]').not('select[name$=":0"]').prop('disabled',false).val('');
    $(form).find('input[name^="NETMASK6:"]').not('input[name$=":0"]').prop('disabled',false).val('');
    $(form).find('select[name^="GATEWAY:"]').not('select[name$=":0"]').prop('disabled',false).val('');
    $(form).find('input[name^="GATEWAY6:"]').not('input[name$=":0"]').prop('disabled',false).val('');
    $(form).find('input[name^="METRIC:"]').not('input[name$=":0"]').prop('disabled',false).val('');
    $(form).find('select[name^="PRIVACY6:"]').not('select[name$=":0"]').prop('disabled',false).val('');
  } else {
    var vlans = [];
    $(form).find('input[name^="VLANID:"]').each(function(){vlans.push($(this).val());});
    if (vlans.same()) {
      swal({title:"_(VLAN assignment mismatch)_",text:"_(List of VLANs contains duplicate VLAN numbers)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
      return false;
    }
  }
  var member = '';
  for (var i=0,item; item=form.BONDNICS.options[i]; i++) {
    if (item.selected) {
      if (member.length) member += ',';
      member += item.value;
      item.selected = false;
    }
  }
  item = form.BONDNICS.options[0];
  item.value = member;
  item.selected = true;
  item.disabled = false;
  var member = '';
  for (var i=0,item; item=form.BRNICS.options[i]; i++) {
    if (item.selected) {
      if (member.length) member += ',';
      member += item.value;
      item.selected = false;
    }
  }
  item = form.BRNICS.options[0];
  item.value = form.BONDING.value=='yes' ? form.BONDNAME.value : member;
  item.selected = true;
  item.disabled = false;
  if (member.indexOf(',')>0) form.BRSTP.value = 'yes';
  $(form).find('select[name^="PROTOCOL:"]').each(function() {
    var protocol = $(this).val() || 'ipv4';
    var i = $(this).attr('name').split(':')[1];
    if (protocol == 'ipv6') {
      $(form).find('input[name="IPADDR:'+i+'"]').prop('disabled',false).val('');
      $(form).find('select[name="NETMASK:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="GATEWAY:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="METRIC:'+i+'"]').prop('disabled',false).val('');
      if (i==0) $(form).find('input[name^="DNS_SERVER"]').prop('disabled',false).val('');
    }
    if (protocol == 'ipv4') {
      $(form).find('input[name="IPADDR6:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="NETMASK6:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="GATEWAY6:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="METRIC6:'+i+'"]').prop('disabled',false).val('');
      $(form).find('select[name="PRIVACY6:'+i+'"]').prop('disabled',false).val('');
      if (i==0) $(form).find('input[name^="DNS6_SERVER"]').prop('disabled',false).val('');
    }
  });
  $(form).find('select[name^="USE_DHCP:"]').each(function() {
    var i = $(this).attr('name').split(':')[1];
    var protocol = $(form).find('select[name="PROTOCOL:'+i+'"]').val() || 'ipv4';
    var metric = $(form).find('input[name="METRIC:'+i+'"]').val();
    if ($(this).prop('disabled')==false && $(this).val()=='yes') {
      if (protocol != 'ipv6') {
        $(form).find('input[name="IPADDR:'+i+'"]').val('_(Obtaining IPv4 address)_...');
        $(form).find('input[name="GATEWAY:'+i+'"]').val(metric!='0'?'_(Obtaining IPv4 gateway)_...':'');
      }
    } else if (protocol != 'ipv6' && $(this).val()=='yes') {
      $(form).find('input[name="IPADDR:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="GATEWAY:'+i+'"]').prop('disabled',false).val('');
    }
  });
  $(form).find('select[name^="USE_DHCP6:"]').each(function() {
    var i = $(this).attr('name').split(':')[1];
    var protocol = $(form).find('select[name="PROTOCOL:'+i+'"]').val() || 'ipv4';
    var metric = $(form).find('input[name="METRIC6:'+i+'"]').val();
    if ($(this).prop('disabled')==false && $(this).val()=='yes') {
      if (protocol != 'ipv4') {
        $(form).find('input[name="IPADDR6:'+i+'"]').val('_(Obtaining IPv6 address)_...');
        $(form).find('input[name="GATEWAY6:'+i+'"]').val(metric!='0'?'_(Obtaining IPv6 gateway)_...':'');
      }
    } else if (protocol != 'ipv4' && $(this).val()=='yes') {
      $(form).find('input[name="IPADDR6:'+i+'"]').prop('disabled',false).val('');
      $(form).find('input[name="GATEWAY6:'+i+'"]').prop('disabled',false).val('');
    }
    if ($(this).val()!='yes') $(form).find('input[name="PRIVACY6:'+i+'"]').prop('disabled',false).val('');
  });
  if (form.DHCP_KEEPRESOLV !== undefined && form.DHCP_KEEPRESOLV.value=='no') {
    form.DHCP_KEEPRESOLV.disabled = false;
    var protocol = $(form).find('select[name="PROTOCOL:0"]').val() || 'ipv4';
    if (protocol != 'ipv6') $(form).find('input[name^="DNS_SERVER"]').val('_(Obtaining DNSv4 server)_...');
  }
  if (form.DHCP6_KEEPRESOLV !== undefined && form.DHCP6_KEEPRESOLV.value=='no') {
    form.DHCP6_KEEPRESOLV.disabled = false;
    var protocol = $(form).find('select[name="PROTOCOL:0"]').val() || 'ipv4';
    if (protocol != 'ipv4') $(form).find('input[name^="DNS6_SERVER"]').val('_(Obtaining DNSv6 server)_...');
  }
  setTimeout(refresh,25000);
  return true;
}
function selectProtocol(form,port,index) {
  if (index == null) {
    $(form).find('select[name^="PROTOCOL:"]').each(function() {
      var protocol = $(this).val() || 'ipv4';
      var i = $(this).attr('name').split(':')[1];
      var net4 = $('.'+'ipv4-'+port+'-'+i);
      var net6 = $('.'+'ipv6-'+port+'-'+i);
      var more4 = $('.'+'more-ipv4-'+port+'-'+i);
      var more6 = $('.'+'more-ipv6-'+port+'-'+i);
      switch (protocol) {
        case 'ipv4': net4.show(); net6.hide(); break;
        case 'ipv6': net4.hide(); net6.show(); break;
        case 'ipv4+ipv6': net4.show(); net6.show(); break;
      }
      if ($(form).find('select[name="USE_DHCP:'+i+'"]').val()) more4.show(); else more4.hide();
      if ($(form).find('select[name="USE_DHCP6:'+i+'"]').val()) more6.show(); else more6.hide();
      checkNetworkSettings(form,i,true);
    });
  } else {
    var protocol = $(form).find('select[name="PROTOCOL:'+index+'"]').val() || 'ipv4';
    var net4 = $('.'+'ipv4-'+port+'-'+index);
    var net6 = $('.'+'ipv6-'+port+'-'+index);
    var more4 = $('.'+'more-ipv4-'+port+'-'+index);
    var more6 = $('.'+'more-ipv6-'+port+'-'+index);
    switch (protocol) {
      case 'ipv4': net4.show(); net6.hide(); break;
      case 'ipv6': net4.hide(); net6.show(); break;
      case 'ipv4+ipv6': net4.show(); net6.show(); break;
    }
    if ($(form).find('select[name="USE_DHCP:'+index+'"]').val()) more4.show(); else more4.hide();
    if ($(form).find('select[name="USE_DHCP6:'+index+'"]').val()) more6.show(); else more6.hide();
    checkNetworkSettings(form,index);
    if (index==0) {
      checkDNSSettings(form);
      checkDNSSettings6(form);
    }
  }
}
function checkNetworkSettings(form,index,start) {
  var disabled4 = $(form).find('select[name="USE_DHCP:'+index+'"]').val()!='no';
  var disabled6 = $(form).find('select[name="USE_DHCP6:'+index+'"]').val()!='no';
  var protocol = $(form).find('select[name="PROTOCOL:'+index+'"]').val() || 'ipv4';
  if (protocol != 'ipv6') {
    $(form).find('input[name="IPADDR:'+index+'"]').prop('disabled',disabled4).prop('required',!disabled4);
    $(form).find('select[name="NETMASK:'+index+'"]').prop('disabled',disabled4);
    $(form).find('input[name="GATEWAY:'+index+'"]').prop('disabled',disabled4);
  }
  if (protocol != 'ipv4') {
    $(form).find('input[name="IPADDR6:'+index+'"]').prop('disabled',disabled6).prop('required',!disabled6);
    $(form).find('input[name="NETMASK6:'+index+'"]').prop('disabled',disabled6).prop('required',!disabled6);
    $(form).find('input[name="GATEWAY6:'+index+'"]').prop('disabled',disabled6);
    var privacy = $(form).find('select[name="PRIVACY6:'+index+'"]');
    privacy.prop('disabled',!disabled6);
  }
  if (index==0) {
    if (form.DHCP_KEEPRESOLV !== undefined) {
      if (!start) form.DHCP_KEEPRESOLV.value = disabled4 ? 'no' : 'yes';
      form.DHCP_KEEPRESOLV.disabled = !disabled4;
      checkDNSSettings(form);
    }
    if (form.DHCP6_KEEPRESOLV !== undefined) {
      if (!start) form.DHCP6_KEEPRESOLV.value = disabled6 ? 'no' : 'yes';
      form.DHCP6_KEEPRESOLV.disabled = !disabled6;
      checkDNSSettings6(form);
    }
  }
}
function checkDNSSettings(form) {
  var disabled = form.DHCP_KEEPRESOLV.value=='no';
  var protocol = $(form).find('select[name="PROTOCOL:0"]').val() || 'ipv4';
  if (protocol != 'ipv6') {
    form.DNS_SERVER1.disabled = disabled;
    form.DNS_SERVER1.required = !disabled;
    form.DNS_SERVER2.disabled = disabled;
    form.DNS_SERVER3.disabled = disabled;
    if (!form.DNS_SERVER2.value && disabled) $('#dnsserver2').hide(); else $('#dnsserver2').show();
    if (!form.DNS_SERVER3.value && disabled) $('#dnsserver3').hide(); else $('#dnsserver3').show();
  }
}
function checkDNSSettings6(form) {
  var disabled = form.DHCP6_KEEPRESOLV.value=='no';
  var protocol = $(form).find('select[name="PROTOCOL:0"]').val() || 'ipv4';
  if (protocol != 'ipv4') {
    form.DNS6_SERVER1.disabled = disabled;
    form.DNS6_SERVER2.disabled = disabled;
    form.DNS6_SERVER3.disabled = disabled;
    $('#dns6server1').show();
    if (!form.DNS6_SERVER2.value && disabled) $('#dns6server2').hide(); else $('#dns6server2').show();
    if (!form.DNS6_SERVER3.value && disabled) $('#dns6server3').hide(); else $('#dns6server3').show();
  }
}
function checkBondingSettings(form,ctrl,port) {
  var disabled = form.BONDING.value=='no';
  var mode = form.BONDING_MODE.value;
  if (ctrl>=0) {
    var me = ctrl==0 ? null : 'slow';
    if (disabled) {
      $('#bond-members-'+port).hide(me);
    } else {
      $('#bond-members-'+port).show(me);
      $('#bond-'+port).dropdownchecklist('destroy').dropdownchecklist({emptyText:'None', width:<?=$width[0]?>});
    }
    if (ctrl==1) checkBridgingSettings(form,1,port);
  }
  if (mode==1 || mode>4 || disabled) {$('#attention0').hide();} else {$('#attention0').show();}
}
function checkBridgingSettings(form,ctrl,port) {
  var me = ctrl==0 ? null : 'slow';
  var i = 0;
  if (form.BRIDGING.value=='yes' && form.BONDING.value=='no') {
    $('#bridge-members-'+port).show(me);
    $('#bridge-'+port).dropdownchecklist('destroy').dropdownchecklist({emptyText:'None', width:<?=$width[0]?>});
  } else {
    $('#bridge-members-'+port).hide(me);
  }
}
function checkNetworkAccess(form,port) {
  if (form.TYPE.value=='access') {
    $('.access-'+port).hide();
    $(form).find('input[name^="VLANID:"]').prop('required',false);
  } else {
    $('.access-'+port).show();
    $(form).find('input[name^="VLANID:"]').prop('required',true);
  }
}
function addVLAN(port) {
  var index = 1;
  while ($('#index-'+port+'-'+index).length) index++;
  var template = $($('<div/>').loadTemplate($('#network-template-'+port)).html().replace(/INDEX/g,index));
  var element = $('[id^="index-'+port+'-"]').last();
  $(element).after(template);
  $('form[name="'+$(element).parent().attr('name')+'"]').find('select').first().trigger('change');
}
function removeVLAN(element) {
  var id = $(element).attr('id').split('-');
  $(element).remove();
  $('#view-'+id[1]).find('select').first().trigger('change');
}
function disableForm(form) {
  $(form).find('input,select').not('input[value="_(Done)_"]').prop('disabled',true);
  $(form).find('input[name^="DESCRIPTION"],input[name^="#"]').prop('disabled',false);
}
var stopEvent = false;
function noRun(form) {
  var arg1 = $(form).find('input[name="#arg[1]"]');
  if (arg1.val()=='') arg1.val('none');
  stopEvent = true;
}
function doRun(form) {
  if (stopEvent) {stopEvent = false; return;}
  var arg1 = $(form).find('input[name="#arg[1]"]');
  arg1.val($(form).find('input[name="#section"]').val());
}
function portcheck_eth0() {
  $.post('/webGui/include/CheckPort.php',{port:'eth0'},function(text) {
    var html = $('#user-notice').html();
    if (!html || html.indexOf('eth0')>0) showNotice(text);
    setTimeout(portcheck_eth0,10000);
  });
}
function portToggle(port,cmd) {
  $.post('/webGui/include/PortToggle.php',{port:port,cmd:cmd},function(){refresh();});
}
function viewToggle(eth,vlan) {
  var tag = vlan ? '#tag-'+eth+'-'+vlan : '#tag-'+eth;
  var view = vlan ? '#view-'+eth+'-'+vlan : '#view-'+eth;
  if ($(view).is(':visible')) {
    $(tag).removeClass('fa-chevron-up').addClass('fa-chevron-down');
    $.cookie(view,'hide',{expires:3650});
  } else {
    $(tag).removeClass('fa-chevron-down').addClass('fa-chevron-up');
    $.removeCookie(view);
  }
  $(view).toggle('slow');
}
var watchDHCP = new NchanSubscriber('/sub/dhcp',{subscriber:'websocket'});
watchDHCP.on('message', function(data) {
  data = data.split(' ');
  for (var i=0,row; row=data[i]; i++) {
    var id = row.split('_');
    var form = $('form[name="'+id[0]+'_settings"]');
    var key = id[2].split('=');
    switch (id[1]) {
      case 'I': form.find('input[name="'+key[0].replace('-','_')+'"]').val(key[1]); break;
      case 'S': form.find('select[name="'+key[0].replace('-','_')+'"]').val(key[1]); break;
    }
  }
});
$(function() {
  var ctrl = "<span id='wait_eth0' class='status vshift red-text' style='display:none;font-size:1.2rem;font-style:italic'><i class='fa fa-spinner fa-spin'></i> _(Please wait)_... _(configuring interface)_</span>";
  var form = document.eth0_settings;
<?if ($tabbed && !$service):?>
  $('#tab1').bind({click:function(){
    $('#bond-eth0').dropdownchecklist('destroy').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
    $('#bridge-eth0').dropdownchecklist('destroy').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
  }});
<?endif;?>
  if (!$.cookie('#view-eth0')) {$('#view-eth0').show(); $('#tag-eth0').removeClass('fa-chevron-down').addClass('fa-chevron-up');}
<?foreach ($vlan_eth0 as $i):?>
  if (!$.cookie('#view-eth0-<?=$i?>')) {$('#view-eth0-<?=$i?>').show(); $('#tag-eth0-<?=$i?>').removeClass('fa-chevron-down').addClass('fa-chevron-up');}
<?endforeach;?>
  $('#bond-eth0').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
  $('#bridge-eth0').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
  checkBondingSettings(form,0,'eth0');
  checkBridgingSettings(form,0,'eth0');
  checkNetworkAccess(form,'eth0');
  selectProtocol(form,'eth0');
<?if ($service):?>
  disableForm(form);
  $('#bond-eth0').dropdownchecklist('disable');
  $('#bridge-eth0').dropdownchecklist('disable');
  var protocol = $(form).find('select[name="PROTOCOL:0"]').val() || 'ipv4';
  if (form.DNS_SERVER2.value) $('#dnsserver2').show(); else $('#dnsserver2').hide();
  if (form.DNS_SERVER3.value) $('#dnsserver3').show(); else $('#dnsserver3').hide();
  if (form.DNS6_SERVER1.value) $('#dns6server1').show(); else $('#dns6server1').hide();
  if (form.DNS6_SERVER2.value) $('#dns6server2').show(); else $('#dns6server2').hide();
  if (form.DNS6_SERVER3.value) $('#dns6server3').show(); else $('#dns6server3').hide();
<?else:?>
  checkDNSSettings(form);
  checkDNSSettings6(form);
<?endif;?>
<?if ($tabbed):?>
  $('.tabs').append(ctrl.replace('vshift',''));
<?else:?>
  $('div.title').eq(0).find('span.left').append(ctrl);
<?endif;?>
  portcheck_eth0();
  watchDHCP.start();
});
</script>
<form markdown="1" name="eth0_settings" method="POST" action="/update.php" target="progressFrame" onchange="doRun(this)" onsubmit="return prepareSettings(this)">
<input type="hidden" name="#file" value="<?=$ini?>">
<input type="hidden" name="#include" value="/webGui/include/update.ethernet.php">
<input type="hidden" name="#section" value="eth0">
<input type="hidden" name="#command" value="/webGui/scripts/netconfig">
<input type="hidden" name="#arg[1]" value="">
<input type="hidden" name="BONDNAME" value="bond0">
<input type="hidden" name="BONDING_MIIMON" value="100">
<input type="hidden" name="BRNAME" value="br0">
<input type="hidden" name="BRSTP" value="no">
<input type="hidden" name="BRFD" value="0">
_(Interface description)_:
: <span class="status vshift"><i id="tag-eth0" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="viewToggle('eth0')"></i></span>
  <input type="text" name="DESCRIPTION:0" maxlength="80" value="<?=htmlspecialchars(_var($eth0,"DESCRIPTION:0"))?>" oninput="noRun(this.form)">

:eth_interface_description_help:

<div markdown="1" id="view-eth0" style="display:none">
_(MAC address)_:
: <?=strtoupper(exec("ip link show eth0|grep -Pom1 'ether \K\S+'"))?>

:eth_mac_address_help:

_(Enable bonding)_:
: <select name="BONDING" onchange="checkBondingSettings(this.form,1,'eth0')">
  <?=mk_option(_var($eth0,'BONDING'), "no", _("No"))?>
  <?=mk_option(_var($eth0,'BONDING'), "yes", _("Yes"))?>
  </select>

:eth_enable_bonding_help:

<div markdown="1" id="bond-members-eth0" style="display:none">
_(Bonding mode)_:
: <select name="BONDING_MODE" onchange="checkBondingSettings(this.form,-1,'eth0')">
  <?=mk_option(_var($eth0,'BONDING_MODE'), "0", _("balance-rr")." (0)")?>
  <?=mk_option(_var($eth0,'BONDING_MODE'), "1", _("active-backup")." (1)",isset($eth0['BONDING_MODE'])?'':'selected')?>
  <?=mk_option(_var($eth0,'BONDING_MODE'), "2", _("balance-xor")." (2)")?>
  <?=mk_option(_var($eth0,'BONDING_MODE'), "3", _("broadcast")." (3)")?>
  <?=mk_option(_var($eth0,'BONDING_MODE'), "4", _("802.3ad")." (4)")?>
  <?=mk_option(_var($eth0,'BONDING_MODE'), "5", _("balance-tlb")." (5)")?>
  <?=mk_option(_var($eth0,'BONDING_MODE'), "6", _("balance-alb")." (6)")?>
  </select>
  <span id="attention0" style="display:none">**_(Attention)_:** _(this mode requires a network switch with proper setup and support)_...</span>

:eth_bonding_mode_help:

_(Bonding members of)_ bond0:
: <select id="bond-eth0" name="BONDNICS" multiple="multiple" style="display:none">
  <?=mk_option(_var($eth0,'BONDNICS'),'eth0','eth0','selected disabled')?>
  <?foreach ($ports as $port):?>
  <?if (!locked('eth0',$port)) echo mk_option_check(_var($eth0,'BONDNICS'),$port,$port)?>
  <?endforeach;?>
  </select>

:eth_bonding_members_help:

</div>
_(Enable bridging)_:
: <select name="BRIDGING" onchange="checkBridgingSettings(this.form,1,'eth0')">
  <?=mk_option(_var($eth0,'BRIDGING'), "no", _("No"))?>
  <?=mk_option(_var($eth0,'BRIDGING'), "yes", _("Yes"))?>
  </select>

:eth_enable_bridging_help:

<div markdown="1" id="bridge-members-eth0" style="display:none">
_(Bridging members of)_ br0:
: <select id="bridge-eth0" name="BRNICS" multiple="multiple" style="display:none">
  <?=mk_option(_var($eth0,'BRNICS'),'eth0','eth0','selected disabled')?>
  <?foreach ($ports as $port):?>
  <?if (!locked('eth0',$port)) echo mk_option_check(_var($eth0,'BRNICS'),$port,$port)?>
  <?endforeach;?>
  </select>

:eth_bridging_members_help:

</div>
_(Network protocol)_:
: <select name="PROTOCOL:0" onchange="selectProtocol(this.form,'eth0',0)">
  <?=mk_option(_var($eth0,"PROTOCOL:0"), 'ipv4', _('IPv4 only'))?>
  <?=mk_option(_var($eth0,"PROTOCOL:0"), 'ipv6', _('IPv6 only'))?>
  <?=mk_option(_var($eth0,"PROTOCOL:0"), 'ipv4+ipv6', _('IPv4 + IPv6'))?>
  </select>

:eth_network_protocol_help:

<div markdown="1" class="ipv4-eth0-0" style="display:none">
_(IPv4 address assignment)_:
: <select name="USE_DHCP:0" onchange="selectProtocol(this.form,'eth0',0)">
  <?=mk_option(_var($eth0,"USE_DHCP:0"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($eth0,"USE_DHCP:0"), 'no', _('Static'))?>
  </select>

:eth_ipv4_address_assignment_help:

<div markdown="1" class="more-ipv4-eth0-0" style="display:none">
_(IPv4 address)_:
: <input type="text" name="IPADDR:0" maxlength="15" value="<?=_var($eth0,"IPADDR:0")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">/<select name="NETMASK:0" class="slim">
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.0.0.0", "8")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.0.0", "16")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.128.0", "17")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.192.0", "18")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.224.0", "19")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.240.0", "20")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.248.0", "21")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.252.0", "22")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.254.0", "23")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.0", "24", $eth0["IPADDR:0"]?"":"selected")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.128", "25")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.192", "26")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.224", "27")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.240", "28")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.248", "29")?>
  <?=mk_option(_var($eth0,"NETMASK:0"), "255.255.255.252", "30")?>
  </select>

:eth_ipv4_address_help:

_(IPv4 default gateway)_:
: <input type="text" name="GATEWAY:0" maxlength="15" value="<?=_var($eth0,"GATEWAY:0")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">
  <input type="text" name="METRIC:0" min="0" max="9999" value="<?=_var($eth0,"METRIC:0")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv4_default_gateway_help:

</div>
_(IPv4 DNS server assignment)_:
: <select name="DHCP_KEEPRESOLV" onchange="checkDNSSettings(this.form)">
  <?=mk_option(_var($eth0,'DHCP_KEEPRESOLV'), "no", _("Automatic"))?>
  <?=mk_option(_var($eth0,'DHCP_KEEPRESOLV'), "yes", _("Static"))?>
  </select>

:eth_ipv4_dns_server_assignment_help:

_(IPv4 DNS server)_:
: <input type="text" name="DNS_SERVER1" maxlength="15" value="<?=_var($eth0,'DNS_SERVER1')?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">

:eth_ipv4_dns_server_help:

<div markdown="1" id="dnsserver2" style="display:none">
_(IPv4 DNS server)_ 2:
: <input type="text" name="DNS_SERVER2" maxlength="15" value="<?=_var($eth0,'DNS_SERVER2')?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">

:eth_ipv4_dns_server2_help:

</div>
<div markdown="1" id="dnsserver3" style="display:none">
_(IPv4 DNS server)_ 3:
: <input type="text" name="DNS_SERVER3" maxlength="15" value="<?=_var($eth0,'DNS_SERVER3')?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">

:eth_ipv4_dns_server3_help:

</div>
</div>
<div markdown="1" class="ipv6-eth0-0" style="display:none">
_(IPv6 address assignment)_:
: <select name="USE_DHCP6:0" onchange="selectProtocol(this.form,'eth0',0)">
  <?=mk_option(_var($eth0,"USE_DHCP6:0"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($eth0,"USE_DHCP6:0"), 'no', _('Static'))?>
  </select>

:eth_ipv6_address_assignment_help:

<div markdown="1" class="more-ipv6-eth0-0" style="display:none">
_(IPv6 address)_:
: <input type="text" name="IPADDR6:0" maxlength="39" value="<?=_var($eth0,"IPADDR6:0")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">/<input type="number" name="NETMASK6:0" min="1" max="128" value="<?=_var($eth0,"NETMASK6:0")?>" class="slim">

:eth_ipv6_address_help:

_(IPv6 default gateway)_:
: <input type="text" name="GATEWAY6:0" maxlength="39" value="<?=_var($eth0,"GATEWAY6:0")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">
  <input type="text" name="METRIC6:0" min="0" max="9999" value="<?=_var($eth0,"METRIC6:0")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv6_default_gateway_help:

_(IPv6 privacy extensions)_:
: <select name="PRIVACY6:0">
  <?=mk_option(_var($eth0,"PRIVACY6:0"), "0", _("Disabled"))?>
  <?=mk_option(_var($eth0,"PRIVACY6:0"), "2", _("Enabled"))?>
  </select>

:eth_ipv6_privacy_extensions_help:

</div>
<div markdown="1" id="dns6server1" style="display:none">
_(IPv6 DNS server assignment)_:
: <select name="DHCP6_KEEPRESOLV" onchange="checkDNSSettings6(this.form)">
  <?=mk_option(_var($eth0,'DHCP6_KEEPRESOLV'), "no", _("Automatic"))?>
  <?=mk_option(_var($eth0,'DHCP6_KEEPRESOLV'), "yes", _("Static"))?>
  </select>

:eth_ipv6_dns_server_assignment_help:

_(IPv6 DNS server)_:
: <input type="text" name="DNS6_SERVER1" maxlength="39" value="<?=_var($eth0,'DNS6_SERVER1')?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">

:eth_ipv6_dns_server_help:

</div>
<div markdown="1" id="dns6server2" style="display:none">
_(IPv6 DNS server)_ 2:
: <input type="text" name="DNS6_SERVER2" maxlength="39" value="<?=_var($eth0,'DNS6_SERVER2')?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">

:eth_ipv6_dns_server2_help:

</div>
<div markdown="1" id="dns6server3" style="display:none">
_(IPv6 DNS server)_ 3:
: <input type="text" name="DNS6_SERVER3" maxlength="39" value="<?=_var($eth0,'DNS6_SERVER3')?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">

:eth_ipv6_dns_server3_help:

</div>
</div>
_(Desired MTU)_:
: <input type="number" name="MTU" min="68" max="9198" value="<?=_var($eth0,'MTU')?>" class="narrow" placeholder="1500">

:eth_desired_mtu_help:

_(Enable VLANs)_:
: <select name="TYPE" onchange="checkNetworkAccess(this.form,'eth0')">
  <?=mk_option(_var($eth0,'TYPE'), 'access', _('No'))?>
  <?=mk_option(_var($eth0,'TYPE'), 'trunk', _('Yes'))?>
  </select>

:eth_enable_vlans_help:

</div>
<div id='index-eth0-0'></div>
<?foreach ($vlan_eth0 as $i):?>
<div markdown="1" id="index-eth0-<?=$i?>" class="access-eth0 shade-<?=$display['theme']?>" style="display:none">
_(Interface description)_:
: <span class="status vshift"><i id="tag-eth0-<?=$i?>" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="viewToggle('eth0','<?=$i?>')"></i></span>
  <input type="text" name="DESCRIPTION:<?=$i?>" maxlength="80" value="<?=htmlspecialchars(_var($eth0,"DESCRIPTION:$i"))?>" oninput="noRun(this.form)">

:eth_interface_description_help:

<div markdown="1" id="view-eth0-<?=$i?>" style="display:none">
_(VLAN number)_:
: <input type="number" name="VLANID:<?=$i?>" min="1" max="4095" value="<?=_var($eth0,"VLANID:$i")?>" class="narrow gap" required>
  <?if (!$service):?><input type="button" class="form" value="_(Delete VLAN)_" onclick="removeVLAN($('#index-eth0-<?=$i?>'))"><?endif;?>

:eth_vlan_number_help:

_(Network protocol)_:
: <select name="PROTOCOL:<?=$i?>" onchange="selectProtocol(this.form,'eth0',<?=$i?>)">
  <?=mk_option(_var($eth0,"PROTOCOL:$i"), 'ipv4', _('IPv4 only'))?>
  <?=mk_option(_var($eth0,"PROTOCOL:$i"), 'ipv6', _('IPv6 only'))?>
  <?=mk_option(_var($eth0,"PROTOCOL:$i"), 'ipv4+ipv6', _('IPv4 + IPv6'))?>
  </select>

:eth_network_protocol_help:

<div markdown="1" class="ipv4-eth0-<?=$i?>" style="display:none">
_(IPv4 address assignment)_:
: <select name="USE_DHCP:<?=$i?>" onchange="selectProtocol(this.form,'eth0',<?=$i?>)">
  <?=mk_option(_var($eth0,"USE_DHCP:$i"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($eth0,"USE_DHCP:$i"), 'no', _('Static'))?>
<?if ($i>0):?>
  <?=mk_option(_var($eth0,"USE_DHCP:$i"), '', _('None'))?>
<?endif;?>
  </select>

:eth_ipv4_address_assignment_help:

<div markdown="1" class="more-ipv4-eth0-<?=$i?>" style="display:none">
_(IPv4 address)_:
: <input type="text" name="IPADDR:<?=$i?>" maxlength="15" value="<?=_var($eth0,"IPADDR:$i")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">/<select name="NETMASK:<?=$i?>" class="slim">
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.0.0.0", "8")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.0.0", "16")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.128.0", "17")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.192.0", "18")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.224.0", "19")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.240.0", "20")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.248.0", "21")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.252.0", "22")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.254.0", "23")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.0", "24", _var($eth0,"IPADDR:$i")?"":"selected")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.128", "25")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.192", "26")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.224", "27")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.240", "28")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.248", "29")?>
  <?=mk_option(_var($eth0,"NETMASK:$i"), "255.255.255.252", "30")?>
  </select>

:eth_ipv4_address_help:

_(IPv4 default gateway)_:
: <input type="text" name="GATEWAY:<?=$i?>" maxlength="15" value="<?=_var($eth0,"GATEWAY:$i")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">
  <input type="text" name="METRIC:<?=$i?>" min="0" max="9999" value="<?=_var($eth0,"METRIC:$i")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv4_default_gateway_help:

</div>
</div>
<div markdown="1" class="ipv6-eth0-<?=$i?>" style="display:none">
_(IPv6 address assignment)_:
: <select name="USE_DHCP6:<?=$i?>" onchange="selectProtocol(this.form,'eth0',<?=$i?>)">
  <?=mk_option(_var($eth0,"USE_DHCP6:$i"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($eth0,"USE_DHCP6:$i"), 'no', _('Static'))?>
<?if ($i>0):?>
  <?=mk_option(_var($eth0,"USE_DHCP6:$i"), '', _('None'))?>
<?endif;?>
  </select>

:eth_ipv6_address_assignment_help:

<div markdown="1" class="more-ipv6-eth0-<?=$i?>" style="display:none">
_(IPv6 address)_:
: <input type="text" name="IPADDR6:<?=$i?>" maxlength="39" value="<?=_var($eth0,"IPADDR6:$i")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">/<input type="number" name="NETMASK6:<?=$i?>" min="1" max="128" value="<?=_var($eth0,"NETMASK6:$i")?>" class="slim">

:eth_ipv6_address_help:

_(IPv6 default gateway)_:
: <input type="text" name="GATEWAY6:<?=$i?>" maxlength="39" value="<?=_var($eth0,"GATEWAY6:$i")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">
  <input type="text" name="METRIC6:<?=$i?>" min="0" max="9999" value="<?=_var($eth0,"METRIC6:$i")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv6_default_gateway_help:

_(IPv6 privacy extensions)_:
: <select name="PRIVACY6:<?=$i?>">
  <?=mk_option(_var($eth0,"PRIVACY6:$i"), "0", _("Disabled"))?>
  <?=mk_option(_var($eth0,"PRIVACY6:$i"), "2", _("Enabled"))?>
  </select>

:eth_ipv6_privacy_extensions_help:

</div>
</div>
</div>
</div>
<?endforeach;?>

&nbsp;
: <input type="submit" value="_(Apply)_" onclick="$('#wait_eth0').show()" disabled><input type="button" value="_(Done)_" onclick="done()">
<?if (!$service):?>
<input type="button" class="access-eth0" value="_(Add VLAN)_" onclick="addVLAN('eth0')" style="display:none">
<?else:?><?=sprintf(_('Stop **%s** to make changes, see'),$service).' (<a href="/Settings">'._('Settings').'</a>)'?><?endif;?>
</form>

<script markdown="1" type="text/html" id="network-template-eth0">
<div markdown="1" id="index-eth0-INDEX" class="access-eth0 shade-<?=$display['theme']?>">
_(Interface description)_:
: <span class="status vshift"><i id="tag-eth0-INDEX" class="fa fa-fw fa-chevron-up" style="cursor:pointer" onclick="viewToggle('eth0','INDEX')"></i></span>
  <input type="text" name="DESCRIPTION:INDEX" maxlength="80" value="<?=htmlspecialchars(_var($eth0,"DESCRIPTION:INDEX"))?>" oninput="noRun(this.form)">

<div markdown="1" id="view-eth0-INDEX">
_(VLAN number)_:
: <input type="number" name="VLANID:INDEX" min="1" max="4095" value="<?=_var($eth0,"VLANID:INDEX")?>" class="narrow gap" required>
  <input type="button" class="form" value="_(Delete VLAN)_" onclick="removeVLAN($('#index-eth0-INDEX'))">

_(Network protocol)_:
: <select name="PROTOCOL:INDEX" onchange="selectProtocol(this.form,'eth0',INDEX)">
  <?=mk_option(_var($eth0,"PROTOCOL:INDEX"), 'ipv4', _('IPv4 only'))?>
  <?=mk_option(_var($eth0,"PROTOCOL:INDEX"), 'ipv6', _('IPv6 only'))?>
  <?=mk_option(_var($eth0,"PROTOCOL:INDEX"), 'ipv4+ipv6', _('IPv4 + IPv6'))?>
  </select>

<div markdown="1" class="ipv4-eth0-INDEX" style="display:none">
_(IPv4 address assignment)_:
: <select name="USE_DHCP:INDEX" onchange="selectProtocol(this.form,'eth0',INDEX)">
  <?=mk_option(_var($eth0,"USE_DHCP:INDEX"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($eth0,"USE_DHCP:INDEX"), 'no', _('Static'))?>
  <?=mk_option(_var($eth0,"USE_DHCP:INDEX"), '', _('None'))?>
  </select>

<div markdown="1" class="more-ipv4-eth0-INDEX" style="display:none">
_(IPv4 address)_:
: <input type="text" name="IPADDR:INDEX" maxlength="15" value="<?=_var($eth0,"IPADDR:INDEX")?>" class="narrow" pattern="<?=$validIP4?>" title="=_(IPv4 address A.B.C.D)_">/<select name="NETMASK:INDEX" class="slim">
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.0.0.0", "8")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.0.0", "16")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.128.0", "17")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.192.0", "18")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.224.0", "19")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.240.0", "20")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.248.0", "21")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.252.0", "22")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.254.0", "23")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.0", "24", "selected")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.128", "25")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.192", "26")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.224", "27")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.240", "28")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.248", "29")?>
  <?=mk_option(_var($eth0,"NETMASK:INDEX"), "255.255.255.252", "30")?>
  </select>

_(IPv4 default gateway)_:
: <input type="text" name="GATEWAY:INDEX" maxlength="15" value="<?=_var($eth0,"GATEWAY:INDEX")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">
  <input type="text" name="METRIC:INDEX" min="1" max="9999" value="<?=_var($eth0,"METRIC:INDEX")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

</div>
</div>
<div markdown="1" class="ipv6-eth0-INDEX" style="display:none">
_(IPv6 address assignment)_:
: <select name="USE_DHCP6:INDEX" onchange="selectProtocol(this.form,'eth0',INDEX)">
  <?=mk_option(_var($eth0,"USE_DHCP6:INDEX"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($eth0,"USE_DHCP6:INDEX"), 'no', _('Static'))?>
  <?=mk_option(_var($eth0,"USE_DHCP6:INDEX"), '', _('None'))?>
  </select>

<div markdown="1" class="more-ipv6-eth0-INDEX" style="display:none">
_(IPv6 address)_:
: <input type="text" name="IPADDR6:INDEX" maxlength="39" value="<?=_var($eth0,"IPADDR6:INDEX")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">/<input type="number" name="NETMASK6:INDEX" min="1" max="128" value="<?=_var($eth0,"NETMASK6:INDEX")?>" class="slim">

_(IPv6 default gateway)_:
: <input type="text" name="GATEWAY6:INDEX" maxlength="39" value="<?=_var($eth0,"GATEWAY6:INDEX")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">
  <input type="text" name="METRIC6:INDEX" min="1" max="9999" value="<?=_var($eth0,"METRIC6:INDEX")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

_(IPv6 privacy extensions)_:
: <select name="PRIVACY6:INDEX">
  <?=mk_option(_var($eth0,'PRIVACY6:INDEX'), "0", _("Disabled"))?>
  <?=mk_option(_var($eth0,'PRIVACY6:INDEX'), "2", _("Enabled"))?>
  </select>

</div>
</div>
</div>
</div>
</script>

                )

            [EthX] => Array
                (
                    [Menu] => parentname:nnn
                    [Title] => _(Interface)_ ethX
                    [Tag] => icon-ethernet
                    [file] => webGui/EthX.page
                    [root] => webGui
                    [name] => EthX
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$locked = locked('ethX','ethX');

// get VLAN interfaces
$vlan_ethX = $sort_ethX = [];
if (!$locked && isset($ethX)) foreach (vlanID($ethX) as $key => $val) {$vlan_ethX[] = index($key); $sort_ethX[] = (int)$val;}
array_multisort($sort_ethX,$vlan_ethX);

$cmd = 'Down';
$more = true;
if (strpos($locked,'bond')===0 || strpos($locked,'br')===0) {
  [$master_ethX,$root] = my_explode(' ',$locked);
  $reason = _('member of')." $master_ethX ("._('see interface')." $root)";
  $class = 'green-text';
} elseif (!exec("ip link show ethX|grep -om1 'UP>'")) {
  $reason = _("shutdown")." ("._("inactive").")";
  $class = 'blue-text';
  $cmd = 'Up';
} elseif (empty($ethX)) {
  $reason = _("not configured");
  $class = 'red-text';
} else {
  $more = false;
  $class = '';
}
?>
<script>
function portcheck_ethX() {
  $.post('/webGui/include/CheckPort.php',{port:'ethX'},function(text) {
    var html = $('#user-notice').html();
    if (!html || html.indexOf('ethX')>0) showNotice(text);
    setTimeout(portcheck_ethX,10000);
  });
}
$(function() {
  var ctrl = "<span id='wait_ethX' class='status vshift red-text' style='display:none;font-size:1.2rem;font-style:italic'><i class='fa fa-spinner fa-spin'></i> _(Please wait)_... _(configuring interface)_</span>";
  var form = document.ethX_settings;
<?if ($tabbed && !$service):?>
  $('#tabX').bind({click:function(){
    $('#bond-ethX').dropdownchecklist('destroy').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
    $('#bridge-ethX').dropdownchecklist('destroy').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
  }});
<?endif;?>
  if (!$.cookie('#view-ethX')) {$('#view-ethX').show(); $('#tag-ethX').removeClass('fa-chevron-down').addClass('fa-chevron-up');}
<?foreach ($vlan_ethX as $i):?>
  if (!$.cookie('#view-ethX-<?=$i?>')) {$('#view-ethX-<?=$i?>').show(); $('#tag-ethX-<?=$i?>').removeClass('fa-chevron-down').addClass('fa-chevron-up');}
<?endforeach;?>
  $('#bond-ethX').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
  $('#bridge-ethX').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>});
  checkBondingSettings(form,0,'ethX');
  checkBridgingSettings(form,0,'ethX');
  checkNetworkAccess(form,'ethX');
  selectProtocol(form,'ethX');
<?if (!$tabbed):?>
  $('div.title').each(function(){
    if ($(this).text().indexOf('Interface ethX')==0) $(this).find('span.left').append(ctrl);
  });
<?endif;?>
<?if (isset($master_ethX)):?>
  $('div.slave-ethX').hide();
  disableForm(form);
<?elseif ($service):?>
  disableForm(form);
<?endif;?>
<?if ($no_eth0):?>
  $('input[name="#shut_ethX"]').prop('disabled',true);
<?endif;?>
  setTimeout(portcheck_ethX,Number('ethX'.substr(3))*1000);
});
</script>
<form markdown="1" name="ethX_settings" method="POST" action="/update.php" target="progressFrame" onchange="doRun(this)" onsubmit="return prepareSettings(this)">
<input type="hidden" name="#file" value="<?=$ini?>">
<input type="hidden" name="#include" value="/webGui/include/update.ethernet.php">
<input type="hidden" name="#section" value="ethX">
<input type="hidden" name="#command" value="/webGui/scripts/netconfig">
<input type="hidden" name="#arg[1]" value="">
<input type="hidden" name="BONDNAME" value="bondX">
<input type="hidden" name="BONDING_MIIMON" value="100">
<input type="hidden" name="BRNAME" value="brX">
<input type="hidden" name="BRSTP" value="no">
<input type="hidden" name="BRFD" value="0">
_(Interface description)_:
: <span class="status vshift"><i id="tag-ethX" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="viewToggle('ethX')"></i></span>
<?if (!$more):?>
  <input type="text" name="DESCRIPTION:0" maxlength="80" value="<?=htmlspecialchars(_var($ethX,"DESCRIPTION:0"))?>" oninput="noRun(this.form)">
<?else:?>
  <span class="<?=$class?>"><?=$reason?></span>
<?endif;?>

:eth_interface_description_help:

<div markdown="1" id="view-ethX" style="display:none">
_(MAC address)_:
: <?=strtoupper(exec("ip link show ethX|grep -Pom1 'ether \K\S+'"))?>

:eth_mac_address_help:

<div markdown="1" class="slave-ethX">
_(Enable bonding)_:
: <select name="BONDING" onchange="checkBondingSettings(this.form,1,'ethX')">
  <?=mk_option(_var($ethX,'BONDING'), "no", _("No"))?>
  <?=mk_option(_var($ethX,'BONDING'), "yes", _("Yes"))?>
  </select>

:eth_enable_bonding_help:

<div markdown="1" id="bond-members-ethX" style="display:none">
_(Bonding mode)_:
: <select name="BONDING_MODE" onchange="checkBondingSettings(this.form,-1,'ethX')">
  <?=mk_option(_var($ethX,'BONDING_MODE'), "0", _("balance-rr")." (0)")?>
  <?=mk_option(_var($ethX,'BONDING_MODE'), "1", _("active-backup")." (1)",isset($ethX['BONDING_MODE'])?'':'selected')?>
  <?=mk_option(_var($ethX,'BONDING_MODE'), "2", _("balance-xor")." (2)")?>
  <?=mk_option(_var($ethX,'BONDING_MODE'), "3", _("broadcast")." (3)")?>
  <?=mk_option(_var($ethX,'BONDING_MODE'), "4", _("802.3ad")." (4)")?>
  <?=mk_option(_var($ethX,'BONDING_MODE'), "5", _("balance-tlb")." (5)")?>
  <?=mk_option(_var($ethX,'BONDING_MODE'), "6", _("balance-alb")." (6)")?>
  </select>
  <span id="attention0" style="display:none">**_(Attention)_:** _(this mode requires a network switch with proper setup and support)_...</span>

:eth_bonding_mode_help:

_(Bonding members of)_ bondX:
: <select id="bond-ethX" name="BONDNICS" multiple="multiple" style="display:none">
  <?=mk_option(_var($ethX,'BONDNICS'),'ethX','ethX','selected disabled')?>
  <?foreach ($ports as $port):?>
  <?if ($port!='ethX' && !locked('ethX',$port)) echo mk_option_check(_var($ethX,'BONDNICS'),$port,$port)?>
  <?endforeach;?>
  </select>

:eth_bonding_members_help:

</div>
_(Enable bridging)_:
: <select name="BRIDGING" onchange="checkBridgingSettings(this.form,1,'ethX')">
  <?=mk_option(_var($ethX,'BRIDGING'), "no", _("No"))?>
  <?=mk_option(_var($ethX,'BRIDGING'), "yes", _("Yes"))?>
  </select>

:eth_enable_bridging_help:

<div markdown="1" id="bridge-members-ethX" style="display:none">
_(Bridging members of)_ brX:
: <select id="bridge-ethX" name="BRNICS" multiple="multiple" style="display:none">
  <?=mk_option(_var($ethX,'BRNICS'),'ethX','ethX','selected disabled')?>
  <?foreach ($ports as $port):?>
  <?if ($port!='ethX' && !locked('ethX',$port)) echo mk_option_check(_var($ethX,'BRNICS'),$port,$port)?>
  <?endforeach;?>
  </select>

:eth_bridging_members_help:

</div>
_(Network protocol)_:
: <select name="PROTOCOL:0" onchange="selectProtocol(this.form,'ethX',0)">
  <?=mk_option(_var($ethX,"PROTOCOL:0"), 'ipv4', _('IPv4 only'))?>
  <?=mk_option(_var($ethX,"PROTOCOL:0"), 'ipv6', _('IPv6 only'))?>
  <?=mk_option(_var($ethX,"PROTOCOL:0"), 'ipv4+ipv6', _('IPv4 + IPv6'))?>
  </select>

:eth_network_protocol_help:

<div markdown="1" class="ipv4-ethX-0" style="display:none">
_(IPv4 address assignment)_:
: <select name="USE_DHCP:0" onchange="selectProtocol(this.form,'ethX',0)">
  <?=mk_option(_var($ethX,"USE_DHCP:0"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($ethX,"USE_DHCP:0"), 'no', _('Static'))?>
  <?=mk_option(_var($ethX,"USE_DHCP:0"), '', _('None'))?>
  </select>

:eth_ipv4_address_assignment_help:

<div markdown="1" class="more-ipv4-ethX-0" style="display:none">
_(IPv4 address)_:
: <input type="text" name="IPADDR:0" maxlength="15" value="<?=_var($ethX,"IPADDR:0")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">/<select name="NETMASK:0" class="slim">
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.0.0.0", "8")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.0.0", "16")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.128.0", "17")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.192.0", "18")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.224.0", "19")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.240.0", "20")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.248.0", "21")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.252.0", "22")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.254.0", "23")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.0", "24", _var($ethX,"IPADDR:0")?"":"selected")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.128", "25")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.192", "26")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.224", "27")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.240", "28")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.248", "29")?>
  <?=mk_option(_var($ethX,"NETMASK:0"), "255.255.255.252", "30")?>
  </select>

:eth_ipv4_address_help:

_(IPv4 default gateway)_:
: <input type="text" name="GATEWAY:0" maxlength="15" value="<?=_var($ethX,"GATEWAY:0")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">
  <input type="text" name="METRIC:0" min="0" max="9999" value="<?=_var($ethX,"METRIC:0")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv4_default_gateway_help:

</div>
</div>
<div markdown="1" class="ipv6-ethX-0" style="display:none">
_(IPv6 address assignment)_:
: <select name="USE_DHCP6:0" onchange="selectProtocol(this.form,'ethX',0)">
  <?=mk_option(_var($ethX,"USE_DHCP6:0"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($ethX,"USE_DHCP6:0"), 'no', _('Static'))?>
  <?=mk_option(_var($ethX,"USE_DHCP6:0"), '', _('None'))?>
  </select>

:eth_ipv6_address_assignment_help:

<div markdown="1" class="more-ipv6-ethX-0" style="display:none">
_(IPv6 address)_:
: <input type="text" name="IPADDR6:0" maxlength="39" value="<?=_var($ethX,"IPADDR6:0")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">/<input type="number" name="NETMASK6:0" min="1" max="128" value="<?=_var($ethX,"NETMASK6:0")?>" class="slim">

:eth_ipv6_address_help:

_(IPv6 default gateway)_:
: <input type="text" name="GATEWAY6:0" maxlength="39" value="<?=_var($ethX,"GATEWAY6:0")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">
  <input type="text" name="METRIC6:0" min="0" max="9999" value="<?=_var($ethX,"METRIC6:0")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv6_default_gateway_help:

_(IPv6 privacy extensions)_:
: <select name="PRIVACY6:0">
  <?=mk_option(_var($ethX,"PRIVACY6:0"), "0", _("Disabled"))?>
  <?=mk_option(_var($ethX,"PRIVACY6:0"), "2", _("Enabled"))?>
  </select>

:eth_ipv6_privacy_extensions_help:

</div>
</div>
_(Desired MTU)_:
: <input type="number" name="MTU" min="68" max="9198" value="<?=_var($ethX,'MTU')?>" class="narrow" placeholder="1500">

:eth_desired_mtu_help:

_(Enable VLANs)_:
: <select name="TYPE" onchange="checkNetworkAccess(this.form,'ethX')">
  <?=mk_option(_var($ethX,'TYPE'), 'access', _('No'))?>
  <?=mk_option(_var($ethX,'TYPE'), 'trunk', _('Yes'))?>
  </select>

:eth_enable_vlans_help:

</div>
</div>
<div id='index-ethX-0'></div>
<?foreach ($vlan_ethX as $i):?>
<div markdown="1" id="index-ethX-<?=$i?>" class="access-ethX shade-<?=$display['theme']?>" style="display:none">
_(Interface description)_:
: <span class="status vshift"><i id="tag-ethX-<?=$i?>" class="fa fa-fw fa-chevron-down" style="cursor:pointer" onclick="viewToggle('ethX','<?=$i?>')"></i></span>
  <input type="text" name="DESCRIPTION:<?=$i?>" maxlength="80" value="<?=htmlspecialchars(_var($ethX,"DESCRIPTION:$i"))?>" oninput="noRun(this.form)">

:eth_interface_description_help:

<div markdown="1" id="view-ethX-<?=$i?>" style="display:none">
_(VLAN number)_:
: <input type="number" name="VLANID:<?=$i?>" min="1" max="4095" value="<?=_var($ethX,"VLANID:$i")?>" class="narrow gap" required>
  <?if (!$service):?><input type="button" class="form" value="_(Delete VLAN)_" onclick="removeVLAN($('#index-ethX-<?=$i?>'))"><?endif;?>

:eth_vlan_number_help:

_(Network protocol)_:
: <select name="PROTOCOL:<?=$i?>" onchange="selectProtocol(this.form,'ethX',<?=$i?>)">
  <?=mk_option(_var($ethX,"PROTOCOL:$i"), 'ipv4', _('IPv4 only'))?>
  <?=mk_option(_var($ethX,"PROTOCOL:$i"), 'ipv6', _('IPv6 only'))?>
  <?=mk_option(_var($ethX,"PROTOCOL:$i"), 'ipv4+ipv6', _('IPv4 + IPv6'))?>
  </select>

:eth_network_protocol_help:

<div markdown="1" class="ipv4-ethX-<?=$i?>" style="display:none">
_(IPv4 address assignment)_:
: <select name="USE_DHCP:<?=$i?>" onchange="selectProtocol(this.form,'ethX',<?=$i?>)">
  <?=mk_option(_var($ethX,"USE_DHCP:$i"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($ethX,"USE_DHCP:$i"), 'no', _('Static'))?>
  <?=mk_option(_var($ethX,"USE_DHCP:$i"), '', _('None'))?>
  </select>

:eth_ipv4_address_assignment_help:

<div markdown="1" class="more-ipv4-ethX-<?=$i?>" style="display:none">
_(IPv4 address)_:
: <input type="text" name="IPADDR:<?=$i?>" maxlength="15" value="<?=_var($ethX,"IPADDR:$i")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">/<select name="NETMASK:<?=$i?>" class="slim">
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.0.0.0", "8")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.0.0", "16")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.128.0", "17")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.192.0", "18")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.224.0", "19")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.240.0", "20")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.248.0", "21")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.252.0", "22")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.254.0", "23")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.0", "24", isset($ethX["IPADDR:$i"])?"":"selected")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.128", "25")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.192", "26")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.224", "27")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.240", "28")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.248", "29")?>
  <?=mk_option(_var($ethX,"NETMASK:$i"), "255.255.255.252", "30")?>
  </select>

:eth_ipv4_address_help:

_(IPv4 default gateway)_:
: <input type="text" name="GATEWAY:<?=$i?>" maxlength="15" value="<?=_var($ethX,"GATEWAY:$i")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">
  <input type="text" name="METRIC:<?=$i?>" min="0" max="9999" value="<?=_var($ethX,"METRIC:$i")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv4_default_gateway_help:

</div>
</div>
<div markdown="1" class="ipv6-ethX-<?=$i?>" style="display:none">
_(IPv6 address assignment)_:
: <select name="USE_DHCP6:<?=$i?>" onchange="selectProtocol(this.form,'ethX',<?=$i?>)">
  <?=mk_option(_var($ethX,"USE_DHCP6:$i"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($ethX,"USE_DHCP6:$i"), 'no', _('Static'))?>
  <?=mk_option(_var($ethX,"USE_DHCP6:$i"), '', _('None'))?>
  </select>

:eth_ipv6_address_assignment_help:

<div markdown="1" class="more-ipv6-ethX-<?=$i?>" style="display:none">
_(IPv6 address)_:
: <input type="text" name="IPADDR6:<?=$i?>" maxlength="39" value="<?=_var($ethX,"IPADDR6:$i")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">/<input type="number" name="NETMASK6:<?=$i?>" min="1" max="128" value="<?=_var($ethX,"NETMASK6:$i")?>" class="slim">

:eth_ipv6_address_help:

_(IPv6 default gateway)_:
: <input type="text" name="GATEWAY6:<?=$i?>" maxlength="39" value="<?=_var($ethX,"GATEWAY6:$i")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">
  <input type="text" name="METRIC6:<?=$i?>" min="0" max="9999" value="<?=_var($ethX,"METRIC6:$i")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

:eth_ipv6_default_gateway_help:

_(IPv6 privacy extensions)_:
: <select name="PRIVACY6:<?=$i?>">
  <?=mk_option(_var($ethX,"PRIVACY6:$i"), "0", _("Disabled"))?>
  <?=mk_option(_var($ethX,"PRIVACY6:$i"), "2", _("Enabled"))?>
  </select>

:eth_ipv6_privacy_extensions_help:

</div>
</div>
</div>
</div>
<?endforeach;?>

&nbsp;
: <input type="submit" value="_(Apply)_" onclick="$('#wait_<?=$tabbed?'eth0':'ethX'?>').show()" disabled><input type="button" value="_(Done)_" onclick="done()">
<input type="button" name="#shut_ethX" value="<?=_('Port '.$cmd)?>" onclick="portToggle('ethX','<?=$cmd?>')">
<?if (!$service):?>
<input type="button" class="access-ethX" value="_(Add VLAN)_" onclick="addVLAN('ethX')" style="display:none">
<?else:?><?=sprintf(_('Stop **%s** to make changes, see'),$service).' (<a href="/Settings">'._('Settings').'</a>)'?><?endif;?>
</form>

<script markdown="1" type="text/html" id="network-template-ethX">
<div markdown="1" id="index-ethX-INDEX" class="access-ethX shade-<?=$display['theme']?>">
_(Interface description)_:
: <span class="status vshift"><i id="tag-ethX-INDEX" class="fa fa-fw fa-chevron-up" style="cursor:pointer" onclick="viewToggle('ethX','INDEX')"></i></span>
  <input type="text" name="DESCRIPTION:INDEX" maxlength="80" value="<?=htmlspecialchars(_var($ethX,"DESCRIPTION:INDEX"))?>" oninput="noRun(this.form)">

<div markdown="1" id="view-ethX-INDEX">
_(VLAN number)_:
: <input type="number" name="VLANID:INDEX" min="1" max="4095" value="<?=_var($ethX,"VLANID:INDEX")?>" class="narrow gap" required>
  <input type="button" class="form" value="_(Delete VLAN)_" onclick="removeVLAN($('#index-ethX-INDEX'))">

_(Network protocol)_:
: <select name="PROTOCOL:INDEX" onchange="selectProtocol(this.form,'ethX',INDEX)">
  <?=mk_option(_var($ethX,"PROTOCOL:INDEX"), 'ipv4', _('IPv4 only'))?>
  <?=mk_option(_var($ethX,"PROTOCOL:INDEX"), 'ipv6', _('IPv6 only'))?>
  <?=mk_option(_var($ethX,"PROTOCOL:INDEX"), 'ipv4+ipv6', _('IPv4 + IPv6'))?>
  </select>

<div markdown="1" class="ipv4-ethX-INDEX" style="display:none">
_(IPv4 address assignment)_:
: <select name="USE_DHCP:INDEX" onchange="selectProtocol(this.form,'ethX',INDEX)">
  <?=mk_option(_var($ethX,"USE_DHCP:INDEX"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($ethX,"USE_DHCP:INDEX"), 'no', _('Static'))?>
  <?=mk_option(_var($ethX,"USE_DHCP:INDEX"), '', _('None'))?>
  </select>

<div markdown="1" class="more-ipv4-ethX-INDEX" style="display:none">
_(IPv4 address)_:
: <input type="text" name="IPADDR:INDEX" maxlength="15" value="<?=_var($ethX,"IPADDR:INDEX")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">/<select name="NETMASK:INDEX" class="slim">
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.0.0.0", "8")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.0.0", "16")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.128.0", "17")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.192.0", "18")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.224.0", "19")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.240.0", "20")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.248.0", "21")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.252.0", "22")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.254.0", "23")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.0", "24", "selected")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.128", "25")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.192", "26")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.224", "27")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.240", "28")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.248", "29")?>
  <?=mk_option(_var($ethX,"NETMASK:INDEX"), "255.255.255.252", "30")?>
  </select>

_(IPv4 default gateway)_:
: <input type="text" name="GATEWAY:INDEX" maxlength="15" value="<?=_var($ethX,"GATEWAY:INDEX")?>" class="narrow" pattern="<?=$validIP4?>" title="_(IPv4 address A.B.C.D)_">
  <input type="text" name="METRIC:INDEX" min="1" max="9999" value="<?=_var($ethX,"METRIC:INDEX")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

</div>
</div>
<div markdown="1" class="ipv6-ethX-INDEX" style="display:none">
_(IPv6 address assignment)_:
: <select name="USE_DHCP6:INDEX" onchange="selectProtocol(this.form,'ethX',INDEX)">
  <?=mk_option(_var($ethX,"USE_DHCP6:INDEX"), 'yes', _('Automatic'))?>
  <?=mk_option(_var($ethX,"USE_DHCP6:INDEX"), 'no', _('Static'))?>
  <?=mk_option(_var($ethX,"USE_DHCP6:INDEX"), '', _('None'))?>
  </select>

<div markdown="1" class="more-ipv6-ethX-INDEX" style="display:none">
_(IPv6 address)_:
: <input type="text" name="IPADDR6:INDEX" maxlength="39" value="<?=_var($ethX,"IPADDR6:INDEX")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">/<input type="number" name="NETMASK6:INDEX" min="1" max="128" value="<?=_var($ethX,"NETMASK6:INDEX")?>" class="slim">

_(IPv6 default gateway)_:
: <input type="text" name="GATEWAY6:INDEX" maxlength="39" value="<?=_var($ethX,"GATEWAY6:INDEX")?>" pattern="<?=$validIP6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_">
  <input type="text" name="METRIC6:INDEX" min="1" max="9999" value="<?=_var($ethX,"METRIC6:INDEX")?>" class="slim"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred, 0 is no default gateway))_*

_(IPv6 privacy extensions)_:
: <select name="PRIVACY6:INDEX">
  <?=mk_option(_var($ethX,'PRIVACY6:INDEX'), "0", _("Disabled"))?>
  <?=mk_option(_var($ethX,'PRIVACY6:INDEX'), "2", _("Enabled"))?>
  </select>

</div>
</div>
</div>
</div>
</script>

                )

            [FTP] => Array
                (
                    [Menu] => NetworkServices:999
                    [Title] => FTP Server
                    [Icon] => icon-ftp
                    [Tag] => globe
                    [file] => webGui/FTP.page
                    [root] => webGui
                    [name] => FTP
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020 Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$ftp_userlist_file = "/boot/config/vsftpd.user_list";
$ftp_userlist = "";
if (file_exists($ftp_userlist_file)) {
  $ftp_userlist = str_replace("\n", " ", trim(file_get_contents($ftp_userlist_file)));
  if ($ftp_userlist === false) $ftp_userlist = "";
}
$ftp_server = exec("lsof -i:21 -Pln|awk '/\(LISTEN\)/{print $2;exit}'") ? 1 : 0;
?>
<script>
$(function() {
  showStatus('21');
});
</script>

<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#command" value="/webGui/scripts/ftpusers">

_(FTP server)_:
: <select name="#arg[1]">
  <?=mk_option($ftp_server, "0", _("Disabled"))?>
  <?=mk_option($ftp_server, "1", _("Enabled"))?>
  </select>

:ftp_server_help:

_(FTP user(s))_:
: <input type="text" name="#arg[2]" size="40" maxlength="80" value="<?=htmlspecialchars($ftp_userlist)?>">

:ftp_users_help:

&nbsp;
: <input type="submit" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">

</form>

:ftp_overview_help:

                )

            [FeedbackButton] => Array
                (
                    [Menu] => Buttons:4
                    [Title] => Feedback
                    [Icon] => icon-u-chat
                    [Tag] => icon-u-chat
                    [Code] => e93e
                    [file] => webGui/FeedbackButton.page
                    [root] => webGui
                    [name] => FeedbackButton
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function FeedbackButton() {
  openChanges("feedback", "_(Feedback)_", "feedback");
}
</script>
                )

            [Flash] => Array
                (
                    [Type] => xmenu
                    [file] => webGui/Flash.page
                    [root] => webGui
                    [name] => Flash
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function clone_list($disk) {
  global $pools;
  return strpos($disk['status'],'_NP')===false && ($disk['type']=='Data' || in_array($disk['name'],$pools));
}
?>
<style>
div.clone1{position:absolute;right:0;margin-top:0}
div.clone2{position:absolute;right:0;margin-top:48px}
<?if ($themes1):?>
span.wrap{display:inline-block;width:128px}
select.clone{min-width:123px;margin-right:0}
<?else:?>
span.wrap{display:inline-block;width:150px}
select.clone{min-width:145px;margin-right:0}
<?endif;?>
input.clone{margin-left:8px;margin-right:0}
span.clone,i.clone{margin-right:4px}
</style>
<script>
function toggleButton(button,id) {
  var disabled = true;
  switch (id) {
  case false:
  case true:
    disabled = id;
    break;
  default:
    $('select#'+id+' option').each(function(){if ($(this).prop('selected')==true) disabled = false;});
  }
  $('input#'+button).prop('disabled',disabled);
}
</script>

                )

            [FlashInfo] => Array
                (
                    [Menu] => Flash
                    [Title] => Flash Device Settings
                    [Tag] => usb
                    [file] => webGui/FlashInfo.page
                    [root] => webGui
                    [name] => FlashInfo
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function cleanUp(zip) {
  if (document.hasFocus()) {
    $('input[value="_(Creating Flash backup)_..."]').val("_(Flash backup)_").prop('disabled',false);
    $('div.spinner').hide('slow');
    $('#pleaseWait').hide('slow');
    $.post('/webGui/include/Download.php',{cmd:'unlink',file:zip});
  } else {
    setTimeout(function(){cleanUp(zip);},2000);
  }
}
function backup() {
  $('input[value="_(Flash backup)_"]').val('_(Creating Flash backup)_...').prop('disabled',true);
  $('div.spinner').show('slow');
  $('#pleaseWait').show('slow');
  $.post('/webGui/include/Download.php',{cmd:'backup'},function(zip) {
    if (zip) {
      location = '/'+zip;
      setTimeout(function(){cleanUp(zip);},6000);
    } else {
      $('input[value="_(Creating Flash backup)_..."]').val("_(Flash backup)_");
      $('div.spinner').hide('slow');
      $('#pleaseWait').hide('slow');
      swal({title:"_(Creation error)_",text:"_(Insufficient free disk space available)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    }
  });
}
</script>
<div id="pleaseWait" style="display:none;text-align:center;margin-bottom:24px"><span class="red-text strong">_(Please wait)_... _(creating Flash backup zip file (this may take several minutes))_</span></div>

_(Flash Vendor)_:
: <?=$var['flashVendor'];?>

_(Flash Product)_:
: <?=$var['flashProduct'];?>&nbsp;

_(Flash GUID)_:
: <?=$var['flashGUID'];?>&nbsp;

<?if (strstr($var['regTy'], "blacklisted")):?>

&nbsp;
: **_(Blacklisted)_** - <a href="http://lime-technology.com/contact" target="_blank">_(Contact Support)_</a>

<?else:?>

&nbsp;
: [_(Registration Key Manager)_](/Tools/Registration)

<?endif;?>

:flash_backup_help:

&nbsp;
: <input type="button" value="_(Flash backup)_" onclick="backup()"><input type="button" value="_(Done)_" onclick="done()">

                )

            [HardwareProfile] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => Hardware Profile
                    [Icon] => icon-profile
                    [Tag] => wrench
                    [file] => webGui/HardwareProfile.page
                    [root] => webGui
                    [name] => HardwareProfile
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$var = parse_ini_file('state/var.ini');
$keyfile = trim(base64_encode(@file_get_contents($var['regFILE'])));
?>

<script>
function toggle_hw() {
  if ($('#hw_details a').html()=="_(Show Details)_") {
    $.getJSON('/webGui/include/HardwareCollect.php',function(hwdata) {
      $('#hw_details a').html("_(Hide Details)_");
      $('#hw_details pre').text(hwdata.hwxml).slideDown('fast');
    });
  } else {
    $('#hw_details a').html("_(Show Details)_");
    $('#hw_details pre').slideUp('fast', function(){$(this).html('');});
  }
}
function upload() {
  $('input[value="Upload"]').val('_(Uploading)_...').prop('disabled',true);
  $('#pleaseWait').show('fast');

  $.getJSON('/webGui/include/HardwareCollect.php',function(hwdata) {
    $.post('https://keys.lime-technology.com/account/hwprofile/upload',{keyfile:hwdata.keyfile,osversion:hwdata.osversion,hwxml:hwdata.hwxml},function(data) {
      $('#pleaseWait').hide().html(data.message).fadeIn('fast');
      $('input[value="_(Uploading)_..."]').val('_(Uploaded)_!');
    }).fail(function(data) {
      var msg = "<p>_(Sorry, an error occurred)_. _(Please try again later)_.</p>";
      $('#pleaseWait').hide().html(msg).fadeIn('fast');
      $('input[value="_(Uploading)_..."]').val("_(Upload)_").prop('disabled',false);
    });
  });
}
$(function() {
  $.getJSON('https://keys.lime-technology.com/account/hwprofile/status',{keyfile:'<?=$keyfile?>'},function(status) {
    if (status.last_submitted) {
      var d = new Date(status.last_submitted * 1000);
      $('#lastUploaded').html("_(Your hardware profile was last submitted on)_ " + d.toLocaleDateString()).fadeIn('fast');
    } else {
      $('#lastUploaded').html("_(You haven't sent Limetech your hardware profile yet)_").fadeIn('fast');
    }
  });
});
</script>
_(This utility is used for troubleshooting purposes)_. _(It will collect all of the system hardware information, remove any serial numbers, and securely upload it to LimeTech)_.

<div id="hw_details">
<pre style="display:none;max-height:300px;overflow-y:auto"></pre>
<a href="#" onclick="toggle_hw();return false;">_(Show Details)_</a>
</div>

*_(No personal information such as user names, passwords, or any other file contents is included in the hardware profile)_.*

<div id="lastUploaded" style="color:grey"></div>

<input type="button" value="_(Upload)_" onclick="upload()"><input type="button" value="_(Done)_" onclick="done()">

<br><div id="pleaseWait" style="display:none;font-weight:bold;color:blue;text-align:center">_(Please wait)_... _(uploading hardware information)_ (_(this may take several minutes)_)</div>

                )

            [HelpButton] => Array
                (
                    [Menu] => Buttons:7
                    [Title] => Help
                    [Icon] => icon-u-help
                    [Code] => e934
                    [file] => webGui/HelpButton.page
                    [root] => webGui
                    [name] => HelpButton
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function HelpButton() {
  if ($('.nav-item.HelpButton').toggleClass('active').hasClass('active')) {
    $('.inline_help').show('slow');
    $.cookie('help','help');
  } else {
    $('.inline_help').hide('slow');
    $.removeCookie('help');
  }
}
</script>
                )

            [Identification] => Array
                (
                    [Menu] => OtherSettings
                    [Type] => xmenu
                    [Title] => Identification
                    [Icon] => icon-home
                    [Tag] => home
                    [file] => webGui/Identification.page
                    [root] => webGui
                    [name] => Identification
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$disabled = $var['fsState']!='Stopped' ? 'disabled' : '';
$name_regex = '^[A-Za-z0-9]([A-Za-z0-9\-\.]{0,13}[A-Za-z0-9])?$';
$name_warn = preg_match('/'.$name_regex.'/', $var['NAME']) ? 'none' : 'block';
?>
<form markdown="1" name="NameSettings" method="POST" action="/update.htm" target="progressFrame">
<input type="hidden" name="server_https" value="<?=_var($_SERVER,'HTTPS')?>">
<input type="hidden" name="server_name" value="<?=_var($_SERVER,'HTTP_HOST')?>">
<input type="hidden" name="server_addr" value="<?=_var($_SERVER,'SERVER_ADDR')?>">

_(Server name)_:
: <input type="text" name="NAME" id="NAME" maxlength="15" pattern="<?=$name_regex?>" value="<?=htmlspecialchars(_var($var,'NAME'))?>" title="_(Only alphanumeric characters)_ (&quot;A-Z&quot;, &quot;a-z&quot;, and &quot;0-9&quot;), dashes (&quot;-&quot;), and dots (&quot;.&quot;); _(and, the first and last characters must be alphanumeric)_" <?=$disabled?> required> <span id="name_warning" style="display:<?=$name_warn?>"><i class="fa fa-warning icon warning"></i> _(Not compatible with NetBIOS)_</span>

:id_server_name_help:

_(Description)_:
: <input type="text" name="COMMENT" value="<?=htmlspecialchars(_var($var,'COMMENT'))?>" <?=$disabled?>>

:id_description_help:

_(Model)_:
: <input type="text" name="SYS_MODEL" value="<?=htmlspecialchars(_var($var,'SYS_MODEL'))?>" <?=$disabled?>>

:id_model_help:

&nbsp;
: <input type="submit" name="changeNames" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()"><?if ($disabled):?>*_(Array must be **Stopped** to change)_*<?endif;?>
</form>
<script>
$("#NAME").keypress(function(event) {
  return event.key.match(/[A-Za-z0-9\-\.]/)!==null;
});
$("#NAME").on("input change", function() {
  if ($(this).val().match(/<?=$name_regex;?>/) === null) {
    $('#name_warning').fadeIn('fast');
  } else {
    $('#name_warning').fadeOut('fast');
  }
});
</script>

                )

            [InfoButton] => Array
                (
                    [Menu] => Buttons:5
                    [Title] => Info
                    [Icon] => icon-u-display
                    [Code] => e930
                    [file] => webGui/InfoButton.page
                    [root] => webGui
                    [name] => InfoButton
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function InfoButton() {
  openChanges("system_information", "_(System Information)_", "sysinfo");
}
</script>
                )

            [InstallKey] => Array
                (
                    [Menu] => Registration
                    [Title] => Install Key
                    [Tag] => flag
                    [Cond] => ($var['regTy']!='Pro')
                    [file] => webGui/InstallKey.page
                    [root] => webGui
                    [name] => InstallKey
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style>
span.info{margin-left:12px}
</style>

<script>
function installKey(file) {
  file = file.trim();
  if (file) openPlugin('install_key '+encodeURIComponent(file), "_(Install Key)_");
}
</script>

<form markdown="1">
<span class="info">_(To install a registration key, paste the key file URL in the box below and click **Install Key**)_.</span>

_(Key file URL)_:
: <input type="text" name="file" id="key_file" maxlength="1024" value="" style="width:33%">
  <input type="button" value="_(Install Key)_" onclick="installKey(this.form.file.value.trim())">
</form>

                )

            [Language] => Array
                (
                    [Menu] => WebGui
                    [Title] => Language
                    [Icon] => icon-language
                    [Tag] => icon-language
                    [file] => webGui/Language.page
                    [root] => webGui
                    [name] => Language
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/plugins/dynamix.plugin.manager/include/PluginHelpers.php";

$installed = ['English'];
$plugins   = '/var/log/plugins';

$keys = parse_ini_file('webGui/include/languages.key',false,INI_SCANNER_RAW);
$head = '<i class="fa fa-fw fa-trash" title="_(Remove the installed language)_" style="cursor:pointer" onclick="remove(&quot;';
$tail = '&quot;)"></i>';

foreach (glob("$plugins/lang-*.xml",GLOB_NOSORT) as $xml_file) $installed[] = language('LanguageLocal',$xml_file).$head.str_replace('lang-','',basename($xml_file,'.xml')).$tail;
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<style>
select.wide{min-width:<?=$themes2?'314':'300'?>px}
div.notice{margin-top:70px;margin-bottom:30px}
div#selectlang{margin-top:20px}
label.button{font-family:clear-sans;font-size:1.1rem;font-weight:bold;letter-spacing:1.8px;text-transform:uppercase;min-width:86px;margin:0;padding:8px;text-align:center;text-decoration:none;white-space:nowrap;cursor:pointer;outline:none;border-radius:4px;border:none;color:#ff8c2f;background:-webkit-gradient(linear,left top,right top,from(#e22828),to(#ff8c2f)) 0 0 no-repeat,-webkit-gradient(linear,left top,right top,from(#e22828),to(#ff8c2f)) 0 100% no-repeat,-webkit-gradient(linear,left bottom,left top,from(#e22828),to(#e22828)) 0 100% no-repeat,-webkit-gradient(linear,left bottom,left top,from(#ff8c2f),to(#ff8c2f)) 100% 100% no-repeat;background:linear-gradient(90deg,#e22828 0,#ff8c2f) 0 0 no-repeat,linear-gradient(90deg,#e22828 0,#ff8c2f) 0 100% no-repeat,linear-gradient(0deg,#e22828 0,#e22828) 0 100% no-repeat,linear-gradient(0deg,#ff8c2f 0,#ff8c2f) 100% 100% no-repeat;background-size:100% 2px,100% 2px,2px 100%,2px 100%}
label.button:hover{color:#f2f2f2;background:-webkit-gradient(linear,left top,right top,from(#e22828),to(#ff8c2f));background:linear-gradient(90deg,#e22828 0,#ff8c2f)}
</style>

<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script>
function execute(cmd,title,language,name,filedata) {
  var keys = {};
  <?foreach ($keys as $key => $name) echo "keys['$key'] = '".strtok($keys[$key],' (')."'\n";?>
  $.post("/webGui/include/FileUpload.php",{cmd:cmd,filename:language,name:encodeURIComponent(name),filedata:filedata},function(list){
    if (list.indexOf('Error 500')==-1) {
      var installed = [];
      if (list.length) {
        var name = list.split(',');
        for (var i=0; i < name.length; i++) installed.push(keys[name[i]]+(name[i]!='en_US'? '<?=$head?>'+name[i]+'<?=$tail?>' : ''));
      }
      $('.installed').html(installed.join(', '));
      swal({title:title,text:"_(See)_ <a href='/Settings/DisplaySettings'>_(Display Settings)_</a> _(to select your language)_",type:'success',html:true,confirmButtonText:"_(Ok)_"});
      $('#uploadbutton').prop('disabled',true);
    }
  });
}
function remove(language) {
  execute('rm', "_(Language support deleted)_", language, '', '');
}
function upload(form) {
  var language = form.language;
  if (!language.value) {
    swal({title:"_(Missing Language)_",text:"_(Please select a language before proceeding)_!",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return;
  }
  execute('add', "_(Language support added)_", language.value, language.options[language.selectedIndex].text, form.file.value);
}
function getZIPfile(event,form) {
  var input = event.target;
  var reader = new FileReader();
  reader.onload = function(){
    var name = input.files[0].name;
    if (name.slice(-4)=='.zip') {
      form.file.value = reader.result;
      $('#uploadbutton').prop('disabled',false);
      for (var n = 0; n < form.language.length; n++) if (form.language.options[n].text.indexOf(name.slice(0,-4))>0) {form.language.selectedIndex = n; break;}
    } else {
     swal({title:"_(Wrong File Extension)_",text:"_(Only ZIP files are allowed)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    }
  };
  reader.readAsDataURL(input.files[0]);
}
function installXML(name) {
  var file = name.trim();
  if (file) openPlugin('language install '+file, "_(Install Language)_");
}
$(function() {
  $('input.view').switchButton({labels_placement:'left', off_label:"_(User)_", on_label:"_(Developer)_"});
  $('input.view').change(function(){$('.user,.developer').toggle('slow');});
});
</script>
<span class="status vhshift"><input type="checkbox" class="view"></span>

<div markdown="1" class="user">
<div class="notice">_(Use this to install official language packs)_</div>
_(Installed languages)_:
: <span class="installed"><?=implode(', ',$installed)?></span>

_(Enter URL of language pack XML file)_
: &nbsp;

<dl>
<form name="xml_install" method="POST" target="progressFrame">
<dt><input type="text" name="file" id="xml_file" maxlength="1024" value="" style="width:90%"></dt>
<dd><input type="button" value="_(Install)_" onclick="installXML(this.form.file.value)" style="margin:0"></dd>
</form>
</dl>
</div>

<div markdown="1" class="developer" style="display:none">
<div class="notice">_(Use this to develop language packs)_</div>
<form markdown="1">
<input type="hidden" name="file" value="">

_(Installed languages)_:
: <span class="installed"><?=implode(', ',$installed)?></span>

_(Select language)_:
: <select name="language" class="wide">
  <?=mk_option(1, "", "---")?>
  <?foreach ($keys as $key => $name) echo mk_option(1, $key, $name)?>
  </select>

<div id="selectlang" markdown="1">
_(Select language file)_:
: <span><label for="files" class="button">_(Browse)_</label><input id="files" type="file" style="display:none" accept=".zip" onchange="getZIPfile(event,this.form)"></span>

</div>
&nbsp;
: <input id="uploadbutton" type="button" value="_(Upload)_" onclick="upload(this.form)" disabled><input type="button" value="_(Done)_" class="lock" onclick="done()">
</form>
</div>

                )

            [LanguageButton] => Array
                (
                    [Menu] => Buttons:1
                    [Title] => Switch Language
                    [Icon] => icon-u-switch
                    [Code] => e982
                    [file] => webGui/LanguageButton.page
                    [root] => webGui
                    [name] => LanguageButton
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
<?if (count(glob('/var/log/plugins/lang-*.xml'))==0):?>
// hide switch button when no other language packs
$(function(){$('.nav-item.LanguageButton').hide();});
<?endif;?>

function LanguageButton() {
  var locale = '<?=$locale?>';
  if (locale) {
    switchLanguage('');
    $.cookie('locale',locale);
  } else {
    switchLanguage($.cookie('locale'));
    $.removeCookie('locale');
  }
}

function switchLanguage(lang) {
  $.post('/webGui/include/LanguageReset.php',{lang:lang},function(){location.reload();});
}
</script>
                )

            [LogButton] => Array
                (
                    [Menu] => Buttons:6
                    [Title] => Log
                    [Icon] => icon-u-log
                    [Code] => e936
                    [file] => webGui/LogButton.page
                    [root] => webGui
                    [name] => LogButton
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function LogButton() {
  openTerminal('syslog','syslog','');
}
</script>

                )

            [LogoutButton] => Array
                (
                    [Menu] => Buttons:2
                    [Title] => Logout
                    [Icon] => icon-u-logout
                    [Code] => e937
                    [Cond] => $_SERVER['HTTP_HOST']!='localhost'
                    [file] => webGui/LogoutButton.page
                    [root] => webGui
                    [name] => LogoutButton
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function LogoutButton() {
  var id = window.setTimeout(null,0);
  while (id--) window.clearTimeout(id);
  window.location.href = '/logout';
}
</script>

                )

            [Main] => Array
                (
                    [Menu] => Tasks:1
                    [Type] => xmenu
                    [Code] => e908
                    [Load] => 30
                    [file] => webGui/Main.page
                    [root] => webGui
                    [name] => Main
                    [text] => 
                )

            [ManagementAccess] => Array
                (
                    [Menu] => OtherSettings
                    [Type] => xmenu
                    [Title] => Management Access
                    [Icon] => icon-key
                    [Tag] => expeditedssl
                    [file] => webGui/ManagementAccess.page
                    [root] => webGui
                    [name] => ManagementAccess
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function find_tasks() {
  global $site;
  $tasks = [];
  foreach ($site as $page) {
    if (empty($page['Menu'])) continue;
    $menu = strtok($page['Menu'], ' ');
    switch ($menu[0]) {
      case '$': $menu = get_ini_key($menu,strtok(' ')); break;
      case '/': $menu = get_file_key($menu,strtok(' ')); break;
    }
    while ($menu !== false) {
      if (substr($menu,0,5) == 'Tasks') {
        if (empty($page['Cond'])) $tasks[] = $page['name'];
        break;
      }
      $menu = strtok(' ');
    }
  }
  sort($tasks);
  return $tasks;
}
function acceptableCert($certFile, $hostname, $expectedURL) {
  if (!file_exists($certFile)) return false;
  $certURLs=null;
  // get Subject URL and all SAN URLs from cert
  exec("openssl x509 -noout -subject -nameopt multiline -in $certFile | sed -n 's/ *commonName *= //p' ; openssl x509 -noout -ext subjectAltName -in $certFile | grep -Eo \"DNS:[a-zA-Z 0-9.*-]*\" | sed \"s/DNS://g\"", $certURLs);
  foreach($certURLs as $certURL) {
    // adjust for wildcard certs
    $certURL = str_replace('*', $hostname, $certURL);
    // case-insensitive compare
    if (strcasecmp($certURL, $expectedURL) == 0) return true;
  }
  return false;
}
$tasks       = find_tasks();
$nginx       = @parse_ini_file('/var/local/emhttp/nginx.ini') ?: [];
$addr        = _var($nginx,'NGINX_LANIP') ?: _var($nginx,'NGINX_LANIP6');
$keyfile     = empty(_var($var,'regFILE')) ? false : @file_get_contents(_var($var,'regFILE'));
$cert2Issuer = '';
$isLEcert    = false;
if ($keyfile !== false) $keyfile = base64_encode($keyfile);

// self-signed or user-provided cert
$cert1File = "/boot/config/ssl/certs/"._var($var,'NAME','tower')."_unraid_bundle.pem";
$cert1Present = file_exists("$cert1File");
$cert1SelfSigned = $cert1URLvalid = false;
$cert1Issuer = '&nbsp;';

if ($cert1Present) {
  $cert1URL = _var($var,'NAME','tower').(_var($var,'LOCAL_TLD') ? '.'._var($var,'LOCAL_TLD') : '');
  // if user replaced cert without reloading nginx, the cert on the flash could be invalid
  $cert1URLvalid = acceptableCert($cert1File, _var($var,'NAME','tower'), $cert1URL);
  $cert1Subject = exec("/usr/bin/openssl x509 -in $cert1File -noout -text | sed -n 's/^.*Subject: //p'");
  $cert1Issuer  = exec("/usr/bin/openssl x509 -in $cert1File -noout -text | sed -n -e 's/^.*Issuer: //p'");
  $cert1Expires = exec("/usr/bin/openssl x509 -in $cert1File -noout -text | sed -n -e 's/^.*Not After : //p'");
  $cert1SelfSigned = ($cert1Subject == $cert1Issuer);
}

// unraid.net, myunraid.net LE cert. could potentially be user provided as well
$cert2File    = "/boot/config/ssl/certs/certificate_bundle.pem";
$cert2Present = file_exists("$cert2File");
if ($cert2Present) {
  $cert2Subject = exec("/usr/bin/openssl x509 -in $cert2File -noout -subject -nameopt multiline 2>/dev/null|sed -n 's/ *commonName *= //p'");
  $cert2Issuer  = exec("/usr/bin/openssl x509 -in $cert2File -noout -text | sed -n -e 's/^.*Issuer: //p'");
  $cert2Expires = exec("/usr/bin/openssl x509 -in $cert2File -noout -text | sed -n -e 's/^.*Not After : //p'");
  $isLegacyCert = preg_match('/.*\.unraid\.net$/', $cert2Subject);
  $isWildcardCert = preg_match('/.*\.myunraid\.net$/', $cert2Subject);
  $isLEcert = $isLegacyCert || $isWildcardCert;
  $subject2URL = $cert2Subject;
  if ($isWildcardCert) {
    if (!$addr)
      // if eth0 doesn't have an IP address, then show noip.hash.myunraid.net as a placeholder url
      $subject2URL = str_replace("*", 'noip', $subject2URL);
    elseif (strpos($addr, ":") === false)
      $subject2URL = str_replace("*", str_replace(".", "-", $addr), $subject2URL);
    else
      $subject2URL = str_replace("*", str_replace(":", "-", $addr), $subject2URL);
  }
  if ($isLEcert) {
    exec("openssl x509 -checkend 2592000 -noout -in $cert2File 2>/dev/null", $arrout, $retval_expired);
    if (!$addr) {
      $dnsValid = false;
      $dnsRebindingProtection = false;
    } elseif (strpos($addr, ":") === false) {
      $rebindtest_ip = exec("host -4 -t A rebindtest4.myunraid.net 2>/dev/null|awk '{print \$4}'");
      $dnsRebindingProtection = ($rebindtest_ip != "192.168.42.42");
      if (!$dnsRebindingProtection) {
        $cert_ip = exec("host -4 -t A $subject2URL 2>/dev/null|awk '{print \$4}'");
        $dnsValid = $cert_ip==$addr;
      }
    } else {
      $rebindtest_ip = exec("host -6 -t AAAA rebindtest6.myunraid.net 2>/dev/null|awk '{print \$4}'");
      // more: restore this after TTL expires
      // $dnsRebindingProtection = ($rebindtest_ip != "fd42::42");
      $dnsRebindingProtection = ($rebindtest_ip != "fd42::42") && ($rebindtest_ip != "fd42::");
      if (!$dnsRebindingProtection) {
        $cert_ip = exec("host -6 -t AAAA $subject2URL 2>/dev/null|awk '{print \$4}'");
        $dnsValid = $cert_ip==$addr;
      }
    }
  }
}

$http_port       = _var($var,'PORT',80) != 80 ? ":{$var['PORT']}" : '';
$https_port      = _var($var,'PORTSSL',443) != 443 ? ":{$var['PORTSSL']}" : '';
$http_ip_url     = "http://"._var($nginx,'NGINX_LANIP')."{$http_port}/";
$https_ip_url    = "https://"._var($nginx,'NGINX_LANIP')."{$https_port}/";
$http_ip6_url    = "http://"._var($nginx,'NGINX_LANIP6')."{$http_port}/";
$https_ip6_url   = "https://"._var($nginx,'NGINX_LANIP6')."{$https_port}/";
$http_mdns_url   = "http://"._var($nginx,'NGINX_LANMDNS')."{$http_port}/";
$https_mdns_url  = "https://"._var($nginx,'NGINX_LANMDNS')."{$https_port}/";
$https_fqdn_url  = "https://"._var($nginx,'NGINX_LANFQDN')."{$https_port}/";
$https_fqdn6_url = "https://"._var($nginx,'NGINX_LANFQDN6')."{$https_port}/";

$urls = [];
// push an array of four values into the $urls array:
//   0 - the url
//   1 - the url it redirects to, or null
//   2 - the certificate file used, or null
//   3 - self-signed certificate, or false

switch(_var($var,'USE_SSL','no')) {
case 'no':
  if (!empty($nginx['NGINX_LANIP']))    $urls[] = [$http_ip_url, null, null, false];
  if (!empty($nginx['NGINX_LANIP6']))   $urls[] = [$http_ip6_url, null, null, false];
  if (!empty($nginx['NGINX_LANMDNS']))  $urls[] = [$http_mdns_url, null, null, false];
  if (!empty($nginx['NGINX_LANFQDN']))  $urls[] = [$https_fqdn_url, null, "certificate_bundle.pem", false];
  if (!empty($nginx['NGINX_LANFQDN6'])) $urls[] = [$https_fqdn6_url, null, "certificate_bundle.pem", false];
  break;
case 'yes':
  if (!empty($nginx['NGINX_LANIP']))    $urls[] = [$http_ip_url, $https_ip_url, null, false];
  if (!empty($nginx['NGINX_LANIP']))    $urls[] = [$https_ip_url, null, "{$var['NAME']}_unraid_bundle.pem", $cert1SelfSigned];
  if (!empty($nginx['NGINX_LANIP6']))   $urls[] = [$http_ip6_url, $https_ip6_url, null, false];
  if (!empty($nginx['NGINX_LANIP6']))   $urls[] = [$https_ip6_url, null, "{$var['NAME']}_unraid_bundle.pem", $cert1SelfSigned];
  if (!empty($nginx['NGINX_LANMDNS']))  $urls[] = [$http_mdns_url, $https_mdns_url, null, false];
  if (!empty($nginx['NGINX_LANMDNS']))  $urls[] = [$https_mdns_url, null, "{$var['NAME']}_unraid_bundle.pem", $cert1SelfSigned];
  if (!empty($nginx['NGINX_LANFQDN']))  $urls[] = [$https_fqdn_url, null, "certificate_bundle.pem", false];
  if (!empty($nginx['NGINX_LANFQDN6'])) $urls[] = [$https_fqdn6_url, null, "certificate_bundle.pem", false];
  break;
case 'auto': // aka strict
  if (!empty($nginx['NGINX_LANIP']))    $urls[] = [$http_ip_url, $https_fqdn_url, null, false];
  if (!empty($nginx['NGINX_LANIP6']))   $urls[] = [$http_ip6_url, $https_fqdn6_url, null, false];
  if (!empty($nginx['NGINX_LANMDNS']))  $urls[] = [$http_mdns_url, $https_fqdn_url, null, false];
  if (!empty($nginx['NGINX_LANFQDN']))  $urls[] = [$https_fqdn_url, null, "certificate_bundle.pem", false];
  if (!empty($nginx['NGINX_LANFQDN6'])) $urls[] = [$https_fqdn6_url, null, "certificate_bundle.pem", false];
  break;
}

$cert_time_format   = $display['date'].($display['date']!='%c' ? ', '.str_replace(['%M','%R'],['%M:%S','%R:%S'],$display['time']):'');
$provisionlabel     = $isLEcert ? _('Renew') : _('Provision');
$disabled_provision = $keyfile===false || ($isLEcert && $retval_expired===0) || !$addr ? 'disabled' : '';
$disabled_provision_msg = !$addr ? _('Ensure the primary network card eth0 has an IP address.') : '';
$disabled_upgrade   = !$addr ? 'disabled' : '';
$disabled_updatedns = $keyfile!==false && $isLEcert ? '' : 'disabled';
$disabled_delete    = $cert2Present && $var['USE_SSL']!='auto' ? '' : 'disabled';
$disabled_auto      = $isLEcert && !$dnsRebindingProtection && $dnsValid ? '' : 'disabled';
$upgradelabel       = _('Upgrade Cert');

// Get ports in use
$portsInUse = [];
exec("lsof -Pni|awk '/LISTEN/ && \$9!~/127.0.0.1/ && \$9!~/\\[::1\\]/{print \$9}'|sort -u", $output);

$bind = false; //= $var['BIND_MGT']=='yes'; - not used in 6.10
$list = ['*'];
if ($addr) array_push($list, $addr);

foreach ($output as $line) {
  [$ip, $port] = my_explode($line[0]=='[' ? ']:' : ':',$line);
  if ($ip[0]=='[') $ip = substr($ip,1); // ipv6 address
  if (!in_array($port,$portsInUse) && (!$bind || in_array($ip,$list))) $portsInUse[] = $port;
}
sort($portsInUse,SORT_NUMERIC);
?>
<style>
span.warning{margin-left:20px}
</style>

<script>
function provisionHandler(event, form) { // provisions and renewals require being Signed In to Unraid.net
  if (event.submitter.value === 'Delete') return true; // always allow deletes
  if (event.submitter.value === 'Renew') return true; // always allow renewals
};

function updateDNS(button) {
  $(button).prop("disabled", true).html("<i class='fa fa-circle-o-notch fa-spin fa-fw'></i>_(Update DNS)_");
  var failure = function(data) {
    var status = data.status;
    var obj = data.responseJSON;
    var msg = "_(Sorry, an error occurred updating unraid.net DNS records)_. _(The error is)_: "+obj.error+".";
    $(button).prop("disabled", false).html("_(Update DNS)_");
    swal({title:"_(Oops)_",text:msg,type:"error",html:true,confirmButtonText:"_(Ok)_"});
  };
  var success = function(data) {
    $(button).prop("disabled", false).html("_(Update DNS)_");
    <?$text = _('Your local IP address %s has been updated for unraid.net')?>
    swal({title:"",text:"<?=sprintf($text,$addr)?>",type:"success",html:true,confirmButtonText:"_(Ok)_"});
  };
  $.post("/webGui/include/UpdateDNS.php",success).fail(failure);
}

function checkPorts(form) {
  var portsInUse = [<?=implode(',',$portsInUse)?>];
  var range = [], list = [], duplicates = [];
  var checks = [
    {'key':"PORTTELNET", 'used':"<?=$var['USE_TELNET']=='yes'?>", 'port':"<?=$var['PORTTELNET']?>", 'default':"23" , 'name':"_(TELNET port)_"},
    {'key':"PORTSSH"   , 'used':"<?=$var['USE_SSH']=='yes'?>"   , 'port':"<?=$var['PORTSSH']?>"   , 'default':"22" , 'name':"_(SSH port)_"},
    {'key':"PORT"      , 'used':"<?=$var['USE_SSL']=='no'?>"    , 'port':"<?=$var['PORT']?>"      , 'default':"80" , 'name':"_(HTTP port)_"},
    {'key':"PORTSSL"   , 'used':"<?=$var['USE_SSL']!='no'?>"    , 'port':"<?=$var['PORTSSL']?>"   , 'default':"443", 'name':"_(HTTPS port)_"}
  ];
  for (var i=0,check; check=checks[i]; i++) {
    var item = $(form).find('input[name="'+check['key']+'"]');
    if ($(item).is(':disabled')) continue;
    item.val(parseInt(item.val()));
    var current = (check['port']||check['default']).toString();
    var userPort = (item.val()||check['default']).toString();
    if (userPort < 1 || userPort > 65535) range.push(userPort+' ('+check['name']+')');
    duplicates.push(userPort);
    if (check['used'] == '1' && userPort != current) {
      if (portsInUse.includes(parseInt(userPort))) list.push(userPort+' ('+check['name']+')');
    }
  }
  duplicates = duplicates.reduce(function(acc, el, i, arr) {
    if (arr.indexOf(el) !== i && acc.indexOf(el) < 0) acc.push(el); return acc;
  }, []);

  if (range.length > 0) {
    swal({title:'_(Port out of range)_',text:sprintf('_(Port %s is out of range (minimum 1 maximum 65535))_',range.join(', ')),type:'error',showCancelButton:false,confirmButtonText:"_(OK)_"});
    return;
  }
  if (list.length > 0) {
    swal({title:'_(Port already in use)_',text:sprintf('_(Port %s is already in use by other services)_',list.join(', ')),type:'error',showCancelButton:false,confirmButtonText:"_(OK)_"});
    return;
  }
  if (duplicates.length > 0) {
    swal({title:'_(Duplicate port entered)_',text:sprintf('_(Port %s is duplicated)_',duplicates.join(', ')),type:'error',showCancelButton:false,confirmButtonText:"_(OK)_"});
    return;
  }
  form.submit();
}

function updateTELNET(form) {
  form.PORTTELNET.disabled = form.USE_TELNET.value=='no';
}

function updateSSH(form) {
  form.PORTSSH.disabled = form.USE_SSH.value=='no';
}


$(function(){
  var form = document.SSLSettings;
  updateTELNET(form);
  updateSSH(form);
});
</script>
<form markdown="1" name="SSLSettings" method="POST" action="/update.htm" target="progressFrame">
<input type="hidden" name="changePorts" value="Apply">
<input type="hidden" name="server_name" value="<?=strtok(_var($_SERVER,'HTTP_HOST'),":")?>">
<input type="hidden" name="server_addr" value="<?=_var($_SERVER,'SERVER_ADDR')?>">
_(User 'root')_:
: [_(Manage)_](/Settings/Users/ManagementAccess/UserEdit?name=root)

_(Start page)_:
: <select name="START_PAGE">
<?foreach ($tasks as $task) echo mk_option(_var($var,'START_PAGE','Main'), $task, _($task));?>
  </select>

:mgmt_start_page_help:

<!--
Restrict access:
: <select name="BIND_MGT" class="narrow">
  <?=mk_option($var['BIND_MGT'], "no", _('No'))?>
  <?=mk_option($var['BIND_MGT'], "yes", _('Yes'))?>
  </select>

> By default GUI, SSH and TELNET access are available on all active interfaces of the system.
>
> *Restrict access* limits GUI, SSH and TELNET access to the management interface only (eth0).
-->

_(Use TELNET)_:
: <select name="USE_TELNET" onchange="updateTELNET(this.form)">
  <?=mk_option($var['USE_TELNET'], "no", _('No'))?>
  <?=mk_option($var['USE_TELNET'], "yes", _('Yes'))?>
  </select>

:mgmt_use_telnet_help:

_(TELNET port)_:
: <input type="number" name="PORTTELNET" class="narrow" min="1" max="65535" value="<?=$var['PORTTELNET']?>" placeholder="23">

:mgmt_telnet_port_help:

_(Use SSH)_:
: <select name="USE_SSH" onchange="updateSSH(this.form)">
  <?=mk_option($var['USE_SSH'], "no", _('No'))?>
  <?=mk_option($var['USE_SSH'], "yes", _('Yes'))?>
  </select>

:mgmt_use_ssh_help:

_(SSH port)_:
: <input type="number" name="PORTSSH" class="narrow" min="1" max="65535" value="<?=$var['PORTSSH']?>" placeholder="22">

:mgmt_ssh_port_help:

_(Use UPnP)_:
: <select name="USE_UPNP">
  <?=mk_option($var['USE_UPNP'], "yes", _('Yes'))?>
  <?=mk_option($var['USE_UPNP'], "no", _('No'))?>
  </select>

:mgmt_use_upnp_help:

_(Use SSL/TLS)_:
: <select name="USE_SSL" onchange="$('#ssl-warning').show();">
  <?=mk_option($var['USE_SSL'], "no", _('No'))?>
  <?=mk_option($var['USE_SSL'], "yes", _('Yes'))?>
  <?=mk_option($var['USE_SSL'], "auto", _('Strict'), $disabled_auto)?>
  </select><span id="ssl-warning" class="warning" style="display:none"><i class="fa fa-warning fa-fw"></i> _(if you have trouble logging in, close all other tabs pointing to this server and clear your browser's cache)_</span>

:mgmt_use_ssl_tls_help:

_(HTTP port)_:
: <input type="number" name="PORT" class="narrow" min="1" max="65535" value="<?=$var['PORT']?>" placeholder="80">

:mgmt_http_port_help:

_(HTTPS port)_:
: <input type="number" name="PORTSSL" class="narrow" min="1" max="65535" value="<?=$var['PORTSSL']?>" placeholder="443">

:mgmt_https_port_help:

_(Local TLD)_:
: <input type="text" name="LOCAL_TLD" class="narrow" value="<?=htmlspecialchars($var['LOCAL_TLD'])?>">

:mgmt_local_tld_help:

&nbsp;
: <input type="button" value="_(Apply)_" onclick="checkPorts(this.form)" disabled><input type="button" value="_(Done)_" onclick="done()">

</form>

_(Local access URLs)_:
: <?
// url[0] = url
// url[1] = redirect url or null
// url[2] = certificate used or null
// url[3] = is certificate self-signed T/F
$n = 0;
foreach($urls as $url) {
  $msg  = "";
  $url0 = substr_count($url[0]??'',':')>3 ? preg_replace('#(://)(.+?)(:?\d*)/$#','$1[$2]$3/',$url[0]) : $url[0]; // IPv6 - IPv4 notation
  $url1 = substr_count($url[1]??'',':')>3 ? preg_replace('#(://)(.+?)(:?\d*)/$#','$1[$2]$3/',$url[1]) : $url[1]; // IPv6 - IPv4 notation
  if ($url[1]) $msg .= " "._("redirects to")." <a href='$url1'>$url1</a>";
  if ($url[2]) $msg .= " "._("uses")." ".$url[2];
  if ($url[3]) $msg .= "<span class='warning'> <i class='fa fa-warning fa-fw'></i> "._("is a self-signed certificate, ignore the browser's warning and proceed to the GUI")."</span>";
  echo ($n ? "<dt>&nbsp;</dt><dd>" : ""),"<a href='$url0'>$url0</a>$msg",($n++ ? "</dd>" : "");
}?>

:mgmt_local_access_urls_help:

<?if ($cert1Present):?>
_(Self-signed or user-provided certificate)_:
: <?=$cert1File?>

<?if ($cert1URLvalid && _var($var,'USE_SSL')=='yes'):?>
_(Certificate URL)_:
: <?="<a href='https://$cert1URL$https_port'>$cert1URL</a>"?>

<?elseif ($cert1URLvalid):?>
_(Certificate URL)_:
: <?=$cert1URL?>

<?else:?>
_(Certificate URL)_:
: _(Certificate not valid for)_ <?=$cert1URL?>
<?endif;?>

_(Certificate issuer)_:
: <?=$cert1Issuer?>
<?if ($cert1URLvalid && _var($var,'USE_SSL')=='yes' && $cert1SelfSigned):?>
  <span class="warning"><i class="fa fa-warning fa-fw"></i> _(is a self-signed certificate, ignore the browser's warning when using this certificate)_</span>
<?endif;?>

_(Certificate expiration)_:
: <?=_(my_date($cert_time_format, strtotime($cert1Expires)),0)?>

<?else:?>
_(Self-signed certificate file)_:
: _(Not present)_
<?endif;?>

<form markdown="1" name="Provision" method="POST" target="progressFrame" action="/update.htm" onsubmit="provisionHandler(event, this)">
<input type="hidden" name="server_name" value="<?=strtok(_var($_SERVER,'HTTP_HOST'),":")?>">
<input type="hidden" name="server_addr" value="<?=_var($_SERVER,'SERVER_ADDR')?>">
<?if ($cert2Present):?>
_(Unraid Let's Encrypt certificate)_:
: <?=$cert2File?>

_(Certificate URL)_:
: <?="<a href='https://$subject2URL$https_port'>$cert2Subject</a>"?>

_(Certificate issuer)_:
: <?=$cert2Issuer?>

_(Certificate expiration)_:
: <?=_(my_date($cert_time_format, strtotime($cert2Expires)),0)?>

<?if ($dnsRebindingProtection):?>
&nbsp;
: _(DNS Rebinding Protection is ENABLED)_

<?elseif ($dnsValid !== true):?>
&nbsp;
: _(DNS Propagation is PENDING)_

<?endif;?>
<?else:?>
_(CA-signed certificate file)_:
: _(Not present)_

<?endif;?>
&nbsp;
: <button type="submit" name="changePorts" value="Provision" <?=$disabled_provision?>><?=$provisionlabel?></button><button type="submit" name="changePorts" value="Delete" <?=$disabled_delete?> >_(Delete)_</button><!-- <button type="button" onclick="updateDNS(this)" <?=$disabled_updatedns?>>_(Update DNS)_</button> --><?=$disabled_provision_msg?>

<?if ($cert2Present && $isLegacyCert):?>
&nbsp;
: <button type="submit" name="changePorts" value="Upgrade" <?=$disabled_upgrade?>><?=$upgradelabel?></button>
<?endif;?>

:mgmt_certificate_expiration_help:

</form>

                )

            [MoverSettings] => Array
                (
                    [Menu] => Scheduler:2
                    [Title] => Mover Settings
                    [Tag] => calendar-check-o
                    [file] => webGui/MoverSettings.page
                    [root] => webGui
                    [name] => MoverSettings
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$setup = true;
if (!$pool_devices) {
  echo "<p class='notice'>"._('No Cache device present')."!</p>";
  $setup = false;
} elseif ($var['shareUser']=='-') {
  echo "<p class='notice'>"._('User shares not enabled')."!</p>";
  $setup = false;
}
$cron = explode(' ',$var['shareMoverSchedule']);
$move = $cron[2]!='*' ? 3 : ($cron[4]!='*' ? 2 : (substr($cron[1],0,1)!='*' ? 1 : 0));
$mode = ['Hourly','Daily','Weekly','Monthly'];
$days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
?>
<script>
<? if ($setup == true):?>
$(function() {
  presetMover(document.mover_schedule);
});
<? endif; ?>
// Fool Unraid by simulating the original input field
function prepareMover(form) {
  var mode = form.shareMoverSchedule.value;
  var min = mode!=0 ? form.min.value : 0;
  var hour = mode!=0 ? form.hour1.value : form.hour2.value;
  form.shareMoverSchedule.options[mode].value = min+' '+hour+' '+form.dotm.value+' * '+form.day.value;
  form.min.disabled = true;
  form.hour1.disabled = true;
  form.hour2.disabled = true;
  form.dotm.disabled = true;
  form.day.disabled = true;
}
function presetMover(form) {
  var mode = form.shareMoverSchedule.value;
  form.min.disabled = false;
  form.day.disabled = mode!=2;
  form.dotm.disabled = mode!=3;
  form.day.value = form.day.disabled ? '*' : (form.day.value=='*' ? 0 : form.day.value);
  form.dotm.value = form.dotm.disabled ? '*' : (form.dotm.value=='*' ? 1 : form.dotm.value);
  if (mode==0) {$('#H1').hide(); $('#H2').show();} else {$('#H2').hide(); $('#H1').show();}
}
</script>
<form markdown="1" name="mover_schedule" method="POST" action="/update.htm" target="progressFrame" onsubmit="prepareMover(this)">
<?if ($setup):?>
_(Mover schedule)_:
: <select name="shareMoverSchedule" onchange="presetMover(this.form)">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option($move, strval($m), _($mode[$m]))?>
  <?endfor;?>
  </select>

:mover_schedule_help:

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option($cron[4], strval($d), _($days[$d],0))?>
  <?endfor;?>
  <?=mk_option($cron[4], "*", "--------", "disabled")?>
  </select>

:mover_day_of_the_week_help:

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option($cron[2], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option($cron[2], "*", "--------", "disabled")?>
  </select>

:mover_day_of_the_month_help:

_(Time of the day)_:
: <span id="H1"<?if ($move==0):?> style="display:none"<?endif;?>><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option($cron[1], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option($cron[0], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="H2"<?if ($move!=0):?> style="display:none"<?endif;?>><select name="hour2">
  <?=mk_option($cron[1], "*/1", _("Every hour"))?>
  <?=mk_option($cron[1], "*/2", _("Every 2 hours"))?>
  <?=mk_option($cron[1], "*/3", _("Every 3 hours"))?>
  <?=mk_option($cron[1], "*/4", _("Every 4 hours"))?>
  <?=mk_option($cron[1], "*/6", _("Every 6 hours"))?>
  <?=mk_option($cron[1], "*/8", _("Every 8 hours"))?>
  </select></span>

:mover_time_of_the_day_help:

_(Mover logging)_:
: <select name="shareMoverLogging">
  <?=mk_option($var['shareMoverLogging'], "yes", _("Enabled"))?>
  <?=mk_option($var['shareMoverLogging'], "no", _("Disabled"))?>
  </select>

:mover_logging_help:

<?endif;?>
<?if ($setup):?>
<?if ($pool_devices):?>
<?if (file_exists('/var/run/mover.pid')):?>
<input type="submit" name="cmdStartMover" value="_(Move now)_" disabled> _(Mover is running)_
<?else:?>
<input type="submit" name="cmdStartMover" value="_(Move now)_"> _(Click to invoke the Mover)_
<?endif;?>
<?else:?>
&nbsp;
<?endif;?>
: <input type="submit" name="changeMover" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
<?endif;?>
</form>

                )

            [NFS] => Array
                (
                    [Menu] => NetworkServices:2
                    [Title] => NFS
                    [Icon] => icon-linux
                    [Tag] => linux
                    [file] => webGui/NFS.page
                    [root] => webGui
                    [name] => NFS
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function checkNFSenable() {	
  var form = document.nfs_enable;
  form.fuse_remember.disabled = form.shareNFSEnabled.value=="_(no)_";	
}
$(checkNFSenable);
</script>

<form markdown="1" name="nfs_enable" method="POST" action="/update.htm" target="progressFrame">
_(Enable NFS)_:
: <select name="shareNFSEnabled" onchange="checkNFSenable()">
  <?=mk_option($var['shareNFSEnabled'], "no", _('No'));?>
  <?=mk_option($var['shareNFSEnabled'], "yes", _('Yes'));?>
  </select>

:nfs_enable_help:

_(Tunable (fuse_remember))_:
: <input type="text" name="fuse_remember" maxlength="10" value="<?=$var['fuse_remember']?>" class="narrow"><?=_($var['fuse_remember_status'])?>

:nfs_tunable_fuse_remember_help:

&nbsp;
: <input type="submit" name="changeShare" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>
                )

            [NetworkExtra] => Array
                (
                    [Menu] => NetworkSettings
                    [Title] => Interface Extra
                    [Tag] => icon-ethernet
                    [file] => webGui/NetworkExtra.page
                    [root] => webGui
                    [name] => NetworkExtra
                    [text] => <?PHP
/* Copyright 2023, Lime Technology
 * Copyright 2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$cfg = '/boot/config/network-extra.cfg';

if (file_exists($cfg)) {
  extract(parse_ini_file($cfg));
  $include_interfaces = str_replace(" ","\n",$include_interfaces);
  $exclude_interfaces = str_replace(" ","\n",$exclude_interfaces);
} else {
  $include_interfaces = "";
  $exclude_interfaces = "";
}
?>
<style>
span[id^="info-"]{margin-left:20px}
<?if ($themes1):?>
span.status.vhshift{margin-right:-10px!important}
<?endif;?>
</style>

<script>
function prepareText(form) {
  var mgmt = ['br0','bond0','eth0'];
  form.include_interfaces.value = form.include.value.replace(/[\n,]/g,' ').replace(/  +/g,' ').trim();
  form.exclude_interfaces.value = form.exclude.value.replace(/[\n,]/g,' ').replace(/  +/g,' ').trim();
  form.include.disabled = true;
  form.exclude.disabled = true;
  var include = form.include_interfaces.value.split(' ');
  var exclude = form.exclude_interfaces.value.split(' ');
  // silently remove management interfaces from include list
  for (var i=0,name; name=include[i]; i++) {
    if (mgmt.includes(name)) include[i] = '';
  }
  form.include_interfaces.value = include.join(' ').replace(/  +/g,' ').trim();
  // give warning when management interface is excluded
  for (var i=0,name; name=exclude[i]; i++) {
    if (mgmt.includes(name)) {
      swal({title:"_(Management Interface)_ '"+name+"'",text:"_(You can not exclude this interface)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
      form.include.disabled = false;
      form.exclude.disabled = false;
      return false;
    }
  }
  return true;
}

<?if (!$tabbed):?>
function toggleExtra() {
  var tag = '#tag_extra';
  var view = '#extra_table';
  if ($(view).is(':visible')) {
    $(tag).removeClass('fa-chevron-up').addClass('fa-chevron-down');
    $.cookie(view,'hide',{expires:3650});
  } else {
    $(tag).removeClass('fa-chevron-down').addClass('fa-chevron-up');
    $.removeCookie(view);
  }
  $(view).toggle('slow');
}
$(function(){
  $('div.title').eq(-3).find('span.left').append("<span class='status vhshift'><i id='tag_extra' class='fa fa-fw fa-chevron-up' style='cursor:pointer' onclick='toggleExtra()'></i></span>");
  if (!$.cookie('#extra_table')) $('#extra_table').show(); else {$('#extra_table').hide(); $('#tag_extra').removeClass('fa-chevron-up').addClass('fa-chevron-down');}
});
<?else:?>
$(function(){
  $('#extra_table').show();
});
<?endif;?>
$(function(){
  $('form textarea').on('input',function(){
    $(this).prop('rows',($(this).val().match(/\n/g)||[]).length+1);
  });
});
</script>

<div markdown="1" id="extra_table" style="display:none">
<form markdown="1" name="network_extra" method="POST" action="/update.php" target="progressFrame" onsubmit="return prepareText(this)">
<input type="hidden" name="#file" value="<?=$cfg?>">
<input type="hidden" name="#command" value="/webGui/scripts/reload_services">
<input type="hidden" name="include_interfaces" value="">
<input type="hidden" name="exclude_interfaces" value="">

_(Current listening interfaces)_:
: <?=exec("$docroot/webGui/scripts/show_interfaces")?:_('Any')?><span class="red-text" style="margin-left:30px"><?=exec("$docroot/webGui/scripts/error_interfaces")?></span>
<hr>

_(Include listening interfaces)_:
: <textarea name="include" spellcheck="false" cols="80" rows="<?=substr_count($include_interfaces,"\n")+1?>" maxlength="2048" name="text" style="resize:none;width:200px"><?=$include_interfaces?></textarea>

:eth_network_extra_include_help:

_(Exclude listening interfaces)_:
: <textarea name="exclude" spellcheck="false" cols="80" rows="<?=substr_count($exclude_interfaces,"\n")+1?>" maxlength="2048" name="text" style="resize:none;width:200px"><?=$exclude_interfaces?></textarea>

:eth_network_extra_exclude_help:

&nbsp;
: <input type="submit" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

</div>

                )

            [NetworkRules] => Array
                (
                    [Menu] => NetworkSettings
                    [Title] => Interface Rules
                    [Tag] => icon-network
                    [Cond] => file_exists('/boot/config/network-rules.cfg')
                    [file] => webGui/NetworkRules.page
                    [root] => webGui
                    [name] => NetworkRules
                    [text] => <?PHP
/* Copyright 2023, Lime Technology
 * Copyright 2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$cfg = '/boot/config/network-rules.cfg';

function strip($item) {
  [$key,$val] = explode('"',$item);
  return $val;
}

exec("awk '/NAME=\"eth/{print $4 $8}' $cfg",$rules);
exec("grep -Po '^# \K.*' $cfg",$info);

$link = []; $i = 0;
foreach ($rules as $rule) {
  [$mac,$eth] = array_map('strip',my_explode(',',$rule));
  $link[$eth]['mac'] = $mac;
  $link[$eth]['info'] = $info[$i++];
}
ksort($link,SORT_NATURAL);
?>
<style>
span[id^="info-"]{margin-left:20px}
<?if ($themes1):?>
span.status.vhshift{margin-right:-10px!important}
<?endif;?>
</style>
<script>
var info = {};
<?foreach ($link as $eth => $val):?>
info['<?='_'.str_replace(':','',$val['mac'])?>'] = "<?=$val['info']?>";
<?endforeach;?>

function check_rules(form) {
  var mac = [];
  $(form).find('select[name^="eth"]').each(function(){mac.push($(this).val());});
  if (mac.same()) {
    swal({title:"_(MAC address mismatch)_",text:"_(Rules contain duplicate MAC address assignments)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else {
    return true;
  }
}
function update_info(id,mac) {
  $('#info-'+id).html(info['_'+mac.replace(/:/g,'')]);
}
<?if (!$tabbed):?>
function toggleRules() {
  var tag = '#tag_rules';
  var view = '#rules_table';
  if ($(view).is(':visible')) {
    $(tag).removeClass('fa-chevron-up').addClass('fa-chevron-down');
    $.cookie(view,'hide',{expires:3650});
  } else {
    $(tag).removeClass('fa-chevron-down').addClass('fa-chevron-up');
    $.removeCookie(view);
  }
  $(view).toggle('slow');
}
$(function(){
  $('div.title').eq(-2).find('span.left').append("<span class='status vhshift'><i id='tag_rules' class='fa fa-fw fa-chevron-up' style='cursor:pointer' onclick='toggleRules()'></i></span>");
  if (!$.cookie('#rules_table')) $('#rules_table').show(); else {$('#rules_table').hide(); $('#tag_rules').removeClass('fa-chevron-up').addClass('fa-chevron-down');}
});
<?else:?>
$(function(){
  $('#rules_table').show();
});
<?endif;?>
</script>
<div markdown="1" id="rules_table" style="display:none">
<form markdown="1" name="network_rules" method="POST" action="/update.php" target="progressFrame" onsubmit="return check_rules(this)">
<input type="hidden" name="#file" value="not-used">
<input type="hidden" name="#include" value="/webGui/include/update.rules.php">
<input type="hidden" name="#cfg" value="<?=$cfg?>">
<?foreach ($link as $eth => $file):?>

_(Interface)_ <?=$eth?>:
: <select name="<?=$eth?>" onchange="update_info(this.name,this.value)">
  <?foreach ($link as $my => $val):?>
  <?=mk_option($file['mac'],$val['mac'],strtoupper($val['mac']));?>
  <?endforeach;?>
  </select><span id="info-<?=$eth?>"><?=$file['info']?></span>

<?endforeach;?>

&nbsp;
: <input type="submit" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

:eth_network_rules_help:

<?if (file_exists('/tmp/network-rules.tmp')):?>
<br><span class="error" style="text-align:center;padding:12px 0">_(Please **Reboot** system to make new rules active)_</span>
<?endif;?>
</div>

                )

            [NetworkServices] => Array
                (
                    [Menu] => Settings:2
                    [Type] => menu
                    [Title] => Network Services
                    [Tag] => globe
                    [file] => webGui/NetworkServices.page
                    [root] => webGui
                    [name] => NetworkServices
                    [text] => 
                )

            [NetworkSettings] => Array
                (
                    [Menu] => OtherSettings
                    [Type] => xmenu
                    [Title] => Network Settings
                    [Icon] => icon-network
                    [file] => webGui/NetworkSettings.page
                    [root] => webGui
                    [name] => NetworkSettings
                    [text] => 
                )

            [New] => Array
                (
                    [Type] => xmenu
                    [Tabs] => true
                    [file] => webGui/New.page
                    [root] => webGui
                    [name] => New
                    [text] => 
                )

            [NewConfig] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => New Config
                    [Icon] => icon-config
                    [Tag] => cog
                    [file] => webGui/NewConfig.page
                    [root] => webGui
                    [name] => NewConfig
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$newarray = $var['mdState']=='NEW_ARRAY';
$disabled = $var['fsState']=="Started";
$width    = [166,300];
if ($newarray) {
  @unlink('/boot/config/smart-one.cfg');
  @unlink('/boot/config/smart-all.cfg');
  @unlink('/boot/config/plugins/dynamix/monitor.ini');
  foreach ($pools as $pool) @unlink("/var/tmp/$pool.log.tmp");
}
?>
<style>
span.indent{display:inline-block;width:240px;margin-top:30px}
</style>

<script>
function prepareNewConfig(form) {
  for (var i=1,item; item=form.preset.options[i]; i++) {
    switch (item.value) {
      case 'array': if (item.selected) form.preserveArray.disabled = false; break;
      case 'cache' : if (item.selected) form.preserveCache.disabled = false; break;
    }
  }
  form.preset.disabled = true;
}
$(function() {
  $('#s1').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>, firstItemChecksAll:true, explicitClose:"..._(close)_"});
<?if ($disabled):?>
  $('#s1').dropdownchecklist('disable');
<?endif;?>
});
</script>

:newconfig_plug:
This is a utility to reset the array disk configuration so that all disks appear as "New" disks, as
if it were a fresh new server.

This is useful when you have added or removed multiple drives and wish to rebuild parity based on
the new configuration.

Use the *'Preserve current assignments'* selection to populate the desired disk slots ***after*** the array has been reset. By default **no** disk slots are populated.

**DO NOT USE THIS UTILITY THINKING IT WILL REBUILD A FAILED DRIVE** - it will have the opposite
effect of making it ***impossible*** to rebuild an existing failed drive - you have been warned!
:end

<hr>
<form name="newConfig" method="POST" action="/update.htm" target="progressFrame" onsubmit="prepareNewConfig(this)">
<input type="hidden" name="preserveArray" value="yes" disabled>
<input type="hidden" name="preserveCache" value="yes" disabled>

<span class="indent">_(Preserve current assignments)_:</span>
<select id="s1" name="preset" multiple="multiple" style="display:none">
<option value=''>_(All)_</option>
<?=mk_option_check(0,'array',_('Array slots'))?>
<?=mk_option_check(0,'cache',_('Pool slots'))?>
</select>
<br>
<span class="indent"><input type="submit" class="lock" name="cmdInit" value="_(Apply)_" disabled><input type="button" class="lock" value="_(Done)_" onclick="done()"></span>
<?if ($newarray):?>
_(Array has been **Reset**)_ (_(please configure)_)
<?elseif ($disabled):?>
_(Array must be **Stopped** to change)_
<?else:?>
<input type="checkbox" onClick="cmdInit.disabled=!this.checked"><small>_(Yes, I want to do this)_</small>
<?endif;?>
</form>

                )

            [NewPerms] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => New Permissions
                    [Icon] => icon-permissions
                    [Tag] => folder-o
                    [file] => webGui/NewPerms.page
                    [root] => webGui
                    [name] => NewPerms
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$width = [166,300];
function data_disks($disk) {
  global $pools;
  return (_var($disk,'type')=="Data" || (_var($disk,'type')=="Cache" && in_array(_var($disk,'name'),$pools))) && _var($disk,'status')=='DISK_OK';
}
?>
<style>
span.block{display:inline-block;width:300px;margin:24px 0}
pre.pre{margin:30px 0;padding:20px}
pre>p{margin:0;padding:0}
</style>

<script>
function selection(select,remove) {
  if (remove) {
    $('#s1').dropdownchecklist('destroy');
    $('#s2').dropdownchecklist('destroy');
  }
  if (select==0) {$('#disks').show(); $('#shares').hide();} else {$('#shares').show(); $('#disks').hide();}
  $('#s1').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>, firstItemChecksAll:true, explicitClose:"..._(close)_"});
  $('#s2').dropdownchecklist({emptyText:"_(None)_", width:<?=$width[0]?>, firstItemChecksAll:true, explicitClose:"..._(close)_"});
<?if ($var['fsState']!="Started"):?>
  $('#s1').dropdownchecklist('disable');
  $('#s2').dropdownchecklist('disable');
<?endif;?>
}
function setNewPerms(form) {
  var dirs = [];
  if (form.select.value==0) {
    for (var i=1,item; item=form.disks.options[i]; i++) {
      if (item.selected) dirs.push(item.value);
    }
  } else {
    for (var i=1,item; item=form.shares.options[i]; i++) {
      if (item.selected) dirs.push(item.value);
    }
  }
  dirs = dirs.join('*');
  if (dirs) {
    swal({title:"_(Proceed)_?",text:"_(This will update folder & file permissions)_",type:'warning',html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},
      function(){setTimeout(function(){openPlugin('newperms '+encodeURIComponent(dirs),"_(New Permissions)_");},250);
    });
  }
}
$(function() {
  selection(0,false);
});
</script>

:newperms_1_plug:
This is a mandatory one-time action to be taken after upgrading from a pre-5.0 Unraid server release to Unraid v5 or a later release.
Select **ALL DISKS** when performing this one-time action.

This utility is also useful for restoring default ownership/permissions on files and
directories when transitioning back from Active Directory to non-Active Directory integration.

The utility starts a background process that goes to each of your data disks and cache disks and selected user shares
and changes file and directory ownership to *nobody/users* (i.e., uid/gid to 99/100), and sets permissions
as follows:
:end

<pre class="pre">
:newperms_2_plug:
For directories:
  drwxrwxrwx

For read/write files:
  -rw-rw-rw-

For readonly files:
  -r--r--r--
:end
</pre>

:newperms_3_plug:
Clicking **Start** will open another window and start the background process.

Closing the window before completion will terminate the background process - so don't do that. This process can take a long time if you have many files.

Note that this tool may negatively affect any docker containers if you allow your **appdata** share to be included.
:end

<form method="POST" action="/update.htm" target="progressFrame">
<span class="block">
<select name="select" onchange="selection(this.value,true)">
<?=mk_option(0,"0","_(Disks)_")?>
<?=mk_option(0,"1","_(Shares)_")?>
</select>
</span>

<span id="disks" class="block">
<select id="s1" name="disks" style="display:none" multiple>
<option value=''>_(All)_</option>
<?foreach (array_filter($disks,'data_disks') as $disk):?>
<?=mk_option(1,"/mnt/{$disk['name']}",_(my_disk($disk['name'])),3)?>
<?endforeach;?>
</select>
</span>

<span id="shares" class="block" style="display:none">
<select id="s2" name="shares" style="display:none" multiple>
<option value=''>_(All)_</option>
<?uksort($shares,'strnatcasecmp');?>
<?foreach ($shares as $share):?>
<?=mk_option(1,"/mnt/user/{$share['name']}",$share['name'])?>
<?endforeach;?>
</select>
</span>

<?if (_var($var,'fsState')=="Started"):?>
<div><input type="button" value="_(Start)_" onclick="setNewPerms(this.form)"><input type="button" value="_(Done)_" class="lock" onclick="done()"></div>
<?else:?>
<div><input type="button" value="_(Start)_" disabled><input type="button" value="_(Done)_" class="lock" onclick="done()">_(Array must be **Started** to change permissions)_.</div>
<?endif;?>
</form>

                )

            [NotificationAgents] => Array
                (
                    [Menu] => Notifications:3
                    [Title] => Notification Agents
                    [Tag] => rss-square
                    [file] => webGui/NotificationAgents.page
                    [root] => webGui
                    [name] => NotificationAgents
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
var scripts = new Object();
var enabledAgents = new Object();
var disabledAgents = new Object();
var openPage = true;

<?$width = [166,300]?>
<?if ($tabbed):?>
$('#tab3').bind({click:function(){initDropdown();}});
$(function(){if ($('#tab3').is(':checked')) initDropdown();});
<?else:?>
$(function(){initDropdown();});
<?endif;?>

if (!String.prototype.format) {
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined' ? args[number] : match;
    });
  };
}
function addSlashes(text) {
  return text.replace(/\"/g, "\\\"");
}
function prepareService(el, name) {
  var script = scripts[name];
  var vars = "";
  var form = $(el).parents('form:first');
  form.find('.variable').each(function() {
    vars += $(this).attr('name')+'="'+addSlashes($(this).val())+"\"\n";
  });
  $('[name="'+name+'"] [id^="slot_"]').each(function() {
    var include = '';
    $(this).find('option').each(function() {
      if ($(this).is(':selected')) {
        if (include.length) include += '\\n';
        include += $(this).val();
        $(this).removeAttr('selected');
      }
    });
    vars += $(this).attr('name')+'="'+include+"\"\n";
  });
  var cmd = (form.find('select[name="Enabled"]').val()=='yes' ? 'enable' : 'disable');
  form.find('input[name="#arg\\[1\\]"]').val(cmd);
  form.find('input[name="#arg\\[2\\]"]').val(name+'.sh');
  form.find('input[name="text"]').val(script.format(vars,'\n'));
}
function execCmd(cmd, name) {
  var form = $('#formExec');
  form.find('input[name="#arg\\[1\\]"]').val(cmd);
  if (name) form.find('input[name="#arg\\[2\\]"]').val(name+'.sh');
  form.submit();
}
function testService(name) {
  var form = $('#formExec');
  form.find('input[name="#arg\\[1\\]"]').val('test');
  form.find('input[name="#arg\\[2\\]"]').val(name+'.sh');
  form.append('<input type="hidden" name="#env[]" value="EVENT='+name+' test.">');
  form.append('<input type="hidden" name="#env[]" value="SUBJECT='+name+' test.">');
  form.append('<input type="hidden" name="#env[]" value="DESCRIPTION='+name+' test.">');
  form.append('<input type="hidden" name="#env[]" value="IMPORTANCE=normal">');
  // host is normally added to link by the notify script. add it here since calling the agent directly.
  form.append('<input type="hidden" name="#env[]" value="LINK='+window.location.origin+'/Settings/Notifications">');
  form.submit();
}
function initDropdown() {
  if (openPage) {$("[id^='slot_']").dropdownchecklist({width:<?=$width[1]?>,explicitClose:'..._(close)_'}); openPage = false;}
}
</script>
<form method="POST" id="formExec" action="/update.php" target="progressFrame">
<input type="hidden" name="#command" value="/webGui/scripts/agent">
<input type="hidden" name="#arg[1]" value="">
<input type="hidden" name="#arg[2]" value="">
</form>
<?
$fields = ['Event','Subject','Timestamp','Description','Importance','Content','Link'];
$xml_file = "webGui/include/NotificationAgents.xml";
$xml = @simplexml_load_file($xml_file) or die(_("Failed to open")." $xml_file");
$i = 1;
foreach ($xml->Agent as $agent) {
  $name = str_replace(' ','_',$agent->Name);
  $enabledAgent = agent_fullname("$name.sh", "enabled");
  $disabledAgent = agent_fullname("$name.sh", "disabled");
  if (is_file($disabledAgent)) {
    $file = $disabledAgent;
    if (is_file($enabledAgent)) unlink($enabledAgent);
  } else {
    $file = $enabledAgent;
  }
  $values = [];
  $script = "";
  if (is_file($file)) {
    preg_match("/[#]{6,100}([^#]*?)[#]{6,100}/si", file_get_contents($file), $match);
    if (isset($match[1])) {
      foreach (explode(PHP_EOL, $match[1]) as $line) {
        if (strpos($line, "=")) {
          [$k, $v] = my_explode("=",str_replace("\"", "", $line),2);
          $values[$k] = $v;
        }
      }
    }
  }
  foreach (explode(PHP_EOL,(String) $agent->Script) as $line) if (trim($line)) $script .= trim($line)."{1}";
  echo '<div class="title shift"><span class="left"><img src="/plugins/dynamix/icons/'.strtolower(str_replace('_','',$name)).'.png" class="icon" style="height:16px;width:16px;">'.str_replace('_',' ',$name).'</span><span class="status vhshift">'.(is_file($enabledAgent) ? '<span class="green">'._("Enabled").'</span>' : '<span class="red">'._("Disabled").'</span>').'</span></div>';
  echo '<form method="POST" name="'.$name.'" action="/update.php" target="progressFrame">';
  echo '<input type="hidden" name="#include" value="/webGui/include/update.file.php">';
  echo '<input type="hidden" name="#file" value="'.$file.'">';
  echo '<input type="hidden" name="#command" value="/webGui/scripts/agent">';
  echo '<input type="hidden" name="#arg[1]" value="">';
  echo '<input type="hidden" name="#arg[2]" value="">';
  echo '<input type="hidden" name="text" value="">';
  echo '<dl><dt>'._("Agent function").':</dt><dd><select name="Enabled">';
  echo mk_option(is_file($disabledAgent), 'no', _('Disabled'));
  echo mk_option(is_file($enabledAgent), 'yes', _('Enabled'));
  echo '</select></dd></dl>';
  echo '<script>scripts["'.$name.'"]='.json_encode($script).';enabledAgents["'.$name.'"]="'.$enabledAgent.'";disabledAgents["'.$name.'"]="'.$disabledAgent.'";</script>';
  foreach ($agent->Variables->children() as $v) {
    $vName = preg_replace('#\[([^\]]*)\]#', '<$1>', (string) $v);
    $vDesc = ucfirst(strtolower(preg_replace('#\[([^\]]*)\]#', '<$1>', $v->attributes()->Desc)));
    $vDefault = preg_replace('#\[([^\]]*)\]#', '<$1>', $v->attributes()->Default);
    $vHelp = preg_replace('#\[([^\]]*)\]#', '<$1>', $v->attributes()->Help);
    echo "<dl><dt>$vDesc:</dt><dd>";
    if (preg_match('/title|message/', $vDesc)) {
      echo '<select id="slot_'.$i++.'" name="'.$vName.'" multiple style="display:none">';
      $value = str_replace('\n',',',isset($values[$vName]) ? $values[$vName] : $vDefault);
      foreach ($fields as $field) echo mk_option_check($value,'$'.strtoupper($field),_($field));
      echo '</select>';
    } else {
      echo '<input type="text" name="'.$vName.'" class="variable" required value="'.( isset($values[$vName]) ? $values[$vName] : $vDefault ).'">';
    }
    echo '</dd></dl>';
    if ($vHelp) echo '<blockquote class="inline_help">'.$vHelp.'</blockquote>';
  }
  echo '<dl><dt>&nbsp;</dt><dd><input type="submit" value='._("Apply").' onclick="prepareService(this, \''.$name.'\')" disabled>';
  echo '<input type="button" value='._("Done").' onclick="done()">';
  if (is_file($file)) {
    echo '<input type="button" value='._("Delete").' onclick="execCmd(\'delete\',\''.$name.'\')">';
    echo '<input type="button" value='._("Test").' onclick="testService(\''.$name.'\')"'.($file==$enabledAgent ? '>' : ' disabled>');
  }
  echo '</dd></dl></form><div style="min-height:50px;"></div>';
}
?>

                )

            [Notifications] => Array
                (
                    [Menu] => UserPreferences
                    [Type] => xmenu
                    [Title] => Notification Settings
                    [Icon] => icon-notifications
                    [Tag] => phone-square
                    [file] => webGui/Notifications.page
                    [root] => webGui
                    [name] => Notifications
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 * Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$events = explode('|', $notify['events'] ?? '');
$disabled = $notify['system'] ? '' : 'disabled';
?>
<style>
select.a{min-width:220px}
span.a{display:inline-block;width:220px;font-style:italic}
</style>
<script>
function prepareNotify(form) {
  form.entity.value = form.normal1.checked | form.warning1.checked | form.alert1.checked;
  form.normal.value = form.normal1.checked*1 + form.normal2.checked*2 + form.normal3.checked*4;
  form.warning.value = form.warning1.checked*1 + form.warning2.checked*2 + form.warning3.checked*4;
  form.alert.value = form.alert1.checked*1 + form.alert2.checked*2 + form.alert3.checked*4;
  form.unraid.value = form.unraid1.checked*1 + form.unraid2.checked*2 + form.unraid3.checked*4;
  form.plugin.value = form.plugin1.checked*1 + form.plugin2.checked*2 + form.plugin3.checked*4;
  form.docker_notify.value = form.docker_notify1.checked*1 + form.docker_notify2.checked*2 + form.docker_notify3.checked*4;
  form.language_notify.value = form.language_notify1.checked*1 + form.language_notify2.checked*2 + form.language_notify3.checked*4;
  form.report.value = form.report1.checked*1 + form.report2.checked*2 + form.report3.checked*4;
  form.normal1.disabled = true;
  form.normal2.disabled = true;
  form.normal3.disabled = true;
  form.warning1.disabled = true;
  form.warning2.disabled = true;
  form.warning3.disabled = true;
  form.alert1.disabled = true;
  form.alert2.disabled = true;
  form.alert3.disabled = true;
  form.unraid1.disabled = true;
  form.unraid2.disabled = true;
  form.unraid3.disabled = true;
  form.plugin1.disabled = true;
  form.plugin2.disabled = true;
  form.plugin3.disabled = true;
  form.docker_notify1.disabled = true;
  form.docker_notify2.disabled = true;
  form.docker_notify3.disabled = true;
  form.language_notify1.disabled = true;
  form.language_notify2.disabled = true;
  form.language_notify3.disabled = true;
  form.report1.disabled = true;
  form.report2.disabled = true;
  form.report3.disabled = true;
}
function prepareSystem(index) {
  if (index==0) $('.checkbox').attr('disabled','disabled'); else $('.checkbox').removeAttr('disabled');
}
function prepareTitle() {
  var title = '_(Available notifications)_:';
  $('#unraidTitle,#pluginTitle,#dockerTitle,#languageTitle,#reportTitle').html('&nbsp;');
  if ($('.unraid').is(':visible')) {$('#unraidTitle').html(title); return;}
  if ($('.plugin').is(':visible')) {$('#pluginTitle').html(title); return;}
  if ($('.docker').is(':visible')) {$('#dockerTitle').html(title); return;}
  if ($('.language').is(':visible')) {$('#languageTitle').html(title); return;}
  if ($('.report').is(':visible')) {$('#reportTitle').html(title); return;}
}
function prepareUnraid(value) {
  if (value=='') $('.unraid').hide(); else $('.unraid').show();
  prepareTitle();
}
function preparePlugin(value) {
  if (value=='') $('.plugin').hide(); else $('.plugin').show();
  prepareTitle();
}
function prepareDocker(value) {
  if (value=='') $('.docker').hide(); else $('.docker').show();
  prepareTitle();
}
function prepareLanguage(value) {
  if (value=='') $('.language').hide(); else $('.language').show();
  prepareTitle();
}
function prepareReport(value) {
  if (value=='') $('.report').hide(); else $('.report').show();
  prepareTitle();
}
$(function(){
  prepareUnraid(document.notify_settings.unraidos.value);
  preparePlugin(document.notify_settings.version.value);
  prepareDocker(document.notify_settings.docker_update.value);
  prepareLanguage(document.notify_settings.language_update.value);
  prepareReport(document.notify_settings.status.value);
});
</script>
<form markdown="1" name="notify_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareNotify(this)">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg">
<input type="hidden" name="#section" value="notify">
<input type="hidden" name="#command" value="/webGui/scripts/notify">
<input type="hidden" name="#arg[1]" value="cron-init">
<input type="hidden" name="entity">
<input type="hidden" name="normal">
<input type="hidden" name="warning">
<input type="hidden" name="alert">
<input type="hidden" name="unraid">
<input type="hidden" name="plugin">
<input type="hidden" name="docker_notify">
<input type="hidden" name="language_notify">
<input type="hidden" name="report">
_(Notifications display)_:
: <select class="a" name="display">
  <?=mk_option($notify['display'], "0", _("Detailed"))?>
  <?=mk_option($notify['display'], "1", _("Summarized"))?>
  </select>

:notifications_display_help:

_(Date format)_:
: <select name="date" class="a">
  <?=mk_option($notify['date'], "d-m-Y", _("DD-MM-YYYY"))?>
  <?=mk_option($notify['date'], "m-d-Y", _("MM-DD-YYYY"))?>
  <?=mk_option($notify['date'], "Y-m-d", _("YYYY-MM-DD"))?>
  </select>

:notifications_date_format_help:

_(Time format)_:
: <select name="time" class="a">
  <?=mk_option($notify['time'], "h:i A", _("12 hours"))?>
  <?=mk_option($notify['time'], "H:i", _("24 hours"))?>
  </select>

:notifications_time_format_help:

_(Display position)_:
: <select name="position" class="a">
  <?=mk_option($notify['position'], "top-left", _("top-left"))?>
  <?=mk_option($notify['position'], "top-right", _("top-right"))?>
  <?=mk_option($notify['position'], "bottom-left", _("bottom-left"))?>
  <?=mk_option($notify['position'], "bottom-right", _("bottom-right"))?>
  <?=mk_option($notify['position'], "center", _("center"))?>
  </select>

:notifications_display_position_help:

_(Store notifications to flash)_:
: <select name="path" class="a">
  <?=mk_option($notify['path'], "/tmp/notifications", _("No"))?>
  <?=mk_option($notify['path'], "/boot/config/plugins/dynamix/notifications", _("Yes"))?>
  </select>

:notifications_store_flash_help:

_(System notifications)_:
: <select name="system" class="a" onchange="prepareSystem(this.selectedIndex)">
  <?=mk_option($notify['system'], "", _("Disabled"))?>
  <?=mk_option($notify['system'], "*/1 * * * *", _("Enabled"))?>
  </select>

:notifications_system_help:

_(Unraid OS update notification)_:
: <select name="unraidos" class="a" onchange="prepareUnraid(this.value)">
  <?=mk_option($notify['unraidos'], "", _("Never check"))?>
  <?=mk_option($notify['unraidos'], "11 */6 * * *", _("Check four times a day"))?>
  <?=mk_option($notify['unraidos'], "11 0,12 * * *", _("Check twice a day"))?>
  <?=mk_option($notify['unraidos'], "11 0 * * *", _("Check once a day"))?>
  <?=mk_option($notify['unraidos'], "11 0 * * 1", _("Check once a week"))?>
  <?=mk_option($notify['unraidos'], "11 0 1 * *", _("Check once a month"))?>
  </select>

:notifications_os_update_help:

_(Plugins update notification)_:
: <select name="version" class="a" onchange="preparePlugin(this.value)">
  <?=mk_option($notify['version'], "", _("Never check"))?>
  <?=mk_option($notify['version'], "10 */6 * * *", _("Check four times a day"))?>
  <?=mk_option($notify['version'], "10 0,12 * * *", _("Check twice a day"))?>
  <?=mk_option($notify['version'], "10 0 * * *", _("Check once a day"))?>
  <?=mk_option($notify['version'], "10 0 * * 1", _("Check once a week"))?>
  <?=mk_option($notify['version'], "10 0 1 * *", _("Check once a month"))?>
  </select>

:notifications_plugins_update_help:

_(Docker update notification)_:
: <select name="docker_update" class="a" onchange="prepareDocker(this.value)">
  <?=mk_option($notify['docker_update'], "", _("Never check"))?>
  <?=mk_option($notify['docker_update'], "10 */6 * * *", _("Check four times a day"))?>
  <?=mk_option($notify['docker_update'], "10 0,12 * * *", _("Check twice a day"))?>
  <?=mk_option($notify['docker_update'], "10 0 * * *", _("Check once a day"))?>
  <?=mk_option($notify['docker_update'], "10 0 * * 1", _("Check once a week"))?>
  <?=mk_option($notify['docker_update'], "10 0 1 * *", _("Check once a month"))?>
  </select>

:notifications_docker_update_help:

_(Language update notification)_:
: <select name="language_update" class="a" onchange="prepareLanguage(this.value)">
  <?=mk_option($notify['language_update'], "", _("Never check"))?>
  <?=mk_option($notify['language_update'], "10 */6 * * *", _("Check four times a day"))?>
  <?=mk_option($notify['language_update'], "10 0,12 * * *", _("Check twice a day"))?>
  <?=mk_option($notify['language_update'], "10 0 * * *", _("Check once a day"))?>
  <?=mk_option($notify['language_update'], "10 0 * * 1", _("Check once a week"))?>
  <?=mk_option($notify['language_update'], "10 0 1 * *", _("Check once a month"))?>
  </select>

_(Array status notification)_:
: <select name="status" class="a" onchange="prepareReport(this.value)">
  <?=mk_option($notify['status'], "", _("Never send"))?>
  <?=mk_option($notify['status'], "20 * * * *", _("Send every hour"))?>
  <?=mk_option($notify['status'], "20 */2 * * *", _("Send every two hours"))?>
  <?=mk_option($notify['status'], "20 */6 * * *", _("Send four times a day"))?>
  <?=mk_option($notify['status'], "20 */8 * * *", _("Send three times a day"))?>
  <?=mk_option($notify['status'], "20 0,12 * * *", _("Send twice a day"))?>
  <?=mk_option($notify['status'], "20 0 * * *", _("Send once a day"))?>
  <?=mk_option($notify['status'], "20 0 * * 1", _("Send once a week"))?>
  <?=mk_option($notify['status'], "20 0 1 * *", _("Send once a month"))?>
  </select>

:notifications_array_status_help:

<span id="unraidTitle" class="unraid" style="display:none">&nbsp;</span>
: <span class="unraid" style="display:none"><span class="a">_(Unraid OS update)_</span>
  <input type="checkbox" name="unraid1"<?=($notify['unraid'] & 1)==1 ? ' checked' : ''?>>_(Browser)_ &nbsp;
  <input type="checkbox" name="unraid2"<?=($notify['unraid'] & 2)==2 ? ' checked' : ''?>>_(Email)_ &nbsp;
  <input type="checkbox" name="unraid3"<?=($notify['unraid'] & 4)==4 ? ' checked' : ''?>>_(Agents)_ &nbsp;</span>

<span id="pluginTitle" class="plugin" style="display:none">&nbsp;</span>
: <span class="plugin" style="display:none"><span class="a">_(Plugins update)_</span>
  <input type="checkbox" name="plugin1"<?=($notify['plugin'] & 1)==1 ? ' checked' : ''?>>_(Browser)_ &nbsp;
  <input type="checkbox" name="plugin2"<?=($notify['plugin'] & 2)==2 ? ' checked' : ''?>>_(Email)_ &nbsp;
  <input type="checkbox" name="plugin3"<?=($notify['plugin'] & 4)==4 ? ' checked' : ''?>>_(Agents)_ &nbsp;</span>

<span id="dockerTitle" class="docker" style="display:none">&nbsp;</span>
: <span class="docker" style="display:none"><span class="a">_(Docker update)_</span>
  <input type="checkbox" name="docker_notify1"<?=($notify['docker_notify'] & 1)==1 ? ' checked' : ''?>>_(Browser)_ &nbsp;
  <input type="checkbox" name="docker_notify2"<?=($notify['docker_notify'] & 2)==2 ? ' checked' : ''?>>_(Email)_ &nbsp;
  <input type="checkbox" name="docker_notify3"<?=($notify['docker_notify'] & 4)==4 ? ' checked' : ''?>>_(Agents)_ &nbsp;</span>

<span id="languageTitle" class="language" style="display:none">&nbsp;</span>
: <span class="language" style="display:none"><span class="a">_(Language update)_</span>
  <input type="checkbox" name="language_notify1"<?=($notify['language_notify'] & 1)==1 ? ' checked' : ''?>>_(Browser)_ &nbsp;
  <input type="checkbox" name="language_notify2"<?=($notify['language_notify'] & 2)==2 ? ' checked' : ''?>>_(Email)_ &nbsp;
  <input type="checkbox" name="language_notify3"<?=($notify['language_notify'] & 4)==4 ? ' checked' : ''?>>_(Agents)_ &nbsp;</span>

<span id="reportTitle" class="report" style="display:none">&nbsp;</span>
: <span class="report" style="display:none"><span class="a">_(Array status)_</span>
  <input type="checkbox" name="report1"<?=($notify['report'] & 1)==1 ? ' checked' : ''?>>_(Browser)_ &nbsp;
  <input type="checkbox" name="report2"<?=($notify['report'] & 2)==2 ? ' checked' : ''?>>_(Email)_ &nbsp;
  <input type="checkbox" name="report3"<?=($notify['report'] & 4)==4 ? ' checked' : ''?>>_(Agents)_ &nbsp;</span>

:notifications_agent_selection_help:

_(Notification entity)_:
: <span class="a">_(Notices)_</span>
  <input type="checkbox" class="checkbox" name="normal1"<?=($notify['normal'] & 1)==1 ? " checked $disabled" : $disabled?>>_(Browser)_ &nbsp;
  <input type="checkbox" class="checkbox" name="normal2"<?=($notify['normal'] & 2)==2 ? " checked $disabled" : $disabled?>>_(Email)_ &nbsp;
  <input type="checkbox" class="checkbox" name="normal3"<?=($notify['normal'] & 4)==4 ? " checked $disabled" : $disabled?>>_(Agents)_ &nbsp;

&nbsp;
: <span class="a">_(Warnings)_</span>
  <input type="checkbox" class="checkbox" name="warning1"<?=($notify['warning'] & 1)==1 ? " checked $disabled" : $disabled?>>_(Browser)_ &nbsp;
  <input type="checkbox" class="checkbox" name="warning2"<?=($notify['warning'] & 2)==2 ? " checked $disabled" : $disabled?>>_(Email)_ &nbsp;
  <input type="checkbox" class="checkbox" name="warning3"<?=($notify['warning'] & 4)==4 ? " checked $disabled" : $disabled?>>_(Agents)_ &nbsp;

&nbsp;
: <span class="a">_(Alerts)_</span>
  <input type="checkbox" class="checkbox" name="alert1"<?=($notify['alert'] & 1)==1 ? " checked $disabled" : $disabled?>>_(Browser)_ &nbsp;
  <input type="checkbox" class="checkbox" name="alert2"<?=($notify['alert'] & 2)==2 ? " checked $disabled" : $disabled?>>_(Email)_ &nbsp;
  <input type="checkbox" class="checkbox" name="alert3"<?=($notify['alert'] & 4)==4 ? " checked $disabled" : $disabled?>>_(Agents)_ &nbsp;

:notifications_classification_help:

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [NotificationsArchive] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => Archived Notifications
                    [Icon] => icon-archive
                    [Tag] => archive
                    [file] => webGui/NotificationsArchive.page
                    [root] => webGui
                    [name] => NotificationsArchive
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 * Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$files = count(glob("{$notify['path']}/archive/*.notify", GLOB_NOSORT));
$filters = mk_option(0,'',_('No filter')).mk_option(0,'alert',_('Alerts')).mk_option(0,'warning',_('Warnings')).mk_option(0,'normal',_('Notices'));
?>
<style>
select.filter{margin:0}
span.right{margin-top:-6px;font-size:1.3rem!important;padding:0!important}
i.red-text{font-size:1.6rem}
</style>

<script>
var rows = [];
var filter = "<?=unscript(_var($_GET,'filter'))?>";
var files = -1;

Array.prototype.remove = function() {
  var val, a = arguments, L = a.length, ax;
  while (L && this.length) {
    val = a[--L];
    while ((ax = this.indexOf(val)) !== -1) this.splice(ax, 1);
  }
  return this;
};

<?if (_var($display,'resize')):?>
function resize() {
  $('#archive_list').height(Math.max(window.innerHeight-340,330));
  $('#archive_table thead,#archive_table tbody').removeClass('fixed');
  $('#archive_table thead tr th').each(function(){$(this).width($(this).width());});
  $('#archive_table tbody tr td').each(function(){$(this).width($(this).width());});
  $('#archive_table thead,#archive_table tbody').addClass('fixed');
}
<?endif;?>
function archiveList(init) {
  clearTimeout(timers.archivelist);
  timers.archive = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.get('/webGui/include/NotificationsArchive.php',{filter:filter},function(data) {
    clearTimeout(timers.archive);
    data = data.split('\0');
    if (data[1]>0) $('#deleteAll').show(); else $('#deleteAll').hide();
    if (files != data[1]) {
      files = data[1];
      $('#archive_list').html(data[0]);
<?if (_var($display,'resize')):?>
      resize();
<?endif;?>
      if (init) {
<?if (_var($display,'resize')):?>
        $(window).bind('resize',function(){resize();});
<?endif;?>
        $('#archive_table').tablesorter({headers:{5:{sorter:false}},textAttribute:'data'});
      } else {
        $('#archive_table').trigger('update');
      }
      $('#archive_list .tablesorter-childRow td').hide();
      for (var i=0; i < rows.length; i++) $('#archive_list .tablesorter-childRow.row'+rows[i]+' td').show();
    }
    $('div.spinner.fixed').hide('slow');
    timers.archivelist = setTimeout(archiveList,3000);
  });
}
function askConfirmation() {
  swal({
    title:"_(Are you sure)_?",
    text: filter=='' ? "_(This will delete all notification files)_!" : "_(This will delete the selected notification files)_!",
    type:"warning",
    html:true,
    showCancelButton:true,
    confirmButtonText:"_(Proceed)_",
    cancelButtonText:"_(Cancel)_"
  },
  function(){$.post('/webGui/include/DeleteLogFile.php',{log:'*.notify',filter:filter},function(){$('#deleteAll').hide();archiveList();});});
}
function openClose(row) {
  var extra = '#archive_list .tablesorter-childRow.row'+row+' td';
  if ($(extra).is(":visible")) {
    $(extra).hide();
    rows.remove(row);
  } else {
    $(extra).show();
    rows.push(row);
  }
}
$(function(){
  $('span.left').append("<span class='right'><select class='filter narrow' onchange='filter=this.value;archiveList()'><?=$filters?></select></span>");
  $('select.filter').val(filter);
  archiveList(true);
});

// Adjust the width of thead cells when window resizes
</script>
<table class="tablesorter left shift" id="archive_table">
<thead><tr><th>_(Time)_</th><th>_(Event)_</th><th>_(Subject)_</th><th>_(Description)_</th><th>_(Importance)_</th><th><a id="deleteAll" href="#" onclick="askConfirmation();return false" title="_(Delete all notifications)_" style="display:none"><i class="fa fa-trash-o red-text"></i></a></th></tr></thead>
<tbody id="archive_list"><tr><td colspan="6"></td></tr></tbody>
</table>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [OtherSettings] => Array
                (
                    [Menu] => Settings:1
                    [Type] => menu
                    [Title] => System Settings
                    [Tag] => cog
                    [file] => webGui/OtherSettings.page
                    [root] => webGui
                    [name] => OtherSettings
                    [text] => 
                )

            [PHPsettings] => Array
                (
                    [Menu] => WebGui
                    [Title] => PHP Settings
                    [Icon] => icon-template
                    [Tag] => edit
                    [file] => webGui/PHPsettings.page
                    [root] => webGui
                    [name] => PHPsettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$log  = "/var/log/phplog";
$ini  = "/etc/php.d/errors-php.ini";
$conf = file_exists($ini) ? parse_ini_file($ini) : [];
if (!file_exists($log)) touch($log);
?>
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.ui.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">

<style>
div#templateWindow,div#dialogWindow{display:none}
span.dim{opacity:0.2}
#screenlog{margin-left:0}
</style>

<div markdown="1" style="width:43%;margin-bottom:40px;padding:5px 15px;border:solid 1px">
:php_settings_plug:
This utility is used for development purposes only and allows Plugin Authors to verify their PHP code by enabling different levels of PHP error reporting.

By default error logging is minimum and any errors are shown on screen. Changing the **Error reporting level** will capture the selected level of errors
into a LOG file, which can be opened in a separate window to monitor in real-time the events when visiting various GUI pages or executing background
processes on the server.

The LOG file can quickly grow large when multiple errors exists, it is advised to use it only during development and use the default setting
under normal running conditions.
:end
</div>

<form markdown="1" name="php_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="preset(this)">
<input type="hidden" name="#cleanup" value="1">
<input type="hidden" name="#file" value="<?=$ini?>">
<input type="hidden" name="error_log" value="<?=$log?>">
<input type="hidden" name="display_startup_errors" value="0">
<input type="hidden" name="display_errors" value="<?=_var($conf,'display_errors',0)?>">
<input type="hidden" name="log_errors" value="1">
_(Error reporting level)_:
: <select name="error_reporting" onchange="toggleScreen(this.selectedIndex)">
  <?=mk_option(_var($conf,'error_reporting'), "", "_(Default)_");?>
  <?=mk_option(_var($conf,'error_reporting'), "32767", "_(All Categories)_");?>
  <?=mk_option(_var($conf,'error_reporting'), "1", "_(Errors Only)_");?>
  <?=mk_option(_var($conf,'error_reporting'), "2", "_(Warnings Only)_");?>
  <?=mk_option(_var($conf,'error_reporting'), "8", "_(Notices Only)_");?>
  <?=mk_option(_var($conf,'error_reporting'), "8192", "_(Deprecated Only)_");?>
  </select>

&nbsp;
: <input type="checkbox" id="screenlog" onclick="screenLog()" <?=_var($conf,'display_errors',0)?'checked':''?> disabled><span id="screentext" class="dim">_(Show errors on screen)_</span>

<input type="button" value="_(PHP Info)_" onclick="PHPinfo()"><input type="button" id="clearlog" value="_(Clear Log)_" onclick="clearLog()"<?=filesize($log)>0?'':' disabled'?>><input type="button" id="viewlog" value="_(View Log)_" onclick="viewLog()" disabled>_(LOG size)_:&nbsp;<span id="logsize"></span>
: <input type="submit" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<div id="dialogWindow"></div>

<div markdown="1" id="templateWindow">
<!--!
<html <?=$display['rtl']?>lang="<?=strtok($locale,'_')?:'en'?>">
<style>
table{box-shadow:1px 2px 3px rgba(0,0,0,0.2);width:90%}
.center{text-align:center;color:#f2f2f2!important;background-color:#1c1b1b}
.center table{margin:1em auto;text-align:left}
.center th{text-align:center!important}
td,th{border:1px solid #505153;vertical-align:baseline;padding:4px 5px!important;color:#f2f2f2}
th{position:sticky;top:0}
img{float:right;border:0}
hr{width:90%;background-color:#505153;border:0;height:1px}
h1{font-size:150%}
h2{font-size:125%}
h2 a{color:#f2f2f2!important}
.p{text-align:left}
.e{background-color:#404A77;width:300px}
.h{background-color:#4F5B93}
.v{background-color:#333;max-width:300px;overflow-x:auto;word-wrap:break-word}
.v i{color:#999}
.h td,td.e,th{border-color:#606A90}
</style>
<body>
<?
ob_start();
phpinfo();
echo preg_replace('/^<!DOCTYPE html .*<body>/s','',ob_get_clean());
?>

!-->
</div>

<script>
String.prototype.build = function(){return this.replace(/\n(<!--!|!-->)\n/g,'');}

var box = null;

function screenLog() {
  $('input[name="display_errors"]').val($('#screenlog').prop('checked')?1:0);
}
function viewLog() {
  openTerminal('log','PHP Error Log','phplog');
}
function clearLog() {
  $.post('/webGui/include/PHPsettings.php',{cmd:'clear'},function(){
    swal({title:"_(PHP Log File)_",text:"_(Log file cleared)_",type:'success',html:true,confirmButtonText:"_(Ok)_"},function(){
      if (tty_window==null) viewLog();
      tty_window.close();
      $('#clearlog').prop('disabled',true);
    });
  });
}
function logSize() {
  $.post('/webGui/include/PHPsettings.php',{cmd:'logsize'},function(size){
    $('#logsize').text(size);
    if (size.split(' ')[0]!=0) {$('#clearlog').prop('disabled',false);$('#viewlog').prop('disabled',false);}
    setTimeout(logSize,3000);
  });
}
function PHPinfo() {
  box = $("#dialogWindow");
  box.html($("#templateWindow").html().build());
  box.dialog({
    title: "_(PHP Information)_",
    resizable: false,
    height: Math.min(window.innerHeight-80,800),
    width: Math.min(window.innerWidth,1200),
    modal: true,
    show: {effect:'fade', duration:250},
    hide: {effect:'fade', duration:250},
    buttons: {
      "_(Done)_": function(){
        box.dialog('close');
      }
    }
  });
  $('.ui-dialog-titlebar-close').css({'display':'none'});
  $('.ui-dialog-title').css({'text-align':'center','width':'100%','font-size':'1.8rem'});
  $('.ui-button-text').css({'padding':'0 5px'});
}
function preset(form) {
  // reset to default settings
  if (form.error_reporting.selectedIndex==0) {
    form.error_log.value = "";
    form.display_startup_errors.value = "";
    form.display_errors.value = "";
    form.log_errors.value = "";
  }
  $.cookie('reload_php',1);
}
function toggleScreen(index) {
  if (index > 0) {
    $('#screenlog').prop('disabled',false);
    $('#screentext').removeClass('dim');
  } else {
    $('#screenlog').prop('disabled',true);
    $('#screentext').addClass('dim');
  }
}
$(function(){
  logSize();
  if (document.php_settings.error_reporting.selectedIndex > 0) {
    $('#viewlog').prop('disabled',false);
    $('#screenlog').prop('disabled',false);
    $('#screentext').removeClass('dim');
  }
  if ($.cookie('reload_php')==1) {
    $.removeCookie('reload_php');
    $.post('/webGui/include/PHPsettings.php',{cmd:'reload'});
  }
});
</script>

                )

            [PageMap] => Array
                (
                    [Menu] => WebGui
                    [Title] => Page Map
                    [Icon] => icon-pagemap
                    [Tag] => map-o
                    [file] => webGui/PageMap.page
                    [root] => webGui
                    [name] => PageMap
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?if (_var($display,'resize')):?>
<script>
function resize() {
  $('div.up').height(Math.max(window.innerHeight-320,330));
}
$(function() {
  resize();
  $(window).bind('resize',function(){resize();});
});
</script>
<?endif;?>
<?
function show_map($menu, $level) {
  $pages = find_pages( $menu);
  if (empty($pages))
    return;
  echo "<ul>";
  foreach ($pages as $page) {
    $link  = "<a href='/{$page['name']}'>{$page['name']}</a>";
    $title = _($page['Title'] ?? '');
    $type  = $page['Type'] ?? '';
    if ($type == "menu") {
      $link = "($link)";
    } elseif ($type == "xmenu") {
      $link = "[$link]";
    }
    echo "$level $link",($title ? " - $title" : ""),"<br>";
    show_map($page['name'], $level+1);
  }
  echo "</ul>";
}
$uri = ['dashboard','main','shares','users','settings','plugins','docker','vms'];

foreach($uri as $more) {
  $text = "$docroot/languages/$locale/$more.txt";
  if (file_exists($text)) {
    // additional translations
    $store = "$docroot/languages/$locale/$more.dot";
    if (!file_exists($store)) file_put_contents($store,serialize(parse_lang_file($text)));
    $language = array_merge($language,unserialize(file_get_contents($store)));
  }
}

echo "<div class='up'>";
show_map("Tasks", 1);
show_map("Buttons", 1);
echo "</div>";
?>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [ParityCheck] => Array
                (
                    [Menu] => Scheduler:1
                    [Title] => Parity Check
                    [Tag] => calendar
                    [file] => webGui/ParityCheck.page
                    [root] => webGui
                    [name] => ParityCheck
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 * Copyright 2005-2023, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
if (_var($disks['parity'],'status')=='DISK_NP_DSBL' && _var($disks['parity2'],'status')=='DISK_NP_DSBL') {
  echo "<p class='notice'>"._('No Parity disk present')."!</p>";
}
$width  = [166,300];
$mode   = ['Disabled','Daily','Weekly','Monthly','Yearly','Custom'];
$days   = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
$months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
$memory = '/tmp/memory.tmp';

if (file_exists($memory)) {
  parse_str(file_get_contents($memory), $parity);
  if (empty($parity['hour']))  $parity['hour'] = "";
  if (empty($parity['day']))   $parity['day'] = "";
  if (empty($parity['dotm']))  $parity['dotm'] = "";
  if (empty($parity['month'])) $parity['month'] = "";
  if (empty($parity['write'])) $parity['write'] = "NOCORRECT";
}
if ($parity['mode']<2)  $parity['cumulative'] = '';
if ($parity['mode']==2) $parity['frequency'] = '1';
?>
<script>
<?if ($parity['mode']==5):?>
$(function() {
  $("#s1").dropdownchecklist({emptyText:"_(Every day)_", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
  $("#s2").dropdownchecklist({emptyText:"_(Every month)_", width:<?=$width[0]?>, explicitClose:"..._(close)_"});
});
// Simulate a single input field
function prepareParity(form) {
  var days = '';
  for (var i=0,item; item=form.day.options[i]; i++) {
    if (item.selected) {
      if (days.length) days += ',';
      days += item.value;
      item.selected = false;
    }
  }
  item = form.day.options[0];
  item.value = days || '*';
  item.selected = true;
  var months = '';
  for (var i=0,item; item=form.month.options[i]; i++) {
    if (item.selected) {
      if (months.length) months += ',';
      months += item.value;
      item.selected = false;
    }
  }
  item = form.month.options[0];
  item.value = months || '*';
  item.selected = true;
}
<?else:?>
function prepareParity(form) {
// do nothing
}
<?endif;?>
$(function() {
<?if (file_exists($memory)):?>
  setTimeout(function(){$('input[value="_(Apply)_"]').removeAttr('disabled');},0);
  $('input[value="_(Done)_"]').val("_(Reset)_").prop('onclick',null).click(function(){refresh($(this).parentsUntil('form').parent().offset().top)});
<?unlink($memory);?>
<?endif;?>
  presetParity(document.parity_settings);
});
function presetParity(form) {
  var mode = form.mode.value;
  form.day.disabled = mode!=2 && mode!=5;
  form.dotm.disabled = mode<3;
  form.hour.disabled = mode==0;
  form.month.disabled = mode<4;
  form.write.disabled = mode==0;
}
function showCumulative(val,pace) {
  if (val=='') $('#cumulative').hide(pace); else $('#cumulative').show(pace);
}
$(function(){
  showCumulative($('select[name="cumulative"]').val());
});
</script>
<form markdown="1" name="parity_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareParity(this)">
<input type="hidden" name="#file" value="dynamix/dynamix.cfg"/>
<input type="hidden" name="#section" value="parity"/>
<input type="hidden" name="#include" value="/webGui/include/update.parity.php"/>
_(Scheduled parity check)_:
: <select name="mode" onchange="submit()">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option($parity['mode'], strval($m), _($mode[$m]))?>
  <?endfor;?>
  </select>

:parity_check_scheduled_help:

_(Day of the week)_:
<?if ($parity['mode']==2):?>
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option($parity['day'], strval($d), ucfirst(_($days[$d],0)))?>
  <?endfor;?>
<?elseif ($parity['mode']==5):?>
: <select id="s1" name="day" multiple="multiple" style="display:none">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option_check($parity['day'], strval($d), ucfirst(_($days[$d],0)))?>
  <?endfor;?>
<?else:?>
: <select name="day">
  <?=mk_option($parity['day'], "*", "--------")?>
<?endif;?>
  </select>

:parity_day_of_the_week_help:

<?if ($parity['mode']<5):?>
_(Day of the month)_:
<?else:?>
_(Week of the month)_:
<?endif;?>
: <select name="dotm">
<?if ($parity['mode']>=3):?>
<?if ($parity['mode']==5):?>
  <?=mk_option($parity['dotm'], "*", _("Every week"))?>
  <?=mk_option($parity['dotm'], "W1", _("First week"))?>
  <?=mk_option($parity['dotm'], "W2", _("Second week"))?>
  <?=mk_option($parity['dotm'], "W3", _("Third week"))?>
  <?=mk_option($parity['dotm'], "W4", _("Fourth week"))?>
  <?=mk_option($parity['dotm'], "WL", _("Last week"))?>
<?else:?>
  <?=mk_option($parity['dotm'], "1", _("First day"))?>
  <?=mk_option($parity['dotm'], "28-31", _("Last day"))?>
  <?for ($d=2; $d<=31; $d++):?>
  <?=mk_option($parity['dotm'], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
<?endif;?>
<?else:?>
  <?=mk_option($parity['dotm'], "*", "--------")?>
<?endif;?>
  </select>

:parity_week_of_the_month_help:

_(Time of the day)_:
: <select name="hour">
<?if ($parity['mode']>0):?>
  <?for ($h=0; $h<24; $h++):?>
  <?=mk_option($parity['hour'], sprintf("0 %d", $h), sprintf("%02d:00", $h))?>
  <?=mk_option($parity['hour'], sprintf("30 %d",$h), sprintf("%02d:30", $h))?>
  <?endfor;?>
<?else:?>
  <?=mk_option($parity['hour'], "*", "--------")?>
<?endif;?>
  </select>

:parity_time_of_the_day_help:

_(Month of the year)_:
<?if ($parity['mode']>=4):?>
<?if ($parity['mode']==5):?>
: <select id="s2" name="month" multiple="multiple" style="display:none">
  <?for ($m=0; $m<count($months); $m++):?>
  <?=mk_option_check($parity['month'], strval($m+1), ucfirst(_($months[$m],0)))?>
  <?endfor;?>
<?else:?>
: <select name="month">
  <?for ($m=0; $m<count($months); $m++):?>
  <?=mk_option($parity['month'], strval($m+1), ucfirst(_($months[$m],0)))?>
  <?endfor;?>
<?endif;?>
<?else:?>
: <select name="month">
  <?=mk_option($parity['month'], "*", "--------")?>
<?endif;?>
  </select>

:parity_month_of_the_year_help:

_(Write corrections to parity disk)_:
: <select name="write">
  <?=mk_option($parity['write'], "NOCORRECT", _("No"))?>
  <?=mk_option($parity['write'], "", _("Yes"))?>
  </select>

:parity_write_corrections_help:

_(Cumulative parity check)_:
: <select name="cumulative" onchange="showCumulative(this.value,'slow')" <?=$parity['mode']>1?'':'disabled'?>>
  <?=mk_option(_var($parity,'cumulative'), "", _("No"))?>
  <?=mk_option(_var($parity,'cumulative'), "1", _("Yes"))?>
  </select>

:parity_cumulative_check_help:

<div markdown="1" id="cumulative" style="display:none">
_(Accumulation frequency)_:
: <select name="frequency">
  <?=mk_option(_var($parity,'frequency'), "1", _("Daily"))?>
  <?=mk_option(_var($parity,'frequency'), "7", _("Weekly"),$parity['mode']==2 ? 'disabled' : '')?>
  </select>

:parity_accumulation_frequency_help:

_(Accumulation duration)_:
: <select name="duration">
  <?for ($h=1; $h<24; $h++):?>
  <?=mk_option(_var($parity,'duration'), $h, $h.' '._('hour'.($h==1?'':'s')))?>
  <?endfor;?>
  </select>

:parity_accumulation_duration_help:

</div>
&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()"></td>
</form>

                )

            [Processes] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => Processes
                    [Icon] => icon-processes
                    [Tag] => cogs
                    [file] => webGui/Processes.page
                    [root] => webGui
                    [name] => Processes
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?if (_var($display,'resize')):?>
<script>
function resize() {
  $('pre.up').height(Math.max(window.innerHeight-320,330));
}
$(function() {
  resize();
  $(window).bind('resize',function(){resize();});
});
</script>
<?endif;?>
<?
echo "<pre class='up'>",shell_exec('ps -aux'),"</pre>";
?>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [RoutingTable] => Array
                (
                    [Menu] => NetworkSettings
                    [Title] => Routing Table
                    [Tag] => icon-share
                    [file] => webGui/RoutingTable.page
                    [root] => webGui
                    [name] => RoutingTable
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
unset($list,$other);
exec("ls /sys/class/net|grep -P '^br[0-9]'",$list);
exec("ls /sys/class/net|grep -P '^(bond|eth)[0-9]'",$other);
foreach ($other as $port) {
  if (substr($port,0,4)=='bond') {
    $br = str_replace('bond','br',$port);
    if (!in_array($br,$list)) $list[] = $port;
  } else {
    $br = str_replace('eth','br',$port);
    $bond = str_replace('eth','bond',$port);
    if (!in_array($br,$list) && !in_array($bond,$list)) $list[] = $port;
  }
}
?>
<style>
input.fixed{width:200px;}
<?if ($themes1):?>
span.status.vhshift{margin-right:-10px!important}
<?endif;?>
</style>
<script>
function deleteRoute(gateway,route,metric) {
  swal({title:"Delete route?",text:route+" by gateway "+gateway,type:"warning",html:true,showCancelButton:true,confirmButtonText:"_(Proceed)_",cancelButtonText:"_(Cancel)_"},function(){
    $.post('/webGui/include/RoutingTable.php',{gateway:gateway,route:route,metric:metric,task:'delete'},function(){resetTable();});
  });
}
function routeTable() {
  $.post('/webGui/include/RoutingTable.php',{task:'update'},function(data){
    if (data) $('#route_list').html(data);
    timers.routeTable = setTimeout(routeTable,10000);
  });
}
function resetTable() {
  document.add_routes.route.value = '';
  document.add_routes.gateway.value = '';
  document.add_routes.metric.value = '';
  clearTimeout(timers.routeTable);
  routeTable();
}
<?if (!$tabbed):?>
function toggleTable() {
  var tag = '#tag_table';
  var view = '#route_table';
  if ($(view).is(':visible')) {
    $(tag).removeClass('fa-chevron-up').addClass('fa-chevron-down');
    $.cookie(view,'hide',{expires:3650});
  } else {
    $(tag).removeClass('fa-chevron-down').addClass('fa-chevron-up');
    $.removeCookie(view);
  }
  $(view).toggle('slow');
}
$(function(){
  $('div.title').last().find('span.left').append("<span class='status vhshift'><i id='tag_table' class='fa fa-fw fa-chevron-up' style='cursor:pointer' onclick='toggleTable()'></i></span>");
  if (!$.cookie('#route_table')) $('#route_table').show(); else $('#tag_table').removeClass('fa-chevron-up').addClass('fa-chevron-down');
  routeTable();
});
<?else:?>
$(function(){
  $('#route_table').show();
  routeTable();
});
<?endif;?>
</script>
<div markdown="1" id="route_table" style="display:none">
<table class="share_status">
<thead><tr><td>_(Protocol)_</td><td>_(Route)_</td><td>_(Gateway)_</td><td>_(Metric)_</td><td style="width:8%;text-align:center">_(Delete)_</td></tr></thead>
<tbody id="route_list"></tbody>
</table>

<div class="shade-<?=$display['theme']?>" style="margin-top:12px;padding:12px 4px;">
<form markdown="1" name="add_routes" method="POST" action="/webGui/include/RoutingTable.php" target="progressFrame" onsubmit="setTimeout(resetTable,500)">
_(Enter route + gateway + metric)_:
: <input type="text" name="route" maxlength="39" value="" class="fixed" placeholder="_(IPv4/nn or IPv6/nn route)_" required>
  <input type="text" name="gateway" class="fixed" value="" list="device" placeholder="_(gateway name or address)_" required>
  <datalist id="device"><?foreach ($list as $port):?><?echo "<option value='$port'>"?><?endforeach;?></datalist>
  <input type="text" name="metric" min="1" max="9999" value="" class="trim" placeholder="1"><i class="fa fa-sort-numeric-asc"></i> *_(optional metric (lowest is preferred))_*

:eth_routing_table_help:

&nbsp;
: <input type="submit" name="task" value="_(Add Route)_"><input type="button" value="_(Done)_" class="lock" onclick="done()">
</form>
</div>
</div>

                )

            [SMB] => Array
                (
                    [Menu] => NetworkServices:3
                    [Type] => xmenu
                    [Title] => SMB
                    [Icon] => icon-windows
                    [file] => webGui/SMB.page
                    [root] => webGui
                    [name] => SMB
                    [text] => 
                )

            [SMBActiveDirectory] => Array
                (
                    [Menu] => SMB:3
                    [Title] => Active Directory Settings
                    [Tag] => list-ul
                    [Cond] => ($var['shareSMBEnabled']=='ads')
                    [file] => webGui/SMBActiveDirectory.page
                    [root] => webGui
                    [name] => SMBActiveDirectory
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<form markdown="1" name="JoinOps" method="POST" action="/update.htm" target="progressFrame">
_(AD join status)_:
: <?=$var['joinStatus'];?>&nbsp;

_(AD domain name)_ (FQDN):
: <input type="text" name="DOMAIN" maxlength="80" value="<?=htmlspecialchars($var['DOMAIN'])?>">

_(AD short domain name)_:
: <input type="text" name="DOMAIN_SHORT" maxlength="40" value="<?=htmlspecialchars($var['DOMAIN_SHORT'])?>">

_(AD account login)_:
: <input type="text" name="DOMAIN_LOGIN" maxlength="40" value="<?=htmlspecialchars($var['DOMAIN_LOGIN'])?>">

_(AD account password)_:
: <input type="password" name="DOMAIN_PASSWD" maxlength="40" value="<?=htmlspecialchars($var['DOMAIN_PASSWD'])?>">

&nbsp;
: <?if ($var['joinStatus']=="Joined"):?>
  <input type="submit" name="cmdJoinDomain" value="_(Join)_" disabled><input type="submit" name="cmdLeaveDomain" value="_(Leave)_">
  <?else:?>
  <input type="submit" name="cmdJoinDomain" value="_(Join)_"><input type="submit" name="cmdLeaveDomain" value="_(Leave)_" disabled>
  <?endif;?>
</form>
<br>

<form markdown="1" name="shareOwnership" method="POST" action="/update.htm" target="progressFrame">
_(AD initial owner)_:
: <input type="text" name="shareInitialOwner" maxlength="40" value="<?=htmlspecialchars($var['shareInitialOwner'])?>">

_(AD initial group)_:
: <input type="text" name="shareInitialGroup" maxlength="40" value="<?=htmlspecialchars($var['shareInitialGroup'])?>">

&nbsp;
: <input type="submit" name="changeShare" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>
                )

            [SMBExtras] => Array
                (
                    [Menu] => SMB:2
                    [Title] => SMB Extras
                    [Cond] => ($var['shareSMBEnabled']!='no')
                    [Tag] => share-alt-square
                    [file] => webGui/SMBExtras.page
                    [root] => webGui
                    [name] => SMBExtras
                    [text] => <?PHP
/* Copyright 2020, Lime Technology
 * Copyright 2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
:smb_extra_conf_help:

<?
$file = "/boot/config/smb-extra.conf";
$text = @file_get_contents($file) ?: '';
$text = preg_replace(["/\r\n/","/\r/"],"\n",$text);
?>
<script>
$(function(){
  $('form').find('textarea').on('input change',function(){
    $(this).prop('rows',($(this).val().match(/\n/g)||[]).length+1);
  });
});
</script>
<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">
<input type="hidden" name="#file" value="<?=$file;?>">
_(Samba extra configuration)_:
: <textarea spellcheck="false" cols="80" rows="<?=substr_count($text,"\n")+1?>" maxlength="2048" name="text" style="resize:none;font-family:bitstream;width:65.5%" <?if ($var['fsState']=="Started"):?>disabled<?endif;?>><?=htmlspecialchars($text)?></textarea>

&nbsp;
: <input type="submit" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()"><?if ($var['fsState']=="Started"):?>*_(Array must be **Stopped** to change)_*<?endif;?>

:smb_extra_button_help:

</form>

                )

            [ca_settings] => Array
                (
                    [Menu] => Utilities
                    [Title] => Community Applications
                    [Icon] => users
                    [file] => plugins/community.applications/ca_settings.page
                    [root] => plugins/community.applications
                    [name] => ca_settings
                    [text] => <?
###############################################################
#                                                             #
# Community Applications copyright 2015-2023, Andrew Zawadzki #
#                   Licenced under GPLv2                      #
#                                                             #
###############################################################

$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: "/usr/local/emhttp";

$plugin = "community.applications";

require_once "$docroot/plugins/$plugin/include/paths.php";
require_once "$docroot/plugins/$plugin/include/helpers.php";

$cfg = parse_plugin_cfg($plugin);

function tr($string,$ret=false) {
	if ( function_exists("_") )
		$string =  str_replace('"',"&#34;",str_replace("'","&#39;",_($string)));
	if ( $ret )
		return $string;
	else
		echo $string;
}
?>
<script>
$(function() {
	<?if ( is_file($caPaths['logging']) ):?>
		$("#debugging").show();
	<?endif;?>
});

function debug() {
	var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
	var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);
	var filename='CA-Logging-'+localISOTime.substr(0,16).replace(/[-:]/g,'').replace('T','-')+'.zip';

	$.post('/webGui/include/Download.php',{cmd:'save',file:filename,source:"<?=$caPaths['logging']?>"},function(zip) {
		location = zip;
	});
}
</script>

<form class='js-confirm-leave' markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg">

<?tr("Hide Deprecated Applications:");?>
: <select name='hideDeprecated' size='1'>
	<?=mk_option($cfg['hideDeprecated'], "true", tr("Yes",true))?>
	<?=mk_option($cfg['hideDeprecated'], "false", tr("No",true))?>
	</select>

> <?tr("This setting hides deprecated applications from the list of available apps.  Deprecated apps will still however display within the installed and previous apps sections.");?>

<?tr("Hide Incompatible Applications:");?>
: <select name='hideIncompatible' size='1'>
	<?=mk_option($cfg['hideIncompatible'], "true", tr("Yes",true))?>
	<?=mk_option($cfg['hideIncompatible'], "false", tr("No",true))?>
	</select>

> <?tr("This setting will hide applications that are listed as being incompatible with your version of Unraid");?>

<?tr("Allow install of second instance:");?>
: <select name='defaultReinstall' size='1'>
	<?=mk_option($cfg['defaultReinstall'],'false',tr("No",true))?>
	<?=mk_option($cfg['defaultReinstall'],'true',tr("Yes",true))?>
	</select>

> <?tr("This option enables another button on the cards and popups which will allow you to reinstall an installed application using it's default template values.  This option can be confusing at times, and is only generally used if you wish to install and have an application running twice simultaneously");?>

<?tr("Automatically open the sidebar:");?>
: <select name='sidebarOpen' size='1'>
	<?=mk_option($cfg['sidebarOpen'],'yes',tr("Yes",true))?>
	<?=mk_option($cfg['sidebarOpen'],'no',tr("No",true))?>
	</select>

> <?tr("Allows CA to automatically open the sidebar for more information when hovering over an application's icon");?>

<?tr("Allow CA to check for updates to applications:");?>
: <select name="updateCheck" size="1">
	<?=mk_option($cfg['updateCheck'],"yes",tr("Yes",true))?>
	<?=mk_option($cfg['updateCheck'],"no",tr("No",true))?>
	</select>
	
> <?tr("This setting enables CA to check for updates to applications");?>

<?tr("Disable Mouse Wheel Page Changes:");?>
: <select name="wheelPage" size="1">
	<?=mk_option($cfg['wheelPage'],"no",tr("No",true))?>
	<?=mk_option($cfg['wheelPage'],"yes",tr("Yes",true))?>
	</select>
	
> <?tr("This setting disables using left or right on a mouse wheel to change the page");?>


<?tr("Allow CA to send any emergency notifications:");?>
: <select name='notifications' size='1'>
	<?=mk_option($cfg['notifications'],"yes",tr("Yes",true))?>
	<?=mk_option($cfg['notifications'],"no",tr("No",true))?>
	</select>

> <?tr("This setting allows CA to periodically scan your system and alert you to the presence of:");?><br>
> <?tr("1. Known malware and security vulnerabilities within applications");?><br>
> <?tr("2. Critical security vulnerabilities within Unraid OS");?><br>
> <?tr("3. Any installed applications which may seriously hinder the operation of your server");?>

<?tr("Save CA debugging information:");?>
: <select name='debugging' size='1'>
	<?=mk_option($cfg['debugging'],"yes",tr("Yes",true))?>
	<?=mk_option($cfg['debugging'],"no",tr("No",true))?>
	</select>
	
> <?tr("Only enable this when advised to from the author of Community Applications")?>

<?tr("Enable developer mode:");?>
: <select name='dev' size='1'>
	<?=mk_option($cfg['dev'],"no",tr("No",true))?>
	<?=mk_option($cfg['dev'],"yes",tr("Yes",true))?>
	</select>
	
> <?tr("This unlocks some extra features within CA generally only used by developers.  Not recommended to enable")?>

<input id='debugging' type='button' onclick='debug();' value='DOWNLOAD LOG' style='display:none;'></input>

&nbsp;
: <input type="submit" name="#apply" value="<?tr("Apply");?>" id='Apply'><input type="button" id="DONE" value="<?tr("Done");?>" onclick="done()">

<center><a href="https://forums.unraid.net/topic/38582-plug-in-community-applications/" target="_blank"><?tr("Support Thread");?></a></center>

</form>

                )

            [CA_notices] => Array
                (
                    [Menu] => Buttons
                    [Link] => nav-user
                    [file] => plugins/community.applications/CA_notices.page
                    [root] => plugins/community.applications
                    [name] => CA_notices
                    [text] => <?
###############################################################
#                                                             #
# Community Applications copyright 2015-2023, Andrew Zawadzki #
#                   Licenced under GPLv2                      #
#                                                             #
###############################################################
?>

<?
$unRaidSettings = parse_ini_file("/etc/unraid-version");
$unRaid68 = version_compare($unRaidSettings['version'],"6.7.9",">");
$caCFG = parse_plugin_cfg("community.applications");
?>

<? if ( "{$caCFG['notifications']}" == "yes" ) :?>
<script>
var CA_BANNER_NOTICES = [];
$(function() {
	$.post("/plugins/community.applications/scripts/notices.php",{action:"scan"},function(data) {
		console.groupCollapsed("Result: CA Background Scan");
		console.log(data);
		console.groupEnd();
		CA_BANNER_NOTICES = JSON.parse(data);
		$.each(CA_BANNER_NOTICES,function(i,el) {
			<? if ( $unRaid68 ): ?>
				var dismiss = "<a class='bannerDismiss' onclick='ca_DismissNotice("+i+");'></a>";
			<? else: ?>
				var dismiss = "<span class='ca_PluginUpdateDismiss'><i class='fa fa-close' onclick='ca_DismissNotice("+i+");'></i></span>";
			<? endif; ?>
			CA_BANNER_NOTICES[i]['warning_index'] = addBannerWarning(el.Banner+" <a onclick='ca_Notices("+i+");' style='cursor:pointer;'>More Info</a>"+dismiss,true,true);
		});
	});
});

function ca_Notices(index) {
	var title = CA_BANNER_NOTICES[index]['App'];
	if ( CA_BANNER_NOTICES[index]['Name'] ) {
		title = CA_BANNER_NOTICES[index]['Name'];
	}
	swal({
		title: title,
		text: CA_BANNER_NOTICES[index]['PopUp'],
		type: "error",
		showCancelButton: false,
		showConfirmButton: true,
		html: true
	});
}

function ca_DismissNotice(index) {
	swal({
		title: "Are you sure?",
		text: "Are you sure you want to dismiss this warning?<br> ("+CA_BANNER_NOTICES[index]['Banner']+")",
		html: true,
		type: 'warning',
		showCancelButton: true,
		showConfirmButton: true,
		confirmButtonText: "Yes"
	},function(isConfirm) {
		if ( isConfirm ) {
			removeBannerWarning(CA_BANNER_NOTICES[index]['warning_index']);
			$.post("/plugins/community.applications/scripts/notices.php",{action:"dismiss",ID:CA_BANNER_NOTICES[index]['ID']});
		}
	});
}
</script>
<?endif;?>
                )

            [SystemInformation] => Array
                (
                    [Menu] => Tools
                    [Title] => System Information
                    [Type] => menu
                    [file] => plugins/dynamix.system.stats/SystemInformation.page
                    [root] => plugins/dynamix.system.stats
                    [name] => SystemInformation
                    [text] => 
                )

            [ActiveUsers] => Array
                (
                    [Menu] => ActiveStreams
                    [Title] => User Names
                    [file] => plugins/dynamix.active.streams/ActiveUsers.page
                    [root] => plugins/dynamix.active.streams
                    [name] => ActiveUsers
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.active.streams';
?>
<style>
td.host{width:86%}
table.share_status tbody tr:nth-child(even){background-color:transparent}
table.share_status.online tbody tr>td:first-child{padding:6px 10px}
table.share_status.online tbody tr>td+td{padding:6px 0}
</style>
<script>
function done_plus(button) {
  try {button.click();}
  catch(e) {
    var event = document.createEvent('MouseEvents');
    event.initMouseEvent('click',true,true,window,0,0,0,0,0,false,false,false,false,0,null);
    button.dispatchEvent(event);
  }
}
$(function() {
  $('input[value="_(Apply)_"]').prop('disabled',true);
  $('form[name="host_names"]').find('input[type=text]').each(function(){$(this).on('input change',function() {
    var form = $(this).parentsUntil('form').parent();
    form.find('input[value="_(Apply)_"]').prop('disabled',false);
    form.find('input[value="_(Done)_"]').val('_(Reset)_').prop('onclick',null).click(function(){refresh(form.offset().top)});
  });});
});
function nameList() {
  $('#names').load('/plugins/<?=$plugin?>/include/NameList.php','plex=<?=$plex?>');
}
$(function() {
  nameList();
  $('#tab2').bind({click:function(){nameList()}});
});
</script>

:streams_plug:
> Give symbolic names to IP addresses, which are displayed on the active streams page.
>
> New IP addresses are automatically added to the list when detected.
>
> To remove a name association, clear the respective user name box and press apply.
:end

<form name="host_names" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file"  value="<?=$plugin?>/<?=$plugin?>.cfg">
<input type="hidden" name="#cleanup" value="true">
<table class="share_status online"><thead><tr><td>_(Host Address)_</td><td class="host">_(User Name)_</td></tr></thead>
<tbody id="names"></tbody>
</table>
</form>

                )

            [ActiveStreams] => Array
                (
                    [Menu] => SystemInformation
                    [Type] => xmenu
                    [Title] => Active Streams
                    [Icon] => dynamix.active.streams.png
                    [Tabs] => true
                    [file] => plugins/dynamix.active.streams/ActiveStreams.page
                    [root] => plugins/dynamix.active.streams
                    [name] => ActiveStreams
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.active.streams';
$plex = $ppid = $ipv4 = $ipv6 = $mounts = "";
if (is_file('/var/run/dockerd.pid')) {
  if ($plex = exec("docker ps --format='{{.Names}}'|grep -Pim1 '^(plex|plexmediaserver|pms)$'")) {
    $ppid = exec("docker inspect --format='{{.State.Pid}}' $plex 2>/dev/null");
    $ipv4 = exec("docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $plex 2>/dev/null");
    $ipv6 = exec("docker inspect --format='{{range .NetworkSettings.Networks}}{{.GlobalIPv6Address}}{{end}}' $plex 2>/dev/null");
    $mounts = substr(exec("docker inspect --format='{{range .Mounts}}{{.Source}}:{{.Destination}}|{{end}}' $plex 2>/dev/null"),0,-1);
  }
}
?>
<script>
function streamList() {
  $.post('/plugins/<?=$plugin?>/include/StreamList.php',{plex:'<?=$plex?>',pid:'<?=$ppid?>',ipv4:'<?=$ipv4?>',ipv6:'<?=$ipv6?>',mounts:'<?=urlencode($mounts)?>'},function(data){
    $('#streams').html(data);
<?if ($var['fsState']=='Started'):?>
    setTimeout(streamList,1000);
<?endif;?>
  });
}
$(streamList);
</script>
<table class='share_status'>
<thead><tr><td width='14%'>_(Host)_</td><td width='14%'>_(User)_</td><td width='9%'>_(Share)_</td><td width='5%'>_(Type)_</td><td width='auto'>_(Stream)_</td><td width='8%'>_(Playtime)_</td><td width='8%'>_(Size)_</td><td width='3%' style='text-align:center'>_(Halt)_</td></tr></thead>
<tbody id="streams"></tbody>
</table>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [UPSdetails] => Array
                (
                    [Menu] => UPSsettings
                    [Title] => UPS Details
                    [Tag] => battery-3
                    [file] => plugins/dynamix.apcupsd/UPSdetails.page
                    [root] => plugins/dynamix.apcupsd
                    [name] => UPSdetails
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 * Copyright 2015, Dan Landon.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
function getUPSstatus() {
  $.post('/plugins/dynamix.apcupsd/include/UPSstatus.php',{level:<?=$cfg['BATTERYLEVEL']?>,runtime:<?=$cfg['MINUTES']?>},function(data) {
    data = data.split('\n');
    $('#ups_summary').html(data[0]);
    $('#ups_status').html(data[1]);
    setTimeout(getUPSstatus,3000);
  });
}
$(getUPSstatus);
</script>

<table class="tablesorter shift">
<thead><tr><th style="width:15%">_(Key)_</th><th style="width:35%">_(Value)_</th><th style="width:15%">_(Key)_</th><th style="width:35%">_(Value)_</th></tr></thead>
<tbody id="ups_status"><tr><td colspan="4"><div class="spinner"></div></td></tr></tbody>
</table>

                )

            [UPSsettings] => Array
                (
                    [Menu] => OtherSettings
                    [Type] => xmenu
                    [Title] => UPS Settings
                    [Icon] => icon-ups
                    [Tag] => battery-3
                    [file] => plugins/dynamix.apcupsd/UPSsettings.page
                    [root] => plugins/dynamix.apcupsd
                    [name] => UPSsettings
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 * Copyright 2015, Dan Landon.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>

<?
$sName = "dynamix.apcupsd";
$cfg = parse_plugin_cfg($sName);
?>

<style>
table.ups thead tr th{width:16.6%;padding-left:10px}
table.ups tbody tr td{padding-left:10px;font-weight:bold}
tr.ups{height:3rem;line-height:3rem}
i.ups{margin-right:8px}
</style>
<script>
function toggleCustomCable(form) {
  var readonly = form.UPSCABLE.value != 'custom';
  form.CUSTOMUPSCABLE.readOnly = readonly;
  if (readonly) form.CUSTOMUPSCABLE.value = '';
}
function toggleDevice(form) {
  var readonly = form.UPSTYPE.value == 'usb';
  form.DEVICE.readOnly = readonly;
  if (readonly) form.DEVICE.value = '';
}
$(function() {
  showStatus('pid','apcupsd');
  toggleCustomCable(document.apcupsd_settings);
  toggleDevice(document.apcupsd_settings);
});
</script>
<table class="tablesorter shift ups" <?if (!file_exists("/var/run/apcupsd.pid")):?>style="display:none"<?endif;?>>
<thead><tr><th><i class='ups fa fa-shield'></i>_(UPS Model)_</th><th><i class='ups fa fa-plug'></i>_(UPS Status)_</th><th><i class='ups fa fa-battery'></i>_(Battery Charge)_</th><th><i class='ups fa fa-clock-o'></i>_(Runtime Left)_</th><th><i class='ups fa fa-bolt'></i>_(Nominal Power)_</th><th><i class='ups fa fa-bars'></i>_(UPS Load)_</th><th><i class='ups fa fa-ellipsis-h'></i>_(Output Voltage)_</th></tr></thead>
<tbody id="ups_summary"><tr class="ups"><td colspan="7">&nbsp;</td></tr></tbody>
</table>

<span style="float:right;margin-right:10px"><a href="http://apcupsd.org/manual/manual.html" target="_blank" title="_(APC UPS Daemon user manual)_"><i class="fa fa-file-text-o"></i> <u>_(Online Manual)_</u></a></span>
<form markdown="1" name="apcupsd_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$sName?>/<?=$sName?>.cfg">
<input type="hidden" name="#include" value="/plugins/<?=$sName?>/include/update.apcupsd.php">

_(Start APC UPS daemon)_:
: <select name="SERVICE">
  <?=mk_option($cfg['SERVICE'], "disable", _("No"))?>
  <?=mk_option($cfg['SERVICE'], "enable", _("Yes"))?>
  </select>

:apc_ups_daemon_help:

_(UPS cable)_:
: <select name="UPSCABLE" onChange="toggleCustomCable(this.form)">
  <?=mk_option($cfg['UPSCABLE'], "usb", _("USB"))?>
  <?=mk_option($cfg['UPSCABLE'], "simple", _("Simple"))?>
  <?=mk_option($cfg['UPSCABLE'], "smart", _("Smart"))?>
  <?=mk_option($cfg['UPSCABLE'], "ether", _("Ether"))?>
  <?=mk_option($cfg['UPSCABLE'], "custom", _("Custom"))?>
  </select>

:apc_ups_cable_help:

_(Custom UPS cable)_:
: <input type="text" name="CUSTOMUPSCABLE" class="narrow" maxlength="40" value="<?=htmlspecialchars($cfg['CUSTOMUPSCABLE']);?>">

:apc_ups_custom_cable_help:

_(UPS type)_:
: <select name="UPSTYPE" onChange="toggleDevice(this.form)">
  <?=mk_option($cfg['UPSTYPE'], "usb", _("USB"))?>
  <?=mk_option($cfg['UPSTYPE'], "apcsmart", _("APCsmart"))?>
  <?=mk_option($cfg['UPSTYPE'], "net", _("Net"))?>
  <?=mk_option($cfg['UPSTYPE'], "snmp", _("SNMP"))?>
  <?=mk_option($cfg['UPSTYPE'], "dumb", _("Dumb"))?>
  <?=mk_option($cfg['UPSTYPE'], "pcnet", _("PCnet"))?>
  <?=mk_option($cfg['UPSTYPE'], "modbus", _("ModBus"))?>
  </select>

:apc_ups_type_help:

_(Device)_:
: <input type="text" name="DEVICE" maxlength="200" class="narrow" value="<?=htmlspecialchars($cfg['DEVICE']);?>">

:apc_ups_device_help:

_(Battery level to initiate shutdown)_ (%):
: <input type="text" name="BATTERYLEVEL" class="narrow" maxlength="3" value="<?=htmlspecialchars($cfg['BATTERYLEVEL']);?>">

:apc_battery_level_help:

_(Runtime left to initiate shutdown)_ (_(minutes)_):
: <input type="text" name="MINUTES" class="narrow" maxlength="3" value="<?=htmlspecialchars($cfg['MINUTES']);?>">

:apc_runtime_left_help:

_(Time on battery before shutdown)_ (_(seconds)_):
: <input type="text" name="TIMEOUT" class="narrow" maxlength="4" value="<?=htmlspecialchars($cfg['TIMEOUT']);?>">

:apc_battery_time_help:
<div></div>
:apc_note_help:

_(Turn off UPS after shutdown)_:
: <select name="KILLUPS">
  <?=mk_option($cfg['KILLUPS'], "no", _("No"))?>
  <?=mk_option($cfg['KILLUPS'], "yes", _("Yes"))?>
  </select>

:apc_killups_help:

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [FolderCachingSettings] => Array
                (
                    [Menu] => Utilities
                    [Title] => Folder Caching
                    [Icon] => dynamix.cache.dirs.png
                    [file] => plugins/dynamix.cache.dirs/FolderCachingSettings.page
                    [root] => plugins/dynamix.cache.dirs
                    [name] => FolderCachingSettings
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.cache.dirs';
$cfg    = parse_plugin_cfg($plugin,false,INI_SCANNER_RAW);
$fName  = "$docroot/plugins/$plugin/scripts/cache_dirs";
$config = "/etc/cache_dirs.conf";
$pools  = $pools ?? ['cache'];
$search = ['/mnt/disk[0-9]*'];

foreach ($pools as $pool) if (isset($disks[$pool])) $search[] = "/mnt/$pool";
$search = implode(' ',$search);

exec("find $search -type d -maxdepth 1 -mindepth 1 -exec basename \"{}\" \;|sort -u|uniq", $folders);
?>
<script>
function prepareCache(form) {
// Simulate a single input field
  var exclude = [];
  for (var i=0,item; item=form.exclude.options[i]; i++) {
    if (item.selected) {
      exclude.push(item.value);
      item.selected = false;
    }
  }
  item = form.exclude.options[0];
  item.value = exclude.join(',');
  item.selected = true;
// Simulate a single input field
  var include = [];
  for (var i=0,item; item=form.include.options[i]; i++) {
    if (item.selected) {
      include.push(item.value);
      item.selected = false;
    }
  }
  item = form.include.options[0];
  item.value = include.join(',');
  item.selected = true;
}
$(function() {
  var size = Math.max(window.innerHeight-$('#pin').offset().top-150,150);
  $('#s1').dropdownchecklist({maxDropHeight:size, width:166, explicitClose:'..._(close)_'});
  $('#s2').dropdownchecklist({maxDropHeight:size, width:166, explicitClose:'..._(close)_'});
  showStatus('cache_dirs');
});
</script>
<form markdown="1" name="cache_settings" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareCache(this)">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg">
<input type="hidden" name="#include" value="plugins/<?=$plugin?>/include/update.cache.php">
<input type="hidden" name="#config" value="<?=$config?>">
<input type="hidden" name="#prefix" value="minimum=m&maximum=M&exclude=e&include=i&log=l&diskIdleTimer=W&scanTimeoutIdle=X&scanTimeoutBusy=Y&scanTimeoutStable=Z&ulimit=U&cachePressure=p&minDepth=c">
<span class="bitstream" style="float:right;margin-right:12px"><?=exec("$fName -V")?></span>

:cachedirs_info_plug:
> Folder Caching Info
>
> The folder caching (cache_dirs) reads directories continously to keep them in memory.
> The program does not know whether a directory is already in memory or need to be reread from disk.
> Therefore it cannot avoid spinning up disks when it happens that the linux memory cache evicts a directory and cache_dirs rescans the directoy.
> If a large number of files are being kept in memory then it seems inevitably that some diretories get evicted from the cache when the system is under load.
>
> The program by default uses an adaptive mode where it reduces the depth of the directory structure which it tries to keep in memory.
> When it detects a cache-miss (slow scan time) it will reduce the depth until disks are idle again,
> but will still be at risk of putting load on the disks for a minute or two until the program gives up and waits for idle disks.
> The less files the cache needs to hold, the less likely it is that the program spins up disks.
:end

_(Folder caching function)_:
: <select name="service">
  <?=mk_option($cfg['service']??'', "0", _("Disabled"))?>
  <?=mk_option($cfg['service']??'', "1", _("Enabled"))?>
  </select></td>

:cachedirs_function_plug:
> Select whether folder caching is enabled or disabled. Caching will only effectively occur when the array is started.
> The caching function is automatically restarted or stopped when the array goes online or offline.
:end

_(Cache pressure of directories on system)_:
: <input type="text" name="cachePressure" class="narrow" style="margin-right:20px" maxlength="4" value="<?=$cfg['cachePressure']??''?>" placeholder="10"><span class="orange-text">_(Important - check HELP if disks spin up)_</span>

:cachedirs_pressure_plug:
> Set cache_pressure to NN (default = 10). A value of 0 means never reclaim cache.
>
> A value of 1 works great for many users. If your disks spin up or cache_dirs logging indicates it frequently has accessed disks after scan, try lowering cache-pressure to 1. If the system runs out of memory increase cache-pressure.
>
> If CPU and disks is heavily affected by cache_dirs on frequent intervals this is also an indication that cache_dirs has to rescan everything.
>
> Warning: a value of 0 will cause kernel never to release the memory of directories, and if too little memory is available,
> it will cause the system to crash. cache_dirs does not reset the cachePressure after quitting,
> to reset the cache-pressure execute 'sudo sysctl vm.vfs_cache_pressure=100', or run cache-dirs with cache_pressure 100.
>
> See 'vfs_cache_pressure' in [kernel.org](https://www.kernel.org/doc/Documentation/sysctl/vm.txt).
:end

_(Suspend during 'Mover' process)_:
: <select name="suspend">
  <?=mk_option($cfg['suspend']??'', "-S", _("No"))?>
  <?=mk_option($cfg['suspend']??'', "", _("Yes"))?>
  </select>

:cachedirs_suspend_plug:
> Stop caching while the mover is running to avoid conflicts. When using adaptive depth it will probably work well NO.
> With fixed depth it will almost certainly put less load on the disks to choose YES.
:end

_(Scan user shares (/mnt/user))_:
: <select name="shares" style="margin-right:20px">
  <?=mk_option($cfg['shares']??'', "", _("No"))?>
  <?=mk_option($cfg['shares']??'', "-u", _("Yes"))?>
  </select><span class="orange-text">_(Important - check HELP if disks spin up)_</span>

:cache_dirs_shares_plug:
> User share /mnt/user will also be scanned in addition to /mnt/disk* and /mnt/cache. This seems to increase CPU usage by a factor of x10 but is reported by numerous users to be necessary to avoid disks spinning up when accessing directories.
:end

_(Included folders)_:
: <select id="s2" name="include" style="display:none" multiple>
  <?foreach ($folders as $folder):?>
  <?=mk_option_check($cfg['include']??'', $folder, $folder)?>
  <?endforeach;?>
  </select>

:cachedirs_included_folders_plug:
> The dropdown menu shows all available folders, by default all folders are included. Select here the restricted list of folders to be included.
>
> If an included folder is excluded, then the folder gets excluded. It is simplest to not use includes and excludes at the same time.
:end

_(Excluded folders)_:
: <select id="s1" name="exclude" style="display:none" multiple>
  <?foreach ($folders as $folder):?>
  <?=mk_option_check($cfg['exclude']??'', $folder, $folder)?>
  <?endforeach;?>
  </select>

:cachedirs_excluded_folders_plug:
> The dropdown menu shows all available folders, by default no folders are excluded. Select here any folders to be excluded.
>
> It is possible to exclude an included folder. It is simplest to not use includes and excludes at the same time.
:end

_(Use Adaptive depth)_:
: <select name="adaptive">
  <?=mk_option($cfg['adaptive']??'', "1", _("Adaptive"))?>
  <?=mk_option($cfg['adaptive']??'', "0", _("Fixed"))?>
  </select>

:cachedirs_adaptive_depth_plug:
> If adaptive is enabled the depth will be automatically adjusted but will never exceed max level depth.
> It will start at depth 1 and keep increasing the scan depth towards maximum level as long as scans do not take too long to complete (see scan timeout).
> If adaptive is disabled then cache_dirs will always scan to the max level.
:end

_(Minimum level depth)_ (_(for adaptive depth)_):
: <input type="text" name="minDepth" class="narrow" maxlength="3" value="<?=$cfg['minDepth']??''?>" placeholder="4">

:cachedirs_min_level_plug:
> Sets the minimum folder level for the adaptive scan (user-share > child folder > grand child is two levels). Default is 4.
:end

_(Maximum level depth)_:
: <input type="text" name="depth" class="narrow" maxlength="3" value="<?=$cfg['depth']??''?>" placeholder="_(unlimited)_">

:cachedirs_max_level_plug:
> Sets the maximum folder levels for the scan (parent > child folder > grand child). Set to 'unlimited' (or 0) to remove maximum
:end

_(Disk Idle Timer)_ (_(sec)_):
: <input type="text" name="diskIdleTimer" class="narrow" maxlength="4" value="<?=$cfg['diskIdleTimer']??''?>" placeholder="60">

:cachedirs_idle_timer_plug:
> When the disks have been idle this long, cache_dirs adaptive scan starts working towards building the cache.
:end

_(Scan timeout for a scan during disk-idle period)_ (_(sec)_):
: <input type="text" name="scanTimeoutIdle" class="narrow" maxlength="4" value="<?=$cfg['scanTimeoutIdle']??''?>" placeholder="150">

:cachedirs_timeout_scan_plug:
> Scan timeout is the maximum duration that a single scan through all directories at the current level af depth (which may change adaptively).
> Increase it if cache_dirs fails in caching all your files. This timeout is always used if adaptive is disabled.
:end

_(Scan timeout for a scan during initial startup or less-idle period)_ (_(sec)_):
: <input type="text" name="scanTimeoutBusy" class="narrow" maxlength="4" value="<?=$cfg['scanTimeoutBusy']??''?>" placeholder="30">

:cachedirs_timeout_initial_plug:
> Increase it if you want cache_dirs too give more time in initial scan, and when filesystem may be busy.
:end

_(Scan timeout for a scan when all directories have been succesfully cached)_ (_(sec)_):
: <input type="text" name="scanTimeoutStable" class="narrow" maxlength="4" value="<?=$cfg['scanTimeoutStable']??''?>" placeholder="20">

:cachedirs_timeout_cached_plug:
> Decrease it if you want cache_dirs to put less load on system when cache is evicted from memory, and disks are not idle.
> Increase if you want cache_dirs to have a greater chance af getting directories back into memory.
:end

_(Minimum interval between folder scans)_ (_(sec)_):
: <input type="text" name="minimum" class="narrow" maxlength="3" value="<?=$cfg['minimum']??''?>" placeholder="1">

:cachedirs_min_interval_plug:
> Tweaking of the caching interval can be done for slower systems. Default value is 1 second, should be alright for most systems.
:end

_(Maximum interval between folder scans)_ (_(sec)_):
: <input type="text" name="maximum" class="narrow" maxlength="3" value="<?=$cfg['maximum']??''?>" placeholder="10">

:cachedirs_max_interval_plug:
> Tweaking of the caching interval can be done for slower systems. Default value is 10 seconds, should be alright for most systems.
:end

_(Run scan of each disk in a separate thread)_:
: <select name="mulithreaded">
  <?=mk_option($cfg['mulithreaded']??'', "", _("Yes"))?>
  <?=mk_option($cfg['mulithreaded']??'', "-T", _("No"))?>
  </select>

:cachedirs_scan_disk_plug:
> Each disk will be scanned in a separate thread, so the disks will be read concurrently. If user share is also scanned the user
> share will be scanned in a single thread after all disks scans are completed, to avoid thrashing disks.
:end

_(Limit the memory available to the shell in which the script runs (increase if it dies))_:
: <input type="text" name="ulimit" class="narrow" maxlength="6" value="<?=$cfg['ulimit']??''?>" placeholder="50000">

:cachedirs_limit_memory_plug:
> set ulimit to NN to limit memory used by script (default=50000), '-U 0' sets no ulimit at all and inherits the shells default).
:end

_(Logging)_:
: <select name="log">
  <?=mk_option($cfg['log']??'', "off", _("Disabled"))?>
  <?=mk_option($cfg['log']??'', "on", _("Enabled"))?>
  </select></td>

:cachedirs_logging_plug:
> Select whether logging is enabled or disabled. Logging will be made to /var/log/cache_dirs.log and /var/log/cache_dirs_lost_cache.csv.
> Be wary that the cache_dirs logs are placed in memory on unRAID and are not automatically rolled.
:end

_(User defined options)_:
: <input id="pin" type="text" name="other" class="narrow" maxlength="200" value="<?=$cfg['other']??''?>" placeholder="_(User defined options)_"><span class="orange-text">_(Check HELP for filter example)_</span>
_(or see)_ <u><a href="http://lime-technology.com/forum/index.php?topic=4500.0" target="_blank">_(Unraid forum)_</a></u>

:cachedirs_user_defined_plug:
> The cache_dirs script has additional options which may be used.
> Refer to the online documentation to use these as needed,
> or see the cache_dirs script itself located under /usr/local/emhttp/plugins/dynamix.cache.dirs/scripts/cache_dirs
>
> Its possible to tell cache_dirs to avoid traversing all directories with a certain name. The following example avoids '.Recycle.Bin' and 'temp' and 'log' folders: 
>
> <span class="strong orange-text">-a '-noleaf -name .Recycle.Bin -prune -o -name log -prune -o -name temp -prune -o -print'</span>
>
> Note that the single quotes around argument to -a is important. Double-quotes do not work in the current version, so unfortunately its not currently possible to filter with '-name "*Old" -prune'.
:end

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">

</form>

                )

            [AddContainer] => Array
                (
                    [Title] => Add Container
                    [Cond] => (pgrep('dockerd')!==false)
                    [Markdown] => false
                    [file] => plugins/dynamix.docker.manager/AddContainer.page
                    [root] => plugins/dynamix.docker.manager
                    [name] => AddContainer
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2014-2020, Guilherme Jardim, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
// add docker translations (if needed)
if (substr($_SERVER['REQUEST_URI'],0,7) != '/Docker') {
  $docker = "$docroot/languages/$locale/docker.dot";
  if (file_exists($docker)) $language = array_merge($language,unserialize(file_get_contents($docker)));
}
eval('?>'.parse_file("$docroot/plugins/dynamix.docker.manager/include/CreateDocker.php"));
?>
                )

            [Docker] => Array
                (
                    [Menu] => Tasks:60
                    [Type] => xmenu
                    [Code] => e90b
                    [Lock] => true
                    [Cond] => exec("grep -o '^DOCKER_ENABLED=.yes' /boot/config/docker.cfg 2>/dev/null")
                    [file] => plugins/dynamix.docker.manager/Docker.page
                    [root] => plugins/dynamix.docker.manager
                    [name] => Docker
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2014-2021, Guilherme Jardim, Eric Schultz, Jon Panozzo.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
if ($var['fsState'] != 'Started') {
  echo "<div class='notice shift'>_(Array must be **Started** to view Docker containers)_.</div>";
} elseif (!is_file('/var/run/dockerd.pid') || (!is_dir('/proc/'.@file_get_contents('/var/run/dockerd.pid')))) {
  echo "<div class='notice shift'>_(Docker Service failed to start)_.</div>";
}
?>

                )

            [DockerContainers] => Array
                (
                    [Menu] => Docker:1
                    [Title] => Docker Containers
                    [Tag] => cubes
                    [Cond] => is_file('/var/run/dockerd.pid')
                    [Markdown] => false
                    [Nchan] => docker_load:stop
                    [file] => plugins/dynamix.docker.manager/DockerContainers.page
                    [root] => plugins/dynamix.docker.manager
                    [name] => DockerContainers
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2014-2023, Guilherme Jardim, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/plugins/dynamix.docker.manager/include/DockerClient.php";

$width   = in_array($theme,['white','black']) ? -58: -44;
$top     = in_array($theme,['white','black']) ? 40 : 20;
$busy    = "<i class='fa fa-spin fa-circle-o-notch'></i> "._('Please wait')."... "._('starting up containers');
$cpus    = cpu_list();
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">
<style>
.basic{display:block}
.advanced{display:none;white-space:nowrap}
.log{cursor:zoom-in}
.exec{cursor:pointer}
table#docker_containers{text-align:left}
th.five{width:5%}
th.nine{width:9%}
th.load{width:140px}
input.wait{width:24px;margin:0 4px;padding:0 5px;border:none;box-shadow:none;background-color:transparent}
table tbody td{line-height:normal}
i.mover{margin-right:8px;display:none}
#resetsort{margin-left:12px;display:inline-block;width:32px}
</style>
<table id="docker_containers" class="tablesorter shift">
<thead><tr><th><a id="resetsort" class="nohand" onclick="resetSorting()" title="_(Reset sorting)_"><i class="fa fa-th-list"></i></a>_(Application)_</th><th>_(Version)_</th><th>_(Network)_</th><th>_(Port Mappings)_ <small>(_(App to Host)_)</small></th><th>_(Volume Mappings)_ <small>(_(App to Host)_)</small></th><th class="load advanced">_(CPU & Memory load)_</th><th class="nine">_(Autostart)_</th><th class="five">_(Uptime)_</th></tr></thead>
<tbody id="docker_list"><tr><td colspan='8'></td></tr></tbody>
</table>
<input type="button" onclick="addContainer()" value="_(Add Container)_" style="display:none">
<input type="button" onclick="startAll()" value="_(Start All)_" style="display:none">
<input type="button" onclick="stopAll()" value="_(Stop All)_" style="display:none">
<input type="button" onclick="pauseAll()" value="_(Pause All)_" style="display:none">
<input type="button" onclick="resumeAll()" value="_(Resume All)_" style="display:none">
<input type="button" onclick="checkAll()" value="_(Check for Updates)_" id="checkAll" style="display:none">
<input type="button" onclick="updateAll()" value="_(Update All)_" id="updateAll" style="display:none">
<input type="button" onclick="contSizes()" value="_(Container Size)_" style="display:none">
<div id="iframe-popup" style="display:none;-webkit-overflow-scrolling:touch;"></div>

<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script src="<?autov('/plugins/dynamix.docker.manager/javascript/docker.js')?>"></script>
<script>
var docker = [];
<?if (!$tabbed):?>
$('.title').append("<span id='busy' class='red-text strong' style='display:none;margin-left:40px'><?=$busy?></span>");
<?else:?>
$('.tabs').append("<span id='busy' class='red-text strong' style='display:none;position:relative;top:<?=$top?>px;left:40px;font-size:1.4rem;letter-spacing:2px'><?=$busy?></span>");
<?endif;?>
<?if (_var($display,'resize')):?>
function resize() {
  $('#docker_list').height(Math.max(window.innerHeight-340,330));
  $('#docker_containers thead,#docker_containers tbody').removeClass('fixed');
  $('#docker_containers thead tr th').each(function(){$(this).width($(this).width());});
  $('#docker_containers tbody tr td').each(function(){$(this).width($(this).width());});
  $('#docker_containers thead,#docker_containers tbody').addClass('fixed');
}
<?endif;?>
function resetSorting() {
  if ($.cookie('lockbutton')==null) return;
  $('input[type=button]').prop('disabled',true);
  $.post('/plugins/dynamix.docker.manager/include/UserPrefs.php',{reset:true},function(){loadlist();});
}
function listview() {
  var more = $.cookie('docker_listview_mode')=='advanced';
  <?if(($dockercfg['DOCKER_READMORE']??'yes') === 'yes'):?>
  $('.docker_readmore').readmore({maxHeight:32,moreLink:"<a href='#' style='text-align:center'><i class='fa fa-chevron-down'></i></a>",lessLink:"<a href='#' style='text-align:center'><i class='fa fa-chevron-up'></i></a>"});
  <?endif;?>
  $('input.autostart').each(function(){
    var wait = $('#'+$(this).prop('id').replace('auto','wait'));
    var auto = $(this).prop('checked');
    if (auto && more) wait.show(); else wait.hide();
  });
}
function LockButton() {
  if ($.cookie('lockbutton')==null) {
    $.cookie('lockbutton','lockbutton');
    $('#resetsort').removeClass('nohand').addClass('hand');
    $('i.mover').show();
    $('#docker_list .sortable').css({'cursor':'move'});
<?if ($themes1):?>
    $('div.nav-item.LockButton').find('a').prop('title',"_(Lock sortable items)_");
    $('div.nav-item.LockButton').find('b').removeClass('icon-u-lock green-text').addClass('icon-u-lock-open red-text');
<?endif;?>
    $('div.nav-item.LockButton').find('span').text("_(Lock sortable items)_");
    $('#docker_list').sortable({helper:'clone',items:'.sortable',cursor:'grab',axis:'y',containment:'parent',cancel:'span.docker_readmore,input',delay:100,opacity:0.5,zIndex:9999,forcePlaceholderSize:true,
    update:function(e,ui){
      var row = $('#docker_list').find('tr:first');
      var names = ''; var index = '';
      row.parent().children().find('td.ct-name').each(function(){names+=$(this).find('.appname').text()+';';index+=$(this).parent().parent().children().index($(this).parent())+';';});
      $.post('/plugins/dynamix.docker.manager/include/UserPrefs.php',{names:names,index:index});
    }});
  } else {
    $.removeCookie('lockbutton');
    $('#resetsort').removeClass('hand').addClass('nohand');
    $('i.mover').hide();
    $('#docker_list .sortable').css({'cursor':'default'});
<?if ($themes1):?>
    $('div.nav-item.LockButton').find('a').prop('title',"_(Unlock sortable items)_");
    $('div.nav-item.LockButton').find('b').removeClass('icon-u-lock-open red-text').addClass('icon-u-lock green-text');
<?endif;?>
    $('div.nav-item.LockButton').find('span').text("_(Unlock sortable items)_");
    $('#docker_list').sortable('destroy');
  }
}
function loadlist(init) {
  timers.docker = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.get('/plugins/dynamix.docker.manager/include/DockerContainers.php',function(d) {
    clearTimeout(timers.docker);
    var data = d.split(/\0/);
    $('#docker_list').html(data[0]);
    $('head').append('<script>'+data[1]+'<\/script>');
<?if (_var($display,'resize')):?>
    resize();
    if (init) $(window).bind('resize',function(){resize();});
<?endif;?>
    $('.iconstatus').each(function(){
      if ($(this).hasClass('stopped')) $('div.'+$(this).prop('id')).hide();
    });
    $('.autostart').switchButton({labels_placement:'right', on_label:"_(On)_", off_label:"_(Off)_"});
    $('.autostart').change(function(){
      var more = $.cookie('docker_listview_mode')=='advanced';
      var wait = $('#'+$(this).prop('id').replace('auto','wait'));
      var auto = $(this).prop('checked');
      if (auto && more) wait.show(); else wait.hide();
      $.post('/plugins/dynamix.docker.manager/include/UpdateConfig.php',{action:'autostart',container:$(this).attr('container'),auto:auto,wait:wait.find('input.wait').val()});
    });
    $('input.wait').change(function(){
      $.post('/plugins/dynamix.docker.manager/include/UpdateConfig.php',{action:'wait',container:$(this).attr('container'),wait:$(this).val()});
    });
    if ($.cookie('docker_listview_mode')=='advanced') {$('.advanced').show(); $('.basic').hide();}
    $('input[type=button]').prop('disabled',false).show('slow');
    var update = false, rebuild = false;
    for (var i=0,ct; ct=docker[i]; i++) {
      if (ct.update==1) update = true;
      if (ct.update==2) rebuild = true;
    }
    listview();
    $('div.spinner.fixed').hide('slow');
    if (data[2]==1) {$('#busy').show(); setTimeout(loadlist,5000);} else if ($('#busy').is(':visible')) {$('#busy').hide(); setTimeout(loadlist,3000);}
    if (!update) $('input#updateAll').prop('disabled',true);
    if (rebuild) rebuildAll();
  });
}
function contSizes() {
  // show spinner over window
  $('div.spinner.fixed').css({'z-index':'100000'}).show();
  openPlugin('container_size', "_(Container Size)_");
}
var dockerload = new NchanSubscriber('/sub/dockerload',{subscriber:'websocket'});
dockerload.on('message', function(msg){
  var data = msg.split('\n');
  for (var i=0,row; row=data[i]; i++) {
    var id = row.split(';');
    var w1 = Math.round(Math.min(id[1].slice(0,-1)/<?=count($cpus)*count(preg_split('/[,-]/',$cpus[0]))?>,100)*100)/100+'%';
    $('.cpu-'+id[0]).text(w1.replace('.','<?=_var($display,'number','.,')[0]?>'));
    $('.mem-'+id[0]).text(id[2]);
    $('#cpu-'+id[0]).css('width',w1);
  }
});
$(function() {
  $(".tabs").append('<span class="status"><span><input type="checkbox" class="advancedview"></span></span>');
  $('.advancedview').switchButton({labels_placement:'left', on_label:"_(Advanced View)_", off_label:"_(Basic View)_", checked:$.cookie('docker_listview_mode')=='advanced'});
  $('.advancedview').change(function(){
    $('.advanced').toggle('slow');
    $('.basic').toggle('slow');
    $.cookie('docker_listview_mode',$('.advancedview').is(':checked')?'advanced':'basic',{expires:3650});
    listview();
  });
  $.removeCookie('lockbutton');
  loadlist(true);
  dockerload.start();
});
</script>

                )

            [DockerSettings] => Array
                (
                    [Menu] => OtherSettings
                    [Title] => Docker
                    [Icon] => icon-docker
                    [Tag] => icon-docker
                    [file] => plugins/dynamix.docker.manager/DockerSettings.page
                    [root] => plugins/dynamix.docker.manager
                    [name] => DockerSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2014-2023, Guilherme Jardim, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
// Add the Docker JSON client
require_once "$docroot/plugins/dynamix.docker.manager/include/DockerClient.php";

$DockerClient  = new DockerClient();
exec("/etc/rc.d/rc.docker status >/dev/null",$dummy,$DockerStopped);

function strposX($s, $c, $n=1) {
  $p = 0;
  while ($n && $p=strpos($s,$c,$p)!==false) {$n--; $p+=strlen($c);}
  return $p;
}

unset($custom,$other);
exec("ls --indicator-style=none /sys/class/net|grep -P '^br[0-9]'",$custom);
exec("ls --indicator-style=none /sys/class/net|grep -P '^(bond|eth)[0-9]'",$other);
$slaves = [];
foreach ($other as $network) {
  if (substr($network,0,4)=='bond') {
    $br = str_replace('bond','br',$network);
    $bond = "/sys/class/net/$network/bonding/slaves";
    if (file_exists($bond)) $slaves = array_merge($slaves,explode(' ',str_replace("\n","",file_get_contents($bond))));
    if (!in_array($br,$custom)) $custom[] = $network;
  } else {
    $br = str_replace('eth','br',$network);
    $bond = str_replace('eth','bond',$network);
    if (!in_array($br,$custom) && !in_array($bond,$custom)) $custom[] = $network;
  }
}
$include = $include6 = $address = $address6 = $gateway = $gateway6 = $unset = $protocol = [];
$wide = false;
foreach ($custom as $network) {
  if (in_array($network,$slaves)) continue;
  $ip4    = exec("ip -br -4 addr show $network scope global|awk '{print $3}'");
  $ip6    = exec("ip -br -6 addr show $network scope global|awk '{print $3}'");
  $gw4    = $ip4 ? exec("ip -4 route show dev $network default|awk '{print $3;exit}'") : '';
  $gw6    = $ip6 ? exec("ip -6 route show dev $network default|awk '{print $3;exit}'") : '';
  $route4 = $ip4 ? exec("ip -4 route show dev $network $ip4|awk '{print $1;exit}'") : '';
  $route6 = $ip6 ? exec("ip -6 route show dev $network|awk '/^".substr($ip6,0,strposX($ip6,':',4))."/{print $1;exit}'") : '';
  [$eth,$vlan] = my_explode('.',$network);
  $eth = str_replace(['bond','br'],'eth',$eth);
  if (!$vlan) {
    $protocol[$network] = _var($$eth,'PROTOCOL:0','ipv4');
  } else {
    foreach ($$eth as $key => $value) if (strpos($key,'VLANID')!==false && $value==$vlan) {$protocol[$network] = _var($$eth,str_replace('VLANID','PROTOCOL',$key),'ipv4'); break;}
  }
  if ($ip4 && $route4) {
    $include[$network] = $route4;
    $address[$network] = $ip4;
    $gateway[$network] = $gw4;
  } elseif (!array_key_exists($network,$gateway6)) {
    $unset[] = $network;
  }
  if ($ip6 && $route6) {
    $include6[$network] = $route6;
    $address6[$network] = $ip6;
    $gateway6[$network] = $gw6;
  } elseif (!array_key_exists($network,$gateway)) {
    $unset[] = $network;
  }
  if ($protocol[$network] != 'ipv4') $wide = true;
}
$ip4class = $wide ? 'ip6' : 'ip4';
$gw4class = $wide ? 'gw6' : 'gw4';

$unset = array_unique($unset);

function normalize($network) {
  return strtoupper(str_replace('.','_',$network));
}
function base_min($route) {
  [$net,$mask] = my_explode('/',$route);
  $mask = 32-$mask;
  return explode('.',long2ip((ip2long($net)>>$mask)<<$mask));
}
function base_max($route) {
  [$net,$mask] = my_explode('/',$route);
  $mask = 32-$mask;
  return explode('.',long2ip(((ip2long($net)>>$mask)<<$mask)+pow(2,$mask)-1));
}
function base_net($route) {
  return substr(explode('/',$route)[0],0,-2);
}
$bgcolor = strstr('white,azure',$display['theme']) ? '#f2f2f2' : '#1c1c1c';
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<style>
.errortext{color:#EF3D47;display:none;margin-left:20px}
.fileTree{background:<?=$bgcolor?>;width:300px;max-height:150px;overflow-y:scroll;overflow-x:hidden;position:absolute;z-index:100;display:none}
.basic{display:inline-block}
.advanced{display:none}
select.mask{min-width:0;margin:0 10px 0 4px}
select.net{min-width:0;margin:0 4px 0 2px}
select option.hide{display:none}
input.ip4{width:100px;margin:0 4px 0 1px}
input.ip6{width:140px;margin:0 4px}
input.gw4{width:100px;margin:0 4px 0 1px}
input.gw6{width:160px;margin:0 4px}
input.pool6{width:40px;margin:0 4px 0 1px}
span.net{margin-left:4px;margin-right:2px}
span.ip4{display:inline-block;width:260px}
span.ip6{display:inline-block;width:310px}
span.gw4{display:inline-block;width:200px}
span.gw6{display:inline-block;width:270px}
span.nonexist{margin-left:20px}
<?if (strstr('white,azure',$display['theme'])):?>
span.disabled{color:#B0B0B0}
<?else:?>
span.disabled{color:#404040}
<?endif;?>
</style>
<span class="status vhshift"><input type="checkbox" class="advancedview"></span>

<form markdown="1" id="settingsForm" name="settingsForm" method="POST" action="/update.php" target="progressFrame" onsubmit="return prepareDocker(this)">
<input type="hidden" name="#file" value="<?=$docker_cfgfile?>">
<input type="hidden" name="#include" value="/plugins/dynamix.docker.manager/include/PruneConfig.php">
<input type="hidden" name="#command" value="/plugins/dynamix/scripts/emcmd">
<input type="hidden" name="#arg[1]" value="cmdStatus=Apply">
<input type="hidden" name="#cleanup" value="true">
<input type="hidden" name="DOCKER_CUSTOM_NETWORKS" value="<?=implode(' ',$unset)?> ">
<input type="hidden" name="DOCKER_IMAGE_FILE" value="<?=_var($dockercfg,'DOCKER_IMAGE_FILE')?>">
_(Enable Docker)_:
: <select id="DOCKER_ENABLED" name="DOCKER_ENABLED">
  <?=mk_option(_var($dockercfg,'DOCKER_ENABLED'), 'no', _('No'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_ENABLED'), 'yes', _('Yes'))?>
  </select>
  <?if (_var($var,'fsState')!="Started"):?>
  <span id="arraystopped"><i class="fa fa-warning icon warning"></i> <?=(_var($dockercfg,'DOCKER_ENABLED')=='yes') ? '_(Docker will be available after Array is Started)_' : '_(Apply to activate Docker after Array is Started)_'?></span>
  <?elseif (!is_dir(dirname(_var($dockercfg,'DOCKER_IMAGE_FILE'))) || !is_dir(_var($dockercfg,'DOCKER_APP_CONFIG_PATH'))):?>
  <span class="basic"><i class="fa fa-warning icon warning"></i> _(One or more paths do not exist)_ (<a href="#" onclick="$('.advancedview').switchButton('option','checked',true); return false">_(view)_</a>)</span>
  <?endif;?>

:docker_enable_help:

_(Enable container table readmore-js)_:
: <select id="DOCKER_READMORE" name="DOCKER_READMORE">

  <?=mk_option(_var($dockercfg,'DOCKER_READMORE'), 'yes', _('Yes'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_READMORE'), 'no', _('No'))?>

  </select>

:docker_readmore_help:

_(Docker Stop Timeout)_:
: <input class='narrow' id="DOCKER_TIMEOUT" type="number" name="DOCKER_TIMEOUT" min='1' value="<?=_var($dockercfg,'DOCKER_TIMEOUT')?>">_(seconds)_

:docker_timeout_help:

<?if ($DockerStopped):?>

_(Docker data-root)_:
: <select id="DOCKER_IMAGE_TYPE" name="DOCKER_IMAGE_TYPE" onchange="updateLocation(this.value)">
  <?=mk_option(_var($dockercfg,'DOCKER_IMAGE_TYPE'), '', _('btrfs vDisk'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_IMAGE_TYPE'), 'xfs', _('xfs vDisk'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_IMAGE_TYPE'), 'folder', _('directory'))?>
  </select>

:docker_vdisk_type_help:

<div markdown="1" id="vdisk_file" style="display:none">
_(Docker vDisk size)_:
: <input id="DOCKER_IMAGE_SIZE" type="number" name="DOCKER_IMAGE_SIZE" value="<?=_var($dockercfg,'DOCKER_IMAGE_SIZE')?>" class="narrow" required>GB<span id="SIZE_ERROR" class="errortext"></span>

:docker_vdisk_size_help:

_(Docker vDisk location)_:
: <input type="text" id="DOCKER_IMAGE_FILE1" name="DOCKER_IMAGE_FILE1" autocomplete="off" spellcheck="false" value="<?=_var($dockercfg,'DOCKER_IMAGE_FILE')?>" placeholder="_(e.g.)_ /mnt/user/system/docker.img" data-pickcloseonfile="true" data-pickfilter="img" data-pickroot="/mnt" data-pickfolders="true" disabled required pattern="^[^\\]*(docker-xfs\.img|docker\.img)$">
  <span class="deleteLabel"><label><input type="checkbox" class="deleteCheckbox"> _(Delete vDisk file)_</label></span>
  <?if ($var['fsState'] != "Started"):?><span><i class="fa fa-warning icon warning"></i> _(Modify with caution: unable to validate path until Array is Started)_</span>
  <?elseif (!is_dir(dirname(_var($dockercfg,'DOCKER_IMAGE_FILE')))):?><span class="nonexist"><i class="fa fa-warning icon warning"></i> _(Path does not exist)_</span>
  <?endif;?><span id="IMAGE_ERROR1" class="errortext"></span>

:docker_vdisk_location_help:

</div>
<div markdown="1" id="vdisk_dir" style="display:none">
_(Docker directory)_:
: <input type="text" id="DOCKER_IMAGE_FILE2" name="DOCKER_IMAGE_FILE2" autocomplete="off" spellcheck="false" value="<?=_var($dockercfg,'DOCKER_IMAGE_FILE')?>" placeholder="_(e.g.)_ /mnt/user/system/docker" data-pickcloseonfile="true" data-pickfilter="HIDE_FILES_FILTER" data-pickroot="/mnt" data-pickfolders="true" disabled required pattern="^[^\\]*/$">
  <span class="deleteLabel"><label><input type="checkbox" class="deleteCheckbox"> _(Delete directory)_</label></span>
  <?if ($var['fsState'] != "Started"):?><span><i class="fa fa-warning icon warning"></i> _(Modify with caution: unable to validate path until Array is Started)_</span>
  <?elseif (!is_dir(dirname(_var($dockercfg,'DOCKER_IMAGE_FILE')))):?><span class="nonexist"><i class="fa fa-warning icon warning"></i> _(Path does not exist)_</span>
  <?endif;?><span id="IMAGE_ERROR2" class="errortext"></span>

:docker_vdisk_directory_help:

</div>
_(Default appdata storage location)_:
: <input type="text" id="DOCKER_APP_CONFIG_PATH" name="DOCKER_APP_CONFIG_PATH" autocomplete="off" spellcheck="false" value="<?=_var($dockercfg,'DOCKER_APP_CONFIG_PATH')?>" placeholder="_(e.g.)_ /mnt/user/appdata/" data-pickfilter="HIDE_FILES_FILTER" data-pickroot="<?=is_dir('/mnt/user')?'/mnt/user':'/mnt'?>" data-pickfolders="true" pattern="^[^\\]*/$">
  <?if ($var['fsState'] != "Started"):?>
  <span><i class="fa fa-warning icon warning"></i> _(Modify with caution: unable to validate path until Array is Started)_</span>
  <?elseif (!is_dir(_var($dockercfg,'DOCKER_APP_CONFIG_PATH'))):?>
  <span class="nonexist"><i class="fa fa-warning icon warning"></i> _(Path does not exist)_</span>
  <?endif;?>

:docker_appdata_location_help:

<div markdown="1" class="advanced">
_(Docker LOG rotation)_:
: <select name="DOCKER_LOG_ROTATION" onchange="showLogOptions(this.value)">
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_ROTATION'), 'no', _('Disabled'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_ROTATION'), 'yes', _('Enabled'))?>
  </select>

:docker_log_rotation_help:

<div markdown="1" id="DOCKER_LOG_OPTIONS" style="display:none">
_(Docker LOG maximum file size)_:
: <select name="DOCKER_LOG_SIZE">
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_SIZE'), '10m', '10 '._('MB'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_SIZE'), '20m', '20 '._('MB'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_SIZE'), '50m', '50 '._('MB'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_SIZE'), '100m', '100 '._('MB'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_SIZE'), '500m', '500 '._('MB'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_SIZE'), '1g', '1000 '._('MB'))?>
  </select>

:docker_log_file_size_help:

_(Docker LOG number of files)_:
: <select name="DOCKER_LOG_FILES">
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_FILES'), '1', '1')?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_FILES'), '2', '2')?>
  <?=mk_option(_var($dockercfg,'DOCKER_LOG_FILES'), '3', '3')?>
  </select>

:docker_log_file_number_help:

</div>
_(Template Authoring Mode)_:
: <select id="DOCKER_AUTHORING_MODE" name="DOCKER_AUTHORING_MODE">
  <?=mk_option(_var($dockercfg,'DOCKER_AUTHORING_MODE'), 'no', _('No'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_AUTHORING_MODE'), 'yes', _('Yes'))?>
  </select>

:docker_authoring_mode_help:

_(Docker custom network type)_:
: <select name="DOCKER_NETWORK_TYPE">
  <?=mk_option(_var($dockercfg,'DOCKER_NETWORK_TYPE'), '1', _('ipvlan'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_NETWORK_TYPE'), '', _('macvlan'))?>
  </select>&nbsp;_(Please read the Help carefully)_.  _(Misconfiguration can cause problems)_.

:docker_custom_network_type_help:

_(Host access to custom networks)_:
: <select name="DOCKER_ALLOW_ACCESS">
  <?=mk_option(_var($dockercfg,'DOCKER_ALLOW_ACCESS'), '', _('Disabled'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_ALLOW_ACCESS'), 'yes', _('Enabled'))?>
  </select>&nbsp;_(Make sure you understand what you are doing before enabling)_.

:docker_custom_network_access_help:

_(Preserve user defined networks)_:
: <select name="DOCKER_USER_NETWORKS">
  <?=mk_option(_var($dockercfg,'DOCKER_USER_NETWORKS'), 'remove', _('No'))?>
  <?=mk_option(_var($dockercfg,'DOCKER_USER_NETWORKS'), 'preserve', _('Yes'))?>
  </select>

:docker_user_defined_network_help:

<?foreach ($include as $network => $route):?>
<?
$net = normalize($network);
$docker_auto = "DOCKER_AUTO_$net";
$docker_dhcp = "DOCKER_DHCP_$net";
?>

<input type="hidden" name="<?=$docker_auto?>" value="<?=_var($dockercfg,$docker_auto)?>">

_(IPv4 custom network on interface)_ <?=$network?> (_(optional)_):
<?
  $auto = _var($dockercfg,$docker_auto)!='no';
  $autoDisabled = $auto ? '':'disabled';
  $dhcp = _var($dockercfg,$docker_dhcp);
  $dhcpDisabled = ($auto && $dhcp) ? '':'disabled';
  $net = base_min($route);
  $max = base_max($route);
  $mask = explode('/',$route)[1];
  $net_user = $dhcp ? base_min($dhcp) : $net;
  $mask_user = $dhcp ? explode('/',$dhcp)[1] : $mask+1;
  $size = pow(2,32-$mask_user);
  switch (true) {
    case ($mask < 16): $prefix = $net[0]; $box = 1; break;
    case ($mask < 24): $prefix = $net[0].'.'.$net[1]; $box = 2; break;
    case ($mask < 32): $prefix = $net[0].'.'.$net[1].'.'.$net[2]; $box = 3 ;break;
  }
?>
: <input type="checkbox" id="<?=$docker_dhcp?>_edit" onchange="changeEdit(this.id,4)"<?=$auto?'checked':''?>>
  <span id="<?=$docker_dhcp?>_line" class="<?=$autoDisabled?>">
  <span class="<?=$ip4class?>">**_(Subnet)_:** <?=$route?></span>
  <span class="<?=$gw4class?>">**_(Gateway)_:** <?=$gateway[$network]?></span>
  <input type="checkbox" id="<?=$docker_dhcp?>_dhcp" onchange="changeDHCP(this.id,4)"<?=$dhcp?'checked':''?><?=$autoDisabled?>>
  **_(DHCP pool)_:**<span id="<?=$docker_dhcp?>_net" class="net <?=$dhcpDisabled?>"><?=$prefix?>.</span>
  </span>
<?
  for ($b=$box; $b<=3; $b++) {
    switch ($b) {
      case 1: $step = $size/65536%256; break;
      case 2: $step = $size/256%256; break;
      case 3: $step = $size%256; break;
    }
    if ($step===0) $step = 256;
    echo "<select id=\"{$docker_dhcp}_{$b}\" class=\"net\" $dhcpDisabled>";
    for ($n=$net[$b]; $n<=$max[$b]; $n++) echo mk_option($net_user[$b],$n,$n,$n%$step==0?'':'class="hide"');
    echo "</select>";
  }
  echo "/ ";
  echo "<select id=\"{$docker_dhcp}_mask\" class=\"mask\" onchange=\"changeMask(this.id,this.value)\" $dhcpDisabled>";
  for ($m=$mask+1; $m<=30; $m++) echo mk_option($mask_user,$m,$m);
  echo "</select><span id=\"{$docker_dhcp}_size\" style=\"".($dhcp?'':'display:none')."\">($size "._('hosts').")</span>";
  echo "<input type=\"hidden\" name=\"$docker_dhcp\" value=\"\">";
?>

<?endforeach;?>
<?if ($include):?>
:docker_include_interface_vlan_ipv4_help:

<?endif;?>
<?foreach ($unset as $network):?>
<?
$port = normalize($network);
[$subnet,$mask] = my_explode('/',_var($dockercfg,"DOCKER_SUBNET_$port"));
[$range,$size] = my_explode('/',_var($dockercfg,"DOCKER_RANGE_$port"));
$disabled = $subnet ? '':'disabled';
$dhcpDisabled = $range ? '':'disabled';
?>
<?if ($protocol[$network] != 'ipv6'):?>

_(IPv4 custom network on interface)_ <?=$network?> (_(optional)_):
: <input type="checkbox" id="DOCKER_CUSTOM_<?=$port?>_edit" onchange="changeCustom(this.id,4)"<?=$subnet?'checked':''?>><span id="DOCKER_CUSTOM_<?=$port?>_line" class="<?=$subnet?'':'disabled'?>">
  <span class="<?=$ip4class?>">**_(Subnet)_:** <input type="text" id="DOCKER_CUSTOM_<?=$port?>_net" name="DOCKER_SUBNET_<?=$port?>" class="ip4" value="<?=$subnet?>" title="_(IPv4 address A.B.C.D)_"<?=$disabled?>>/
  <select id="DOCKER_CUSTOM_<?=$port?>_mask" name="DOCKER_MASK_<?=$port?>" class="mask"<?=$disabled?>>
  <?for ($m=16; $m<=30; $m++) echo mk_option($mask?:24,$m,$m)?></select>
  </span>
  <span class="<?=$gw4class?>">**_(Gateway)_:** <input type="text" id="DOCKER_CUSTOM_<?=$port?>_gw" name="DOCKER_GATEWAY_<?=$port?>" class="ip4" value="<?=_var($dockercfg,"DOCKER_GATEWAY_$port")?>" title="_(IPv4 address A.B.C.D)_"<?=$disabled?>></span>
  <input type="checkbox" id="DOCKER_CUSTOM_<?=$port?>_dhcp" onchange="customDHCP(this.id,4)"<?=$subnet?'checked':''?><?=$dhcpDisabled?>>
  **_(DHCP pool)_:** <input type="text" id="DOCKER_CUSTOM_<?=$port?>_pool" name="DOCKER_RANGE_<?=$port?>" class="ip4" value="<?=$range?>" title="_(IPv4 address A.B.C.D)_"<?=$disabled?>>/
  <select id="DOCKER_CUSTOM_<?=$port?>_size" name="DOCKER_SIZE_<?=$port?>" class="mask" onchange="changeHosts(this.id,this.value)"<?=$disabled?>>
  <?for ($m=16; $m<=30; $m++) echo mk_option($size?:25,$m,$m)?></select>
  <span id="DOCKER_CUSTOM_<?=$port?>_hosts" style="<?=$subnet?'':'display:none'?>">(<?=pow(2,32-($size?:25))?> _(hosts)_)</span></span>

<?endif;?>
<?endforeach;?>
<?if ($unset && $protocol[$network] != 'ipv6'):?>
:docker_exclude_interface_vlan_ipv4_help:

<?endif;?>
<?if ($include6):?>
<hr>
<?endif;?>
<?foreach ($include6 as $network => $route):?>
<?
$net = normalize($network);
$docker_auto = "DOCKER_AUTO_$net";
$docker_dhcp6 = "DOCKER_DHCP6_$net";
?>

_(IPv6 custom network on interface)_ <?=$network?> (_(optional)_):
<?
  $auto6 = _var($dockercfg,$docker_auto)!='no';
  $auto6Disabled = $auto6 ? '':'disabled';
  $dhcp6 = _var($dockercfg,$docker_dhcp6);
  $dhcp6Disabled = ($auto6 && $dhcp6) ? '':'disabled';
  $net = base_net($route);
  $mask = explode('/',$route)[1];
  $net_user = $dhcp6 ? str_replace("$net:","",base_net($dhcp6)) : '';
  $mask_user = $dhcp6 ? explode('/',$dhcp6)[1] : $mask;
?>
: <input type="checkbox" id="<?=$docker_dhcp6?>_edit" onchange="changeEdit(this.id,6)"<?=$auto6?'checked':''?>>
  <span id="<?=$docker_dhcp6?>_line" class="<?=$auto6Disabled?>">
  <span class="ip6">**_(Subnet)_:** <?=$route?></span>
  <span class="gw6">**_(Gateway)_:** <?=$gateway6[$network]?></span>
  <input type="checkbox" id="<?=$docker_dhcp6?>_dhcp" onchange="changeDHCP(this.id,6)"<?=$dhcp6?'checked':''?><?=$auto6Disabled?>>
  **_(DHCP pool)_:**<span id="<?=$docker_dhcp6?>_net" class="net <?=$dhcp6Disabled?>"><?=$net?>:</span>
<?
  echo "<input type=\"text\" id=\"{$docker_dhcp6}_text\" value=\"$net_user\" class=\"pool6\" $dhcp6Disabled>/ ";
  echo "<select id=\"{$docker_dhcp6}_mask\" class=\"mask\" $dhcp6Disabled>";
  for ($m=$mask+8; $m<=120; $m+=8) echo mk_option($mask_user,$m,$m);
  echo "</select><input type=\"hidden\" name=\"$docker_dhcp6\" value=\"\"></span>";
?>

<?endforeach;?>
<?if ($include6):?>
:docker_include_interface_vlan_ipv6_help:

<?endif;?>
<?foreach ($unset as $network):?>
<?
$port = normalize($network);
[$subnet6,$mask6] = my_explode('/',_var($dockercfg,"DOCKER_SUBNET6_$port"));
[$range6,$size6] = my_explode('/',_var($dockercfg,"DOCKER_RANGE6_$port"));
$disabled = $subnet6 ? '':'disabled';
$dhcpDisabled = $range6 ? '':'disabled';
?>
<?if ($protocol[$network] != 'ipv4'):?>

_(IPv6 custom network on interface)_ <?=$network?> (_(optional)_):
: <input type="checkbox" id="DOCKER_CUSTOM6_<?=$port?>_edit" onchange="changeCustom(this.id,6)"<?=$subnet6?'checked':''?>><span id="DOCKER_CUSTOM6_<?=$port?>_line" class="<?=$subnet6?'':'disabled'?>">
  <span class="ip6">**_(Subnet)_:**<input type="text" id="DOCKER_CUSTOM6_<?=$port?>_net" name="DOCKER_SUBNET6_<?=$port?>" class="ip6" value="<?=$subnet6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_"<?=$disabled?>>/
  <select id="DOCKER_CUSTOM6_<?=$port?>_mask" name="DOCKER_MASK6_<?=$port?>" class="mask"<?=$disabled?>>
  <?for ($m=64; $m<=120; $m+=8) echo mk_option($mask6?:64,$m,$m)?></select></span>
  <span class="gw6">**_(Gateway)_:**<input type="text" id="DOCKER_CUSTOM6_<?=$port?>_gw" name="DOCKER_GATEWAY6_<?=$port?>" class="gw6" value="<?=_var($dockercfg,"DOCKER_GATEWAY6_$port")?>" title="_(IPv6 address nnnn:xxxx::yyyy)_"<?=$disabled?>></span>
  <input type="checkbox" id="DOCKER_CUSTOM6_<?=$port?>_dhcp" onchange="customDHCP(this.id,6)"<?=$subnet6?'checked':''?><?=$dhcpDisabled?>>
  **_(DHCP pool)_:**<input type="text" id="DOCKER_CUSTOM6_<?=$port?>_pool" name="DOCKER_RANGE6_<?=$port?>" class="ip6" value="<?=$range6?>" title="_(IPv6 address nnnn:xxxx::yyyy)_"<?=$disabled?>>/
  <select id="DOCKER_CUSTOM6_<?=$port?>_size" name="DOCKER_SIZE6_<?=$port?>" class="mask"<?=$disabled?>>
  <?for ($m=64; $m<=120; $m+=8) echo mk_option($size6?:72,$m,$m)?></select></span>

<?endif;?>
<?endforeach;?>
<?if ($unset && $protocol[$network] != 'ipv4'):?>
:docker_exclude_interface_vlan_ipv6_help:

<?endif;?>
</div>
<?else: /* DOCKER STARTED */?>

_(Docker version)_:
: <?$arrInfo = $DockerClient->getInfo(); echo $arrInfo['Version']?>

:docker_version_help:

<?if (_var($dockercfg,'DOCKER_IMAGE_TYPE')!='folder'):?>
_(Docker vDisk location)_:
: <?=_var($dockercfg,'DOCKER_IMAGE_FILE')?>
<?else:?>
_(Docker directory)_:
: <?=_var($dockercfg,'DOCKER_IMAGE_FILE')?>
<?endif;?>

:docker_vdisk_location_active_help:

_(Default appdata storage location)_:
: <?=_var($dockercfg,'DOCKER_APP_CONFIG_PATH')?>

:docker_appdata_location_active_help:

<div markdown="1" class="advanced">
_(Docker LOG rotation)_:
: <?=_var($dockercfg,'DOCKER_LOG_ROTATION')=='yes' ? _('Enabled') : _('Disabled')?>

:docker_log_rotation_active_help:

_(Docker custom network type)_:
: <?=_var($dockercfg,'DOCKER_NETWORK_TYPE')=='1' ? _('ipvlan') : _('macvlan')?>

:docker_custom_network_type_help:

_(Host access to custom networks)_:
: <?=_var($dockercfg,'DOCKER_ALLOW_ACCESS')=='yes' ? _('Enabled') : _('Disabled')?>

:docker_custom_network_access_help:

_(Preserve user defined networks)_:
: <?=_var($dockercfg,'DOCKER_USER_NETWORKS')=='preserve' ? _('Yes') : _('No')?>

:docker_user_defined_network_help:

<?foreach ($include as $network => $route):?>
<?
$net = normalize($network);
$docker_dhcp = "DOCKER_DHCP_$net";
?>
<?if (isset($dockercfg[$docker_dhcp]) || empty($dockercfg["DOCKER_AUTO_$net"])):?>
_(IPv4 custom network on interface)_ <?=$network?>:
: <span class="<?=$gw4class?>">**_(Subnet)_:** <?=$route?></span>
  <span class="<?=$gw4class?>">**_(Gateway)_:** <?=$gateway[$network]?></span>
  **_(DHCP pool)_:** <?=_var($dockercfg,$docker_dhcp) ?: "_(not set)_"?><?if (isset($dockercfg[$docker_dhcp])):?>&nbsp;&nbsp;(<?=pow(2,32-my_explode('/',$dockercfg[$docker_dhcp])[1])?> _(hosts)_)<?endif;?>

<?endif;?>
<?endforeach;?>
<?foreach ($unset as $network):?>
<?
$port = normalize($network);
[$eth,$vlan] = my_explode('.',$network);
$eth = str_replace(['bond','br'],'eth',$eth);
if (!$vlan) {
  $protocol = _var($$eth,'PROTOCOL:0','ipv4');
} else {
  foreach ($$eth as $key => $value) {
    if (strpos($key,'VLANID')!==false && $value==$vlan) {$protocol = _var($$eth,str_replace('VLANID','PROTOCOL',$key),'ipv4'); break;}
  }
}
[$subnet,$mask] = my_explode('/',_var($dockercfg,"DOCKER_SUBNET_$port"));
[$range,$size] = my_explode('/',_var($dockercfg,"DOCKER_RANGE_$port"));
?>
<?if ($protocol != 'ipv6' && $subnet):?>
_(IPv4 custom network on interface)_ <?=$network?>:
: <span class="<?=$gw4class?>">**_(Subnet)_:** <?=$subnet?>/<?=$mask?></span>
  <span class="<?=$gw4class?>">**_(Gateway)_:** <?=_var($dockercfg,"DOCKER_GATEWAY_$port")?></span>
  **_(DHCP pool)_:** <?=$range ? "$range/$size" : "_(not set)_"?><?if ($range):?>&nbsp;&nbsp;(<?=pow(2,32-($size?:25))?> _(hosts)_)<?endif;?>

<?endif;?>
<?endforeach;?>
<?foreach ($include6 as $network => $route):?>
<?
$net = normalize($network);
$docker_dhcp6 = "DOCKER_DHCP6_$net";
if (isset($dockercfg[$docker_dhcp6]) || empty($dockercfg["DOCKER_AUTO_$net"])):?>
<?$wide = true;?>
_(IPv6 custom network on interface)_ <?=$network?>:
: <span class="gw6">**_(Subnet)_:** <?=$route?></span>
  <span class="gw6">**_(Gateway)_:** <?=$gateway6[$network]?></span>
  **_(DHCP pool)_:** <?=_var($dockercfg,$docker_dhcp6) ?: "_(not set)_"?>

<?endif;?>
<?endforeach;?>
<?foreach ($unset as $network):?>
<?
$port = normalize($network);
[$eth,$vlan] = my_explode('.',$network);
$eth = str_replace(['bond','br'],'eth',$eth);
if (!$vlan) {
  $protocol = _var($$eth,'PROTOCOL:0','ipv4');
} else {
  foreach ($$eth as $key => $value) {
    if (strpos($key,'VLANID')!==false && $value==$vlan) {$protocol = _var($$eth,str_replace('VLANID','PROTOCOL',$key),'ipv4'); break;}
  }
}
[$subnet6,$mask6] = my_explode('/',_var($dockercfg,"DOCKER_SUBNET6_$port"));
[$range6,$size6] = my_explode('/',_var($dockercfg,"DOCKER_RANGE6_$port"));
?>
<?if ($protocol != 'ipv4' && $subnet6):?>
_(IPv6 custom network on interface)_ <?=$network?>:
: <span class="gw6">**_(Subnet)_:** <?=$subnet6?>/<?=$mask6?></span>
  <span class="gw6">**_(Gateway)_:** <?=_var($dockercfg,"DOCKER_GATEWAY6_$port")?></span>
  **_(DHCP pool)_:** <?=$range6 ? "$range6/$size6" : "_(not set)_"?>
<?endif;?>
<?endforeach;?>
</div>
<?endif;?>

&nbsp;
: <input id="applyBtn" type="button" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>

<form id="removeForm" method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#command" value="/plugins/dynamix.docker.manager/scripts/docker_rm">
</form>

<?if (!$DockerStopped && exec("findmnt --output FSTYPE --noheadings /var/lib/docker")=='btrfs'):?>
<div markdown="1" class="advanced">
<div class="title"><span class="left"><i class="title fa fa-address-card-o"></i>_(Docker volume info)_</span></div>
_(btrfs filesystem show)_:
: <?="<pre>".shell_exec("btrfs filesystem show /var/lib/docker")."</pre>"?>

<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFS(this,'btrfs-scrub-docker','/var/lib/docker')">
<?exec("$docroot/webGui/scripts/btrfs_scrub status /var/lib/docker", $scrub_status, $retval)?>
_(btrfs scrub status)_:
: <?="<pre id='btrfs-scrub'>".implode("\n", $scrub_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_scrub">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/var/lib/docker">
<input type="hidden" name="#arg[3]" value="-r">
&nbsp;
: <input type="submit" value="_(Scrub)_"><label><input type="checkbox" name="#arg[3]" value=""> _(Correct file system errors)_</label>

:docker_scrub_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_scrub">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/var/lib/docker">
&nbsp;
: <input type="submit" value="_(Cancel)_">

:docker_cancel_help:

</form>
<?endif;?>
</div>
<?endif;?>

<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>" charset="utf-8"></script>
<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script>
function prepareDocker(form) {
<?if ($DockerStopped):?>
  var bye = false;
  $(form).find('input[type="text"]').each(function(){
    if ($(this).attr('pattern') && !$(this).prop('disabled')) {
      var pattern = new RegExp($(this).attr('pattern'));
      if (!pattern.test($(this).val())) {$(this).css('color','red').attr('title',"_(Use image name docker.img or docker-xfs.img or select a folder)_"); bye = true;}
    }
  });
  if (bye) return false;
  $(form).find('input[name="DOCKER_IMAGE_FILE"]').val($('#DOCKER_IMAGE_TYPE').val()=='folder' ? $("#DOCKER_IMAGE_FILE2").val() : $("#DOCKER_IMAGE_FILE1").val());
  $("#DOCKER_IMAGE_FILE1").prop('disabled',true);
  $("#DOCKER_IMAGE_FILE2").prop('disabled',true);
<?endif;?>
  $(form).find('input:hidden[name^="DOCKER_DHCP_"]').each(function(){
    var id = '#'+$(this).attr('name')+'_';
    if ($(id+'dhcp').prop('checked') && $(id+'edit').prop('checked')) {
      var net = $(id+'net').text();
      for (var b=1; b<=3; b++) if ($(id+b).length>0) net += $(id+b).val()+'.';
      net = net.replace(/\.$/,'/')+$(id+'mask').val();
      $(this).val(net);
    } else {
      $(this).val('').prop('disabled',false);
    }
  });
  $(form).find('input:hidden[name^="DOCKER_DHCP6_"]').each(function(){
    var id = '#'+$(this).attr('name')+'_';
    if ($(id+'dhcp').prop('checked') && $(id+'edit').prop('checked')) {
      var net = $(id+'net').text()+$(id+'text').val();
      if (net.substr(-2)!='::') net += '::';
      $(this).val(net+'/'+$(id+'mask').val());
    } else {
      $(this).val('').prop('disabled',false);
    }
  });
  $(form).find('input[name^="DOCKER_SUBNET_"]').each(function(){
    var edit = '#'+$(this).attr('name').replace('SUBNET','CUSTOM')+'_edit';
    var mask = '#'+$(this).attr('name').replace('SUBNET','CUSTOM')+'_mask';
    if ($(edit).prop('checked')) {
      if ($(this).val()) $(this).val($(this).val()+'/'+$(mask).val());
    } else {
      $(this).val('').prop('disabled',false);
    }
    $(mask).prop('disabled',true);
  });
  $(form).find('input[name^="DOCKER_GATEWAY_"]').each(function(){
    var edit = '#'+$(this).attr('name').replace('GATEWAY','CUSTOM')+'_edit';
    if (!$(edit).prop('checked')) $(this).val('').prop('disabled',false);
  });
  $(form).find('input[name^="DOCKER_RANGE_"]').each(function(){
    var edit = '#'+$(this).attr('name').replace('RANGE','CUSTOM')+'_edit';
    var size = '#'+$(this).attr('name').replace('RANGE','CUSTOM')+'_size';
    var dhcp = '#'+$(this).attr('name').replace('RANGE','CUSTOM')+'_dhcp';
    if ($(edit).prop('checked') && $(dhcp).prop('checked')) {
      if ($(this).val()) $(this).val($(this).val()+'/'+$(size).val());
    } else {
      $(this).val('').prop('disabled',false);
    }
    $(size).prop('disabled',true);
  });
  $(form).find('input[name^="DOCKER_SUBNET6_"]').each(function(){
    var edit6 = '#'+$(this).attr('name').replace('SUBNET','CUSTOM')+'_edit';
    var mask6 = '#'+$(this).attr('name').replace('SUBNET','CUSTOM')+'_mask';
    if ($(edit6).prop('checked')) {
      if ($(this).val()) $(this).val($(this).val()+'/'+$(mask6).val());
    } else {
      $(this).val('').prop('disabled',false);
    }
    $(mask6).prop('disabled',true);
  });
  $(form).find('input[name^="DOCKER_GATEWAY6_"]').each(function(){
    var edit6 = '#'+$(this).attr('name').replace('GATEWAY','CUSTOM')+'_edit';
    if (!$(edit6).prop('checked')) $(this).val('').prop('disabled',false);
  });
  $(form).find('input[name^="DOCKER_RANGE6_"]').each(function(){
    var edit6 = '#'+$(this).attr('name').replace('RANGE','CUSTOM')+'_edit';
    var size6 = '#'+$(this).attr('name').replace('RANGE','CUSTOM')+'_size';
    var dhcp6 = '#'+$(this).attr('name').replace('RANGE','CUSTOM')+'_dhcp';
    if ($(edit6).prop('checked') && $(dhcp6).prop('checked')) {
      if ($(this).val()) $(this).val($(this).val()+'/'+$(size6).val());
    } else {
      $(this).val('').prop('disabled',false);
    }
    $(size6).prop('disabled',true);
  });
  return true;
}
function changeEdit(id,ip) {
  var checked = $('#'+id).prop('checked');
  var id1 = '#'+id.substr(0,id.length-4);
  if (ip==4) {
    var name = id.substr(0,id.length-5).replace('DHCP','AUTO');
    var id2 = '#'+name.replace('AUTO','DHCP6')+'_';
  } else {
    var name = id.substr(0,id.length-5).replace('DHCP6','AUTO');
    var id2 = '#'+name.replace('AUTO','DHCP')+'_';
  }
  if (checked) {
    $(id1+'line').removeClass('disabled');
    $(id1+'dhcp').prop('disabled',false);
    $(id2+'line').removeClass('disabled');
    $(id2+'dhcp').prop('disabled',false);
    $(id2+'edit').prop('checked',true);
  } else {
    $(id1+'line').addClass('disabled','disabled');
    $(id1+'dhcp').prop('disabled',true);
    $(id2+'line').addClass('disabled','disabled');
    $(id2+'dhcp').prop('disabled',true);
    $(id2+'edit').prop('checked',false);
  }
  $('input:hidden[name="'+name+'"]').val(checked?'':'no');
  if (ip==4) {
    changeDHCP(id,4,$('#'+id.replace('edit','dhcp')).prop('checked'));
    id = id.replace('DHCP','DHCP6');
    $('#'+id).prop('checked',checked);
    changeDHCP(id,6,$('#'+id.replace('edit','dhcp')).prop('checked'));
  } else {
    changeDHCP(id,6,$('#'+id.replace('edit','dhcp')).prop('checked'));
    id = id.replace('DHCP6','DHCP');
    $('#'+id).prop('checked',checked);
    changeDHCP(id,4,$('#'+id.replace('edit','dhcp')).prop('checked'));
  }
}
function changeDHCP(id,ip,sid) {
  if (sid==null) sid = true;
  var checked = $('#'+id).prop('checked') && sid;
  id = '#'+id.substr(0,id.length-4);
  if (ip==4) {
    for (var b=1; b<=3; b++) if ($(id+b).length>0) $(id+b).prop('disabled',!checked);
    $(id+'mask').prop('disabled',!checked);
    if (checked) {
      $(id+'size').show();
      $(id+'net').removeClass('disabled');
    } else {
      $(id+'size').hide();
      $(id+'net').addClass('disabled','disabled');
    }
  } else {
    $(id+'text').prop('disabled',!checked);
    $(id+'mask').prop('disabled',!checked);
    if (checked) {
      $(id+'net').removeClass('disabled');
    } else {
      $(id+'net').addClass('disabled','disabled');
    }
  }
}
function customDHCP(id,ip) {
  var checked = $('#'+id).prop('checked');
  id = '#'+id.substr(0,id.length-4);
  $(id+'pool').prop('disabled',!checked);
  $(id+'size').prop('disabled',!checked);
  if (ip==4) checked ? $(id+'hosts').show() : $(id+'hosts').hide();
}
function changeCustom(id,ip) {
  var checked = $('#'+id).prop('checked');
  var device = id.substr(0,id.length-5).split('_').splice(2,2).join('.').toLowerCase();
  id = '#'+id.substr(0,id.length-4);
  $(id+'net').prop('disabled',!checked);
  $(id+'mask').prop('disabled',!checked);
  $(id+'gw').prop('disabled',!checked);
  $(id+'dhcp').prop('disabled',!checked);
  $(id+'pool').prop('disabled',!checked);
  $(id+'size').prop('disabled',!checked);
  if (checked) {
    $(id+'hosts').show();
    $(id+'line').removeClass('disabled');
  } else {
    $(id+'hosts').hide();
    $(id+'line').addClass('disabled','disabled');
  }
}
function changeMask(id,val) {
  var mask = Math.pow(2,32-val);
  id = '#'+id.substr(0,id.length-4);
  $(id+'size').html('('+mask+' hosts)');
  for (var b=1; b<=3; b++) {
    var cell = id+b;
    switch (b) {
      case 1: var step = mask/65536%256; break;
      case 2: var step = mask/256%256; break;
      case 3: var step = mask%256; break;
    }
    if (step==0) step = 256;
    if ($(cell).length==0) continue;
    var max = $(cell+' option').size();
    for (var i=0; i < max; i++) if (i%step==0) $(cell+' option:eq('+i+')').removeClass('hide'); else $(cell+' option:eq('+i+')').addClass('hide');
    if ($(cell+' option:selected').val()%step!=0) $(cell+' option:selected').removeAttr('selected');
  }
}
function changeHosts(id,val) {
  var mask = Math.pow(2,32-val);
  id = '#'+id.substr(0,id.length-4);
  $(id+'hosts').html('('+mask+' hosts)');
}
function ip2int(ip) {
  return ip.split('.').reduce(function(ipInt,octet){return (ipInt<<8)+parseInt(octet,10)},0)>>>0;
}
function checkDHCP() {
  var good = true;
  $('#settingsForm').find('input[name^="DOCKER_DHCP_"]').each(function(){
    if ($(this).val()) {
      var id = $(this).attr('name');
      var pool = $(this).val().split('/');
      var base = $('#'+id).text().split('/');
      if (good && typeof(pool[1])=='undefined') {good = false; swal({title:"_(Missing subnet size)_",text:"_(Pool subnet size is not defined)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});}
      if (good && pool[1]<=base[1]) {good = false; swal({title:"_(Invalid subnet size)_",text:"_(Pool subnet size is too large)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});}
      if (typeof(pool[1])=='undefined') pool[1] = 0;
      if (typeof(base[1])=='undefined') base[1] = 32;
      var toppool = ip2int(pool[0]);
      var topbase = ip2int(base[0]);
      var endpool = toppool+Math.pow(2,32-pool[1]);
      var endbase = topbase+Math.pow(2,32-base[1]);
      if (good && (toppool < topbase || endpool > endbase)) {good = false; swal({title:"_(Invalid pool address)_",text:"_(Pool address is out of range)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});}
    }
  });
  if (good) $('#settingsForm').find('input[name^="DOCKER_DHCP6_"]').each(function(){
    if ($(this).val()) {
      var id = $(this).attr('name');
      var pool = $(this).val().split('/');
      var base = $('#'+id).text().split('/');
      if (good && typeof(pool[1])=='undefined') {good = false; swal({title:"_(Missing subnet size)_",text:"_(Pool subnet size is not defined)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});}
      if (good && pool[1]<=base[1]) {good = false; swal({title:"_(Invalid subnet size)_",text:"_(Pool subnet size is too large)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});}
    }
  });
  return good;
}
function checkIP() {
  var validIP4 = /^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
  var validIP6 = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;
  var error = false;
  $('#settingsForm').find('input[name^="DOCKER_SUBNET_"]').each(function(){
    if ($(this).val() && !validIP4.test($(this).val())) error = true;
  });
  if (error) {swal({title:"_(Invalid IPv4 subnet)_",text:"_(Please enter a valid subnet)_",type:'error',html:true,confirmButtonText:"_(Ok)_"}); return false;}
  $('#settingsForm').find('input[name^="DOCKER_GATEWAY_"]').each(function(){
    if ($(this).val() && !validIP4.test($(this).val())) error = true;
  });
  if (error) {swal({title:"_(Invalid IPv4 gateway)_",text:"_(Please enter a valid gateway)_",type:'error',html:true,confirmButtonText:"_(Ok)_"}); return false;}
  $('#settingsForm').find('input[name^="DOCKER_RANGE_"]').each(function(){
    if ($(this).val() && !validIP4.test($(this).val())) error = true;
  });
  if (error) {swal({title:"_(Invalid IPv4 range)_",text:"_(Please enter a valid range)_",type:'error',html:true,confirmButtonText:"_(Ok)_"}); return false;}
  $('#settingsForm').find('input[name^="DOCKER_SUBNET6_"]').each(function(){
    if ($(this).val() && !validIP6.test($(this).val())) error = true;
  });
  if (error) {swal({title:"_(Invalid IPv6 subnet)_",text:"_(Please enter a valid subnet)_",type:'error',html:true,confirmButtonText:"_(Ok)_"}); return false;}
  $('#settingsForm').find('input[name^="DOCKER_GATEWAY6_"]').each(function(){
    if ($(this).val() && !validIP6.test($(this).val())) error = true;
  });
  if (error) {swal({title:"_(Invalid IPv6 gateway)_",text:"_(Please enter a valid gateway)_",type:'error',html:true,confirmButtonText:"_(Ok)_"}); return false;}
  $('#settingsForm').find('input[name^="DOCKER_RANGE6_"]').each(function(){
    if ($(this).val() && !validIP6.test($(this).val())) error = true;
  });
  if (error) {swal({title:"_(Invalid IPv6 range)_",text:"_(Please enter a valid range)_",type:'error',html:true,confirmButtonText:"_(Ok)_"}); return false;}
  return true;
}
function showLogOptions(log) {
  if (log == 'no') {
    $('#DOCKER_LOG_OPTIONS').hide('slow');
  } else {
    $('#DOCKER_LOG_OPTIONS').show('slow');
  }
}
function prepareFS(form,cookie,value) {
  if ($(form).find('input[type="submit"]').val()=='Cancel') $.removeCookie(cookie); else $.cookie(cookie,value);
}
function btrfsScrub(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'scrub',path:path},function(data) {
    if (data.indexOf('running')>0) {
      $('#btrfs-scrub').text(data);
      setTimeout(function(){btrfsScrub(path);},1000);
    } else {
      $.removeCookie('btrfs-scrub-docker');
      refresh();
    }
  });
}
function updateLocation(val) {
  var content1 = $("#DOCKER_IMAGE_FILE1");
  var content2 = $("#DOCKER_IMAGE_FILE2");
  switch (val) {
  case 'xfs':
    var path = content2.val().split('/');
    path.splice(-1,1);
    content1.val((path.join('/') + '/docker-xfs.img'));
    $('#vdisk_file').show('slow');
    $('#vdisk_dir').hide('slow');
    content1.prop('disabled',false).trigger('change');
    content2.prop('disabled',true);
    break;
  case 'folder':
    var path = content2.val().split('/');
    if (path[path.length-1]=='') path.splice(-2,2); else path.splice(-1,1);
    content2.val(path.join('/') + '/docker/');
    $('#vdisk_file').hide('slow');
    $('#vdisk_dir').show('slow');
    content1.prop('disabled',true);
    content2.prop('disabled',false).trigger('change');
    break;
  default:
    var path = content2.val().split('/');
    path.splice(-1,1);
    content1.val((path.join('/') + '/docker.img'));
    $('#vdisk_file').show('slow');
    $('#vdisk_dir').hide('slow');
    content1.prop('disabled',false).trigger('change');
    content2.prop('disabled',true);
    break;
  }
}
function checkbox_state(value) {
  $.post('/plugins/dynamix.docker.manager/include/UpdateConfig.php',{action:'exist',name:value},function(state){state==0 ? $('.deleteLabel').fadeIn() : $('.deleteLabel').fadeOut();});
}
$(function() {
<?if ($DockerStopped):?>
  if ($('#DOCKER_IMAGE_TYPE').val()=='folder') {
    $('#vdisk_dir').show();
    checkbox_state($("#DOCKER_IMAGE_FILE2").val());
    $("#DOCKER_IMAGE_FILE2").prop('disabled',false);
  } else {
    $('#vdisk_file').show();
    checkbox_state($("#DOCKER_IMAGE_FILE1").val());
    $("#DOCKER_IMAGE_FILE1").prop('disabled',false);
  }
<?endif;?>
  $("#applyBtn").click(function() {
    if (!checkDHCP() || !checkIP()) return;
    if ($(".deleteCheckbox").is(":checked")) {
      $("#removeForm").submit();
      return;
    }
<?if ($DockerStopped):?>
    if (($("#DOCKER_IMAGE_SIZE").length || $("#DOCKER_IMAGE_TYPE").val()=='folder') && ($("#DOCKER_IMAGE_FILE1").length || $("#DOCKER_IMAGE_FILE2").length)) {
      var size = $("#DOCKER_IMAGE_SIZE").val();
      var target = $("#SIZE_ERROR");
      if ($("#DOCKER_IMAGE_TYPE").val()!='folder' && !$.isNumeric(size)) {
        target.fadeIn().html('_(Error)_: _(value must be a number)_.');
        return;
      } else {
        target.fadeOut();
      }
      $("#settingsForm").submit();
    }
<?else:?>
    $("#settingsForm").submit();
<?endif;?>
  });
  $("#DOCKER_ENABLED").change(function changeService() {
    if ($(this).val()=='yes') {
      $('#arraystopped').fadeIn('slow');
    } else {
      $('#arraystopped').fadeOut('fast');
    }
  });
  if ($("#DOCKER_ENABLED").val()!='yes') $('#arraystopped').hide();
<?if ($DockerStopped):?>
  showLogOptions(document.settingsForm.DOCKER_LOG_ROTATION.value);
  $("#DOCKER_IMAGE_FILE1").on("input change", function(){
    $("#IMAGE_ERROR1").fadeOut();
    $("#applyBtn").prop("disabled", false);
    checkbox_state($(this).val());
  });
  $("#DOCKER_IMAGE_FILE2").on("input change", function(){
    $("#IMAGE_ERROR2").fadeOut();
    $("#applyBtn").prop("disabled", false);
    checkbox_state($(this).val());
  });
<?if ($var['fsState'] == "Started"):?>
  $("#DOCKER_IMAGE_FILE1").fileTreeAttach(null, null, function(folder) {
    var item = $("#DOCKER_IMAGE_TYPE").val()=='xfs' ? 'docker-xfs.img' : 'docker.img';
    $("#DOCKER_IMAGE_FILE1").val(folder + item).change();
  });
  $("#DOCKER_IMAGE_FILE2").fileTreeAttach(null, null, function(folder) {
    var item = 'docker/';
    $("#DOCKER_IMAGE_FILE2").val(folder + item).change();
  });
  $("#DOCKER_APP_CONFIG_PATH").fileTreeAttach();
<?endif;?>
  $(".deleteCheckbox").change(function() {
    var checked = $(this).is(":checked");
    $("#DOCKER_ENABLED").prop("disabled", checked).val('no');
    $("#DOCKER_IMAGE_SIZE").prop("disabled", checked);
    $("#DOCKER_IMAGE_TYPE").prop("disabled", checked);
    $("#DOCKER_IMAGE_FILE").prop("disabled", checked);
    $("#DOCKER_APP_CONFIG_PATH").prop("disabled", checked);
    $("#DOCKER_APP_UNRAID_PATH").prop("disabled", checked);
    $("#applyBtn").val(checked ? "Delete" : "Apply").removeAttr('disabled');
  });
<?else:?>
  if ($.cookie('btrfs-scrub-docker')) btrfsScrub($.cookie('btrfs-scrub-docker'));
<?endif;?>
  if ($.cookie('dockersettings_view_mode') == 'advanced') {
    $('.advanced').show();
    $('.basic').hide();
  }
  $('.advancedview').switchButton({
    labels_placement: "left",
    on_label: "_(Advanced View)_",
    off_label: "_(Basic View)_",
    checked: $.cookie('dockersettings_view_mode') == 'advanced'
  });
  $('.advancedview').change(function () {
    $('.advanced').toggle('slow');
    $('.basic').toggle('slow');
    $.cookie('dockersettings_view_mode', $('.advancedview').is(':checked') ? 'advanced':'basic', {expires:3650});
  });
  showStatus('pid','dockerd');
});
</script>

                )

            [UpdateContainer] => Array
                (
                    [Title] => Update Container
                    [Cond] => (pgrep('dockerd')!==false)
                    [Markdown] => false
                    [file] => plugins/dynamix.docker.manager/UpdateContainer.page
                    [root] => plugins/dynamix.docker.manager
                    [name] => UpdateContainer
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2014-2020, Guilherme Jardim, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
// add docker translations (if needed)
if (substr($_SERVER['REQUEST_URI'],0,7) != '/Docker') {
  $docker = "$docroot/languages/$locale/docker.dot";
  if (file_exists($docker)) $language = array_merge($language,unserialize(file_get_contents($docker)));
}
eval('?>'.parse_file("$docroot/plugins/dynamix.docker.manager/include/CreateDocker.php"));
?>
                )

            [BrowseButton] => Array
                (
                    [Menu] => Buttons:3a
                    [Title] => File Manager
                    [Icon] => icon-u-duplicate
                    [Code] => e963
                    [file] => plugins/dynamix.file.manager/BrowseButton.page
                    [root] => plugins/dynamix.file.manager
                    [name] => BrowseButton
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$dfm = [
  'browser' => $myPage['name']=='Browse',
  'running' => file_exists('/var/tmp/file.manager.active'),
  'jobs'    => file_exists('/var/tmp/file.manager.jobs'),
  'zfs'     => is_executable('/usr/sbin/zfs')
];
if ($dfm['running'] || $dfm['browser']) eval('?>'.parse_file("$docroot/plugins/dynamix.file.manager/include/Templates.php"));
?>
<script>
function BrowseButton() {
  location.replace('/<?=$task?>/Browse?dir=/mnt');
}
// Prototypes
String.prototype.dfm_patch = function(){return this.replace('rw','x+rw').replace('r-','wx+r').replace('--','rwx');}
String.prototype.dfm_proxy = function(){return this.replace('name','row');}
String.prototype.dfm_fetch = function(tag){return this.replace('check',tag);}
String.prototype.dfm_bring = function(tag){return this.replace('row',tag);}
String.prototype.dfm_strip = function(){return this.replace(/\/$/,'');}
String.prototype.dfm_quote = function(){return this.replace(/&#34;/g,'"');}
String.prototype.dfm_alter = function(...a){var t=this;for(var i=0;i<a.length;i+=2){t=t.replace(a[i],a[i+1]);} return t;}
String.prototype.dfm_build = function(){return this.replace(/\n(<!--!|!-->)\n/g,'');}
String.prototype.dfm_wedge = function(len){len=len||70;return this.length<=len ? this : this.slice(0,Math.round(len/2)-2)+'...'+this.slice(-1-Math.round(len/2));}

// General variables
const dfm = {window:null, dialog:false, running:false, previous:'', height:0, tsize:{0:0,1:6,2:3,3:3,4:3,11:2,12:2,14:0,15:3}};
var dfm_read = {};

function dfm_footer(action,text) {
  switch (action) {
  case 'show':
    $('#countdown').show();
    $('#user-notice').show();
    break;
  case 'hide':
    $('#countdown').hide();
    $('#user-notice').hide();
    break;
  case 'write':
    if ($('#countdown').html()=='') $('#countdown').html('<a class="hand" onclick="dfm_openDialog(true)" title="_(File Manager)_"><i class="icon-u-duplicate dfm"></i></a>');
    $('#user-notice').html(text);
    break;
  case 'clear':
    $('#countdown').html('');
    $('#user-notice').html('');
    break;
  }
}
function dfm_done() {
  dfm_footer('write',"<i class='fa fa-circle-thin dfm'></i>_(Searching)_... _(Done)_");
}
function dfm_minimize() {
  dfm.window.dialog('close');
  dfm_footer('show');
}
function dfm_close_button() {
  $('.ui-dfm .ui-dialog-titlebar-close').html('<i class="fa fa-window-minimize"></i>').prop({'title':"_(Minimize)_"}).prop('onclick',null).off('click').click(function(){dfm_minimize();}).show();
}
function dfm_htmlspecialchars(text) {
  var map = {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'};
  return text.replace(/[&<>"']/g,function(m){return map[m];});
}
function dfm_escapeHTML(name) {
  const data = document.createElement('div');
  const text = document.createTextNode(name);
  data.appendChild(text);
  return data.innerHTML;
}
function dfm_createSource(source) {
  var select = dfm.window.find('#dfm_source');
  if (Array.isArray(source)) {
    for (var i=0,object; object=source[i]; i++) {
      if (i < 10) {
        select.html(select.html()+'<option'+(i==0?' selected':'')+'>'+object+'</option>');
      } else {
        select.html(select.html()+'<option>&lt;_(more)_&gt; ...</option>');
        break;
      }
    }
  } else {
    select.html('<option selected>'+source+'</option>');
  }
}
function dfm_showProgress(data) {
  if (!data) return 0;
  let file = null;
  let text = data.split('\n');
  let line = text[0].split('... ');
  let strict = /^mnt|^boot/;
  let footer = false;
  if (text[0]=='#cat#') {
    let loc = [], cat = [];
    for (let i=1,row; row=text[i]; i++) {
      if (!row) continue;
      row = row.split('\0');
      loc.push(row[0]);
      cat.push(row[1].dfm_wedge(80));
    }
    if (cat.length > 0) {
      dfm.window.find('.dfm_loc').html(loc.join('<br>'));
      dfm.window.find('.dfm_text').html(cat.join('<br>'));
      dfm.window.find('#dfm_files').html(loc.length+" "+"_(files)_");
    }
    return cat.length;
  } else if (text.length==1) {
    text = text[0].dfm_wedge(80);
    footer = text.indexOf("_(Searching)_") != -1;
  } else {
    if (strict.test(text[1])) {
      file = text[1];
      text = dfm.previous;
    } else {
      file = line[1];
      text = text[1].split(/\s+/);
      text = "<i class='fa fa-circle-o-notch fa-spin dfm'></i>_(Completed)_: "+text[1]+",&nbsp;&nbsp;_(Speed)_: "+text[2]+",&nbsp;&nbsp;_(ETA)_: "+text[3];
      dfm.previous = text;
      footer = true;
    }
  }
  if (file==null || strict.test(file)) dfm.window.find('.dfm_text').html((file?line[0]+'... /'+dfm_escapeHTML(file.dfm_wedge())+'<br>':'')+text);
  if (footer) dfm_footer('write',text);
  return 0;
}
function dfm_fileManager(action) {
  switch (action) {
  case 'start':
    $('.ui-dfm .ui-dialog-buttonset button:lt(2)').prop('disabled',true);
<?if ($dfm['browser']):?>
    $('.dfm_control').prop('disabled',true);
    $('.dfm_control.jobs').prop('disabled',$.cookie('dfm_control.jobs')?false:true);
<?endif;?>
    if (!dfm.running) nchan_filemanager.start();
    dfm.running = true;
    break;
  case 'stop':
    if (dfm.running) nchan_filemanager.stop();
<?if ($dfm['browser']):?>
    dfm.window.find('.dfm_text').removeClass('orange-text').html('');
    $('.dfm_control.basic').prop('disabled',false);
    $('.dfm_control.common').prop('disabled',$.cookie('dfm_control.common')?true:false);
<?endif;?>
    dfm_footer('clear');
    dfm.running = false;
    break;
  }
}
function dfm_makeDialog(open) {
  if (open && dfm_read.action==15) {
    dfm.window.dialog('open');
    dfm_footer('hide');
    return;
  }
  dfm.window = $('#dfm_dialogWindow');
  if (dfm.window.dialog('instance') !== undefined) dfm.dialog = dfm.window.dialog('isOpen');
  var dfm_source = dfm_read.source.split('\r').slice(0,9);
  switch (dfm_read.action) {
  case 0: // create folder/object
    dfm.window.html($('#dfm_templateCreateFolder').html());
    dfm.height = 330;
    break;
  case 1: // delete folder/object
    dfm.window.html($('#dfm_templateDeleteFolder').html());
    dfm.height = 330;
    break;
  case 2: // rename folder/object
    dfm.window.html($('#dfm_templateRenameFolder').html());
    dfm.window.find('#dfm_target').val(dfm_read.target.strip().split('/').pop());
    dfm.height = 330;
    break;
  case 3: // copy folder/object
    dfm.window.html($('#dfm_templateCopyFolder').html());
    dfm.window.find('#dfm_target').val(dfm_read.target).prop('disabled',true);
    dfm.window.find('#dfm_sparse').prop('checked',dfm_read.sparse ? true : false);
    dfm.window.find('#dfm_exist').prop('checked',dfm_read.exist ? false : true);
    dfm.height = 630;
    break;
  case 4: // move folder/object (rsync)
  case 5: // move folder/object (mv)
    dfm.window.html($('#dfm_templateMoveFolder').html());
    dfm.window.find('#dfm_target').val(dfm_read.target).prop('disabled',true);
    dfm.window.find('#dfm_sparse').prop('checked',dfm_read.sparse ? true : false);
    dfm.window.find('#dfm_exist').prop('checked',dfm_read.exist ? false : true);
    dfm.height = 630;
    break;
  case 6: // delete file
    dfm.window.html($('#dfm_templateDeleteFile').html());
    dfm.height = 330;
    break;
  case 8: // copy file
    dfm.window.html($('#dfm_templateCopyFile').html());
    dfm.window.find('#dfm_target').val(dfm_read.target).prop('disabled',true);
    dfm.window.find('#dfm_sparse').prop('checked',dfm_read.sparse ? true : false);
    dfm.window.find('#dfm_exist').prop('checked',dfm_read.exist ? false : true);
    dfm.height = 630;
    break;
  case 9: // move file (rsync)
  case 10: // move file (mv)
    dfm.window.html($('#dfm_templateMoveFile').html());
    dfm.window.find('#dfm_target').val(dfm_read.target).prop('disabled',true);
    dfm.window.find('#dfm_sparse').prop('checked',dfm_read.sparse ? true :false);
    dfm.window.find('#dfm_exist').prop('checked',dfm_read.exist ? false : true);
    dfm.height = 630;
    break;
  case 11: // change owner
    dfm.window.html($('#dfm_templateChangeOwner').html());
    dfm.window.find('#dfm_target').prop('disabled',true);
    dfm.height = 330;
    break;
  case 12: // change permission
    dfm.window.html($('#dfm_templateChangePermission').html());
    dfm.window.find('#dfm_owner').prop('disabled',true);
    dfm.window.find('#dfm_group').prop('disabled',true);
    dfm.window.find('#dfm_other').prop('disabled',true);
    dfm.height = 330;
    break;
  case 15: // search
    dfm.window.html($('#dfm_templateSearch').html());
    dfm.window.find('#dfm_target').val(dfm_read.target).prop('disabled',true);
    dfm.window.find('.dfm_loc').html('&nbsp;').css({'line-height':'normal'});
    dfm.window.find('.dfm_text').html('').css({'line-height':'normal'});
    dfm.height = 630;
    break;
  }
  dfm.window.find('#dfm_source').attr('size',Math.min(dfm.tsize[dfm_read.action],dfm_source.length));
  dfm_createSource(dfm_source);
  dfm.window.find('#dfm_sparse').prop('disabled',true);
  dfm.window.find('#dfm_exist').prop('disabled',true);
  dfm.window.find('.dfm_sparse').css({'opacity':'0.5'});
  dfm.window.find('.dfm_exist').css({'opacity':'0.5'});
  dfm.window.dialog({
    dialogClass: 'ui-dfm',
    autoOpen: open||dfm.dialog,
    title: dfm_read.title,
    resizable: false,
    width: 900,
    height: dfm.height,
    modal: true,
    buttons: {
      "_(Start)_": function(){
        if (dfm_read.action==15) {
          var dfm_target = dfm.window.find('#dfm_target').val();
          dfm.window.find('.dfm_loc').html('&nbsp;');
          dfm.window.find('.dfm_text').html("_(Running)_...");
          dfm_footer('hide');
          dfm_fileManager('start');
          $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',action:15,title:encodeURIComponent(dfm_read.title),source:encodeURIComponent(dfm_read.source),target:encodeURIComponent(dfm_target),hdlink:'',sparse:'',exist:'',zfs:''});
        } else {
          return;
        }
      },
      "_(Queue)_": function(){
        return;
      },
      "_(Cancel)_": function(){
        dfm_fileManager('stop');
        dfm.window.dialog('destroy');
        $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'file',action:99},function(){<?if ($dfm['browser']):?>setTimeout(loadList,500);<?endif;?>});
      }
    }
  });
  dfm_close_button();
  $('.ui-dfm .ui-dialog-buttonset button:lt(2)').prop('disabled',true);
  setTimeout(function(){$('.ui-dfm .ui-dialog-buttonset button:eq(2)').focus();});
  if (open||dfm.dialog) dfm_footer('hide'); else dfm_footer('show');
}
function dfm_openDialog(open) {
  $.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'read'},function(data){
    if (data) {
      dfm_read = JSON.parse(data);
      dfm_read.action = parseInt(dfm_read.action);
    }
    dfm_makeDialog(open);
  });
}
var nchan_filemanager = new NchanSubscriber('/sub/filemanager',{subscriber:'websocket'});
nchan_filemanager.on('message', function(msg) {
  let data = $.parseJSON(msg);
  if (data.error) {
    dfm_fileManager('stop');
    dfm.window.find('.dfm_text').addClass('orange-text').html(data.error);
    dfm.window.find('#dfm_target').prop('disabled',false);
    dfm.window.find('#dfm_sparse').prop('disabled',false);
    dfm.window.find('#dfm_exist').prop('disabled',false);
    dfm.window.find('#dfm_owner').prop('disabled',false);
    dfm.window.find('#dfm_group').prop('disabled',false);
    dfm.window.find('#dfm_other').prop('disabled',false);
    $('.ui-dfm .ui-dialog-buttonset button:lt(2)').prop('disabled',false);
  } else {
    let cat = dfm_showProgress(data.status);
    if (data.done==1) {
      setTimeout(function(){$.post('/plugins/dynamix.file.manager/include/Control.php',{mode:'start'},function(queue){
        switch (parseInt(queue)) {
        case 0:
          dfm_fileManager('stop');
          dfm.window.dialog('destroy');
<?if ($dfm['browser']):?>
          setTimeout(loadList);
<?endif;?>
          break;
        case 1:
<?if ($dfm['browser']):?>
          $('.dfm_control.jobs').prop('disabled',true);
<?endif;?>
          $.removeCookie('dfm_control.jobs');
        case 2:
          dfm_openDialog();
          break;
        }
      })});
    } else if (data.done==2) {
      nchan_filemanager.stop();
      dfm.running = false;
      dfm.window.find('#dfm_target').prop('disabled',false).focus();
      $('.ui-dfm .ui-dialog-buttonset button:eq(0)').prop('disabled',false);
      if (cat==0) dfm.window.find('.dfm_text').html("_(No results found)_");
      if ($('#user-notice:visible')) dfm_done();
    }
  }
});
<?if ($dfm['running']):?>
$(function(){
  dfm_openDialog();
  dfm_fileManager('start');
});
<?endif;?>
</script>

                )

            [MasterButton] => Array
                (
                    [Menu] => Buttons:1
                    [Link] => nav-user
                    [file] => plugins/dynamix.local.master/MasterButton.page
                    [root] => plugins/dynamix.local.master
                    [name] => MasterButton
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Plugin development contribution by gfjardim
 */
?>
<?if ($var['USE_NETBIOS']=='yes' && isset($display['monitor']) && $display['monitor']==1):?>
<script>
function localMaster() {
  $.get('/plugins/dynamix.local.master/include/LocalMaster.php',function(data) {
    $('#localmaster').html(data);
    setTimeout(localMaster,10000);
  });
}

$(function(){
  $('div.logo').append("<span id='localmaster'></span>");
  localMaster();
});
</script>
<?endif;?>

                )

            [Registration] => Array
                (
                    [Menu] => About
                    [Type] => xmenu
                    [Title] => Registration
                    [Icon] => icon-registration
                    [Tag] => pencil
                    [file] => plugins/dynamix.my.servers/Registration.page
                    [root] => plugins/dynamix.my.servers
                    [name] => Registration
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function my_time_any($time) {
  return $time ? _(my_time($time),0) : _('Anytime');
}
function my_time_now($time) {
  return $time ? _(my_time($time),0) : _('Unknown');
}
?>
<style>
span.thanks{padding-left:12px;color:#6FA239;font-weight:bold;}
span.thanks.red{color:#F0000C;}
div.device{padding:0 12px;font-weight:normal;font-style:italic;}
div.remark{padding:0 12px;text-align:justify;}
</style>

<?if ( (strstr($var['regTy'], "unregistered")) or ($var['regTy']=="Trial") or (strstr($var['regTy'], "no connection")) or (strstr($var['regTy'], "withdrawn")) or (strstr($var['regTy'], "expired")) ):?>

<span class="thanks">_(Thank you for trying Unraid OS)_!</span>

<?elseif ( ($var['regTy']=="Basic") or ($var['regTy']=="Plus") or ($var['regTy']=="Pro") ):?>

<span class="thanks">_(Thank you for choosing Unraid OS)_!</span>

<?endif;?>

<?if (strstr($var['regTy'], "unregistered")):?>

<div markdown="1" class="remark">
:registration_1_plug:
Your server will not be usable until you purchase a Registration key or install a free 30-day *Trial* key. A *Trial*
key provides all the functionality of a *Pro* Registration key.

Registration keys are bound to your USB Flash boot device serial number (GUID).  Please use a high quality name brand device
at least 1GB in size (min 4GB recommended).

Note: USB memory card readers are generally **not** supported because most do not present unique serial numbers.
:end
</div>

<?endif;?>

<?if ($var['regTy']=="Trial"):?>

<div markdown="1" class="remark">
:registration_3_plug:
Your *Trial* key includes all the functionality and device support of a *Pro* Registration key.

After your *Trial* key has reached expiration, your server **still functions normally** until the next time you **Stop** the array.

At that point, you may either purchase a Registration key, or request a *Trial* extension.
:end
</div>

<?endif;?>

<?if (strstr($var['regTy'], "no connection")):?>

<div markdown="1" class="remark">
<span class='red-text'>_(Cannot connect to key-server)_!</span>

_(Your *Trial* key requires an internet connection)_.  _(Please check your)_ [_(Network Settings)_](NetworkSettings).
</div>

<?endif;?>

<?if (strstr($var['regTy'], "withdrawn")):?>

<div markdown="1" class="remark">
<span class='red-text'>_(Release has been withdrawn)_!</span>

_(This release has been withdrawn for use with *Trial* keys)_.
</div>

<?endif;?>

<?if (strstr($var['regTy'], "expired")):?>

<div markdown="1" class="remark">
<span class='red-text'>_(Your *Trial* key has expired)_.</span>
:registration_4_plug:
To continue using Unraid OS you may purchase a Registration key. Alternately, you may request a *Trial* extension key.

Most *Trial* extension requests are processed immediately but please allow up to one business day to receive your *Trial* extension key.
:end
</div>

<?endif;?>

<?if (strstr($var['regTy'], "invalid installation")):?>

<span class='thanks red'>_(Invalid *Trial* Installation)_</span>
<div markdown="1" class="remark">
:registration_5_plug:
It is not possible to use a *Trial* key with an existing Unraid OS installation.

You may purchase a Registration key corresponding to this USB Flash device to continue using this installation.

For more information, please [Contact Support](https://lime-technology.com/contact).
:end
</div>

<?endif;?>

<?if (strstr($var['regTy'], "missing")):?>

<span class='thanks red'>_(Missing Key File)_</span>
<div markdown="1" class="remark">
:registration_6_plug:
It appears that your Registration key file is corrupted or missing.  The key file should be located in the
[config](/Registration/Browse?dir&#61;/boot/config) directory on your USB Flash boot device.

If you do not have a backup copy of your Registration key file, [Contact Support](https://lime-technology.com/contact).

If this was a *Trial* installation, you may purchase a Registration key.
:end
</div>

<?endif;?>

<?if (strstr($var['regTy'], "invalid key")):?>

<span class='thanks red'>_(The registered GUID does not match the USB Flash boot device GUID)_</span>

<?if (strstr($var['regTy'], "Trial")):?>

<div markdown="1" class="remark">
:registration_7_plug:
*Trial* installations are only valid with the originally registered USB Flash device.

To continue using this installation with this USB Flash device, you may purchase a Registration key.
:end
</div>

<?else:?>

<div markdown="1" class="remark">
:registration_8_plug:
The Registration key file does not correspond to the USB Flash boot device.
Please copy the correct key file to the [config](/Registration/Browse?dir&#61;/boot/config) directory
on your USB Flash boot device. If you do not have a backup copy of your key file, [Contact Support](https://lime-technology.com/contact).

If you want to replace your Registration key with a new key bound to this USB Flash device, click Replace Key below. An original key may be
replaced anytime. Thereafter, a replacement key may be replaced again after one year has passed.  If you require
another replacement key sooner, [Contact Support](https://lime-technology.com/contact).

**Note:** Replacing a Registration key results in permanently *blacklisting* the previous USB Flash GUID.
:end
</div>

<?endif;?>
<?endif;?>

<?if (strstr($var['regTy'], "blacklisted")):?>

<span class='thanks red'>_(Blacklisted USB Flash GUID)_</span>
<div markdown="1" class="remark">
:registration_9_plug:
This USB Flash boot device has been *blacklisted*. This can occur as a result of transfering your Registration key to
a replacement USB Flash device, and you are currently booted from your old USB Flash device.

A USB Flash device may also be *blacklisted* if there is no serial number, or if we discover the serial number
is not unique (this is common with USB card readers).

For more information, please [Contact Support](https://lime-technology.com/contact).
:end
</div>

<?endif;?>

<?if ( ( !(strstr($var['regTy'], "invalid key")) and ((strstr($var['regTy'], "Trial"))) ) || (strstr($var['regTy'], "no connection")) || (strstr($var['regTy'], "withdrawn")) ):?>

_(***Trial*** key expires on)_:
: <?=my_time_now($var['regTm2'])?>

<?endif;?>

<?if ( strstr($var['regTy'], "invalid installation") || ( (strstr($var['regTy'], "invalid key")) && (strstr($var['regTy'], "Trial")) )):?>

_(Expiration)_:
: <?=my_time_now($var['regTm2'])?>

<?endif;?>

<?if ( (strstr($var['regTy'], "invalid installation")) || (strstr($var['regTy'], "invalid key")) || ($var['regTy']=="Basic") || ($var['regTy']=="Plus") || ($var['regTy']=="Pro") ):?>

_(Registered to)_:
: <?=htmlspecialchars($var['regTo'])?>

_(Registered on)_:
: <?=my_time_now($var['regTm'])?>

<?endif;?>

<?if ( (strstr($var['regTy'], "invalid installation")) or ( (strstr($var['regTy'], "invalid key")) and (!(strstr($var['regTy'], "Trial")))) ):?>

_(Registered GUID)_:
: <?=$var['regGUID']?>

<?endif;?>

<?if (strstr($var['regTy'], "flash device error")):?>

<span class='thanks red'>_(Error accessing your physical USB Flash boot device)_</span>
<div markdown="1" class="remark">
_(There is a physical problem accessing your USB Flash boot device)_. _(Please)_ [Contact Support](https://lime-technology.com/contact).

_(Flash GUID)_:
: _(Error code)_: <?=$var['regCheck']?>

<?else:?>

_(Flash GUID)_:
: <?=$var['flashGUID']?>

<?endif;?>

_(Flash Vendor)_:
: <?=$var['flashVendor']?>

_(Flash Product)_:
: <?=$var['flashProduct']?>

<?if ( ((strstr($var['regTy'], "invalid key")) and !(strstr($var['regTy'], "Trial"))) || ($var['regTy']=="Basic") || ($var['regTy']=="Plus") || ($var['regTy']=="Pro") ):?>

_(Replaceable)_:
: <?=my_time_any($var['regTm2'])?>

<?endif;?>

<?if ( !(strstr($var['regTy'], "flash device error")) || !(strstr($var['regTy'], "blacklisted")) ):?>

<div class="device"><?=sprintf(_("This server has %s attached storage device".($var['deviceCount']==1?'.':'s.')),$var['deviceCount'])?></div>

<?endif;?>

<unraid-upc-trigger></unraid-upc-trigger>

                )

            [Connect] => Array
                (
                    [Menu] => ManagementAccess:100
                    [Title] => Unraid Connect
                    [Icon] => icon-u-globe
                    [Tag] => globe
                    [file] => plugins/dynamix.my.servers/Connect.page
                    [root] => plugins/dynamix.my.servers
                    [name] => Connect
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$keyfile = empty($var['regFILE']) ? null : @file_get_contents($var['regFILE']);
if ($keyfile !== false) {
  $keyfile = @base64_encode($keyfile);
}
// note: $myservers variable defined in myservers1.php, by parsing myservers.cfg
// ensure some vars are defined here so we don't have to test them later
if (empty($myservers['remote']['apikey'])) {
  $myservers['remote']['apikey'] = "";
}
if (empty($myservers['remote']['wanaccess'])) {
  $myservers['remote']['wanaccess'] = "no";
}
if (empty($myservers['remote']['wanport'])) {
  $myservers['remote']['wanport'] = 33443;
}
if (empty($myservers['remote']['upnpEnabled'])) {
  $myservers['remote']['upnpEnabled'] = "no";
}
if (empty($myservers['remote']['dynamicRemoteAccessType'])) {
  $myservers['remote']['dynamicRemoteAccessType'] = "DISABLED";
}
$showT2Fa = (file_exists('/boot/config/plugins/dynamix.my.servers/showT2Fa'));

$nginx = parse_ini_file('/var/local/emhttp/nginx.ini');
$hasMyUnraidNetCert = preg_match('/.*\.myunraid\.net$/', $nginx['NGINX_CERTNAME']);

$isRegistered = !empty($myservers['remote']['username']);

$myservers_memory_cfg_path ='/var/local/emhttp/myservers.cfg';
$mystatus = (file_exists($myservers_memory_cfg_path)) ? @parse_ini_file($myservers_memory_cfg_path) : [];
$isConnected = (($mystatus['minigraph']??'')==='CONNECTED') ? true : false;
$flashbackup_ini = '/var/local/emhttp/flashbackup.ini';
$flashbackup_status = (file_exists($flashbackup_ini)) ? @parse_ini_file($flashbackup_ini) : [];

$passwd_result = exec('/usr/bin/passwd --status root');
$boolWebUIAuth = $isRegistered && (($passwd_result !== false) && (substr($passwd_result, 0, 6) == 'root P'));

// Helper to determine the current value for the remote access input
$dynamicRemoteAccessType = $myservers['remote']['dynamicRemoteAccessType'];
$upnpEnabled = $myservers['remote']['upnpEnabled'] === 'yes';
$wanaccessEnabled = $myservers['remote']['wanaccess'] === 'yes';

$currentRemoteAccessValue = 'OFF';
if ($dynamicRemoteAccessType === 'STATIC') {
  $currentRemoteAccessValue = 'DYNAMIC_MANUAL';
} elseif ($dynamicRemoteAccessType === 'UPNP') {
  $currentRemoteAccessValue = 'DYNAMIC_UPNP';
} elseif ($dynamicRemoteAccessType === 'DISABLED' && $wanaccessEnabled && $upnpEnabled) {
  $currentRemoteAccessValue = 'ALWAYS_UPNP';
} elseif ($dynamicRemoteAccessType === 'DISABLED' && $wanaccessEnabled && !$upnpEnabled) {
  $currentRemoteAccessValue = 'ALWAYS_MANUAL';
}

/**
 * mimicking PHP vars below in javascript to ensure people can't trick the js postobj
 * by disabling html attrs and vars before the post sends to set the field
 */
$enableRemoteT2fa = $showT2Fa && $currentRemoteAccessValue !== 'OFF' && $hasMyUnraidNetCert;
$enableLocalT2fa = $showT2Fa && $var['USE_SSL'] === 'auto' && $hasMyUnraidNetCert;
$shade="shade-".($display['theme']??'unk');
?>
<style>
div.shade-white{background-color:#ededed;margin-top:10px;padding:8px 0 3px 0}
div.shade-black{background-color:#212121;margin-top:10px;padding:8px 0 3px 0}
div.shade-azure{background-color:#edeaef;margin-top:10px;padding:8px 0 3px 0}
div.shade-gray{background-color:#121510;margin-top:10px;padding:8px 0 3px 0}
</style>
<script>
const hasMyUnraidNetCert = <?=($hasMyUnraidNetCert ? 'true' : 'false')?>;
const wanAccessOrg = "<?=$myservers['remote']['wanaccess']?>";

$('body').on('change keyup', '#UnraidNetSettings', function(data) {
  validateExtraOrigins();
  if (!isExtraOriginsValid) {
    return $(this).find('.applyBtn').prop("disabled",true);
  }
  return $(this).find('.applyBtn').removeAttr('disabled');
});

function registerServer(button) {

    const $remoteAccessInput = $('#remoteAccess');
    const $remoteAccessManualPort = $('#wanport');

    let computedRemoteAccessConfig = null;
    switch ($remoteAccessInput.val()) {
      case 'ALWAYS_MANUAL':
        computedRemoteAccessConfig = {
          remote_wanaccess: 'yes',   // always on
          remote_wanport: $remoteAccessManualPort.val(), // value provided by user or from cfg file
          remote_upnpEnabled: 'no',  // always off
          remote_dynamicRemoteAccessType: 'DISABLED',
        };
        break;
      case 'ALWAYS_UPNP':
        computedRemoteAccessConfig = {
          remote_wanaccess: 'yes',   // always on
          remote_wanport: '',        // existing value ignored, will be set by unraid-api after starting UPnP
          remote_upnpEnabled: 'yes', // always on
          remote_dynamicRemoteAccessType: 'DISABLED',
        };
        break;
      case 'DYNAMIC_UPNP':
        computedRemoteAccessConfig = {
          remote_wanaccess: 'no',    // will be set to "yes" by Connect when requested by user
          remote_wanport: '',        // existing value ignored, will be set by unraid-api after starting UPnP
          remote_upnpEnabled: 'no',  // will be set to "yes" by Connect when requested by user
          remote_dynamicRemoteAccessType: 'UPNP',
        };
        break;
      case 'DYNAMIC_MANUAL':
        computedRemoteAccessConfig = {
          remote_wanaccess: 'no',    // will be set to "yes" by Connect when requested by user
          remote_wanport: $remoteAccessManualPort.val(), // value provided by user or from cfg file
          remote_upnpEnabled: 'no',  // always off
          remote_dynamicRemoteAccessType: 'STATIC',
        };
        break;
      default:
        computedRemoteAccessConfig = {
          remote_wanaccess: 'no',
          remote_wanport: '',
          remote_upnpEnabled: 'no',
          remote_dynamicRemoteAccessType: 'DISABLED',
        };
        break;
    }

        const enableLocalT2fa = <?=($enableLocalT2fa ? 'true' : 'false')?>;
        const enableRemoteT2fa = $remoteAccessInput.val() !== 'OFF' && hasMyUnraidNetCert;

        var postobj = {
            "#cfg": "/boot/config/plugins/dynamix.my.servers/myservers.cfg",
            ...(computedRemoteAccessConfig ? computedRemoteAccessConfig : {}),
             // only allow 'yes' value when fields are enabled
            "local_2Fa": enableLocalT2fa ? $('#local2fa').val() : 'no',
            "remote_2Fa": enableRemoteT2fa ? $('#remote2fa').val()  : 'no',
            "api_extraOrigins": validateExtraOrigins(),
        };

        // console.debug(JSON.stringify(postobj,null,2))
        $(button).prop("disabled", true).html("_(Applying)_ <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>");
        $.post('/webGui/include/Dispatcher.php', postobj, function(data2) {
<?if(!$isRegistered):?>
            swal({
              title: "",
              text: "_(Your server has been registered)_",
              type: "success",
              html: true,
              allowEscapeKey: false,
              confirmButtonText: "_(Ok)_"
            }, function() {
              button.form.submit();
            });
<?else:?>
      // give the unraid-api time to call rc.nginx and UpdateDNS before refreshing the page
      const delay = 4000;
      setTimeout(function() {
        button.form.submit();
      }, delay);
<?endif?>
        });

}

function dnsCheckServer(button) {
    // can't check DYNAMIC_MANUAL unless enabled on the Connect side too
    // tell user to switch to ALWAYS_MANUAL to check their port forward
    if ($('#remoteAccess').val() == "DYNAMIC_MANUAL") {
      swal({
            title: "Oops",
            text: "_(To test your manual port forward, temporarily configure 'Allow Remote Access' as 'Always On - Manual Port Forward')_",
            type: "error",
            html: true,
            confirmButtonText: "_(Ok)_"
          });
      return;
    }

    var oldlabel = $.trim($(button).text());
    var failure = function(data) {
        var status = data.status;
        var obj = data.responseJSON;
        var msg = "_(Sorry, an error occurred)_<br>_(The error is)_: " + obj.error + ".";
        $(button).prop("disabled", false).html(oldlabel);
        swal({
          title: "Oops",
          text: msg,
          type: "error",
          html: true,
          confirmButtonText: "_(Ok)_"
        });
    };

    var success = function(data) {
        $(button).prop("disabled", false).html(oldlabel);
        if (data.status) {
            swal({
              title: "",
              text: "_(Your Unraid Server is reachable from the internet)_",
              type: "success",
              html: true,
              confirmButtonText: "_(Ok)_"
            });
        } else {
            swal({
              title: "Oops",
              text: "<?=sprintf(_("The Unraid server is unreachable from outside your network. Be sure you have configured your router to forward port") . " <strong style='font-weight: bold'>%u/TCP</strong> " . _("to the Unraid server at") . " <strong style='font-weight: bold'>%s</strong> " . _("port") . " <strong style='font-weight: bold'>%u</strong>", $myservers['remote']['wanport'], htmlspecialchars($eth0['IPADDR:0']??''), $var['PORTSSL']??443)?>",
              type: "error",
              html: true,
              confirmButtonText: "_(Ok)_"
            });
        }
    };

    $(button).prop("disabled", true).html("_(Checking)_ <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>");
    $.post("https://keys.lime-technology.com/account/server/checkdns",{externalport:$('#wanport').val(),keyfile:"<?=$keyfile?>"},success).fail(failure);
}

function changeRemoteAccess(dropdown) {
    let $wanPanel = $("#wanpanel");
    let $remote2faSelect = $('#remote2fa');
    let $remote2faRemark = $('#remote2fa_remark');
    const dropdownValue = $(dropdown).val();

    if (dropdownValue == 'DYNAMIC_MANUAL' || dropdownValue == 'ALWAYS_UPNP' || dropdownValue == 'ALWAYS_MANUAL') {
        $wanPanel.slideDown('fast');
        if (dropdownValue == 'ALWAYS_UPNP') {
          // don't let the user edit the UPnP port
          $("#wanport").hide();
          // show the UPnP port read-only if neither port nor dropdown has changed since page loaded
          if ($("#remoteAccess").val() == $("#remoteAccess").data('orig') && $("#wanport").val() == $("#wanport").data('orig')) {
            $("#wanportdisplay").show();
          } else {
            $("#wanportdisplay").hide();
          }
        } else {
          // let the user edit the port
          $("#wanport").show();
          $("#wanportdisplay").hide();
        }
        if (dropdownValue == 'DYNAMIC_MANUAL' || dropdownValue == 'ALWAYS_MANUAL') {
          // show message about manually setting a port forward
          $("#wanportmsg").show();
        } else if (dropdownValue == 'ALWAYS_UPNP') {
          $("#wanportmsg").hide();
        }
        $remote2faSelect.prop('disabled', false);
        $remote2faRemark.fadeOut();
        enableDisableCheckButton();
    } else {
        // dropdown value is 'DYNAMIC_UPNP' or 'OFF'
        $wanPanel.slideUp('fast');
        $remote2faRemark.fadeIn();
        $remote2faSelect.prop('disabled', true);
        // perhaps we don't want this to auto set to no when remote access is toggled to no. Rather the submission of the form sets the value to no.
        // this way if the user toggles remote access to no then decided to put back to yes, Remote T2FA wouldn't accidentally be turned off.
        // $remote2faSelect.val('no'); // set value to 'no' since it's not allowed to be yes when remote access is NOT enabled
    }

    // display helpful messages based on the dropdownValue
    let $remoteAccessMsgTxt = '';
    let $useConnectMsgTxt = "Visit the <a href='https://connect.myunraid.net/' target='_blank'>Connect Dashboard</a> to use Remote Access.";
    switch (dropdownValue) {
      case 'OFF':
        $useConnectMsgTxt = '';
        break;
      case 'DYNAMIC_MANUAL':
        $remoteAccessMsgTxt = "<a href='https://wiki.unraid.net/Connect#Dynamic_Remote_Access' target='_blank'>Enable Remote Access</a> on the <a href='https://connect.myunraid.net/' target='_blank'>Connect Dashboard</a>.";
        break;
      case 'DYNAMIC_UPNP':
        $remoteAccessMsgTxt = "<a href='https://wiki.unraid.net/Connect#Dynamic_Remote_Access' target='_blank'>Enable Remote Access</a> on the <a href='https://connect.myunraid.net/' target='_blank'>Connect Dashboard</a>, a random WAN port will be assigned by UPnP.";
        break;
      case 'ALWAYS_MANUAL':
        $remoteAccessMsgTxt = "Remote Access is always on.";
        break;
      case 'ALWAYS_UPNP':
        $remoteAccessMsgTxt = "Remote Access is always on, a random WAN port will be assigned by UPnP.";
        break;
    }
    $('#remoteAccessMsg').html($remoteAccessMsgTxt);
    $('#useConnectMsg').html($useConnectMsgTxt);

}

function enableDisableCheckButton() {
    $enabled = ($("#remoteAccess").val() == $("#remoteAccess").data('orig') && $("#wanport").val() == $("#wanport").data('orig'));
    $("#wancheck").prop("disabled", !$enabled);
}

function checkFlashBackup() {
    $.post("https://keys.lime-technology.com/backup/flash/check",{keyfile:"<?=$keyfile?>"}, function(data) {
      if (data && data.size) {
        $("#deletecloudbackup").prop("disabled", false);
      }
    });
}

function enableFlashBackup(button) {
    var oldlabel = $.trim($(button).text());

    var failure = function(data) {
        var status = data.status;
        var obj = data.responseJSON;
        var msg = "_(Sorry, an error occurred)_<br>_(The error is)_: " + obj.error + ".";
        $(button).prop("disabled", false).html(oldlabel);
        swal({
          title: "",
          text: msg,
          type: "error",
          allowEscapeKey: false,
          html: true,
          confirmButtonText: "_(Ok)_"
        },function(){button.form.submit();});
    };

    var success = function(data) {
        $(button).prop("disabled", false).html(oldlabel);
        button.form.submit();
    };

    if (oldlabel == "_(Activate)_") {
        $(button).prop("disabled", true).html("_(Activating)_ <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>");
        $.post("/plugins/dynamix.my.servers/include/UpdateFlashBackup.php",{command:"activate"},success).fail(failure);
    }
    if (oldlabel == "_(Deactivate)_") {
        swal({
            title:_("Deactivate"),
            showCancelButton:true,
            confirmButtonText:_('Deactivate'),
            cancelButtonText:_('Cancel'),
            text:_("Are you sure you want to delete your local flash backup?")+"<br><br><label style='font-weight:bold;color:red;'><input type='checkbox' id='remove_remote_backups'> "+_("Also delete cloud backup. Restore from backup will be unavailable.")+"</label>",
            html:true,
        },function(confirm){
            if (!confirm) return;
            $(button).prop("disabled", true).html("_(Deactivating)_ <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>");
            $.post("/plugins/dynamix.my.servers/include/UpdateFlashBackup.php",{command:"deactivate"},success).fail(failure);
            if ($('#remove_remote_backups').is(':checked')) {
                // post to key-server to remove remote backup
                $.post("https://keys.lime-technology.com/backup/flash/delete",{keyfile:"<?=$keyfile?>"}).fail(failure);
            }
        });
    }
    if (oldlabel == "_(Delete Cloud Backup)_") {
        swal({
            title:_("Delete Cloud Backup"),
            showCancelButton:true,
            confirmButtonText:_('Delete'),
            cancelButtonText:_('Cancel'),
            text:_("Are you sure you want to delete your cloud backup? Restore from backup will be unavailable."),
            html:true,
        },function(confirm){
            if (!confirm) return;
            // post to key-server to remove remote backup
            $.post("https://keys.lime-technology.com/backup/flash/delete",{keyfile:"<?=$keyfile?>"},success).fail(failure);
        });
    }
    if (oldlabel == "_(Update)_") {
        $(button).prop("disabled", true).html("_(Updating)_ <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>");
        $.post("/plugins/dynamix.my.servers/include/UpdateFlashBackup.php",{command:"flush"},success).fail(failure);
    }
    if (oldlabel == "_(Changes)_") {
        openBox("/webGui/include/gitstatus.php", "_(Changes)_", 600,600, false);
    }
}

function buttonStateReset(newstate) {
    $('#inactivespanel,#activepanel,#changespanel,#uptodatepanel,#errorpanel,#remoteerrorpanel').hide();

    if (newstate['loading'] && newstate['loading']!='') {
      if (newstate['activated'] == 'true' || newstate['activated'] == 'yes') {
        $('#flashbackuptext').html('<span class="green p0">_(Activated)_:</span> <span class="blue p0">' + newstate['loading'] + ' <i class="fa fa-spinner fa-spin" aria-hidden="true"></i></span>');
      } else {
        $('#flashbackuptext').html('<span class="orange p0">_(Not activated)_:</span> <span class="blue p0">' + newstate['loading'] + ' <i class="fa fa-spinner fa-spin" aria-hidden="true"></i></span>');
      }
      $('#uptodatepanel').show();
      return;
    }

    if (newstate['error'] && newstate['error']!='') {
      $('#flashbackuperror').html('<i class="fa fa-warning icon warning" aria-hidden="true"></i> ' + newstate['error']);
      $('#errorpanel').show();
    }

    if (newstate['remoteerror'] && newstate['remoteerror']!='') {
      $('#flashbackupremoteerror').html('<i class="fa fa-warning icon warning" aria-hidden="true"></i> ' + newstate['remoteerror']);
      $('#remoteerrorpanel').show();

      // if rate limited, disable the Update button
      if (newstate['remoteerror'].includes('Rate limited')) {
        $('#changespanel button').first().prop("disabled",true);
      }
    }

    if (newstate['activated'] == 'true' || newstate['activated'] == 'yes') {
        $('#activepanel').show();

        if (newstate['uptodate'] == 'true' || newstate['uptodate'] == 'yes') {
            $('#flashbackuptext').html('<span class="green p0">_(Activated)_:</span> <span class="green p0">_(up-to-date)_</span>');
            $('#uptodatepanel').show();
        } else {
            $('#flashbackuptext').html('<span class="green p0">_(Activated)_:</span> <span class="orange p0">_(Not up-to-date)_</span>');
            $('#changespanel').show();
        }
    } else {
        $('#flashbackuptext').html('<span class="orange p0">_(Not activated)_</span>');
        $('#inactivespanel').show();
        checkFlashBackup();
    }
}
$.post('/plugins/dynamix.my.servers/include/UpdateFlashBackup.php',{command:"status"});

let isExtraOriginsValid = false;
const validateExtraOrigins = () => {
  const val = $('.js-extraOrigins').val();
  const $grandParent = $('.js-extraOrigins').parent().parent(); // setting here in this scope b/c it didn't work setting outside of this function
  if (!val) {
    $grandParent.removeClass('red-text');
    isExtraOriginsValid = true;
    return '';
  }
  let trimmed = val.replace(/\s+/g, '');
  if (trimmed.slice(-1) === ',') trimmed = trimmed.slice(0, -1); // if last char is in string is a comma we need to remove it other wise `isCommaSeparatedURLs` will fail
  const isValid = isCommaSeparatedURLs(trimmed);
  if (!isValid) { // tell the user to fix it
    $grandParent.addClass('red-text');
    isExtraOriginsValid = false;
    return '';
  }
  // remove any negative feedback
  $grandParent.removeClass('red-text');
  isExtraOriginsValid = true;
  return trimmed;
};
const isCommaSeparatedURLs = input =>
  input
    .split(",")
    .every(value => /^(http|https):\/\/[^ "]+$/.test(value));
</script>

<form id="UnraidNetSettings" markdown="1" name="UnraidNetSettings" method="POST" action="/update.htm" target="progressFrame">
<div markdown="1" class="<?=$shade?>"><!-- begin Account section -->

<?
/**
 * Allowed origins warning displayed when the current webGUI URL is NOT included in the known lists of allowed origins.
 * Include localhost in the test, but only display HTTP(S) URLs that do not include localhost.
 */
$host = $_SERVER['HTTP_HOST'] ?? "unknown";
$allowedOrigins = $mystatus['allowedOrigins'] ?? "";
$allowedOriginsArr = [];
if (stripos($allowedOrigins.",", "/".$host.",") === false) {
  $allowedOriginsArr = explode(", ", $allowedOrigins);
  if ($allowedOriginsArr) {
    foreach($allowedOriginsArr as $key => $origin) {
      if ( (strpos($origin, "http") === false) || (strpos($origin, "localhost") !== false) ) {
        // clean up $allowedOriginsArr, only display warning if origins still remain to display
        unset($allowedOriginsArr[$key]);
      }
    }
  }
}
?>
<? if ($allowedOriginsArr): ?>
<dl>
  <div style="margin-bottom: 2rem;">
    <span class="orange-text"><i class='fa fa-warning fa-fw'></i> <strong>_(Warning)_</strong></span> <?= sprintf(_('Your current url **%s** is not in the list of allowed origins for this server'), $host) ?>.
    <br/>_(For best results, use one of these urls)_:
    <dd>
      <ul>
        <? foreach($allowedOriginsArr as $origin): ?>
          <li><a href="<?= $origin ?>"><?= $origin ?></a></li>
        <? endforeach ?>
      </ul>
    <dd>
  </div>
</dl>
<? endif ?>

&nbsp;
: <span>_(Questions? See <a href="https://wiki.unraid.net/Connect" target="_blank">the documentation</a>.)_</span>


_(Account status)_:
: <unraid-authed prop-registered="<? echo $isRegistered ?>"></unraid-authed>

<?if($isRegistered):?>
_(Connected to Unraid Connect Cloud)_: 
<?if($isConnected):?>
: _(Yes)_
<?else:?>
: <i class="fa fa-warning icon warning"></i> _(No)_
<?endif // end check for ($isConnected) ?>
<?endif // end check for ($isRegistered) ?>

</div><!-- end Account section -->

<div markdown="1" class="<?=$shade?>"><!-- begin Remote Access section -->

_(Allow Remote Access)_:
<?if(!$isRegistered): // NOTE: manually added close tags so the next section would not be indented ?>
: <span><i class="fa fa-warning icon warning"></i> _(Disabled until you have signed in)_</span></dd></dl>
<?elseif(!$isConnected && $myservers['remote']['wanaccess']!="yes"): // NOTE: manually added close tags so the next section would not be indented ?>
: <span><i class="fa fa-warning icon warning"></i> _(Disabled until connected to Unraid Connect Cloud)_</span></dd></dl>
<?elseif(!$hasMyUnraidNetCert): // NOTE: manually added close tags so the next section would not be indented ?>
: <span><i class="fa fa-warning icon warning"></i> _(Disabled until you Provision a myunraid.net SSL Cert)_</span><input type="hidden" id="wanport" value="0"></dd></dl>
<?elseif(!$boolWebUIAuth): // NOTE: manually added close tags so the next section would not be indented ?>
: <span><i class="fa fa-warning icon warning"></i> _(Disabled until your root user account is password-protected)_</span><input type="hidden" id="wanport" value="0"></dd></dl>
<?else: // begin show remote access form ?>
: <select id="remoteAccess" name="remoteAccess" data-orig="<?=$currentRemoteAccessValue?>" onchange="changeRemoteAccess(this)" style="vertical-align: top;">
    <?=mk_option($currentRemoteAccessValue, "OFF", _("Off"))?>
    <?=mk_option($currentRemoteAccessValue, "DYNAMIC_UPNP", _("Dynamic - UPnP"), $var['USE_UPNP'] === 'no' ? 'disabled' : '')?>
    <?=mk_option($currentRemoteAccessValue, "DYNAMIC_MANUAL", _("Dynamic - Manual Port Forward"), $var['USE_SSL'] !== 'auto' ? 'disabled' : '')?>
    <?=mk_option($currentRemoteAccessValue, "ALWAYS_UPNP", _("Always On - UPnP"), $var['USE_UPNP'] === 'no' ? 'disabled' : '')?>
    <?=mk_option($currentRemoteAccessValue, "ALWAYS_MANUAL", _("Always On - Manual Port Forward"))?>
  </select> <span id="remoteAccessMsg"></span>

<?if($var['USE_UPNP'] === 'no'):?>
&nbsp;
: _(Remark: to use the UPnP options please set "Use UPnP" to "Yes" in Management Access.)_
<?endif // end check for ($var['USE_UPNP']) ?>

<?if($var['USE_SSL'] !== 'auto'):?>
&nbsp;
: _(Remark: to use the "Dynamic - Manual Port Forward" option for Remote Access please set "Use SSL/TLS" to "Strict" in Management Access.)_
<?endif?>

&nbsp;
: <unraid-wan-ip-check php-wan-ip="<?=@file_get_contents('https://wanip4.unraid.net/')?>"></unraid-wan-ip-check>

<div markdown="1" id="wanpanel" style="display:'none'">

_(WAN Port)_:
: <input type="number" id="wanport" onchange="enableDisableCheckButton()" onkeyup="enableDisableCheckButton()" data-orig="<?=$myservers['remote']['wanport']?>" class="trim" min="0" max="65535" value="<?=htmlspecialchars($myservers['remote']['wanport'])?>"> <span id="wanportdisplay" style="display:'none'"><?=$myservers['remote']['wanport']?>&nbsp;&nbsp;&nbsp;</span> <button type="button" id="wancheck" onclick="dnsCheckServer(this)" style="margin-top: 0">_(Check)_</button>
 <span id="wanportmsg"><?=sprintf(_("Remark: configure your router with port forwarding of port") . " <strong>%u/TCP</strong> " . _("to") . " <strong>%s:%u</strong>", $myservers['remote']['wanport'], htmlspecialchars($eth0['IPADDR:0']??''), $var['PORTSSL']??443)?></span>

:unraidnet_wanpanel_help:

</div>
<? /** for the time being only display remote T2FA field when enabled manually by Unraid developers */ ?>
<?if($showT2Fa):?>
<?
$remoteT2faRemarks = [
  'all' => _('Remote T2FA requires Remote Access to be enabled and a *.myunraid.net certificate'),
  'needRemote' => _('Remote T2FA requires Remote Access to be enabled'),
  'needRemoteAndCert' => _('Remote T2FA requires Remote Access to be enabled and a *.myunraid.net certificate'),
  'needCert' => _('Remote T2FA requires a *.myunraid.net certificate'),
];

if ($enableRemoteT2fa)
  $remoteT2faRemark = '';
elseif ($currentRemoteAccessValue === 'OFF' && $hasMyUnraidNetCert)
  $remoteT2faRemark = $remoteT2faRemarks['needRemote'];
elseif ($currentRemoteAccessValue === 'OFF' && !$hasMyUnraidNetCert)
  $remoteT2faRemark = $remoteT2faRemarks['needRemoteAndCert'];
elseif ($currentRemoteAccessValue !== 'OFF'  && !$hasMyUnraidNetCert)
  $remoteT2faRemark = $remoteT2faRemarks['needCert'];
else
  $remoteT2faRemark = $remoteT2faRemarks['all'];

$localT2faRemarks = [
  'all' => _('Local T2FA requires Use SSL/TLS to be Strict and a *.myunraid.net certificate'),
  'needSSLAuto' => _('Local T2FA requires Use SSL/TLS to be Strict'),
  'needSSLAutoAndCert' => _('Local T2FA requires Use SSL/TLS to be Strict and a *.myunraid.net certificate'),
  'needCert' => _('Local T2FA requires a *.myunraid.net certificate'),
];

if($enableLocalT2fa)
  $localT2faRemark = '';
elseif ($var['USE_SSL'] !== 'auto' && $hasMyUnraidNetCert)
  $localT2faRemark = $localT2faRemarks['needSSLAuto'];
elseif ($var['USE_SSL'] !== 'auto' && !$hasMyUnraidNetCert)
  $localT2faRemark = $localT2faRemarks['needSSLAutoAndCert'];
elseif ($var['USE_SSL'] === 'auto' && !$hasMyUnraidNetCert)
  $localT2faRemark = $localT2faRemarks['needCert'];
else
  $localT2faRemark = $localT2faRemarks['all'];
?>

_(Enable Transparent 2FA for Remote Access)_<!-- do not index -->:
: <select id="remote2fa" size="1" <?=($enableRemoteT2fa ? '' : 'disabled')?>>
  <?=mk_option($myservers['remote']['2Fa']??'', "no", _("No"))?>
  <?=mk_option($myservers['remote']['2Fa']??'', "yes", _("Yes"))?>
  </select> <span id="remote2fa_remark" style="display:<?=($enableRemoteT2fa ? 'none' : 'inline')?>;"><?=$remoteT2faRemark??''?></span>

:myservers_remote_t2fa_help:

_(Enable Transparent 2FA for Local Access)_<!-- do not index -->:
: <select id="local2fa" size="1" <?=($enableLocalT2fa ? '' : 'disabled')?>>
  <?=mk_option($myservers['local']['2Fa']??'', "no", _("No"))?>
  <?=mk_option($myservers['local']['2Fa']??'', "yes", _("Yes"))?>
  </select> <span id="local2fa_remark" style="display:<?=($enableLocalT2fa ? 'none' : 'inline')?>;"><?=$localT2faRemark??''?></span>

:myservers_local_t2fa_help:

_(Unraid API extra origins)_<!-- do not index -->:
: <input class="js-extraOrigins" name="extraOrigins" type="text" value="<?=$myservers['api']['extraOrigins']??''?>">

:unraidnet_extraorigins_help:
<?endif // end check for showT2Fa ?>

&nbsp;
: <button class="applyBtn" type="button" onclick="registerServer(this)" disabled="disabled">_(Apply)_</button> <span id="useConnectMsg"></span>

<?endif // end check for (!$boolWebUIAuth) ?>

</div><!-- end Remote Access section -->
</form>

<div markdown="1" class="<?=$shade?>"><!-- begin Flash Backup section -->
_(Flash backup)_:
<?if(!$isRegistered):?>
: <span><i class="fa fa-warning icon warning"></i> _(Disabled until you have signed in)_</span>
<?elseif(!$isConnected && empty($flashbackup_status['activated'])):?>
: <span><i class="fa fa-warning icon warning"></i> _(Disabled until connected to Unraid Connect Cloud)_</span>
<?else: // begin show flash backup form ?>
: <span id='flashbackuptext'><span class='blue p0'>_(Loading)_ <i class="fa fa-spinner fa-spin" aria-hidden="true"></i></span></span>

<form markdown="1" name="FlashBackup" method="POST" action="/update.htm" target="progressFrame">

<div markdown="1" id="errorpanel" style="display:none">
&nbsp;
: <span id="flashbackuperror"></span>

</div>
<div markdown="1" id="remoteerrorpanel" style="display:none">
&nbsp;
: <span id="flashbackupremoteerror"></span>

</div>
<div markdown="1" id="inactivespanel" style="display:none">
&nbsp;
<?if(disk_free_space('/boot') > 1024*1000*1000):?>
: <button type="button" onclick="enableFlashBackup(this)">_(Activate)_</button> <span>_(Please note that the flash backup is not encrypted at this time.)_ <a href="https://wiki.unraid.net/Connect" target="_blank">_(More information.)_</a></span>
<?else:?>
: <button type="button" disabled>_(Activate)_</button> <span><i class="fa fa-warning icon warning"></i> _(In order to activate Flash Backup there must be at least 1GB of free space on your flash drive.)_</span>
<?endif?>

&nbsp;
: <button type="button" onclick="enableFlashBackup(this)" id="deletecloudbackup" disabled>_(Delete Cloud Backup)_</button>

:unraidnet_inactivespanel_help:

</div>
<div markdown="1" id="changespanel" style="display:none">
&nbsp;
: <button type="button" onclick="enableFlashBackup(this)">_(Update)_</button> <button type="button" onclick="enableFlashBackup(this)">_(Changes)_</button>

:unraidnet_changespanel_help:

</div>
<div markdown="1" id="uptodatepanel" style="display:none">
&nbsp;
: <button type="button" disabled>_(Update)_</button>

:unraidnet_uptodatepanel_help:

</div>
<div markdown="1" id="activepanel" style="display:none">
&nbsp;
: <button type="button" onclick="enableFlashBackup(this)">_(Deactivate)_</button> <span>_(Please note that the flash backup is not encrypted at this time.)_ <a href="https://wiki.unraid.net/Connect" target="_blank">_(More information.)_</a></span>

<?if (in_array($_COOKIE['UPC_ENV']??'', ['development','staging']) && file_exists("/var/log/gitflash") && filesize("/var/log/gitflash")):?>
&nbsp;
: <button type="button" onclick="openBox('/plugins/dynamix.my.servers/scripts/gitflash_log', 'Flash Backup Error Log', 800, 800);">_(View Flash Backup Error Log)_</button>  <span><em>_(Transient errors in this log can be ignored unless you are having issues)_</em></span>
<?endif?>

</div>
</form>
</div><!-- end Flash Backup section -->
<script>
changeRemoteAccess($('#remoteAccess'));
var flashbackupsub = new NchanSubscriber('/sub/flashbackup');
flashbackupsub.on('message', function(data) {
  var ini = parseINI(data);

  buttonStateReset(ini['flashbackup']);
});
$(function() {
  flashbackupsub.start();
  if ( typeof caPluginUpdateCheck === "function" ) {
    caPluginUpdateCheck("dynamix.unraid.net.plg",{name:"Unraid Connect"});
  }
});
</script>
<?endif // end show flash backup form ?>

<!-- start unraid-api section -->
<div markdown="1" class="js-unraidApiLogs <?=$shade?>">
_(Download unraid-api Logs)_:
: <unraid-api-logs></unraid-api-logs>
</div>
<!-- end unraid-api section -->


                )

            [PluginHelpers] => Array
                (
                    [Menu] => Buttons
                    [Link] => nav-user
                    [file] => plugins/dynamix.plugin.manager/PluginHelpers.page
                    [root] => plugins/dynamix.plugin.manager
                    [name] => PluginHelpers
                    [text] => <?
/* Copyright 2023, Lime Technology
 * Copyright 2023, Andrew Zawadzki.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style>
/* Additional CSS for when user supplies element */
.ca_element_notice{padding-right:20px;width:100%;height:40px;line-height:40px;color:#e68a00;background:#feefb3;border-bottom:#e68a00 1px solid;text-align:center;font-size:1.4rem;z-index:900;}
a.ca_PluginUpdateInstall{cursor:pointer;}
span.ca_PluginUpdateDismiss{float:right;margin-right:20px;cursor:pointer;}
span.bannerInfo {cursor:pointer;text-decoration:none;margin:0 12px 0 6px;}
span.bannerInfo::before {content:"\f05a";font-family:fontAwesome;color:#e68a00;}
</style>
<script>
const ca_args = {};

function ca_refresh() {
<?if ($task == 'Plugins'):?>
	loadlist();
<?else:?>
	refresh();
<?endif;?>
}

function ca_hidePluginUpdate(plugin,version,element) {
	$.cookie(plugin,version);
	$(element).hide();
}

function ca_pluginUpdateInstall(plugin) {
	if (plugin == null) {
		openPlugin(ca_args.cmd,ca_args.title,'','ca_refresh');
		return;
	}
	ca_args.cmd = 'plugin update '+plugin;
	ca_args.title = "_(Installing Update)_";
	$.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{cmd:'alert'},function(data) {
		if (data==0) {
			// no alert message - proceed with update
			setTimeout(ca_pluginUpdateInstall);
		} else {
			// show alert message and ask for confirmation
			openAlert("showchanges <?=$alerts?>","_(Alert Message)_","ca_pluginUpdateInstall");
		}
	});
}

function caPluginUpdateCheck(plugin,options=[],callback) {
	var pluginFilename = plugin.substr(0, plugin.lastIndexOf("."));
	console.time("checkPlugin "+plugin);
	console.log("checkPlugin  "+plugin);
	$.post("/plugins/dynamix.plugin.manager/scripts/PluginAPI.php",{action:'checkPlugin',options:{plugin:plugin,name:options.name}},function(caAPIresult) {
		console.groupCollapsed("Result checkPlugin "+plugin);
		console.log(caAPIresult);
		console.timeEnd("checkPlugin "+plugin);
		console.groupEnd();
		var result = JSON.parse(caAPIresult);

		if ( options.debug == true ) result.updateAvailable = true;
		if ( ! options.element && ! options.dontShow ) {
			if ( result.updateAvailable ) {
				var HTML = result.updateMessage+"<span class='bannerInfo fa fa-info-circle big' title=\"_(View Release Notes)_\" onclick='openChanges(\"showchanges /tmp/plugins/"+pluginFilename+".txt\",\"_(Release Notes)_\")'></span><a class='ca_PluginUpdateInstall' onclick='ca_pluginUpdateInstall(\""+plugin+"\")'>"+result.linkMessage+"</a>";
				addBannerWarning(HTML,false,options.noDismiss);
			}
		} else {
			if ( $.cookie(plugin) != result.version ) {
				if ( result.updateAvailable ) {
					var HTML = result.updateMessage+"<span class='bannerInfo fa fa-info-circle big' title=\"_(View Release Notes)_\" onclick='openChanges(\"showchanges /tmp/plugins/"+pluginFilename+".txt\",\"_(Release Notes)_\")'></span><a class='ca_PluginUpdateInstall' onclick='ca_pluginUpdateInstall(\""+plugin+"\")'>"+result.linkMessage+"</a>";
					if ( ! options.noDismiss ) {
						HTML = HTML.concat("<span class='ca_PluginUpdateDismiss'><i class='fa fa-close' onclick='ca_hidePluginUpdate(\""+plugin+"\",\""+result.version+"\",\""+options.element+"\")'></i></span>");
					}
					result.HTML = HTML;
					if ( ! options.dontShow ) {
						$(options.element).html(HTML);
						$(options.element).addClass("ca_element_notice");
					}
				}
			}
		}
		if ( typeof options === "function" ) {
			callback = options;
		}
		if ( typeof callback === "function" ) {
			callback(JSON.stringify(result));
		}
	});
}
</script>

                )

            [PluginInstall] => Array
                (
                    [Menu] => Plugins
                    [Title] => Install Plugin
                    [Tag] => download
                    [file] => plugins/dynamix.plugin.manager/PluginInstall.page
                    [root] => plugins/dynamix.plugin.manager
                    [name] => PluginInstall
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
const my = {};

function installPlugin(file) {
  if (file == null) {
    $('#plugin_file').val('');
    openPlugin(my.cmd,my.title,my.plg);
    return;
  }
  file = file.trim();
  if (!file) return;
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{cmd:'alert'},function(data) {
    my.cmd = 'plugin install '+file;
    my.title = "_(Install Plugin)_";
    my.plg = file.replace(/^.*(\\|\/|\:)/,'').replace('.plg','')+':install';
    if (data==0) {
      // no alert message - proceed with install
      setTimeout(installPlugin);
    } else {
      // show alert message and ask for confirmation
      openAlert("showchanges <?=$alerts?>","<?=_('Alert Message')?>",'installPlugin');
    }
  });
}
</script>

**_(Enter URL of remote plugin file or local plugin file)_**

<form name="plugin_install" method="POST" target="progressFrame">
<input type="text" name="file" id="plugin_file" maxlength="1024" value="" style="width:33%">
<input type="button" value="_(Install)_" onclick="installPlugin(this.form.file.value)">
</form>

:plugin_install_help:

**_(Select local plugin file)_**
<div id="plugin_tree" class="textarea"></div>

                )

            [Plugins] => Array
                (
                    [Menu] => Tasks:50
                    [Type] => xmenu
                    [Title] => Installed Plugins
                    [Tag] => icon-plugins
                    [Tabs] => true
                    [Code] => e944
                    [file] => plugins/dynamix.plugin.manager/Plugins.page
                    [root] => plugins/dynamix.plugin.manager
                    [name] => Plugins
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
// Remove stale /tmp/plugin/*.plg entries (check that script 'plugin' is not running to avoid clashes)
if (!exec("pgrep -f $docroot/plugins/dynamix.plugin.manager/scripts/plugin")) {
  foreach (glob("/tmp/plugins/*.{plg,txt}", GLOB_NOSORT+GLOB_BRACE) as $entry) if (!file_exists("/var/log/plugins/".basename($entry))) @unlink($entry);
}
$check = $notify['version'] ? 0 : 1;
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<style>
#plugin_tree{width:33%;height:200px;overflow-y:scroll}
table tbody td{line-height:normal}
</style>

<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>" charset="utf-8"></script>
<script>
const args = {};

function openInstall(cmd,title,plg,func) {
  if (cmd == null) {
    openPlugin(args.cmd,args.title,args.plg,args.func,1);
    return;
  }
  args.cmd = cmd;
  args.title = title;
  args.plg = plg;
  args.func = func;
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{cmd:'alert'},function(data) {
    if (data==0) {
      // no alert message - proceed with update
      setTimeout(openInstall);
    } else {
      // show alert message and ask for confirmation
      openAlert("showchanges <?=$alerts?>","_(Alert Message)_",'openInstall');
    }
  });
}
<?if ($display['resize']):?>
function resize(bind) {
  var width = [];
  var h = $('#plugin_list').height();
  var s = Math.max(window.innerHeight-340,330);
  if (h>s || bind) {
    $('#plugin_list').height(s);
    $('#plugin_table tbody tr:first-child td').each(function(){width.push($(this).width());});
    $('#plugin_table thead tr th').each(function(i){$(this).width(width[i]);});
    if (!bind) $('#plugin_table thead,#plugin_table tbody').addClass('fixed');
  }
}
<?endif;?>
function multiRemove() {
  if ($('input.remove:checked').length > 1) $('#removeall').show(); else $('#removeall').hide();
}
function updateList() {
  var plugin = [];
  $('input.update').each(function(){plugin.push($(this).attr('data'));});
  var plugins = plugin.join('*');
  $('#updateall').hide();
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{cmd:'pending',plugin:plugins},function() {
    openPlugin("multiplugin update "+plugins,"_(Update All Plugins)_",":return","loadlist",1);
  });
}
function removeList() {
  var plugin = [];
  $('input.remove:checked').each(function(){plugin.push($(this).attr('data'));});
  var plugins = plugin.join('*');
  $('#removeall').hide();
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{cmd:'pending',plugin:plugins},function() {
    openPlugin("multiplugin remove "+plugins,"_(Remove Selected Plugins)_","","refresh",1);
  });
}
function updateInfo(data) {
  var updates = data.split('\n');
  for (var n=0,update; update=updates[n]; n++) {
    var fields = update.split('\r');
    for (var i=0,field; field=fields[i]; i++) {
      var row = field.split('::');
      $('#'+row[0]).attr('data',row[1]).html(row[2]);
      var removeButton = $('input[data="'+row[0].substr(4).replace(/-/g,'.')+'.plg'+'"]');
      if (row[2].indexOf('hourglass') >= 0) removeButton.hide(); else removeButton.show();
    }
  }
}
function initlist() {
  timers.plugins = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{init:true,check:<?=$check?>},function(data) {
    clearTimeout(timers.plugins);
    $('#plugin_list').html(data);
<?if ($display['resize']):?>
    resize();
    $(window).bind('resize',function(){resize(true);});
<?endif;?>
    if (data.search("colspan='6'")==-1) {
      $('#plugin_table').tablesorter({sortList:[[4,0],[1,0]],sortAppend:[[1,0]],headers:{0:{sorter:false},5:{sorter:false}},textAttribute:'data'});
      $('.desc_readmore').readmore({maxHeight:80,moreLink:"<a href='#'><i class='fa fa-chevron-down'></i></a>",lessLink:"<a href='#'><i class='fa fa-chevron-up'></i></a>"});
      $('div.spinner.fixed').hide('slow');
      loadlist();
    }
  });
}
function loadlist(id,check) {
  if (id) timers.plugins = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{audit:id,check:check||<?=$check?>},function(data) {
    data = data.split('\0');
    var list = $('#plugin_list');
    if (id) {
      clearTimeout(timers.plugins);
      $('div.spinner.fixed').hide('slow');
      var cmd = id.split(':');
      var tr = 'tr#'+cmd[0].replace(/[\. _]/g,'');
      switch (cmd[1]) {
      case 'update':
      case 'return':
        updateInfo(data[0]);
        if (data[1] > 1) $('#updateall').show(); else $('#updateall').hide();
        break;
      case 'remove':
        list.find(tr).remove();
        break;
      case 'install':
        if (!list.find(tr).length) list.append(data[0]); loadlist(null,1);
        break;
      }
    } else {
      updateInfo(data[0]);
      if (data[1] > 1) $('#updateall').show(); else $('#updateall').hide();
    }
    $('#plugin_table').trigger('update');
    $('#checkall').find('input').prop('disabled',false);
  });
}
$(function() {
  initlist();
  $('#plugin_tree').fileTree({root:'/boot/',top:'/boot/',filter:'plg'}, function(file) {$('#plugin_file').val(file);});
  $('.tabs').append("<span id='checkall' class='status vhshift'><input type='button' value=\"_(Check For Updates)_\" onclick='openPlugin(\"checkall\",\"_(Plugin Update Check)_\",\":return\")' disabled></span>");
  $('.tabs').append("<span id='updateall' class='status vhshift' style='display:none;margin-left:12px'><input type='button' value=\"_(Update All Plugins)_\" onclick='updateList()'></span>");
  $('.tabs').append("<span id='removeall' class='status vhshift' style='display:none;margin-left:12px'><input type='button' value=\"_(Remove Selected Plugins)_\" onclick='removeList()'></span>");
});
</script>
<table class='tablesorter plugins shift' id='plugin_table'>
<thead><tr><th></th><th>_(Plugin)_</th><th>_(Author)_</th><th>_(Version)_</th><th>_(Status)_</th><th>_(Uninstall)_</th></tr></thead>
<tbody id="plugin_list"><tr><td colspan="6"></td><tr></tbody>
</table>

                )

            [PluginsError] => Array
                (
                    [Menu] => Plugins
                    [Title] => Plugin File Install Errors
                    [Tag] => puzzle-piece
                    [Cond] => glob('/boot/config/plugins-error/*.plg')
                    [file] => plugins/dynamix.plugin.manager/PluginsError.page
                    [root] => plugins/dynamix.plugin.manager
                    [name] => PluginsError
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/plugins/dynamix.plugin.manager/include/PluginHelpers.php";

echo "<table class='tablesorter' id='plugin_table'><thead>";
echo "<tr><th>"._('Plugin File')."</th><th>"._('Status')."</th><th>",_('Uninstall')."</th></tr>";
echo "</thead><tbody>";

foreach (glob("/boot/config/plugins-error/*.plg", GLOB_NOSORT) as $plugin_file) {
  $status = "<span class='orange-text'><i class='fa fa-times-circle'></i>&nbsp;"._('ERROR')."</span>";
  $action = make_link("delete", $plugin_file);
  echo "<tr><td><b>$plugin_file</b></td><td>$status</td><td>$action</td></tr>";
}

echo "</tbody></table>";
?>
:plugin_error_help:

                )

            [PluginsStale] => Array
                (
                    [Menu] => Plugins
                    [Title] => Plugin History
                    [Tag] => puzzle-piece
                    [Cond] => glob('/boot/config/plugins-stale/*.plg')
                    [file] => plugins/dynamix.plugin.manager/PluginsStale.page
                    [root] => plugins/dynamix.plugin.manager
                    [name] => PluginsStale
                    [text] => <?PHP
/* Copyright 2005-2021, Lime Technology
 * Copyright 2012-2021, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/plugins/dynamix.plugin.manager/include/PluginHelpers.php";

echo "<table class='tablesorter plugins shift' id='plugin_table'><thead>";
echo "<tr><th></th><th>".('Plugin')."</th><th>"._('Author')."</th><th>"._('Version')."</th><th>"._('Status')."</th><th></th></tr>";
echo "</thead><tbody>";

foreach (glob("/boot/config/plugins-stale/*.plg", GLOB_NOSORT) as $plugin_file) {
  // plugin name
  $name = plugin("name", $plugin_file);
  if ($name === false) $name = basename($plugin_file, ".plg");

  // icon
  $icon = icon($name);

  // desc
  $readme = "plugins/{$name}/README.md";
  if (file_exists($readme))
    $desc = Markdown(file_get_contents($readme));
  else
    $desc = Markdown("**{$name}**");

  // author
  $author = plugin("author", $plugin_file);
  if ($author === false) $author = _("anonymous");

  // version
  $version = plugin("version", $plugin_file);
  if ($version === false) $version = _("unknown");

  // status info
  $status = "<span class='orange-text'><i class='fa fa-unlink'></i>&nbsp;"._('STALE')."</span>";

  // action
  $action = make_link("delete", $plugin_file);

  // echo our plugin information
  echo "<tr><td><img src='$icon'></td><td>$desc</td><td>$author</td><td>$version</td><td>$status</td><td>$action</td></tr>";
}

echo "</tbody></table>";
?>
:plugin_stale_help:

                )

            [Update] => Array
                (
                    [Menu] => About
                    [Title] => Update OS
                    [Icon] => icon-update
                    [Tag] => upload
                    [file] => plugins/dynamix.plugin.manager/Update.page
                    [root] => plugins/dynamix.plugin.manager
                    [name] => Update
                    [text] => <?PHP
/* Copyright 2005-2022, Lime Technology
 * Copyright 2012-2022, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$version = $branch = $date = _('unknown');
$bzroot  = file_exists('/boot/previous/bzroot');
$check   = $notify['unraidos'] ? 0 : 1;
$changes = '/boot/previous/changes.txt';
$zip     = htmlspecialchars(str_replace(' ','_',strtolower($var['NAME'])));

if (file_exists($changes)) {
  exec("head -n4 $changes",$rows);
  foreach ($rows as $row) {
    $i = stripos($row,'version');
    if ($i !== false) {
      [$version,$date] = explode(' ',trim(substr($row,$i+7)));
      break;
    }
  }
  $branch = strpos($version,'rc')!==false ? _('Next') : (strpos($version,'beta')!==false ? _('Beta') : _('Stable'));
}
$reboot = preg_match("/^\*\*(REBOOT REQUIRED|DOWNGRADE)/",@file_get_contents("$docroot/plugins/unRAIDServer/README.md",false,null,0,20));
?>
<style>
ul,li{margin:0;padding-top:0;padding-bottom:0}
pre.pre{margin:30px 0}
pre>p{margin:0;padding:0}
pre#swaltext{height:600px!important}
@media (max-width:960px){pre#swaltext{height:400px!important}}
@media (max-width:960px){.sweet-alert.nchan{height:600px;width:900px;margin-left:-470px}}
@media (max-height:768px){pre#swaltext{height:400px!important}}
@media (max-height:768px){.sweet-alert.nchan{height:600px;width:900px;margin-left:-470px}}
input[value="_(Install)_"],input[value="_(Update)_"],input[value="_(Restore)_"]{margin:0}
<?if ($themes1):?>
span.vhshift{margin-top:13px!important}
<?endif;?>
</style>

<script>
var diagnosticsFile = "";
var nchan_diagnostics = new NchanSubscriber('/sub/diagnostics',{subscriber:'websocket'});
var original = null;
const args = {};

nchan_diagnostics.on('message', function(data) {
  if (data == '_DONE_') {
    nchan_diagnostics.stop();
    $('.sweet-alert').hide('fast').removeClass('nchan');
    swal.close();
    location = diagnosticsFile;
    setTimeout(cleanUp,4000);
  } else if (data) {
    let box = $('pre#swaltext');
    box.html(box.html()+'<br>'+data).scrollTop(box[0].scrollHeight);
  }
});

function openInstall(cmd,title,plg) {
  if (cmd == null) {
    openPlugin(args.cmd,args.title,args.plg);
    return;
  }
  args.cmd = cmd;
  args.title = title;
  args.plg = plg;
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{cmd:'alert'},function(data) {
    if (data==0) {
      // no alert message - proceed with update
      setTimeout(openInstall);
    } else {
      // show alert message and ask for confirmation
      openAlert("showchanges <?=$alerts?>","_(Alert Message)_",'openInstall');
    }
  });
}
function update_table(branch) {
  if (original) {
    if (branch != original) branch = '';
  } else {
    if (branch) original = branch;
  }
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{system:true,branch:branch},function(data) {
    data = data.split('\0');
    updateInfo(data[0]);
    $('#os_table').trigger('update');
  });
}
function downgrade() {
  swal({title:"_(Diagnostics)_",text:"_(Please provide diagnostics when experiencing problems)_<br>_(Post these in the forums)_",html:true,type:'warning',showCancelButton:true,confirmButtonText:"<?=_('Diagnostics')?>",cancelButtonText:"<?=_('Restore')?>"},function(diag){
    if (diag) {
      // get diagnostics and then downgrade
      setTimeout(function(){diagnostics(zipfile());},250);
    } else {
      // downgrade immediately
      $.get('/plugins/dynamix.plugin.manager/include/Downgrade.php',{version:'<?=$version?>'},function(){refresh();});
    }
  });
}
function updateInfo(data) {
  var updates = data.split('\n');
  for (var n=0,update; update=updates[n]; n++) {
    var fields = update.split('\r');
    for (var i=0,field; field=fields[i]; i++) {
      var row = field.split('::');
      $('#'+row[0]).attr('data',row[1]).html(row[2]);
    }
  }
}
function initlist() {
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{init:true,system:true,check:<?=$check?>},function(data) {
    $('#os_list').html(data);
<?if ($bzroot):?>
    $('#previous').show();
<?endif;?>
    loadlist();
  });
}
function warning (data) {
  $('#change_branch').prop('disabled',true);
  return data.replace('green','orange').replace("<?=_('up-to-date')?>","<?=_('Reboot')?>").replace('checking','warning');
}
function loadlist(id,check) {
  $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{system:true,audit:id,check:check||<?=$check?>},function(data) {
    var list = $('#os_list');
    if (id) {
      var cmd = id.split(':');
      var tr = 'tr#'+cmd[0].replace(/[\. _]/g,'');
      switch (cmd[1]) {
        case 'update' : data = warning(data);
        case 'return' : updateInfo(data); break;
        case 'install': list.find(tr).remove(); list.append(warning(data)); break;
      }
    } else {
<?if (!$reboot):?>
      updateInfo(data);
<?else:?>
      updateInfo(warning(data));
<?endif;?>
    }
    $('#os_table').trigger('update');
    $('#checkos').prop('disabled',false);
<?if ($reboot):?>
    $('#change_branch').prop('disabled',true);
<?endif;?>
  });
}
function cleanUp() {
  if (document.hasFocus()) {
    $.post('/webGui/include/Download.php',{cmd:'delete',file:diagnosticsFile},function(){
      $.get('/plugins/dynamix.plugin.manager/include/Downgrade.php',{version:'<?=$version?>'},function(){refresh();});
    });
  } else {
    setTimeout(cleanUp,2000);
  }
}
function zipfile(){
  var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
  var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0,-1);
  return '<?=$zip?>-diagnostics-'+localISOTime.substr(0,16).replace(/[-:]/g,'').replace('T','-')+'.zip';
}
function diagnostics(file) {
  nchan_diagnostics.start();
  $.post('/webGui/include/Download.php',{cmd:'diag',file:file,anonymize:''},function(zip) {
    if (zip) {
      diagnosticsFile = zip;
      swal({title:"_(Downloading)_...",text:"/boot/logs"+zip+"<hr><pre id='swaltext'></pre>",html:true,animation:'none',showConfirmButton:false});
      $('.sweet-alert').addClass('nchan');
      $('button.confirm').prop('disabled',true);
    } else {
      nchan_diagnostics.stop();
    }
  });
}
$(function() {
  initlist();
  $('.tabs').append("<span class='status vhshift'><input type='button' id='checkos' value=\"_(Check for Updates)_\" onclick='openPlugin(\"plugin checkos\",\"_(System Update Check)_\",\":return\")' disabled></span>");
});
</script>
<table class='tablesorter plugins shift' id='os_table'>
<thead><tr><th></th><th>_(Component)_</th><th>_(Author)_</th><th>_(Version)_</th><th>_(Status)_</th><th>_(Branch)_</th></tr></thead>
<tbody id="os_list"><tr><td colspan="6"></td></tr></tbody>
<?if ($bzroot):?>
<tbody id="previous" style="display:none"><tr><td><img src="/plugins/unRAIDServer/images/unRAIDServer.png" class="list"></td><td><b>_(Unraid OS)_ (_(previous)_)</b></td><td>LimeTech</td><td><?=$version?></td><td><input type="button" value="_(Restore)_" onclick="downgrade()"></td><td><?=$branch?></td></tbody>
<?endif;?>
</table>

                )

            [ShareFloorSettings] => Array
                (
                    [Menu] => Scheduler
                    [Title] => Share Floor Settings
                    [file] => plugins/dynamix.share.floor/ShareFloorSettings.page
                    [root] => plugins/dynamix.share.floor
                    [name] => ShareFloorSettings
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.share.floor';
$myjob  = parse_plugin_cfg($plugin);
$agenda = ['Disabled','Hourly','Daily','Weekly','Monthly'];
$stage  = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];

function presetSpace($val) {
  if (!$val) return;
  $units = ['B','KB','MB','GB','TB','PB','EB','ZB','YB'];
  $val = filter_var($val,FILTER_SANITIZE_NUMBER_INT);
  $base = $val>0 ? floor(log($val,1000)) : 0;
  return ($val/pow(1000,$base)).' '._var($units,$base);
}
?>
<script>
function updateFloor(button) {
  button.disabled = true;
  timers.sharefloor = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.post("/plugins/<?=$plugin?>/include/update.sharefloor.php",{cmd:'update'},function(text) {
    clearTimeout(timers.sharefloor);
    $('div.spinner.fixed').hide('slow');
    swal({title:"_(Update Minimum Free Space)_",text:text,html:true,confirmButtonText:"_(Ok)_"},function(c){button.disabled = false;});
  });
}
function presetFloor(form) {
  var mode = form.mode.value;
  form.min.disabled = mode==0;
  form.day.disabled = mode==0 || mode!=3;
  form.dotm.disabled = mode==0 || mode!=4;
  form.hour1.disabled = mode==0;
  form.hour2.disabled = mode==0;
  form.day.value = form.day.disabled ? '*' : (form.day.value=='*' ? 0 : form.day.value);
  form.dotm.value = form.dotm.disabled ? '*' : (form.dotm.value=='*' ? 1 : form.dotm.value);
  if (mode==1) {$('#floor_hour1').hide(); $('#floor_hour2').show();} else {$('#floor_hour2').hide(); $('#floor_hour1').show();}
}
function prepareFloor(form) {
  const units = ['B','KB','MB','GB','TB','PB','EB','ZB','YB'];
  var include = [];
  var mode = form.mode.value;
  form.hour.value = mode!=1 ? form.hour1.value : form.hour2.value;
  form.min.value = mode!=1 ? form.min.value : 0;
  form.hour1.disabled = true;
  form.hour2.disabled = true;
  // convert units to number
  var size = form.floor.value;
  var unit = size.replace(/[0-9.,\s]/g,'');
  form.floor.value = unit ? parseInt(size.replace(unit,''))*Math.pow(1000,(units.indexOf(unit.toUpperCase())||0)) : size;
}
$(function() {
  presetFloor(document.floor_schedule);
});
</script>
<form markdown="1" name="floor_schedule" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareFloor(this)">
<input type="hidden" name="#file" value="<?=$plugin.'/'.$plugin?>.cfg">
<input type="hidden" name="#include" value="/plugins/<?=$plugin?>/include/update.sharefloor.php">
<input type="hidden" name="hour" value="">
_(Share Floor schedule)_:
: <select name="mode" onchange="presetFloor(this.form)">
  <?for ($m=0; $m<count($agenda); $m++):?>
  <?=mk_option($myjob['mode'], strval($m), _($agenda[$m]))?>
  <?endfor;?>
  </select>

:floor_schedule_plug:
> Choose a share floor schedule ranging from hourly, daily, weekly and monthly.
>
> The interval determines how often share floor will run, it runs in the background.
:end

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($stage); $d++):?>
  <?=mk_option($myjob['day'], strval($d), _($stage[$d]),0)?>
  <?endfor;?>
  <?=mk_option($myjob['day'], "*", "--------", _("disabled"))?>
  </select>

:floor_day_of_the_week_plug:
> Choose a day when the weekly schedule is selected. Otherwise disabled.
:end

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option($myjob['dotm'], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option($myjob['dotm'], "*", "--------", _("disabled"))?>
  </select>

:floor_day_of_the_month_plug:
> Choose a date when the monthly schedule is selected. Otherwise disabled.
:end

_(Time of the day)_:
: <span id="floor_hour1" style="display:none"><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option($myjob['hour'], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option($myjob['min'], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="floor_hour2" style="display:none"><select name="hour2">
  <?=mk_option($myjob['hour'], "*/1", _("Every hour"))?>
  <?=mk_option($myjob['hour'], "*/2", _("Every 2 hours"))?>
  <?=mk_option($myjob['hour'], "*/3", _("Every 3 hours"))?>
  <?=mk_option($myjob['hour'], "*/4", _("Every 4 hours"))?>
  <?=mk_option($myjob['hour'], "*/6", _("Every 6 hours"))?>
  <?=mk_option($myjob['hour'], "*/8", _("Every 8 hours"))?>
  </select></span>

:floor_time_of_the_day_plug:
> When an hourly schedule is selected this will set the interval in hours. An interval always starts on the whole hour (minute 0).
>
> For the other schedules choose here the time of the day share floor should start.
:end

_(Minimum floor setting)_:
: <input type="text" name="floor" maxlength="16" autocomplete="off" spellcheck="false" class="narrow" value="<?=presetSpace($myjob['floor'])?>">

&nbsp;
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()"><input type="button" value="_(Update Now)_" onclick="updateFloor(this)">
</form>

                )

            [FanSettings] => Array
                (
                    [Menu] => Utilities
                    [Title] => Fan Auto Control
                    [Icon] => dynamix.system.autofan.png
                    [file] => plugins/dynamix.system.autofan/FanSettings.page
                    [root] => plugins/dynamix.system.autofan
                    [name] => FanSettings
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Plugin development contribution by gfjardim
 *
 * Version log:
 * Version 1.6   Modified by InfinityMod - added multifan support
 */
?>
<?
$plugin = "dynamix.system.autofan";

function parse_autofan_cfg($plugin,$index) {
  global $docroot;
  $ram = "$docroot/plugins/$plugin/default.cfg";
  $rom = "/boot/config/plugins/$plugin/{$plugin}{$index}.cfg";
  $cfg = file_exists($ram) ? parse_ini_file($ram) : [];
  return file_exists($rom) ? array_replace_recursive($cfg, parse_ini_file($rom)) : $cfg;
}

$index  = $_POST['index']?:'';
$cfg    = parse_autofan_cfg($plugin,$index);
$sName  = "autofan";
$fName  = "$docroot/plugins/$plugin/scripts/$sName";
$width  = strstr('gray,azure',$display['theme']) ? 305:300;
$fan_id = 1;

function temp_val($val) {
  global $display;
  return $display['unit']=='C' ? $val : round(9/5*$val+32);
}
function scan_dir($dir) {
  $out = [];
  foreach (array_slice(scandir($dir),2) as $entry) {
    $sep = preg_match("/\/$/", $dir) ? "" : "/";
    $out[] = $dir.$sep.$entry;
  }
  return $out;
}
function list_pwm() {
  $out = [];
  exec("find /sys/devices -type f -iname 'pwm[0-9]' -exec dirname \"{}\" +|uniq", $chips);
  foreach ($chips as $chip) {
    $name = is_file("$chip/name") ? file_get_contents("$chip/name") : '';
    foreach (preg_grep("/pwm\d+$/", scan_dir($chip)) as $pwm) $out[] = ['chip'=>$name, 'name'=>end(explode('/',$pwm)), 'sensor'=>$pwm];
  }
  return $out;
}
function parity_disks($disk) {
  return $disk['type']=='Parity' && strpos($disk['status']??'','_NP')===false;
}
function data_disks($disk) {
  return $disk['type']=='Data' && strpos($disk['status']??'','_NP')===false;
}
function cache_disks($disk) {
  return $disk['type']=='Cache' && strpos($disk['status']??'','_NP')===false;
}
?>
<script>
function tempVal(form) {
<?if ($display['unit']=='F'):?>
  form.low.value = Math.round((form.low.value-32)*5/9);
  form.high.value = Math.round((form.high.value-32)*5/9);
<?endif;?>
  var exclude = [];
  for (var i=0,item; item=form.exclude.options[i]; i++) {
    if (item.selected) {
      exclude.push(item.value);
      item.selected = false;
    }
  }
  item = form.exclude.options[0];
  item.value = exclude.join(',');
  item.selected = true;
}
function detectFan() {
  var pwm = $('select[name=controller]').val();
  if (pwm) {
    $('input[name=fan]').val('_(Please wait)_...');
    $('#fan').prop('disabled',true);
    $.get('/plugins/<?=$plugin;?>/include/SystemFan.php',{op:'detect', pwm:pwm},function(data) {
      $('input[name=fan]').val(data).trigger('change');
      $('#fan').prop('disabled',false);
      if (data) {
        $('input[name=pwm]').prop('placeholder','_(Click DETECT)_');
        $('#pwm').prop('disabled',false);
      }
    });
  }
}
function detectFanLow() {
  var pwm = $('select[name=controller]').val();
  var fan = $('input[name=fan]').val();
  if (pwm && fan) {
    $('input[name=pwm]').val('_(Please wait)_...');
    $('#pwm').prop('disabled',true);
    $.get('/plugins/<?=$plugin;?>/include/SystemFan.php',{op:'pwm',pwm:pwm,fan:fan},function(data) {
      $('input[name=pwm]').val(data).prop('placeholder','').trigger('change');
      $('#pwm').prop('disabled',false);
    });
  }
}
function changePWM(index,value) {
  if (index > 0) index--;
  $('input[name=index]').val(index);
  $('input[name=controller]').val(value);
  document.updatepwm.submit();
}
$(function() {
  showStatus('<?=$sName?>');
  $('#s1').dropdownchecklist({emptyText:'_(None)_', width:<?=$width?>, explicitClose:'..._(close)_'});
  if (!$('select[name=controller]').val()) {
    $('input[name=fan]').val('').prop('placeholder','');
    $('input[name=pwm]').val('');
    $('input[name=low]').val('');
    $('input[name=high]').val('');
    $('input[name=interval]').val('');
    $('select[name=exclude]').val('');
    $('#fan').prop('disabled',true);
    $('#pwm').prop('disabled',true);
  }
});
</script>

<span class="bitstream" style="float:right;margin-right:12px"><?=exec("$fName -V")?></span>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="tempVal(this)">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin.$index?>.cfg">
<input type="hidden" name="#include" value="plugins/<?=$plugin?>/include/update.autofan.php">
<input type="hidden" name="#prefix" value="controller=c&fan=f&pwm=l&low=t&high=T&interval=m&exclude=e">

_(Fan control function)_:
: <select name="service">
  <?=mk_option($cfg['service']??'', "0", _("Disabled"))?>
  <?=mk_option($cfg['service']??'', "1", _("Enabled"))?>
  </select>

_(PWM controller)_:
: <select name="controller" onchange="changePWM(this.selectedIndex,this.value)">
  <?=mk_option($_POST['controller']??$cfg['controller']??'', "", _("None"))?>
  <?foreach (list_pwm() as $pwm):?>
  <?=mk_option($_POST['controller']??$cfg['controller']??'', $pwm['sensor'], "{$pwm['chip']} - {$pwm['name']}")?>
  <?endforeach;?>
  </select>

_(PWM fan)_:
: <input type="text" name="fan" value="<?=$cfg['fan']??''?>" placeholder="_(Click DETECT)_"><input type="button" id="fan" value="_(Detect)_" onclick="detectFan()" style="margin:0">

_(Minimum PWM value)_:
: <input type="text" name="pwm" value="<?=$cfg['pwm']??''?>" placeholder=""><input type="button" id="pwm" value="_(Detect)_" onclick="detectFanLow()" style="margin:0" <?=isset($cfg['fan'])?'':'disabled'?>>

_(Low temperature threshold)_ (&deg;<?=$display['unit']?>):
: <input type="number" name="low" min="0" max="200" value="<?=temp_val($cfg['low'])??''?>">

_(High temperature threshold)_ (&deg;<?=$display['unit']?>):
: <input type="number" name="high" min="0" max="200" value="<?=temp_val($cfg['high'])??''?>">

_(Refresh interval)_ (_(minutes)_):
: <input type="text" name="interval" value="<?=$cfg['interval']??''?>">

_(Exclude drives)_:
: <select id="s1" name="exclude" style="display:none" multiple>
  <?foreach (array_filter($disks,'parity_disks') as $disk):?>
  <?=mk_option_check($cfg['exclude']??'',$disk['device'],sprintf('%s (%s)',_(my_disk($disk['name']),3),$disk['device']))?>
  <?endforeach;?>
  <?foreach (array_filter($disks,'data_disks') as $disk):?>
  <?=mk_option_check($cfg['exclude']??'',$disk['device'],sprintf('%s (%s)',_(my_disk($disk['name']),3),$disk['device']))?>
  <?endforeach;?>
  <?foreach (array_filter($disks,'cache_disks') as $disk):?>
  <?=mk_option_check($cfg['exclude']??'',$disk['device'],sprintf('%s (%s)',_(my_disk($disk['name']),3),$disk['device']))?>
  <?endforeach;?>
  </select>

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">
</form>

<form name="updatepwm" method="POST" style="display:none">
<input type="hidden" name="index" value="">
<input type="hidden" name="controller" value="">
</form>

                )

            [SystemProfiler] => Array
                (
                    [Menu] => SystemInformation
                    [Title] => System Profiler
                    [Type] => xmenu
                    [Icon] => dynamix.system.info.png
                    [Tabs] => true
                    [file] => plugins/dynamix.system.info/SystemProfiler.page
                    [root] => plugins/dynamix.system.info
                    [name] => SystemProfiler
                    [text] => 
                )

            [Processor] => Array
                (
                    [Menu] => SystemProfiler:4
                    [Title] => Processor
                    [file] => plugins/dynamix.system.info/Processor.page
                    [root] => plugins/dynamix.system.info
                    [name] => Processor
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post('/plugins/<?=$plugin?>/include/Profiler.php',{cmd:'cpu'},function(data){$('#cpu').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="cpu"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [Overview] => Array
                (
                    [Menu] => SystemProfiler:1
                    [Title] => System Overview
                    [file] => plugins/dynamix.system.info/Overview.page
                    [root] => plugins/dynamix.system.info
                    [name] => Overview
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'overview',regTy:'<?=$var['regTy']?>',version:'<?=$var['version']?>',model:'<?=$var['SYS_MODEL']?>'},function(data){$('#overview').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="overview"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [Motherboard] => Array
                (
                    [Menu] => SystemProfiler:3
                    [Title] => Motherboard
                    [file] => plugins/dynamix.system.info/Motherboard.page
                    [root] => plugins/dynamix.system.info
                    [name] => Motherboard
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'mb'},function(data){$('#mb').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="mb"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [MemorySummary] => Array
                (
                    [Menu] => SystemProfiler:6
                    [Title] => Memory Summary
                    [file] => plugins/dynamix.system.info/MemorySummary.page
                    [root] => plugins/dynamix.system.info
                    [name] => MemorySummary
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'memory'},function(data){$('#memory').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="memory"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [MemoryDevices] => Array
                (
                    [Menu] => SystemProfiler:7
                    [Title] => Memory Devices
                    [file] => plugins/dynamix.system.info/MemoryDevices.page
                    [root] => plugins/dynamix.system.info
                    [name] => MemoryDevices
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'device'},function(data){$('#device').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="device"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [Ethernet] => Array
                (
                    [Menu] => SystemProfiler:8
                    [Title] => Ethernet
                    [file] => plugins/dynamix.system.info/Ethernet.page
                    [root] => plugins/dynamix.system.info
                    [name] => Ethernet
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'ethernet'},function(data){$('#ethernet').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="ethernet"></tbody>
</table>
<input type="button" value="_(Done)_" onclick="done()">

                )

            [CacheMemory] => Array
                (
                    [Menu] => SystemProfiler:5
                    [Title] => Cache Memory
                    [file] => plugins/dynamix.system.info/CacheMemory.page
                    [root] => plugins/dynamix.system.info
                    [name] => CacheMemory
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'cache'},function(data){$('#cache').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="cache"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [Bios] => Array
                (
                    [Menu] => SystemProfiler:2
                    [Title] => BIOS
                    [file] => plugins/dynamix.system.info/Bios.page
                    [root] => plugins/dynamix.system.info
                    [name] => Bios
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.info';
?>
<script>
$(function() {
  $.post("/plugins/<?=$plugin?>/include/Profiler.php",{cmd:'bios'},function(data){$('#bios').html(data);});
});
</script>
<table class='share_status small'>
<thead><td style="width:33%">_(Title)_</td><td>_(Information)_</td></thead>
<tbody id="bios"></tbody>
</table>
<?if ($tabbed):?>
<input type="button" value="_(Done)_" onclick="done()">
<?endif;?>

                )

            [SystemStats] => Array
                (
                    [Menu] => Stats:2
                    [Title] => System Stats
                    [Tag] => area-chart
                    [Cond] => (exec("awk -F= '/^show=/{print $2}' /boot/config/plugins/dynamix.system.stats/dynamix.system.stats.cfg 2>/dev/null")!='""')
                    [file] => plugins/dynamix.system.stats/SystemStats.page
                    [root] => plugins/dynamix.system.stats
                    [name] => SystemStats
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 * Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
if ($var['fsState']=="Stopped"):
  echo "<div class='notice'>"._('Array must be **Started** to view system stats').".</div>";
  return;
endif;

$cols++;
$tag  = $cols==1 ? 'graph2' : 'graph3';
$cpu  = strpos($show,'cpu')!==false;
$ram  = strpos($show,'ram')!==false;
$com  = strpos($show,'com')!==false;
$hdd  = strpos($show,'hdd')!==false;
$cell = 1;
$last = ' last';
$tag1 = $tag.((!$ram && !$com && !$hdd) ? $last : '');
if ($cpu) $cell++;
$tag2 = $tag.(((!$com && !$hdd) || ($cols>1 ? $cell%$cols==0 : false)) ? $last : '');
if ($ram) $cell++;
$tag3 = $tag.((!$hdd || ($cols>1 ? $cell%$cols==0 : false)) ? $last : '');
$tag4 = $tag.$last;

function selector() {
  global $graph, $frame;
  echo "<span class='status'>";
  echo "<span id='selector'><select onchange='modeller(this.value)'>";
  echo mk_option($graph, '0', _('Real-time'));
  echo mk_option($graph, '1', _('Last day'));
  echo mk_option($graph, '2', _('Last 2 days'));
  echo mk_option($graph, '3', _('Last 3 days'));
  echo mk_option($graph, '7', _('Last week'));
  echo mk_option($graph, '14', _('Last 2 weeks'));
  echo mk_option($graph, '21', _('Last 3 weeks'));
  echo mk_option($graph, '31', _('Last month'));
  echo mk_option($graph, '3653', _('Since start'));
  echo "</select></span>";
  echo "<span id='monitor'><select onchange='resizer(this.value)'>";
  echo mk_option($frame, '15', _('30 seconds'));
  echo mk_option($frame, '30', _('1 minute'));
  echo mk_option($frame, '60', _('2 minutes'));
  echo mk_option($frame, '150', _('5 minutes'));
  echo mk_option($frame, '300', _('10 minutes'));
  echo mk_option($frame, '900', _('30 minutes'));
  echo mk_option($frame, '1800', _('1 hour'));
  echo mk_option($frame, '3600', _('2 hours'));
  echo "</select><input type='button' value='"._('Reset')."' onclick='modeller(0)'></span>";
  echo "</span>";
}
?>
<script>
$('.tabs').append("<?=selector()?>");
<?if ($cfg['first']):?>
$.cookie('one','tab2',{path:'/'});
$(function(){
  $('span.status').show();
  systemStats();
});
<?else:?>
$('span.status').hide();
$.removeCookie('one',{path:'/'});
<?endif;?>
</script>
<?if ($cpu):?>
<span id='cpu' class='<?=$tag1?>'></span>
<?endif;?>
<?if ($ram):?>
<span id='ram' class='<?=$tag2?>'></span>
<?endif;?>
<?if ($com):?>
<span id='com' class='<?=$tag3?>'></span>
<?endif;?>
<?if ($hdd):?>
<span id='hdd' class='<?=$tag4?>'></span>
<?endif;?>
<?if (!empty($cfg['stats']) && substr($cfg['stats'],0,5)!='Tasks'):?>
<p><input type="button" value="_(Done)_" onclick="done()"></p>
<?endif;?>

                )

            [SystemDisks] => Array
                (
                    [Menu] => Stats:1
                    [Title] => Disk Stats
                    [Tag] => bar-chart
                    [file] => plugins/dynamix.system.stats/SystemDisks.page
                    [root] => plugins/dynamix.system.stats
                    [name] => SystemDisks
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 * Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
if ($var['fsState']=="Stopped"):
  echo "<div class='notice'>"._('Array must be **Started** to view disk stats').".</div>";
  return;
endif;

$plugin = 'dynamix.system.stats';
$cfg    = parse_plugin_cfg($plugin);
$stats  = "/plugins/$plugin/include/HardwareStats.php";
$graph  = $cfg['graph'];
$frame  = $cfg['frame'];
$port   = $cfg['port'];
$show   = $cfg['show'];
$text   = $cfg['text'];
$cols   = $cfg['cols'];
$pools  = $pools ?? ['cache'];
$offset = $text=='left' ? 6 : -6;
$index  = $text=='left' ? 2 : 0;
$parity = $arraysize = $arrayfree = 0;
$series = $sizes = [];
$gap    = 0.18;
$height = 52;
$y      = 2;
$rows   = 0;

foreach ($disks as $disk) {
  if ((($disk['fsStatus']??'')!='Mounted' && $disk['type']!='Parity') || strpos($disk['status']??'','_NP')!==false) continue;
  switch ($disk['type']) {
  case 'Parity':
    if ($disk['size']*1024 > $parity) $parity = $disk['size']*1024;
    break;
  case 'Data':
    $arraysize += $disk['size']*1024;
    $arrayfree += $disk['fsFree']*1024;
  case 'Flash':
    $series[] = "'"._(my_disk($disk['name']),3)."'";
    $sizes[] = "'".my_scale($disk['size']*1024,$unit,-1,-1)." $unit'";
    $rows++;
    break;
  case 'Cache':
    if (in_array($disk['name'],$pools)) {
      $series[] = "'".ucfirst($disk['name'])."'";
      $sizes[] = "'".my_scale($disk['fsSize']*1024,$unit,-1,-1)." $unit'";
      $rows++;
    }
    break;
  }
}

$arrayused = $arraysize-$arrayfree;
$totalpercent = 100-round(100*$parity/($arraysize+$parity));
$totaldisk = 100-$totalpercent-$gap;
$freepercent = $var['startMode']=='Normal' ? round(100*$arrayfree/$arraysize) : 100;
$arraypercent = 100-$freepercent;

if ($display['time']=="%R") {
  $hour = '%H:%M';
  $minute = '%H:%M';
  $second = '%H:%M:%S';
} else {
  $hour = '%l:%M %p';
  $minute = '%l:%M %p';
  $second = '%l:%M:%S %p';
}

$critical = $display['critical']>0;
$warning = $display['warning']>0 && ($display['critical']==0 || $display['warning']<$display['critical']);

function bar_color($val) {
  global $display;
  $critical = $display['critical'];
  $warning = $display['warning'];
  if ($val>=$critical && $critical>0) return "redbar";
  if ($val>=$warning && $warning>0) return "orangebar";
  return "greenbar";
}
?>
<link type="text/css" rel="stylesheet" href="<?=autov("/plugins/$plugin/styles/disk.stats.css")?>">
<script src="<?=autov("/plugins/$plugin/javascript/jquery.highcharts.js")?>"></script>
<script>
var graph = <?=$graph?>;
var frame = <?=$frame?>;
var syschart,cpuchart,ramchart,comchart,hddchart;
var interval = {1:60, 2:120, 3:300, 7:600, 14:1200, 21:1800, 31:3600, 3653:7200};

function autoscale(value,text,size,kilo) {
  if (kilo==null) kilo = 1000;
  var unit = kilo==1024 ? ['','ki','Mi','Gi','Ti','Pi','Ei'] : ['','k','M','G','T','P','E'];
  var base = value>1?Math.floor(Math.log(value)/Math.log(kilo)):0;
  var data = base<unit.length?value/Math.pow(kilo, base):0;
  var scale = (data<100?100:10)/size;
  if (data==0) base=0;
  return ((Math.round(scale*data)/scale)+' '+unit[base]+text).replace('.','<?=$display['number'][0]?>');
}
<?if ($show):?>
function setChart() {
  if (graph==0) {
    setTimeout(realtime,0);
    $('#reset').show(); $('#monitor').show();
  } else {
    $('#reset').hide(); $('#monitor').hide();
  }
}
function modeller(period) {
  graph = period;
  clearTimeout(timers.rtstime);
<?if (strpos($show,'cpu')!==false):?>
  clearTimeout(timers.cputime); setTimeout(cpu,0);
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
  clearTimeout(timers.ramtime); setTimeout(ram,0);
<?endif;?>
<?if (strpos($show,'com')!==false):?>
  clearTimeout(timers.comtime); setTimeout(com,0);
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
  clearTimeout(timers.hddtime); setTimeout(hdd,0);
<?endif;?>
  setChart();
}
function resizer(time) {
  var series, start;
  if (time<frame) {
<?if (strpos($show,'cpu')!==false):?>
    for (var i=0; i<3; i++) {
      series = cpuchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      cpuchart.redraw();
    }
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    for (var i=0; i<3; i++) {
      series = ramchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      ramchart.redraw();
    }
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    for (var i=0; i<2; i++) {
      series = comchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      comchart.redraw();
    }
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    for (var i=0; i<2; i++) {
      series = hddchart.series[i].data;
      start = series.length-time;
      while (start-- > 0) series[0].remove(false);
      hddchart.redraw();
    }
<?endif;?>
  }
  frame = time;
}
function realtime() {
  var datetime = new Date();
  var timestamp = datetime.getTime();
  $.post('<?=$stats?>',{cmd:'rts',port:'<?=$port?>'},function(string) {
    var value, shift, i;
    if (graph==0) timers.rtstime = setTimeout(realtime,1000);
    value = string.split(' ');
<?if (strpos($show,'cpu')!==false):?>
    shift = cpuchart.series[0].length==0 || cpuchart.series[0].data.length>frame;
    for (i=0; i<3; i++) cpuchart.series[i].addPoint([timestamp, (value[i+0]*1)], false, shift);
    cpuchart.redraw();
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    shift = ramchart.series[0].length==0 || ramchart.series[0].data.length>frame;
    for (i=0; i<3; i++) ramchart.series[i].addPoint([timestamp, (value[i+5]*1)], false, shift);
    ramchart.redraw();
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    shift = comchart.series[0].length==0 || comchart.series[0].data.length>frame;
    for (i=0; i<2; i++) comchart.series[i].addPoint([timestamp, (value[i+8]*1)], false, shift);
    comchart.redraw();
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    shift = hddchart.series[0].length==0 || hddchart.series[0].data.length>frame;
    for (i=0; i<2; i++) hddchart.series[i].addPoint([timestamp, (value[i+3]*1)], false, shift);
    hddchart.redraw();
<?endif;?>
  });
}
<?endif;?>
function systemStats() {
  clearTimeout(timers.systime);
  if (graph>0) {
<?if (strpos($show,'cpu')!==false):?>
    setTimeout(cpu,0);
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    setTimeout(ram,0);
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    setTimeout(com,0);
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    setTimeout(hdd,0);
<?endif;?>
  }
}
function diskStats() {
  setTimeout(function(){sys(0);},0);
  if (graph>0) {
<?if (strpos($show,'cpu')!==false):?>
    clearTimeout(timers.cputime);
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
    clearTimeout(timers.ramtime);
<?endif;?>
<?if (strpos($show,'com')!==false):?>
    clearTimeout(timers.comtime);
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
    clearTimeout(timers.hddtime);
<?endif;?>
  }
}
function sys(delay) {
  var series = [], i = 0;
  if (delay!=0) delay = 1200;
  $.post('<?=$stats?>',{cmd:'sys',startMode:'<?=$var["startMode"]?>',pools:'<?=implode(",",$pools)?>'},function(string) {
    if ($('#tab1').is(':checked')) timers.systime = setTimeout(function(){sys(0);},30000);
    if (!syschart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; syschart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; syschart.series[i++].setData(series.data, false);});
    }
    syschart.redraw();
<?if ($text=='left'):?>
    $.each(syschart.series[2].data, function(k,v) {setTimeout(function() {v.dataLabel.css({opacity:1});}, delay);});
<?else:?>
    $.each(syschart.series[0].data, function(k,v) {setTimeout(function() {v.dataLabel.css({opacity:1});}, delay); if (v.total<4) v.dataLabel.attr({x:6});});
<?endif;?>
  });
  $.post('<?=$stats?>',{cmd:'sum',startMode:'<?=$var['startMode']?>',plugin:'<?=$plugin?>'},function(string) {
    var data = string.split(';');
    $('#totalarray').attr('class',data[0]).css('width',data[1]);
    $('#stats1').attr('class',data[2]);
    $('#stats2').html(data[3]);
    $('#stats3').html(data[4]);
  });
}
<?if (strpos($show,'cpu')!==false):?>
function cpu() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'cpu',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.cputime = setTimeout(cpu,interval[graph]*1000);
    if (!cpuchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; cpuchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; cpuchart.series[i++].setData(series.data, false);});
    }
    cpuchart.redraw();
  });
}
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
function ram() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'ram',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.ramtime = setTimeout(ram,interval[graph]*1000);
    if (!ramchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; ramchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; ramchart.series[i++].setData(series.data, false);});
    }
    ramchart.redraw();
  });
}
<?endif;?>
<?if (strpos($show,'com')!==false):?>
function com() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'com',port:'<?=$port?>',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.comtime = setTimeout(com,interval[graph]*1000);
    if (!comchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; comchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; comchart.series[i++].setData(series.data, false);});
    }
    comchart.redraw();
  });
}
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
function hdd() {
  var series = [], i = 0;
  $.post('<?=$stats?>',{cmd:'hdd',graph:graph},function(string) {
    if (graph>0 && $('#tab2').is(':checked')) timers.hddtime = setTimeout(hdd,interval[graph]*1000);
    if (!hddchart.series.length) {
      $.each($.parseJSON(string), function(k,v) {series.name = k; series.data = v; hddchart.addSeries(series, false);});
    } else {
      $.each($.parseJSON(string), function(k,v) {series.data = v; hddchart.series[i++].setData(series.data, false);});
    }
    hddchart.redraw();
  });
}
<?endif;?>
function scrollBarWidth() {
  $('body').append('<div id="fakescrollbar" style="width:50px;height:50px;overflow:hidden;position:absolute;top:-200px;left:-200px;"></div>');
  var fakeScrollBar = $('#fakescrollbar');
  fakeScrollBar.append('<div style="height:100px;">&nbsp;</div>');
  var w1 = fakeScrollBar.find('div').innerWidth();
  fakeScrollBar.css('overflow-y','scroll');
  var w2 = $('#fakescrollbar').find('div').html('required to init new width.').innerWidth();
  fakeScrollBar.remove();
  return (w1-w2+1);
}
function getWidth(full) {
  var width = $('.tabs').width()-scrollBarWidth();
  return full ? width : (width-<?=6*$cols?>)/<?=($cols+1)?>;
}
$(function() {
  $(window).resize(function(){location=location});
<?if ($show):?>
  $('#tab1').bind({click:function(){$('span.status').hide();diskStats();}});
  $('#tab2').bind({click:function(){$('span.status').show();systemStats();}});
  setChart();
<?endif;?>
  $('#totalarray').animate({width:'<?=$arraypercent?>%'}, 1500);
  Highcharts.setOptions({
    global:{useUTC:false},
    chart:{
      style:{fontFamily:'clear-sans',fontSize:'1.1rem'},
      backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'rgb(96,96,96)'],[1,'rgb(16,16,16)']]},
      borderWidth:0,
      borderRadius:8,
      plotBackgroundColor:null,
      plotBorderWidth:0,
      plotShadow:false,
      type:'area',
      margin:[55,<?=$cfg['size']?'70':'20'?>,35,70],
      spacingTop:15,
      spacingRight:0,
      spacingBottom:0,
      spacingLeft:0,
      height:260,
      width:getWidth(false),
      animation:false,
      zoomType:'x'
    },
    title:{style:{color:'#fff',fontSize:'1.8rem'},y:10},
    subtitle:{style:{color:'#aaa',fontSize:'1.4rem'},y:30},
    plotOptions:{
      area:{marker:{enabled:false},lineWidth:1,states:{hover:{lineWidth:1}},shadow:false,turboThreshold:1},
      bar:{borderWidth:0,borderRadius:2,states:{hover:{enabled:false}},shadow:false,turboThreshold:1},
      series:{animation:false}
    },
    xAxis:{
      type:'datetime',
      dateTimeLabelFormats:{second:'<?=$second?>',minute:'<?=$minute?>',hour:'<?=$hour?>'},
      gridLineWidth:0,
      lineColor:'#999',
      tickColor:'#999',
      labels:{style:{color:'#999',fontSize:'1rem'},y:20}
    },
    yAxis:{
      title:{text:null},
      gridLineColor:'rgba(255,255,255,.1)',
      lineWidth:0,
      tickWidth:0,
      labels:{style:{color:'#999',fontSize:'1rem'},y:2},
      min:0
    },
    tooltip:{
      backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'rgba(96,96,96,.8)'],[1,'rgba(16,16,16,.8)']]},
      borderWidth:0,
      shared:true,
      style:{color:'#fff',fontSize:'1rem'},
      positioner:function() {return {x:70,y:5};}
    },
    legend:{
      borderWidth:0,
      align:'right',
      verticalAlign:'top',
      layout:'vertical',
      x:-22,
      y:-4,
      floating:true,
      itemStyle:{color:'#ccc',fontSize:'9px'},
      itemMarginBottom:2,
      itemHoverStyle:{color:'yellow'},
      itemHiddenStyle:{color:'#999'}
    },
    exporting:{enabled:false},
    credits:{enabled:false}
  });
  syschart = new Highcharts.Chart({
    chart:{renderTo:'sys',events:{load:sys},type:'bar',height:<?=$rows*$height?>,width:getWidth(true),zoomType:null},
    colors:[{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#941C00'],[1,'#DE1100']]},{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#CE7C10'],[1,'#F0B400']]},{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#17BF0B'],[1,'#127A05']]},{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#D9D9D9'],[1,'#949494']]}],
    plotOptions:{series:{stacking:'normal',animation:{duration:1000},pointPadding:0.2,groupPadding:0,
    dataLabels:{enabled:true,color:'#fff',align:'<?=$text?>',verticalAlign:'top',x:<?=$offset?>,y:<?=$y?>,style:{opacity:0},formatter:function(){if (this.series.index==<?=$index?>) return this.total+' %';}}}},
    title:{text:_('Disk Usage')},
    subtitle:{text:_('utilization in percentage')},
<?if ($cfg['size']):?>
    xAxis:[{alternateGridColor:'rgba(255,255,255,.018)',type:'linear',labels:{style:{fontSize:'1.2rem'},y:5},lineWidth:0,tickWidth:0,categories:[<?=implode(',',$series)?>]},
    {opposite:true,linkedTo:0,type:'linear',labels:{style:{fontSize:'1.2rem'},y:5},lineWidth:0,tickWidth:0,categories:[<?=implode(',',$sizes)?>]}],
<?else:?>
    xAxis:{alternateGridColor:'rgba(255,255,255,.018)',type:'linear',labels:{style:{fontSize:'1.2rem'},y:5},lineWidth:0,tickWidth:0,categories:[<?=implode(',',$series)?>]},
<?endif;?>
    yAxis:{gridLineDashStyle:'dash',labels:{y:15},max:100,plotLines:[
<?if ($warning):?>
      {label:{text:'<?=$display['warning']?>',style:{color:'#ff6600',fontSize:'1rem'},verticalAlign:'top',textAlign:'right',y:-4,x:-4},dashStyle:'dash',color:'#ff6600',width:0.8,value:<?=$display['warning']?>,zIndex:5},
<?endif;?>
<?if ($critical):?>
      {label:{text:'<?=$display['critical']?>',style:{color:'#ff6600',fontSize:'1rem'},verticalAlign:'top',textAlign:'right',y:-4,x:-4},dashStyle:'dash',color:'#ff6600',width:0.8,value:<?=$display['critical']?>,zIndex:5}
<?endif;?>
    ]},
    legend:{enabled:false},
    tooltip:{enabled:false}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/sys.png',18,8,32,32).add();
  });
<?if (strpos($show,'cpu')!==false):?>
  cpuchart = new Highcharts.Chart({
    chart:{renderTo:'cpu',events:{load:cpu}},
    colors:['#BDE5F8','#E68A00','#EDC240'],
    plotOptions:{area:{stacking:'normal'}},
    title:{text:_('Processor')},
    subtitle:{text:_('CPU Load')},
    yAxis:{<?=$cfg['cpu']==100?'max:100,':''?>labels:{formatter:function(){return this.value+' %';}}},
    legend:{y:-11},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y,'%',10)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/cpu.png',18,8,32,32).add();
  });
<?endif;?>
<?if (strpos($show,'ram')!==false):?>
  ramchart = new Highcharts.Chart({
    chart:{renderTo:'ram',events:{load:ram}},
    colors:['#4DA74D','#E68A00','#EDC240'],
    plotOptions:{area:{stacking:'normal'}},
    title:{text:_('Memory')},
    subtitle:{text:_('RAM')},
    yAxis:{labels:{formatter:function(){return autoscale(this.value*1024,'B',100,1024);}}},
    legend:{y:-11},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y*1024,'B',1,1024)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/ram.png',18,8,32,32).add();
  });
<?endif;?>
<?if (strpos($show,'com')!==false):?>
  comchart = new Highcharts.Chart({
    chart:{renderTo:'com',events:{load:com}},
    colors:['#E68A00','#EDC240'],
    title:{text:_('Network')},
    subtitle:{text:'<?=$cfg['port']?>'},
    yAxis:{labels:{formatter:function(){return autoscale(this.value*<?=$cfg["unit"]=='b'?8000:1000?>,'<?=$cfg["unit"]?>/s',10);}}},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y*<?=$cfg["unit"]=='b'?8000:1000?>,'<?=$cfg["unit"]?>/s',1)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/com.png',18,8,32,32).add();
  });
<?endif;?>
<?if (strpos($show,'hdd')!==false):?>
  hddchart = new Highcharts.Chart({
    chart:{renderTo:'hdd',events:{load:hdd}},
    colors:['#E68A00','#EDC240'],
    title:{text:_('Storage')},
    subtitle:{text:'<?=exec("ls /dev/[hs]d[a-z]|wc -l")?> _(disks)_'},
    yAxis:{labels:{formatter:function(){return autoscale(this.value*500,'B/s',10);}}},
    tooltip:{formatter:function(){
     var s='<span style="color:#ccc;font-size:9px;">'+Highcharts.dateFormat('%A, %b %e, %H:%M',this.x)+'</span>';
     $.each(this.points,function(i,point){s+='<br><span style="color:'+point.series.color+'">'+point.series.name+':</span>'+autoscale(point.y*500,'B/s',1)});
     return s;
    }}
  },function(chart){
    chart.renderer.image('<?="/plugins/$plugin/images"?>/hdd.png',18,8,32,32).add();
  });
<?endif;?>
});
</script>
<div class="mybar whitebar leftbar" style="width:<?=$totalpercent?>%;"><span id="totalarray" class="mybar <?=bar_color($arraypercent)?> align-left" style="width:0"></span></div>
<div class="mybar graybar rightbar" style="width:<?=$totaldisk?>%"></div>
<div class="leftbar"><img src="<?="/plugins/$plugin/images"?>/array.png" class="left"><strong><?=my_scale($arraysize,$unit,-1,-1)." $unit"?></strong><br><small>_(Total Array Size)_</small></div>
<div class="leftbar"><span id="stats1" class="mybar <?=bar_color($arraypercent)?> inside"></span><span id="stats2"><strong> <?=my_scale($arrayused,$unit,null,-1)." $unit"?> <img src="<?="/plugins/$plugin/images"?>/arrow.png" class="top"> <?=$arraypercent?>%</strong><br/><small>_(Total Space Used)_</small></span></div>
<div class="leftbar"><span class="mybar whitebar inside"></span><span id="stats3"><strong><?=my_scale($arrayfree,$unit,null,-1)." $unit"?> <img src="<?="/plugins/$plugin/images"?>/arrow.png" class="top"> <?=$freepercent?>%</strong><br/><small>_(Available for Data)_</small></span></div>
<div class="rightbar"><span class="mybar graybar inside"></span><strong> <?=my_scale($parity,$unit,-1,-1)." $unit"?></strong><br><small>_(Used for Parity)_</small></div>
<?if ($critical):?>
<div class="rightbar"><span class="mybar redbar inside"></span><strong>_(Above)_ <?=$display['critical']?>%</strong><br><small>_(Low on Space)_</small></div>
<?endif;?>
<?if ($warning):?>
<div class="rightbar"><span class="mybar orangebar inside"></span><strong>_(Above)_ <?=$display['warning']?>%</strong><br><small>_(High on Usage)_</small></div>
<?endif;?>
<?if ($critical || $warning):?>
<div class="rightbar"><span class="mybar greenbar inside"></span><strong>_(Below)_ <?=$warning?$display['warning']:$display['critical']?>%</strong><br><small>_(Normal Usage)_</small></div>
<?endif;?>
<span id="sys" class="graph1"></span>
<?if (!empty($cfg['stats']) && substr($cfg['stats'],0,5)!='Tasks'):?>
<p><input type="button" value="_(Done)_" onclick="done()"></p>
<?endif;?>

                )

            [Stats] => Array
                (
                    [Menu] => /boot/config/plugins/dynamix.system.stats/dynamix.system.stats.cfg stats=Tasks:90
                    [Type] => xmenu
                    [Title] => System Stats
                    [Code] => f1fe
                    [Tabs] => true
                    [file] => plugins/dynamix.system.stats/Stats.page
                    [root] => plugins/dynamix.system.stats
                    [name] => Stats
                    [text] => 
                )

            [StatSettings] => Array
                (
                    [Menu] => Utilities
                    [Title] => Stats Settings
                    [Icon] => area-chart
                    [Tag] => pie-chart
                    [file] => plugins/dynamix.system.stats/StatSettings.page
                    [root] => plugins/dynamix.system.stats
                    [name] => StatSettings
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 * Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.system.stats';
$cfg = parse_plugin_cfg($plugin);
extract(parse_ini_file('/etc/unraid-version'));

unset($sPorts);
exec("ifconfig -s|awk '/^(bond|eth)/{print $1}'",$sPorts);
?>
<script>
function prepareStats(form) {
  var show = '';
  for (var i=1,item; item=form.show.options[i]; i++) {
    if (item.selected) {
      if (show.length) show += ',';
      show += item.value;
      item.selected = false;
    }
  }
  item = form.show.options[0];
  item.value = show;
  item.selected = true;
}
$(function(){
  $('#s1').dropdownchecklist({emptyText:'None', width:166, firstItemChecksAll: true, explicitClose:'..._(close)_'});
});
</script>

<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareStats(this)">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg">
_(Placement of Stats menu)_:
: <select name="stats">
  <?=mk_option($cfg['stats'], "Tasks:90", _("Header menu"))?>
  <?=mk_option($cfg['stats'], "SystemInformation", _("Tools menu"))?>
  </select>

_(Opening page)_:
: <select name="first">
  <?=mk_option($cfg['first'], "0", _("Disk Stats"))?>
  <?=mk_option($cfg['first'], "1", _("System Stats"))?>
  </select>

_(Position of disk utilization percentage)_:
: <select name="text">
  <?=mk_option($cfg['text'], "left", _("Left"))?>
  <?=mk_option($cfg['text'], "right", _("Right"))?>
  </select>

:stats_utilization_plug:
> The disk utilization percentage number can be positioned either at the start (left) or at the end (right) of the bar.
>
> Left will align all numbers, while right lets the number float depending on its value.
:end

_(Viewable system graphs)_:
: <select id="s1" name="show" multiple style="display:none">
  <option value=''>(_(All)_)</option>
  <?=mk_option_check($cfg['show'], "cpu", _("Processor"))?>
  <?=mk_option_check($cfg['show'], "ram", _("Memory"))?>
  <?=mk_option_check($cfg['show'], "com", _("Network"))?>
  <?=mk_option_check($cfg['show'], "hdd", _("Storage"))?>
  </select>

:stats_graphs_plug:
> Select which system information needs to be displayed. Internally all information is always gathered and stored.
>
> This setting only affects what is being displayed.
:end

_(CPU graph scaling)_:
: <select name="cpu">
  <?=mk_option($cfg['cpu'], "0", _("Automatic"))?>
  <?=mk_option($cfg['cpu'], "100", _("Fixed"))?>
  </select>

:stats_scaling_plug:
> Select the CPU graph scaling to be automatic or fixed at 100%.
:end

_(System graphs view per row)_:
: <select name="cols">
  <?=mk_option($cfg['cols'], "0", _("Single"))?>
  <?=mk_option($cfg['cols'], "1", _("Pair"))?>
  <?=mk_option($cfg['cols'], "2", _("Three"))?>
  <?=mk_option($cfg['cols'], "3", _("Four"))?>
  </select>

:stats_view_plug:
> Select how many graphs will be displayed in a single row. The width is automatically adjusted to the number of graphs and the screen resolution.
>
> Graph samples are internally done with a one minute interval, this setting does not change the resolution, just the width of a graph.
:end

_(Show disk size)_:
: <select name="size">
  <?=mk_option($cfg['size'], "0", _("No"))?>
  <?=mk_option($cfg['size'], "1", _("Yes"))?>
  </select>

:stats_disk_size_plug:
> Show the size of each disk at the right side of the disk usage graph. Size is always displayed using the highest possible unit.
:end

_(Ethernet interface)_:
: <select name="port">
  <?foreach ($sPorts as $port):?>
  <?=mk_option_check($cfg['port'], $port, $port)?>
  <?endforeach;?>
  </select>

:stats_ethernet_plug:
> When more than one interface is present then select the interface to be displayed. Internally statistics of all available interfaces is kept.
:end

_(Network graph display unit)_:
: <select name="unit">
  <?=mk_option($cfg['unit'], "b", _("Bits per second"))?>
  <?=mk_option($cfg['unit'], "B", _("Bytes per second"))?>
  </select>

:stats_unit_plug:
> Select how interface (network) speeds are displayed, common is bits per second.
:end

_(Initial graphing mode)_:
: <select name="graph">
  <?=mk_option($cfg['graph'], "0", _("Real-time"))?>
  <?=mk_option($cfg['graph'], "1", _("Last day"))?>
  <?=mk_option($cfg['graph'], "2", _("Last 2 days"))?>
  <?=mk_option($cfg['graph'], "3", _("Last 3 days"))?>
  <?=mk_option($cfg['graph'], "7", _("Last week"))?>
  <?=mk_option($cfg['graph'], "14", _("Last 2 weeks"))?>
  <?=mk_option($cfg['graph'], "21", _("Last 3 weeks"))?>
  <?=mk_option($cfg['graph'], "31", _("Last month"))?>
  <?=mk_option($cfg['graph'], "3653", _("Since start"))?>
  </select>

:stats_initial_plug:
> The system graphs can be viewd over different periods, select here the intial period. On the system stats page itself this can be changed to any of the other choices.
>
> Internally information is kept with a monthly rotating mechanism. Each day is stored in a separate file.
:end

_(Initial real-time sliding window)_:
: <select name="frame">
  <?=mk_option($cfg['frame'], "15", _("30 seconds"))?>
  <?=mk_option($cfg['frame'], "30", _("1 minute"))?>
  <?=mk_option($cfg['frame'], "60", _("2 minutes"))?>
  <?=mk_option($cfg['frame'], "150", _("5 minutes"))?>
  <?=mk_option($cfg['frame'], "300", _("10 minutes"))?>
  <?=mk_option($cfg['frame'], "900", _("30 minutes"))?>
  <?=mk_option($cfg['frame'], "1800", _("1 hour"))?>
  <?=mk_option($cfg['frame'], "3600", _("2 hours"))?>
  </select>

:stats_realtime_plug:
> Real-time graphing is done in a sliding window fashion. E.g. 5 minutes are first filled and next start to slide with each new sample added at the end.
>
> This setting sets the initial duration of the sliding window, it can be changed on the system stats page itself.
:end

<input type="submit" name="#default" value="_(Default)_">
: <input type="submit" name="#apply" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [TempSettings] => Array
                (
                    [Menu] => Utilities
                    [Title] => System Temp
                    [Icon] => thermometer
                    [Tag] => thermometer
                    [file] => plugins/dynamix.system.temp/TempSettings.page
                    [root] => plugins/dynamix.system.temp
                    [name] => TempSettings
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Plugin development contribution by gfjardim
 */
?>
<?
$plugin = 'dynamix.system.temp';
$sensors_file  = "/boot/config/plugins/dynamix.system.temp/sensors.conf";
$drivers_file  = "/boot/config/plugins/dynamix.system.temp/drivers.conf";
$settings_file = "/etc/sensors.d/sensors.conf";

$unit  = $display['unit'];
$dot   = $display['number'][0];
$perl  = exec("which perl 2>/dev/null");
$width = strstr('gray,azure',$display['theme']) ? 305:300;

function get_sensors() {
  global $settings_file;
  $out = [];
  $tmp = '/tmp/sensors.conf';
  exec("grep -v 'ignore' $settings_file > $tmp");
  preg_match_all("/(.*?)\nAdapter:.*?\n(.*?)(?:[\n]{2,})/smi", shell_exec("sensors -u -c $tmp"), $controllers);
  foreach ($controllers[1] as $key => $controller) {
    preg_match_all("/(.*):\n\s+([^:]*): (.*)/", $controllers[2][$key], $matches);
    for ($i=0; $i<count($matches[1]); $i++) $out[] = ['ctrl' => $controller, 'name' => $matches[1][$i], 'attr' => $matches[2][$i], 'val'  => $matches[3][$i]];
  }
  unlink($tmp);
  return $out;
}
function get_modules() {
  global $drivers_file;
  return file_exists($drivers_file) ? file($drivers_file) : [];
}
function save_modules($modules) {
  global $drivers_file;
  if ($modules) file_put_contents($drivers_file, preg_replace("/\s|,/", "\n", $modules)); else @unlink($drivers_file);
}
function is_module_loaded($module) {
  return exec("lsmod|grep -cm1 '^$module'")>0;
}
function load_module($module) {
  if (!is_module_loaded($module)) exec("modprobe $module");
}
function unload_module($module) {
  if (is_module_loaded($module)) exec("modprobe -r $module");
}
switch ($_POST['tag']??'') {
case 'sensors':
  if ($_POST['rescan']) break;
  $content = "# sensors\n";
  $buslist = $retval = null;
  exec("sensors --bus-list", $buslist, $retval);
  if ($retval===0) $content .= implode("\n",$buslist)."\n";
  $probes = "";
  foreach ($_POST as $key => $value) {
    switch ($key) {
    case 'mb_temp':
    case 'cpu_temp':
      [$chip, $input, $label] = explode("|", $value = preg_match("/.*?\|.*?\|.*?/",$value) ? $value : "||");
      $content .= strlen($chip) ? sprintf("chip \"%s\"\nlabel \"%s\" \"%s\"\n", $chip, $input, $label) : "";
      break;
    case 'array_fan':
      foreach (explode(',',$value) as $fan) {
        [$chip, $input, $label] = explode("|", $fan = preg_match("/.*?\|.*?\|.*?/",$fan) ? $fan : "||");
        $content .= strlen($chip) ? sprintf("chip \"%s\"\nlabel \"%s\" \"%s\"\n", $chip, $input, $label) : "";
      }
      break;
    case 'temp_ignore':
    case 'fan_ignore':
      foreach (explode('#', $value) as $ignore) {
        if (!$ignore) continue;
        [$chip, $input] = explode("|", $ignore);
        $content .= sprintf("chip \"%s\"\nignore \"%s\"\n", $chip, $input);
      }
      break;
    }
  }
  file_put_contents($sensors_file, $content);
  copy($sensors_file, $settings_file);
  break;
case 'modules':
  foreach ($_POST as $key => $value) {
    switch ($key) {
    case 'save':
      save_modules($_POST['drivers']);
      break;
    case 'load':
      foreach (get_modules() as $module) load_module($module);
      break;
    case 'unload':
      foreach (get_modules() as $module) unload_module($module);
      break;
    }
  }
  break;
}

$sensors = get_sensors();
if (empty($all_modules)) $all_modules = implode(" ",get_modules());
$disabled = file_exists($drivers_file) ? "" : "disabled";

$mb_options  = "<option>_(Not used)_</option>";
$cpu_options = "<option>_(Not used)_</option>";
$fan_options = "";
$temp_ignore = "";
$fan_ignore  = "";

foreach ($sensors as $value) {
  if (preg_match("/temp\d+_input/", $value['attr'])) {
    preg_match("/(\d+\.\d)/", $value['val'], $temp);
    $input = explode("_", $value['attr'])[0];
    $temp= $temp[1];
    if ($temp==0) {
      if ($temp_ignore) $temp_ignore .= '#';
      $temp_ignore .= "{$value['ctrl']}|$input";
    } else {
      $temp = str_replace('.',$dot,$unit=='C' ? $temp : round(9/5*$temp+32));
      $chip = explode("-", $value['ctrl'])[0];
      $mb_options .= mk_option(1,sprintf('%s|%s|MB Temp',$value['ctrl'],$input),sprintf('%s - %s - %s &deg;%s', $chip,$value['name'],$temp,$unit),$value['name']=='MB Temp'?'selected':'');
      $cpu_options .= mk_option(1,sprintf('%s|%s|CPU Temp',$value['ctrl'],$input),sprintf('%s - %s - %s &deg;%s', $chip,$value['name'],$temp,$unit),$value['name']=='CPU Temp'?'selected':'');
    }
  } else if (preg_match("/fan\d+_input/", $value['attr'])) {
    preg_match("/(\d+)/", $value['val'], $rpm);
    $input = explode("_", $value['attr'])[0];
    $rpm = $rpm[1];
    if ($rpm==0) {
      if ($fan_ignore) $fan_ignore .= '#';
      $fan_ignore .= "{$value['ctrl']}|$input";
    } else {
      $chip = explode("-", $value['ctrl'])[0];
      $fan_options .= mk_option(1,sprintf('%s|%s|Array Fan',$value['ctrl'],$input),sprintf('%s - %s - %s RPM',$chip,$value['name'],$rpm),$value['name']=='Array Fan'?'selected':'');
    }
  }
}
?>
<style>
select.align{min-width:300px;max-width:300}
select.hide{display:none}
</style>
<script>
function arrayFan(form) {
  var array_fan = [];
  for (var i=0,item; item=form.array_fan.options[i]; i++) {
    if (item.selected) {
      array_fan.push(item.value);
      item.selected = false;
    }
  }
  item = form.array_fan.options[0];
  item.value = array_fan.join(',');
  item.selected = true;
}
function detectModules() {
  $('div.spinner').show();
  $.get('/plugins/<?=$plugin?>/include/DetectModules.php',function(data){
    $('div.spinner').hide();
    $('input[name="drivers"]').val(data).prop('placeholder',data ? '_(Click DETECT)_' : '_(No drivers detected)_');
    $('input[name="save"]').prop('disabled',data=='');
  });
}
$(function() {
  $('#s1').dropdownchecklist({emptyText:'_(None)_', width:<?=$width?>, explicitClose:'..._(close)_'});
  $('input[name="save"]').prop('disabled',$('input[name="drivers"]').val()=='');
<?if (!$perl):?>
  $('input#detect').prop('disabled',true);
<?endif;?>
});
</script>

<div class='spinner' style='display:none'></div>

<form markdown="1" method="POST">
<input type="hidden" name="tag" value="modules">
_(Available drivers)_:
: <input type="text" name="drivers" value="<?=$all_modules?>" placeholder="_(Click DETECT)_">

:temp_drivers_plug:
> Use 'detect' to search for available drivers using the 'sensors-detect' script. After detection proceed with saving the list.<br>
> Use 'save' to store the drivers list to disk, the drivers field may be edited before saving (e.g. add a non-specified driver). Saving is mandatory.<br>
> Use 'load drivers / unload drivers' to manually load or unload the available driver modules.
:end

&nbsp;
<?$loaded = true; foreach (get_modules() as $module) $loaded &= is_module_loaded($module)?>
: <input type="button" id="detect" value="_(Detect)_" onclick="detectModules()"><input type="submit" name="save" value="_(Save)_">
  <?echo ($loaded) ? "<input type='submit' name='unload' id='btn1' value='"._('Unload drivers')."' $disabled>" : "<input type='submit' name='load' id='btn1' value='"._('Load drivers')."' $disabled>"?>
  <?if (!$perl):?><span class="orange-text">_(**Perl** must be installed to do automated driver detection)_</span><?endif;?>
</form>

<div id="title"><span class="left"><i class="fa fa-compass icon"></i>_(Sensors)_</span></div>

<form markdown="1" method="POST" onsubmit="arrayFan(this)">
<input type="hidden" name="tag" value="sensors">
<input type="hidden" name="temp_ignore" value="<?=$temp_ignore?>">
<input type="hidden" name="fan_ignore" value="<?=$fan_ignore?>">
_(Processor temperature)_:
: <select name="cpu_temp" <?=$disabled?> class="align">
  <?=$cpu_options?>
  </select>

:temp_processor_plug:
> Select one of the available probes as the processor temperature indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

_(Mainboard temperature)_:
: <select name="mb_temp" <?=$disabled?> class="align">
  <?=$mb_options?>
  </select>

:temp_mainboard_plug:
> Select one of the available probes as the mainboard temperature indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

_(Array fan speed)_:
: <select id="s1" name="array_fan" class="hide" multiple>
  <?=$fan_options?>
  </select>

:temp_fan_plug:
> Select one of the available probes as the array fan speed indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

&nbsp;
: <input type="submit" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()"><?if (!$disabled):?><input type="submit" name="rescan" value="_(Rescan)_"><?endif;?>

:temp_rescan_plug:
> 'Rescan' refreshes the selection list and can be used when new probes are available, e.g. a new fan probe has been installed.
:end

</form>

                )

            [TempButton] => Array
                (
                    [Menu] => Buttons:1
                    [Link] => nav-user
                    [Nchan] => system_temp
                    [file] => plugins/dynamix.system.temp/TempButton.page
                    [root] => plugins/dynamix.system.temp
                    [name] => TempButton
                    [text] => <?PHP
/* Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Plugin development contribution by gfjardim
 */
?>
<?
$plugin = 'dynamix.system.temp';
?>
<script>
<?if (exec("pgrep system_temp")):?>
// nchan updates
var temperature = new NchanSubscriber('/sub/temperature');
temperature.on('message', function(data) {
  showFooter(data,'temp');
  if ($('#mb-temp').length) {
    var temp = $('span#temp').text();
    var unit = temp.indexOf('C')>0 ? 'C' : 'F';
    temp = temp.split(unit);
    if (temp[0] && $('#cpu-temp').length>0) $('#cpu-temp').html("<i class='ups fa fa-thermometer'></i>_(Temperature)_: "+temp[0]+unit);
    if (temp[1] && $('#mb-temp').length>0) $('#mb-temp').html("<i class='ups fa fa-thermometer'></i>_(Temperature)_: "+temp[1]+unit);
  }
});
temperature.start();
<?else:?>
// legacy updates
function systemTemp() {
  $.post('/plugins/<?=$plugin?>/include/SystemTemp.php',{unit:'<?=$display['unit']?>',dot:'<?=$display['number'][0]?>'},function(data) {
    showFooter(data,'temp');
    if ($('#mb-temp').length) {
      var temp = $('span#temp').text();
      var unit = temp.indexOf('C')>0 ? 'C' : 'F';
      temp = temp.split(unit);
      if (temp[0] && $('#cpu-temp').length>0) $('#cpu-temp').html("<i class='ups fa fa-thermometer'></i>_(Temperature)_: "+temp[0]+unit);
      if (temp[1] && $('#mb-temp').length>0) $('#mb-temp').html("<i class='ups fa fa-thermometer'></i>_(Temperature)_: "+temp[1]+unit);
    }
    timers.systemTemp = setTimeout(systemTemp,5000);
  });
}
setTimeout(systemTemp,100);
<?endif;?>
</script>

                )

            [AddVM] => Array
                (
                    [Title] => Add VM
                    [Tag] => clipboard
                    [Cond] => (pgrep('libvirtd')!==false)
                    [Markdown] => false
                    [file] => plugins/dynamix.vm.manager/AddVM.page
                    [root] => plugins/dynamix.vm.manager
                    [name] => AddVM
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2015-2020, Derek Macias, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
// add vm translations (if needed)
if (substr($_SERVER['REQUEST_URI'],0,4) != '/VMs') {
  $vms = "$docroot/languages/$locale/vms.dot";
  if (file_exists($vms)) $language = array_merge($language,unserialize(file_get_contents($vms)));
}
eval('?>'.parse_file("$docroot/plugins/dynamix.vm.manager/include/VMedit.php",false));
?>
                )

            [UpdateVM] => Array
                (
                    [Title] => Update VM
                    [Tag] => clipboard
                    [Cond] => (pgrep('libvirtd')!==false)
                    [Markdown] => false
                    [file] => plugins/dynamix.vm.manager/UpdateVM.page
                    [root] => plugins/dynamix.vm.manager
                    [name] => UpdateVM
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2015-2020, Derek Macias, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
// add vm translations (if needed)
if (substr($_SERVER['REQUEST_URI'],0,4) != '/VMs') {
  $vms = "$docroot/languages/$locale/vms.dot";
  if (file_exists($vms)) $language = array_merge($language,unserialize(file_get_contents($vms)));
}
eval('?>'.parse_file("$docroot/plugins/dynamix.vm.manager/include/VMedit.php",false));
?>
                )

            [VMMachines] => Array
                (
                    [Menu] => VMs:1
                    [Title] => Virtual Machines
                    [Tag] => columns
                    [Cond] => is_file('/var/run/libvirt/libvirtd.pid')
                    [Markdown] => false
                    [file] => plugins/dynamix.vm.manager/VMMachines.page
                    [root] => plugins/dynamix.vm.manager
                    [name] => VMMachines
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2015-2023, Derek Macias, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";

$cpus = cpu_list();
$hover   = in_array($theme,['white','azure']) ? 'rgba(0,0,0,0.1)' : 'rgba(255,255,255,0.1)';
$bgcolor = in_array($theme,['white','azure']) ? '#f2f2f2' : '#1c1c1c';
$fgcolor = in_array($theme,['white','azure']) ? '#1c1c1c' : '#f2f2f2';
$incolor = $theme!='gray' ? $bgcolor : '#121510';

function showCPUs($uuid) {
  global $cpus;
  $vm = domain_to_config($uuid);
  $vcpu = $vm['domain']['vcpu'];
  echo "<div class='four'>";
  foreach ($cpus as $pair) {
    unset($cpu1,$cpu2);
    [$cpu1, $cpu2] = my_preg_split('/[,-]/',$pair);
    $check = ($vcpu && in_array($cpu1, $vcpu)) ? 'fa-circle orange-text':'fa-circle-o';
    if (!$cpu2) {
      echo "<label><i class='fa fa-fw $check'></i>&nbsp;&nbsp;cpu $cpu1</label>";
    } else {
      echo "<label class='cpu1'><i class='fa fa-fw $check'></i>&nbsp;&nbsp;cpu $cpu1 / $cpu2</label>";
      $check = ($vcpu && in_array($cpu2, $vcpu)) ? 'fa-circle orange-text':'fa-circle-o';
      echo "<label class='cpu2'><i class='fa fa-fw $check'></i></label>";
    }
  }
  echo "</div>";
}
function vsize($size,$expand=true) {
  $units = ['','K','M','G','T','P','E','Z','Y'];
  if ($expand) {
    $size = str_replace(['B',' ',',', '.'],'',strtoupper($size));
    [$c1,$c2] = my_preg_split('/(?<=[0-9])(?=[A-Z])/',$size);
    return $c1 * pow(1024,array_search($c2,$units)?:0);
  } else {
    $base = $size ? floor(log($size,1024)) : 0;
    return $size/pow(1024,$base).$units[$base];
  }
}

$uuid = unscript(_var($_GET,'uuid'));
$subaction = _var($_GET,'subaction');
if (isset($_GET['refresh'])) {
  $vm = unscript(_var($_GET,'name'));
  if ($lv->domain_is_active($vm)) {
    echo "<meta http-equiv='refresh' content='5; url=/VMs?name=$vm&amp;refresh=true'>";
    $msg = "Waiting for $vm to shutdown...";
  } else {
    $msg = "$vm has been shutdown";
  }
}
if ($subaction) {
  $vm = $lv->domain_get_name_by_uuid($uuid);
  if ($subaction == 'disk-resize') {
    $capacity = vsize($_GET['cap']);
    if ($capacity > vsize($_GET['oldcap'])) {
      shell_exec("qemu-img resize -q ".escapeshellarg(unscript($_GET['disk']??''))." ".vsize($capacity,0));
    $msg = $vm." disk capacity has been changed to {$_GET['cap']}";
    } else {
      $msg = "Error: disk capacity has to be greater than {$_GET['oldcap']}";
    }
  } elseif ($subaction == 'disk-remove') {
    $msg = $lv->domain_disk_remove($vm,_var($_GET,'dev'))
    ? "$vm disk has been removed"
    : "Error: ".$lv->get_last_error();
  } elseif ($subaction == 'snap-create') {
    $msg = $lv->domain_snapshot_create($vm)
    ? "Snapshot for $vm has been created"
    : "Error: ".$lv->get_last_error();
  } elseif ($subaction == 'snap-delete') {
    $msg = $lv->domain_snapshot_delete($vm,_var($_GET,'snap'))
    ? "Snapshot for $vm has been deleted"
    : "Error: ".$lv->get_last_error();
  } elseif ($subaction == 'snap-revert') {
    $msg = $lv->domain_snapshot_revert($vm,_var($_GET,'snap'))
    ? "$vm has been reverted"
    : "Error: ".$lv->get_last_error();
  } elseif ($subaction == 'snap-desc') {
    $msg = $lv->snapshot_set_metadata($vm,_var($_GET,'snap'),_var($_POST,'snapdesc'))
    ? "Snapshot description for $vm has been saved"
    : "Error: ".$lv->get_last_error();
  }
}
if ($libvirt_running=='yes') $vms = $lv->get_domains() ?: [];
if (empty($vms)) {
  $msg = $libvirt_running=='yes'
  ? 'No VMs defined. Create from template or add XML.'
  : 'Libvirt is not running. Goto Settings tab then click Start.';
}
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.filetree.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.ui.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">
<style>
th.th1{width:25%}
th.th2{width:15%}
th.th3{width:80px}
div.four{font-size:1.1rem;width:260px}
div.four label{float:left;display:table-cell;width:25%}
div.four label:nth-child(4n+4){float:none;clear:both}
div.four label.cpu1{width:32%}
div.four label.cpu2{width:26%}
div.template,div#dialogWindow,input#upload{display:none}
table.domdisk thead tr th:nth-child(1){width:56%!important}
table.domdisk thead tr th:nth-child(n+2){width:8%!important}
table.domdisk thead tr th:nth-child(1){padding-left:72px}
table.domdisk tbody tr td:nth-child(1){padding-left:72px}
table.domdisk tbody tr:nth-child(even){background-color:transparent!important}
table.domdisk tbody tr:nth-child(4n-1){background-color:transparent!important}
i.mover{margin-right:8px;display:none}
#resetsort{margin-left:12px;display:inline-block;width:32px}
.fileTree{background:<?=$bgcolor?>;width:500px;max-height:320px;overflow-y:scroll;overflow-x:hidden;position:absolute;z-index:100;display:none}
.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset button[disabled]{cursor:default;color:#808080;background:-webkit-gradient(linear,left top,right top,from(#404040),to(#808080)) 0 0 no-repeat,-webkit-gradient(linear,left top,right top,from(#404040),to(#808080)) 0 100% no-repeat,-webkit-gradient(linear,left bottom,left top,from(#404040),to(#404040)) 0 100% no-repeat,-webkit-gradient(linear,left bottom,left top,from(#808080),to(#808080)) 100% 100% no-repeat;background:linear-gradient(90deg,#404040 0,#808080) 0 0 no-repeat,linear-gradient(90deg,#404040 0,#808080) 0 100% no-repeat,linear-gradient(0deg,#404040 0,#404040) 0 100% no-repeat,linear-gradient(0deg,#808080 0,#808080) 100% 100% no-repeat;background-size:100% 2px,100% 2px,2px 100%,2px 100%}
.dropdown-menu{z-index:10001}
</style>
<table id="kvm_table" class="tablesorter four shift">
<thead><tr><th class="th1"><a id="resetsort" class="nohand" onclick="resetSorting()" title="Reset sorting"><i class="fa fa-th-list"></i></a>_(Name)_</th><th class="th2">_(Description)_</th><th>_(CPUs)_</th><th>_(Memory)_</th><th>_(vDisks)_</th><th>_(Graphics)_</th><th class="th3">_(Autostart)_</th></tr></thead>
<tbody id="kvm_list"><tr><td colspan='8'></td></tr></tbody>
</table>
<input type="button" onclick="addVM()" id="btnAddVM" value="_(Add VM)_" style="display:none">
<input type="button" onclick="startAll()" value="_(Start All)_" style="display:none">
<input type="button" onclick="stopAll()" value="_(Stop All)_" style="display:none">

<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script src="<?autov('/plugins/dynamix.vm.manager/javascript/dynamix.vm.manager.js')?>"></script>
<script src="<?autov('/plugins/dynamix.vm.manager/javascript/vmmanager.js')?>"></script>
<script src="<?autov("/webGui/javascript/jquery.filetree.js")?>"></script>
<script>
<?if (_var($display,'resize')):?>
function resize() {
  $('#kvm_list').height(Math.max(window.innerHeight-340,330));
  $('#kvm_table thead,#kvm_table tbody').removeClass('fixed');
  $('#kvm_table thead tr th').each(function(){$(this).width($(this).width());});
  $('#kvm_table tbody tr td').each(function(){$(this).width($(this).width());});
  $('#kvm_table thead,#kvm_table tbody').not('.child').addClass('fixed');
}
<?endif;?>
function resetSorting() {
  if ($.cookie('lockbutton')==null) return;
  $('input[type=button]').prop('disabled',true);
  $.post('/plugins/dynamix.vm.manager/include/UserPrefs.php',{reset:true},function(){loadlist();});
}
function changemedia(uuid,dev,bus,file) {
  if (file === "--select") getisoimage(uuid,dev,bus,file);
  if (file === "--eject") ajaxVMDispatch({action:"change-media", uuid:uuid , cdrom:"" , dev:dev , bus:bus , file:file}, "loadlist");

}
function getisoimage(uuid,dev,bus,file){
  var root = <?= '"'.$domain_cfg["MEDIADIR"].'"';?>;
  var match= ".iso";
  var box = $("#dialogWindow");
  box.html($("#templateISO").html());

  box.find('#target').attr('data-pickroot',root).attr('data-picktop',root).attr('data-pickmatch',match).fileTreeAttach(null,null,function(path){
      var bits = path.substr(1).split('/');
      var auto = bits.length>3 ? '' : share;
      box.find('#target').val(path+auto).change();
    });
    var height = 100;
  box.dialog({
    title: "Select ISO",
    resizable: false,
    width: 600,
    height: 300,
    modal: true,
    show: {effect:'fade', duration:250},
    hide: {effect:'fade', duration:250},
    buttons: {
      "_(Insert)_": function(){
        var target = box.find('#target');
        if (target.length) {
          target = target.val();
          if (!target ) {errorTarget(); return;}
        } else target = '';
        box.find('#target').prop('disabled',true);
        ajaxVMDispatch({action:"change-media", uuid:uuid , cdrom:"" , dev:dev , bus:bus , file:target}, "loadlist");
        box.dialog('close');
      },
      "_(Cancel)_": function(){
        box.dialog('close');
      }
    }
  });
  dialogStyle();
}
function dialogStyle() {
  $('.ui-dialog-titlebar-close').css({'background':'transparent','border':'none','font-size':'1.8rem','margin-top':'-14px','margin-right':'-18px'}).html('<i class="fa fa-times"></i>').prop('title',"_(Close)_").prop('onclick',null).off('click').click(function(){box.dialog('close');});
  $('.ui-dialog-title').css({'text-align':'center','width':'100%','font-size':'1.8rem'});
  $('.ui-dialog-content').css({'padding-top':'15px','vertical-align':'bottom'});
  $('.ui-button-text').css({'padding':'0px 5px'});
}
var sortableHelper = function(e,ui){
  var child = ui.next();
  if (child.is(':visible')) child.addClass('unhide').hide();
  ui.children().each(function(){$(this).width($(this).width());});
  return ui;
};
function LockButton() {
  if ($.cookie('lockbutton')==null) {
    $.cookie('lockbutton','lockbutton');
    $('#resetsort').removeClass('nohand').addClass('hand');
    $('i.mover').show();
    $('#kvm_list .sortable').css({'cursor':'move'});
<?if ($themes1):?>
    $('div.nav-item.LockButton a').prop('title',"_(Lock sortable items)_");
    $('div.nav-item.LockButton b').removeClass('icon-u-lock green-text').addClass('icon-u-lock-open red-text');
<?endif;?>
    $('div.nav-item.LockButton span').text("_(Lock sortable items)_");
    $('#kvm_list').sortable({helper:sortableHelper,items:'.sortable',cursor:'grab',axis:'y',containment:'parent',delay:100,opacity:0.5,zIndex:9999,forcePlaceholderSize:true,
    update:function(e,ui){
      $('#kvm_list .sortable').each(function(){
        var parent = $(this).attr('parent-id');
        var child = $('tr[child-id="'+parent+'"]');
        child.detach().insertAfter($(this));
        if (child.hasClass('unhide')) child.removeClass('unhide').show();
      });
      var row = $('#kvm_list tr:first');
      var names = '', index = '';
      row.parent().children().find('td.vm-name').each(function(){names+=$(this).find('a').text()+';';index+=$(this).parent().parent().children().index($(this).parent())+';';});
      $.post('/plugins/dynamix.vm.manager/include/UserPrefs.php',{names:names,index:index});
    }});
  } else {
    $.removeCookie('lockbutton');
    $('#resetsort').removeClass('hand').addClass('nohand');
    $('i.mover').hide();
    $('#kvm_list .sortable').css({'cursor':'default'});
<?if ($themes1):?>
    $('div.nav-item.LockButton a').prop('title',"_(Unlock sortable items)_");
    $('div.nav-item.LockButton b').removeClass('icon-u-lock-open red-text').addClass('icon-u-lock green-text');
<?endif;?>
    $('div.nav-item.LockButton span').text("_(Unlock sortable items)_");
    $('#kvm_list').sortable('destroy');
  }
}
function loadlist() {
  timers.vm = setTimeout(function(){$('div.spinner.fixed').show('slow');},500);
  $.get('/plugins/dynamix.vm.manager/include/VMMachines.php',{show:$.cookie('vmshow')},function(d) {
    clearTimeout(timers.vm);
    var data = d.split(/\0/);
    $('#kvm_list').html(data[0]);
    $('head').append('<script>'+data[1]+'<\/script>');
<?if (_var($display,'resize')):?>
    resize();
    $(window).bind('resize',function(){resize();});
<?endif;?>
<?foreach ($vms as $vm) {
  $res = $lv->get_domain_by_name($vm);
  $uuid = $lv->domain_get_uuid($res);
?>  $('.vcpu-<?=$uuid?>').tooltipster({
      trigger:'custom',
      triggerOpen:{mouseenter:true,click:true,touchstart:true},
      contentAsHTML:true,
      animation:'grow',
      triggerClose:{click:true,scroll:true,mouseleave:true,delay:1},
      interactive:true,
      viewportAware:true,
      functionBefore:function(instance,helper){instance.content("<?=showCPUs($uuid)?>");}
    });
<?}?>
    $('.autostart').switchButton({labels_placement:'right', on_label:"_(On)_", off_label:"_(Off)_"});
    $('.autostart').change(function() {
      $.post('/plugins/dynamix.vm.manager/include/VMajax.php',{action:'domain-autostart',uuid:$(this).attr('uuid'),autostart:$(this).prop('checked'),response:'json'},function(data){
        $(this).prop('checked', data.autostart);
      },'json');
    });
    $('div.spinner.fixed').hide('slow');
    $('input[type=button]').prop('disabled',false).show('slow');
    $('.text').click(showInput);
    $('.input').blur(hideInput);
  });
}
$(function() {
<?if ($msg):?>
  <?$color = strpos($msg, "rror:")!==false ? 'red-text':'green-text'?>
  $('#countdown').html("<span class='<?=$color?>'><?=_($msg)?></span>");
<?endif;?>
  $('#btnAddVM').click(function AddVMEvent(){$('.tab>input#tab2').click();});
  $.removeCookie('lockbutton');
  loadlist();
});
</script>

<div id="dialogWindow"></div>
<div markdown="1" id="templateISO" class="template">
_(ISO Image)_:
: <input type="text" id="target" autocomplete="off" spellcheck="false" value="" data-pickcloseonfile="true" data-pickfolders="true" data-pickfilter="" data-pickmatch="" data-pickroot="" data-picktop="">

</div>
                )

            [VMSettings] => Array
                (
                    [Menu] => OtherSettings
                    [Title] => VM Manager
                    [Icon] => icon-virtualization
                    [Tag] => columns
                    [file] => plugins/dynamix.vm.manager/VMSettings.page
                    [root] => plugins/dynamix.vm.manager
                    [name] => VMSettings
                    [text] => <?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2015-2023, Derek Macias, Eric Schultz, Jon Panozzo.
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";

// Check for Intel VT-x (vmx) or AMD-V (svm) cpu virtualization support
// If either kvm_intel or kvm_amd are loaded then Intel VT-x (vmx) or AMD-V (svm) cpu virtualization support was found
$hardware = !empty(shell_exec("/etc/rc.d/rc.libvirt test"));
if (!$hardware) {
  echo "<p class='notice'>"._('Your hardware does not have Intel VT-x or AMD-V capability').". "._('This is required to create VMs in KVM').". "._('Please disable the VM function').". ";
  echo "<a href='https://docs.unraid.net/unraid-os/manual/vm-management#determining-hvmiommu-hardware-support' target='_blank'> "._('Click here to see the Unraid Wiki for more information')."</a></p>";
}

function scan($area, $text) {
  return strpos($area,$text)!==false;
}
function detect(&$syslinux, $key) {
  $size = count($syslinux);
  $menu = $i = 0;
  $value = '';
  // find the default section
  while ($i < $size) {
    if (scan($syslinux[$i],'label ')) {
      $n = $i + 1;
      // find the current requested setting
      while (!scan($syslinux[$n],'label ') && $n < $size) {
        if (scan($syslinux[$n],'menu default')) $menu = 1;
        if (scan($syslinux[$n],'append')) foreach (explode(' ',$syslinux[$n]) as $cmd) if (scan($cmd,$key)) {$value = explode('=',$cmd)[1]; break;}
        $n++;
      }
      if ($menu) break; else $i = $n - 1;
    }
    $i++;
  }
  return $value;
}
$syslinux          = file('/boot/syslinux/syslinux.cfg',FILE_IGNORE_NEW_LINES+FILE_SKIP_EMPTY_LINES);
$arrValidNetworks   = getValidNetworks();
$pcie_acs_override = detect($syslinux, 'pcie_acs_override');
$vfio_allow_unsafe = detect($syslinux, 'allow_unsafe_interrupts');
$bgcolor           = strstr('white,azure',$display['theme']) ? '#f2f2f2' : '#1c1c1c';
$started           = $var['fsState']=='Started';
$libvirt_up        = $libvirt_running=='yes';
$libvirt_log       = file_exists("/var/log/libvirt/libvirtd.log");
?>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<style>
body{-webkit-overflow-scrolling:touch}
.errortext{color:#EF3D47;display:none}
.fileTree{background:<?=$bgcolor?>;width:300px;max-height:150px;overflow-y:scroll;overflow-x:hidden;position:absolute;z-index:100;display:none}
.basic{display:block}
.advanced{display:none}
#winvirtio{display:none}
#download_status{margin-left:5px;color:#777;display:none}
#download_button{cursor:pointer;margin-left:-2px;color:#08C;display:none;transform:translate(0px,2px)}
#download_button.fa-spin{cursor:default;color:#777}
#download_button span{font-family:clear-sans}
#download_button.fa-spin span{font-family:clear-sans;display:none}
#remove_button{cursor:pointer;margin-left:-2px;color:#EF3D47;display:none;transform:translate(0px,2px)}
#remove_button span{font-family:clear-sans}
</style>

<?if ($hardware):?>
<span class="status vhshift"><input type="checkbox" class="advancedview"></span>
<?endif;?>
<form markdown="1" id="settingsForm" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=htmlspecialchars($domain_cfgfile)?>">
<input type="hidden" name="#command" value="/plugins/dynamix/scripts/emcmd">
<input type="hidden" name="#arg[1]" value="cmdStatus=Apply">
_(Enable VMs)_:
: <select id="SERVICE" name="SERVICE">
  <?= mk_option($libvirt_service, 'disable', _('No'))?>
  <?= mk_option($libvirt_service, 'enable', _('Yes'))?>
  </select>
  <?if ($hardware):?>
  <?if (!$started):?>
  <span id="arraystopped"><i class="fa fa-warning icon warning"></i> <?=($libvirt_service=='enable')?'_(VMs will be available after Array is Started)_':'_(Apply to activate VMs after Array is Started)_'?></span>
  <?elseif (!is_dir(dirname($domain_cfg['IMAGE_FILE'])) || !is_dir($domain_cfg['DOMAINDIR']) || !is_dir($domain_cfg['MEDIADIR'])):?>
  <span class="basic" style="display:inline"><i class="fa fa-warning icon warning"></i> _(One or more paths do not exist)_ (<a href="#" onclick="$('.advancedview').switchButton('option','checked',true); return false">_(view)_</a>)</span>
  <?endif;?>
  <?endif;?>

:vms_enable_help:

<?if ($hardware):?>
<div class="advanced" markdown="1">
<?if ($libvirt_up):?>
<?$libvirt_info = libvirt_version('libvirt')?>
<?$qemu_info = $lv->get_connect_information()?>
_(Libvirt version)_:
: <?=$libvirt_info['libvirt.major'].'.'.$libvirt_info['libvirt.minor'].'.'.$libvirt_info['libvirt.release']?>

_(QEMU version)_:
: <?=$qemu_info['hypervisor_major'].'.'.$qemu_info['hypervisor_minor'].'.'.$qemu_info['hypervisor_release']?>

_(Libvirt storage location)_:
: <?=htmlspecialchars($domain_cfg['IMAGE_FILE'])?>

:vms_libvirt_volume_help:

<?else: /* Libvirt is stopped */ ?>
_(Libvirt vdisk size)_:
: <input type="number" id="IMAGE_SIZE" name="IMAGE_SIZE" min="1" value="<?=htmlspecialchars($domain_cfg['IMAGE_SIZE']);?>" style="width:50px;" required="required" />_(GB)_ <span id="SIZE_ERROR" class="errortext"></span>

:vms_libvirt_vdisk_size_help:

_(Libvirt storage location)_:
: <input type="text" id="IMAGE_FILE" name="IMAGE_FILE" autocomplete="off" spellcheck="false" value="<?=htmlspecialchars($domain_cfg['IMAGE_FILE']);?>" placeholder="e.g. /mnt/user/system/libvirt/libvirt.img" data-pickcloseonfile="true" data-pickfilter="img" data-pickroot="/mnt" data-pickfolders="true" required pattern="^[^\\]*libvirt\.img$">
 <?if (file_exists($domain_cfg['IMAGE_FILE'])):?><span id="deletePanel"><label><input type="checkbox" id="deleteCheckbox" /> _(Delete Image File)_</label></span><?endif;?>
 <?if (!$started):?><span><i class="fa fa-warning icon warning"></i> _(Modify with caution: unable to validate path until Array is Started)_</span>
 <?elseif (!is_dir(dirname($domain_cfg['IMAGE_FILE']))):?><span><i class="fa fa-warning icon warning"></i> _(Path does not exist)_</span>
 <?endif;?><span id="IMAGE_ERROR" class="errortext"></span>

:vms_libvirt_location_help:

<?endif;?>
_(Default VM storage path)_:
: <input type="text" id="domaindir" name="DOMAINDIR" autocomplete="off" spellcheck="false" data-pickfolders="true" data-pickfilter="HIDE_FILES_FILTER" data-pickroot="<?=is_dir('/mnt/user')?'/mnt/user':'/mnt'?>" value="<?=htmlspecialchars($domain_cfg['DOMAINDIR'])?>" placeholder="_(Click to Select)_" pattern="^[^\\]*/$">
  <?if (!$started):?><span><i class="fa fa-warning icon warning"></i> _(Modify with caution: unable to validate path until Array is Started)_</span>
  <?elseif (!is_dir($domain_cfg['DOMAINDIR'])):?><span><i class="fa fa-warning icon warning"></i> _(Path does not exist)_</span><?endif;?>

:vms_libvirt_storage_help:

_(Default ISO storage path)_:
: <input type="text" id="mediadir" name="MEDIADIR" autocomplete="off" spellcheck="false" data-pickfolders="true" data-pickfilter="HIDE_FILES_FILTER" data-pickroot="<?=is_dir('/mnt/user')?'/mnt/user':'/mnt'?>" value="<?=htmlspecialchars($domain_cfg['MEDIADIR'])?>" placeholder="_(Click to Select)_" pattern="^[^\\]*/$">
  <?if (!$started):?><span><i class="fa fa-warning icon warning"></i> _(Modify with caution: unable to validate path until Array is Started)_</span>
  <?elseif (!is_dir($domain_cfg['MEDIADIR'])):?><span><i class="fa fa-warning icon warning"></i> _(Path does not exist)_</span><?endif;?>

:vms_libvirt_iso_storage_help:

</div>
_(Default Windows VirtIO driver ISO)_ (_(optional)_):
: <select id="winvirtio_select" class="lock" disabled></select><input type="text" id="winvirtio" name="VIRTIOISO" data-pickfilter="iso" data-pickcloseonfile="true" data-pickroot="<?=is_dir('/mnt/user')?'/mnt/user':'/mnt'?>" value="<?=htmlspecialchars($domain_cfg['VIRTIOISO'])?>"<?if ($started):?> placeholder="_(Click to Select)_" pattern="^[^\\]*\.(iso|ISO)$"<?endif;?>>
<?if ($started):?>
  <i class="fa fa-trash fa-fw" id="remove_button" title="_(Remove Windows VirtIO driver ISO)_"><span>&nbsp;_(Remove)_</span></i><i class="fa fa-download fa-fw" id="download_button" title="_(Download Windows VirtIO driver ISO)_"><span>&nbsp;_(Download)_</span></i><span id="download_status"></span>
<?endif;?>

:vms_virtio_driver_help:

<div class="advanced" markdown="1">
_(Default network source)_:
: <select id="network" name="BRNAME">
  <?foreach (array_keys($arrValidNetworks) as $key) {

    echo mk_option("", $key, "- "._($key)." -", "disabled");

    foreach ($arrValidNetworks[$key] as $strNetwork) {
        echo mk_option($domain_cfg['BRNAME'], $strNetwork, $strNetwork);
    }
  }?>
  </select>

:vms_network_source_help:

_(Upon host shutdown)_:
: <select id="hostshutdown" name="HOSTSHUTDOWN">
  <?=mk_option($domain_cfg['HOSTSHUTDOWN'], 'shutdown', _('Shutdown VMs'))?>
  <?=mk_option($domain_cfg['HOSTSHUTDOWN'], 'hibernate', _('Hibernate VMs'))?>
  </select>

:vms_host_shutdown_help:

_(VM shutdown time-out)_:
: <input type="number" id="vm_shutdown_timeout" name="TIMEOUT" value="<?=htmlspecialchars($domain_cfg['TIMEOUT'])?>" class="narrow">
  <?if (!empty($var['shutdownTimeout']) && !empty($domain_cfg['TIMEOUT']) && (int)$domain_cfg['TIMEOUT'] > (int)$var['shutdownTimeout']):?>
  <span id="arraystopped"><i class="fa fa-warning icon warning"></i> _(exceeds Disk Shutdown)_ <?=htmlspecialchars($var['shutdownTimeout'])?>s _(time-out)_ (<a href="/Settings/DiskSettings">_(edit)_</a>)</span>
  <?endif;?>

:vms_shutdown_timeout_help:

_(Console Options)_:
: <select id="vmsconsole" name="CONSOLE">
  <?=mk_option($domain_cfg['CONSOLE'], 'web', _('Web interface'))?>
  <?=mk_option($domain_cfg['CONSOLE'], 'remote', _('Virt-Manager Remote Viewer'))?>
  <?=mk_option($domain_cfg['CONSOLE'], 'both', _('Both Web & Virt-Manager Remote Viewer'))?>
  </select>

:vms_console_help:

_(PCIe ACS override)_:
: <select id="pcie_acs_override"<?=$safemode?' disabled':''?>>
  <?= mk_option($pcie_acs_override, '', _('Disabled'))?>
  <?= mk_option($pcie_acs_override, 'downstream', _('Downstream'))?>
  <?= mk_option($pcie_acs_override, 'multifunction', _('Multi-function'))?>
  <?= mk_option($pcie_acs_override, 'downstream,multifunction', _('Both'))?>
  </select><?if($safemode):?><span>*_(Setting disabled in **safe mode**)_*</span><?endif;?>

:vms_acs_override_help:

_(VFIO allow unsafe interrupts)_:
: <select id="vfio_allow_unsafe"<?=$safemode?' disabled':''?>>
  <?= mk_option($vfio_allow_unsafe, '', _('No'))?>
  <?= mk_option($vfio_allow_unsafe, '1', _('Yes'))?>
  </select><?if($safemode):?><span>*_(Setting disabled in **safe mode**)_*</span><?endif;?>

:vms_vfio_interupts_help:

</div>
<?if ($libvirt_log):?>
<input type="button" onclick="openTerminal('log','libvirt','libvirt/libvirtd.log');" value="<?=_('View libvirt log')?>"/>
<?else:?>
&nbsp;
<?endif;?>
<?endif;?>
: <input type="button" id="applyBtn" value="_(Apply)_" disabled><input type="button" value="_(Done)_" onclick="done()">
</form>
<?if ($libvirt_log):?>

:vms_libvirt_log_help:

<?endif;?>

<?if ($libvirt_up && trim(shell_exec('stat -c %T -f /etc/libvirt'))=='btrfs'):?>
<div class="advanced" markdown="1">
<div class="title"><span class="left"><i class="title fa fa-list"></i>_(Libvirt volume info)_</span></div>
_(btrfs filesystem show)_:
: <?="<pre id='btrfs-scrub'>".shell_exec("btrfs filesystem show /etc/libvirt")."</pre>"?>

<form markdown="1" method="POST" action="/update.php" target="progressFrame"  onsubmit="prepareFS(this,'btrfs-scrub-vm','/etc/libvirt'>">
<?exec("$docroot/webGui/scripts/btrfs_scrub status /etc/libvirt", $scrub_status, $retval);?>
_(btrfs scrub status)_:
: <?="<pre>".implode("\n", $scrub_status)."</pre>"?>

<?if ($retval != 0):?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_scrub">
<input type="hidden" name="#arg[1]" value="start">
<input type="hidden" name="#arg[2]" value="/etc/libvirt">
<input type="hidden" name="#arg[3]" value="-r">
&nbsp;
: <input type="submit" value="_(Scrub)_"><label><input type="checkbox" name="#arg[3]" value="">_(Correct file system errors)_</label>

:vms_scrub_help:

<?else:?>
<input type="hidden" name="#command" value="/webGui/scripts/btrfs_scrub">
<input type="hidden" name="#arg[1]" value="cancel">
<input type="hidden" name="#arg[2]" value="/etc/libvirt">
&nbsp;
: <input type="submit" value="_(Cancel)_">

:vms_cancel_help:

</form>
<?endif;?>
</div>

<?elseif (!$libvirt_up):?>
<form id="removeForm" method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#command" value="/plugins/dynamix.vm.manager/scripts/libvirt_rm">
</form>
<?endif;?>

<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>" charset="utf-8"></script>
<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script src="<?autov('/plugins/dynamix.vm.manager/javascript/dynamix.vm.manager.js')?>"></script>
<script>
function prepareFS(form,cookie,value) {
  if ($(form).find('input[type="submit"]').val()=="_(Cancel)_") $.removeCookie(cookie); else $.cookie(cookie,value);
}
function btrfsScrub(path) {
  $.post('/webGui/include/FileSystemStatus.php',{cmd:'scrub',path:path},function(data) {
    if (data.indexOf('running')>0) {
      $('#btrfs-scrub').text(data);
      setTimeout(function(){btrfsScrub(path);},1000);
    } else {
      $.removeCookie('btrfs-scrub-vm');
      refresh();
    }
  });
}
$(function(){
  $.post("/plugins/dynamix.vm.manager/include/Fedora-virtio-isos.php",{},function(isos) {
    $('#winvirtio_select').html(isos).prop('disabled',false).change().each(function(){$(this).on('change',function() {
      // attach button updates when select element changes
      var form = $(this).parentsUntil('form').parent();
      form.find('input[value="<?=_("Apply")?>"],input[value="Apply"],input[name="cmdEditShare"],input[name="cmdUserEdit"]').not('input.lock').prop('disabled',false);
      form.find('input[value="<?=_("Done")?>"],input[value="Done"]').not('input.lock').val("<?=_('Reset')?>").prop('onclick',null).off('click').click(function(){formHasUnsavedChanges=false;refresh(form.offset().top);});
    });});
  });
  $("#applyBtn").click(function(){
    if ($("#deleteCheckbox").length && $("#deleteCheckbox").is(":checked")) {
      $("#removeForm").submit();
      return;
    }
    var run = true;
    $("#settingsForm").find('input[type="text"]').each(function(){
      if ($(this).is(':visible') && $(this).attr('pattern')) {
        var pattern = new RegExp($(this).attr('pattern'));
        if (!pattern.test($(this).val())) {$(this).css('color','red'); run = false;}
      }
    });
<?if ($safemode):?>
    if (run) $("#settingsForm").submit();
<?else:?>
    if (run) $.post("/plugins/dynamix.vm.manager/include/VMajax.php", {action:'syslinux',pcie:$('#pcie_acs_override').val(),vfio:$('#vfio_allow_unsafe').val()}, function(data){
      $("#settingsForm").submit();
    });
<?endif;?>
  });

  $("#mediadir").on("input change", function(){
    $("#winvirtio_select").change();
  });

  var checkDownloadTimer = null;
  var checkOrInitDownload = function(checkonly){
    clearTimeout(checkDownloadTimer);
    var $button = $("#download_button");
    var $form = $button.closest('form');
    var postdata = {
      action: "virtio-win-iso-download",
      download_version: $('#winvirtio_select').val(),
      download_path: $('#mediadir').val(),
      checkonly: ((typeof checkonly === 'undefined') ? false : !!checkonly) ? 1 : 0
    };
    $button.removeClass('fa-download').addClass('fa-circle-o-notch fa-spin');
    $.post("/plugins/dynamix.vm.manager/include/VMajax.php", postdata, function(data){
      if (postdata.download_version != $('#winvirtio_select').val())
        return;
      if (data.error) {
        $("#download_status").html('<span style="color: red">' + data.error + '</span>');
        $button.removeClass('fa-circle-o-notch fa-spin').addClass('fa-download');
      } else {
        $("#download_status").html(data.status);
        if (data.pid) {
          checkDownloadTimer = setTimeout(checkOrInitDownload, 1000);
          return;
        }
        if (data.status == "_(Done)_") $("#winvirtio_select").change();
      }
    }, "json");
  };
  $("#SERVICE").change(function changeService(){
    if ($(this).val()=='enable') {
      $('#arraystopped').fadeIn('slow');
    } else {
      $('#arraystopped').fadeOut('fast');
    }
  });
  if ($("#SERVICE").val()!='enable') $('#arraystopped').hide();
  $("#download_button").click(function downloadVirtIOVersion(){
    if (!$(this).hasClass('fa-spin')) {
      checkOrInitDownload(false);
    }
  });
  $("#remove_button").click(function removeVirtIOVersion() {
    var postdata = {
      action: "virtio-win-iso-remove",
      path: $('#mediadir').val(),
      file: $('#winvirtio_select').val()
    };
    $.post("/plugins/dynamix.vm.manager/include/VMajax.php", postdata, function(data){
      if (postdata.file != $('#winvirtio_select').val()) return;
      if (data.success) {
        $("#winvirtio_select").change();
      }
    }, "json");
  });
  // Fire events below once upon showing page
  $("#winvirtio_select").change(function changeVirtIOVersion(){
    clearTimeout(checkDownloadTimer);
    if ($(this).val()=='manual') {
      $("#download_button,#download_status").hide('fast');
      $("#winvirtio").show('fast');
      return;
    }
    $("#winvirtio").hide('fast');
    var params = {
      action: "virtio-win-iso-info",
      path: $("#mediadir").val(),
      file: $(this).val()
    };
    $.post("/plugins/dynamix.vm.manager/include/VMajax.php", params, function(data){
      if (!data.exists || data.pid) {
        $("#remove_button").hide('fast');
        $("#download_button").removeClass('fa-circle-o-notch fa-spin').addClass('fa-download').show('fast');
        $("#download_status").html('').show('fast');
        if (data.pid) checkOrInitDownload(true);
      } else {
        $("#download_button,#download_status").hide('fast');
        $("#remove_button").show('fast');
        $("#winvirtio").val(data.path);
      }
    }, "json");
  });
  if ($.cookie('vmsettings_view_mode') == 'advanced') {
    $('.advanced').show();
    $('.basic').hide();
  }
<?if ($hardware):?>
  $('.advancedview').switchButton({
    labels_placement: "left",
    on_label: "_(Advanced View)_",
    off_label: "_(Basic View)_",
    checked: $.cookie('vmsettings_view_mode') == 'advanced'
  });
  $('.advancedview').change(function(){
    $('.advanced').toggle('slow');
    $('.basic').toggle('slow');
    $.cookie('vmsettings_view_mode', $('.advancedview').is(':checked') ? 'advanced' : 'basic', {expires:3650});
  });
<?endif;?>
  showStatus('pid','libvirt/libvirtd');
  <?if ($started):?>
  $("#IMAGE_FILE").fileTreeAttach(null, null, function(folder) {
    $("#IMAGE_FILE").val(folder + 'libvirt.img').change();
  });
  $('#domaindir').fileTreeAttach();
  $('#mediadir').fileTreeAttach();
  $('#winvirtio').fileTreeAttach();
  <?endif;?>
  if ($("#IMAGE_FILE").length) {
    $("#IMAGE_FILE").on("input change", function(){
      $("#IMAGE_ERROR").fadeOut();
      $("#applyBtn").prop("disabled", false);
      <? if (file_exists($domain_cfg['IMAGE_FILE'])) { ?>
      if ($(this).val() != "<?=$domain_cfg['IMAGE_FILE']?>") {
        $("#deleteCheckbox").prop("disabled", true).attr("checked", false);
        $("#deletePanel").fadeOut();
      } else {
        $("#deleteCheckbox").attr("checked", false).prop("disabled", false);
        $("#deletePanel").fadeIn();
      }
      <? } ?>
    });
    $("#deleteCheckbox").change(function(){
      var checked = $(this).is(":checked");
      $("#SERVICE").prop("disabled", checked).val('disable');
      $("#IMAGE_SIZE").prop("disabled", checked);
      $("#IMAGE_FILE").prop("disabled", checked).val("<?=$domain_cfg['IMAGE_FILE']?>");
      $("#domaindir").prop("disabled", checked);
      $("#mediadir").prop("disabled", checked);
      $("#winvirtio_select").prop("disabled", checked);
      $("#winvirtio").prop("disabled", checked);
      $("#network").prop("disabled", checked);
      $("#hostshutdown").prop("disabled", checked);
      $("#pcie_acs_override").prop("disabled", checked);
      $("#vm_shutdown_timeout").prop("disabled", checked);
      $("#applyBtn").val(checked ? "_(Delete)_" : "_(Apply)_").removeAttr('disabled');
    });
  }
  $.post("/plugins/dynamix.vm.manager/include/VMajax.php", {action:'reboot'}, function(data){
    var rebootMessage = "_(VM Settings: A reboot is required to apply changes)_";
    if (data.modified) addRebootNotice(rebootMessage); else removeRebootNotice(rebootMessage);
  });
  if ($.cookie('btrfs-scrub-vm')) btrfsScrub($.cookie('btrfs-scrub-vm'));
});
</script>

                )

            [VMTemplates] => Array
                (
                    [Title] => Add VM
                    [Tag] => clipboard
                    [Cond] => (pgrep('libvirtd')!==false)
                    [Markdown] => false
                    [file] => plugins/dynamix.vm.manager/VMTemplates.page
                    [root] => plugins/dynamix.vm.manager
                    [name] => VMTemplates
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2015-2020, Derek Macias, Eric Schultz, Jon Panozzo.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<style type="text/css">
.vmheader{padding:10px;font-size:1.4rem;text-align:left;color:#888}
.vmtemplate{display:inline-block;width:80px;height:90px;margin-bottom:15px;margin-left:10px;text-align:center;vertical-align:top}
.vmtemplate img{width:48px;height:48px}
.vmtemplate p{text-align:center;margin-top:8px;line-height:12px}
</style>
<?
	$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
	require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";

	foreach($arrAllTemplates as $strName => $arrTemplate):
	if (empty($arrTemplate)) {
		// render header
		echo '<div class="vmheader">'.$strName.'</div>';
		continue;
	}
?>
<div class="vmtemplate">
	<a href="/VMs/AddVM?template=<?=htmlspecialchars(urlencode($strName))?>">
		<img src="/plugins/dynamix.vm.manager/templates/images/<?=htmlspecialchars($arrTemplate['icon'])?>" title="<?=htmlspecialchars($strName)?>">
		<p><?=htmlspecialchars($strName)?></p>
	</a>
</div>
<? endforeach; ?>
<br>
<center><button type='button' onclick='done()'>_(Cancel)_</button></center>
<br>
                )

            [VMs] => Array
                (
                    [Menu] => Tasks:70
                    [Type] => xmenu
                    [Code] => e918
                    [Lock] => true
                    [Cond] => exec("grep -o '^SERVICE=.enable' /boot/config/domain.cfg 2>/dev/null")
                    [file] => plugins/dynamix.vm.manager/VMs.page
                    [root] => plugins/dynamix.vm.manager
                    [name] => VMs
                    [text] => <?PHP
/* Copyright 2005-2020, Lime Technology
 * Copyright 2015-2020, Derek Macias, Eric Schultz, Jon Panozzo.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
if ($var['fsState'] != "Started") {
  echo "<div class='notice shift'>"._('Array must be **started** to view Virtual Machines').".</div>";
} elseif (!is_file('/var/run/libvirt/libvirtd.pid') || (!is_dir('/proc/'.@file_get_contents('/var/run/libvirt/libvirtd.pid')))) {
  echo "<div class='notice shift'>"._('Libvirt Service failed to start').".</div>";
}
if (count($pages)==2) $tabbed = false;
?>
                )

            [UpdateAssistant] => Array
                (
                    [Menu] => About
                    [Title] => Update Assistant
                    [file] => plugins/fix.common.problems/UpdateAssistant.page
                    [root] => plugins/fix.common.problems
                    [name] => UpdateAssistant
                    [text] => <?
$currentUnRaidVersion = parse_ini_file("/etc/unraid-version");
$unRaid635 = version_compare($currentUnRaidVersion['version'],"6.3.5","<=");
?>
This script is part of Fix Common Problems

These tests, while not definitive will give you recommendations on what you should do prior to updating your unRaid OS.  The tests are run against what the available update for unRaid expects and/or wants.

There may also be perfectly valid use-cases for any issues that this script finds.

<input type='button' value='Run Tests (Stable Branch)' onclick='runUpdateTests("");'>
<?if ( ! $unRaid635 ):?>
<input type='button' value='Run Tests (Next Branch)' onclick='runUpdateTests("next");'>
<?endif;?>
<span style='float:right'><a href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7M7CBCVU732XG' target='_blank'><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif"></a></span>
<script>
$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("fix.common.problems.plg",{name:"Fix Common Problems"});
	}
});
	

function runUpdateTests(branch) {
	openBox('/plugins/fix.common.problems/scripts/UpdateAssistant.sh&arg1='+branch,'Update Assistant',600,900,true);
}
</script>

                )

            [FixProblems] => Array
                (
                    [Menu] => Utilities
                    [Icon] => warning
                    [Title] => Fix Common Problems
                    [file] => plugins/fix.common.problems/FixProblems.page
                    [root] => plugins/fix.common.problems
                    [name] => FixProblems
                    [text] => <?
###############################################################
#                                                             #
# Fix Common Problems copyright 2015-2023, Andrew Zawadzki    #
#                                                             #
###############################################################

require_once("/usr/local/emhttp/plugins/fix.common.problems/include/caCredits.php");
require_once("/usr/local/emhttp/plugins/fix.common.problems/include/helpers.php");
$plugin = "fix.common.problems";

$settings = json_decode(@file_get_contents("/boot/config/plugins/fix.common.problems/settings.json"),true);

if ( ! isset($settings['notifications']) ) { $settings['notifications'] = "all"; }
if ( ! isset($settings['frequency']) ) { $settings['frequency'] = "disabled"; }
if ( ! isset($settings['disableSpinUp']) ) { $settings['disableSpinUp'] = "true"; }
if ( ! isset($settings['hacksPerDay']) ) { $settings['hacksPerDay'] = 10; }
if ( ! isset($settings['logIgnored']) ) { $settings['logIgnored'] = "yes"; }

if ( is_file("/tmp/fix.common.problems/troubleshoot") ) { $troubleshoot = true; } else $troubleshoot = false;

if ( is_dir("/mnt/user") ) {
  $userEnabled = "true";
} else $userEnabled = "false";
$unRaid67 = version_compare(unRaidVersion(),"6.7.0-rc1",">");

?>
<script src="<?autov("/webGui/javascript/jquery.filetree.js")?>"></script>
<script>

var caURL = "/plugins/<?=$plugin?>/include/fixExec.php";

function myAlert(description,textdescription,textimage,imagesize, outsideClick, showCancel, showConfirm, alertType) {
  if ( !outsideClick ) outsideClick = false;
  if ( !showCancel )   showCancel = false;
  if ( !showConfirm )  showConfirm = false;
  if ( imagesize == "" ) { imagesize = "80x80"; }
   
  swal({
    title: description,
    text: textdescription,
    imageUrl: textimage,
    imageSize: imagesize,
    allowOutsideClick: outsideClick,
    showConfirmButton: showConfirm,
    showCancelButton: showCancel,
    type: alertType,
    html: true
  });
}

function myCloseAlert() {
  swal.close();
}

function ignoreError(error,type,button) {
  swal({
    title: "Ignore "+type+"?",
    text: "Are you sure you want to ignore this "+type+":<br><font color='red'><b>"+error+"</b></font><br>As a <em>general rule</em> this is not recommended unless you are absolutely sure about this",
    showConfirmButton: true,
    showCancelButton: true,
    closeOnConfirm: false,
    type: "warning",
    html: true
  },
  function() {
    $.post(caURL,{action:"ignoreError",error:error});
      swal({
        title: "Ignored!",
        text: "On future scans, <font color='green'><b>"+error+"</b></font> will not generate a "+type+".  This will still however be logged in the syslog.",
        showConfirmButton: true,
        showCancelButton: false,
        closeOnConfirm: true,
        html: true,
        type: "success"
      });
      $("#"+button).prop("disabled",true);
      $("#"+button).prop("value","Ignored");
  });
}

function readdError(error,button) {
  swal({
    title: "Readd This Error?",
    text: "Are you sure you want to begin scanning for this error again:<br><font color='red'><b>"+error+"</b></font>",
    showConfirmButton: true,
    showCancelButton: true,
    closeOnConfirm: false,
    type: "warning",
    html: true
  },
  function() {
    $.post(caURL,{action:"readdError",error:error});
      swal({
        title: "Added!",
        text: "On future scans, <font color='red'><b>"+error+"</b></font> will generate either a warning or an error",
        showConfirmButton: true,
        showCancelButton: false,
        closeOnConfirm: true,
        html: true,
        type: "success"
      });
      $("#"+button).prop("disabled",true);
      $("#"+button).prop("value","Monitored");
    });
}

function readdAll() {
  swal({
    title: "Re-Add All Errors?",
    text: "Are you sure you want to set all of the current ignored errors back to generating errors / warnings?",
    showConfirmButton: true,
    showCancelButton: true,
    closeOnConfirm: false,
    type: "warning",
    html: true
  },
  function() {
    $.post(caURL,{action:"readdAll"});
      swal({
        title: "Re-Added",
        text: "On future scans, all errors / warnings found will generate an error / warning",
        showConfirmButton: true,
        showCancelButton: false,
        closeOnConfirm: true,
        html: true,
        type: "success"
      });
  });
}
function extendedTest() {
  swal({
    title: "Run Extended Tests?",
    text: "This will start a background process which will check all of your files for permission problems, duplicates, and other errors.<br><br>You will receive a notification when complete",
    showConfirmButton: true,
    showCancelButton: true,
    closeOnConfirm: true,
    html: true,
    type: "warning"
  }, function() {
    $.post(caURL,{action:'runExtended'});
		$("#extendedTest,#extendedLog").prop("disabled",true);
		$("#extendedStatus").html("Extended Test Running");
  });
}

function troubleshoot() {
  swal({
    title: "Troubleshooting Mode",
    text: "This is a special mode used generally to troubleshoot random lockups, resets, etc.<br><br>When running in this mode the syslog is <b>continually</b> captured to the flash drive, and a diagnostics dump is performed every <b>30 minutes</b><br><br><font color='red'>When posting for help in the forums, you should include both the diagnostics file and the syslog.txt file located within /boot/logs</font>.  <b>It will also be extremely helpful to include a screenshot (use your phone) of what appears on the local monitor when the crash / lockup occurs</b><br><br>Once started, the only way to abort this mode is by <b>restarting</b> your server",
    showConfirmButton: true,
    showCancelButton: true,
    html: true,
    type: "warning",
    closeOnConfirm: false
  }, function() {
    $.post(caURL,{action:'troubleshoot'});
    $("#troubleshoot").val("Troubleshooting running");
    $("#troubleshoot").prop("disabled",true);
    swal({
      title: "Troubleshooting Started",
      text: "When uploading your diagnostics for review on the unRaid forums, remember to include <b>/logs/FCPsyslog_tail.txt</b> from the flash drive, as it may contain further information that will not be present in the diagnostic files",
      html: true,
      showCancelButton: false,
      showConfirmButton: true,
      closeOnConfirm: true,
      type: "success"
    });
  });

}

function checkList() {
  openBox('/plugins/fix.common.problems/scripts/checkList.php',"What Is Checked?",550,550);
}

var fixScan = new NchanSubscriber('/sub/fixscan');
var fixScanCount = 0;
fixScan.on('message',function(data) {
	if (data) {
	console.log(data);
		var results = JSON.parse(data)
		if ( results.errors ) {
			if ( fixScanCount == 1 ) {
				myCloseAlert();
				$("#settings").html(results.errors);
				$.post(caURL,{action:'getTimeStamp'}, function(timestamp) {
					if (timestamp) {
						timestamp = timestamp.replace("*","");
						$("#timestamp").html(timestamp);
					}
				});
				fixScan.stop();
				fixScanCount = 0;
			}
		}
		if ( results.test ) {
			fixScanCount = 1;
			$("#currentTest").html(results.test);
		}
	}
});

$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("fix.common.problems.plg",{name:"Fix Common Problems"});
	}
	
  if ( "<?=$userEnabled?>" == "true" ) {
    $("#userOnly").show();
    checkExtended();
  } else {
    $("#userOnly").hide();
  }
  
  $("#excludedFoldersList").fileTree({
    root: "/mnt/user",
    multiSelect: true,
    filter: "HIDE_FILES_FILTER",
    folderEvent: "nothing"
  });
  
  $("#frequency").val("<?=$settings['frequency']?>");
  $("#notifications").val("<?=$settings['notifications']?>");
  $("#disableSpinUp").val("<?=$settings['disableSpinUp']?>");
  $("#hacksPerDay").val("<?=$settings['hacksPerDay']?>");
  $("#logIgnored").val("<?=$settings['logIgnored']?>");
  $("#excludedPerms").val("<?=$settings['excludedPerms'] ?? ""?>");

  if ( "<?=$troubleshoot?>" ) {
    $("#troubleshoot").prop("disabled",true);
    $("#troubleshoot").val("Troubleshooting running");
  }
  
  if ($('.adsitem').length==0 || $('.adsitem').css('display')=='none') {
		alert("Ad blocker detected.  Ad blockers can interfere with the GUI of unRaid, and it is recommended to whitelist your server in the ad-blocker settings");
  }
	
  $.post(caURL,{action:'getTimeStamp'},function(data) {
    if (data) {
      if ( (data.charAt(0)) == "*" ) {
        rescan();
      } else {
        $.post(caURL,{action:'displayErrors'}, function(errors) {
          if (errors) {
            $("#settings").html(errors);
          }
        });
        $("#timestamp").html(data);
      }
    }
  });
});

function checkExtended() {
  $.post(caURL,{action:'checkExtendedStatus'},function(data) {
    if (data) {
      $("#extendedStatus").html(data);
    }
  });
}

function rescan() {
  $("#extendedStatus").html("Scanning...");
  myAlert("Scanning","Now Scanning your system for common problems.  This may take a minute.<br><br><span id='currentTest'></span>","","",false,false,false,"warning");
  $.post(caURL,{action:'scan'});
	fixScan.start();
}
function acknowledgeUncleanReboot(button)
{
  $.post(caURL,{action:'acknowledgeUncleanReboot'});
  $("#"+button).hide();
}

function acknowledgeOOM(button) {
  $.post(caURL,{action:'acknowledgeOOM'});
  $("#"+button).hide();
}

function acknowledgeTrace(button) {
  $.post(caURL,{action:'acknowledgeTrace'});
  $("#"+button).hide();
}

function acknowledgeMCE(button) {
  $.post(caURL,{action:'acknowledgeMCE'});
  $("#"+button).hide();
}
function excludeSelected() {
	$el = $( "#excludedFoldersList input:checked" );

	if( $el.length === 0 )
	{
		checked = "";
	}	else {
		var checked = $el
		.map(function() {
			return $(this).parent().find('a:first').text();
		})
		.get()
		.join(',');
	}
  $("#excludedPerms").val(checked);
  enableApply();
}

function enableApply() {
  $("#applyButton").prop("disabled",false);
}

function apply() {
  var frequency = $("#frequency").val();
  var notifications = $("#notifications").val();
  var disableSpinUp = $("#disableSpinUp").val();
  var hacksPerDay = $("#hacksPerDay").val();
  var logIgnored = $("#logIgnored").val();
  var excludedPerms = $("#excludedPerms").val();
  
  $.post(caURL,{action:'apply',excludedPerms:excludedPerms,logIgnored:logIgnored,frequency:frequency,notifications:notifications,disableSpinUp:disableSpinUp,hacksPerDay:hacksPerDay});
  $("#applyButton").prop("disabled",true);
}

function showCredits() {
  myAlert("Fix Common Problems","<?=$caCredits?>","/plugins/<?=$plugin?>/images/fix.common.problems.png","96x96", true, false, true);
}

</script>
<style>
.fileTree{width:305px;max-height:150px;overflow:scroll;position:absolute;z-index:100;display:none;}
</style>
<link type="text/css" rel="stylesheet" href="/webGui/styles/jquery.filetree.css">
<a style='float:right;cursor:pointer' onclick='showCredits();'>Credits</a>
<br>Note that certain errors due to how they are found will have an "Acknowledge" button.  Clicking the acknowledge button will prevent Fix Common Problems from finding these certain errors until the next reboot<br><br>
<b>Errors / Warnings Listed are from the last <em>scheduled</em> scan.  Press Rescan to update with the current issues found<br></b><br>
<div  style='width:600px;float:left;'>
<table>
<tr>
  <td><b>Frequency to run background checks</b></td>
  <td><select id='frequency' onchange='enableApply();'>
        <option value='disabled'>Disabled</option>
        <option value='hourly'>Hourly</option>
        <option value='daily'>Daily</option>
        <option value='weekly'>Weekly</option>
        <option value='monthly'>Monthly</option>
      </select>
  </td>
</tr>
<tr>
  <td><b>Send notifications on errors?</b></td>
  <td><select id='notifications' onchange='enableApply();'>
        <option value='disabled'>Disabled</option>
        <option value='all'>All errors / Warnings</option>
        <option value='errors'>Errors Only</option>
      </select>
  </td>
</tr>
<tr>
  <td><b>Avoid spinning up disks for tests?</b></td>
  <td><select id='disableSpinUp' onchange='enableApply();'>
    <option value='false'>Always perform tests (recommended)</option>
    <option value='true'>Skip tests on spun down disks</option>
  </select></td>
</tr>
<tr>
  <td><b>Number of allowed invalid logins per day:</b></td>
  <td><input type='number' id='hacksPerDay' onchange='enableApply();'></td>
</tr>
<tr>
  <td><b>Log Ignored Errors/Warnings?</b></td>
  <td><select id='logIgnored' onchange='enableApply();'>
    <option value='yes'>Yes (Recommended)</option>
    <option value='no'>No</option>
  </td>
</tr>
</table>
</div>
<div></div><div style='margin-left:540px;'>
<b>Permission Fix Excluded On: <input type='text' id='excludedPerms'</input><br>(Docker Appdata Folders and CA backup Destination is automatically excluded)</b><br>
<center><input type='button' value='Exclude Selected' onclick='excludeSelected();'></center>
<div id='excludedFoldersList' style='margin-left:240px;width:305px;max-height:150px;overflow:scroll;'></div><br>
</div>

> <b>Frequency to run background checks</b> - Set to how often you would like this plugin to automatically scan your system for errors and warnings.<br>
> <b>Send notifications on errors</b> determines under what circumstances the plugin will notify you through unRaid's notification system of any issues<br>
> <b>Avoid spinning up disks for tests</b> - Will try and avoid certain tests on disks (notably the write check) that unRaid thinks are currently spun down<br>
> <b>Number of allowed invalid logins per day</b> - This is the number of "grace" invalid logins allowed per day either via the local console or through SSH / Telnet (ie: you typed your password wrong)  This is used to determine if any hacking attempts are being made on your server<br>


<input type='button' id='applyButton' value='Apply' onclick='apply();' disabled><input type='button' value='Rescan' onclick='rescan();'><input type='button' onclick='done();' value='Done'>

<!-- 
<br><br><span id='userOnly'>
<input type='button' id='extendedTest' value='Run Extended Test' onclick='extendedTest();'><a href='/plugins/fix.common.problems/scripts/showExtendedLog.php' target='_blank'><input type='button' value='View Results' id='extendedLog';></a> <font color='red'>Status:</font> <font color='green'> <span id='extendedStatus'></span></font>
> Extended tests will perform more tests on every file in the array.
</span>
<center><b>Time of last scan: <span id='timestamp'></span></center></b> -->

<div id="debugging"></div>
<span id='settings'></span>

<center><input type='button' value='What is checked' onclick='checkList();'></center>

<center>
<b>For assistance with any of the errors / warnings displayed here, please post a new topic in <a href='http://lime-technology.com/forum/index.php?board=71.0' target='_blank'>General Support</a></b><br>
<b>For assistance with the plugin, including requests for additional checks, false positives, etc please post <a href='http://lime-technology.com/forum/index.php?topic=48972.0' target='_blank'>HERE</a></b>
</center>

> <center><a href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7M7CBCVU732XG' target='_blank'><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif"></a></center>

<div class="adsitem"></div>
<script>


</script>
                )

            [DockerSafeNewPerms] => Array
                (
                    [Menu] => UNRAID-OS
                    [Title] => Docker Safe New Perms
                    [file] => plugins/fix.common.problems/DockerSafeNewPerms.page
                    [root] => plugins/fix.common.problems
                    [name] => DockerSafeNewPerms
                    [text] => <?
###############################################################
#                                                             #
# Fix Common Problems copyright 2015-2023, Andrew Zawadzki    #
#                                                             #
###############################################################

$plugin = "fix.common.problems";

?>
<script>
var caURL = "/plugins/<?=$plugin?>/include/newpermissions.php";

$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("fix.common.problems.plg",{name:"Fix Common Problems"});
	}

  $.post(caURL,{action:'showExcluded'}, function(data) {
    if (data) {
      $("#excluded").html(data);
    }
  });
});
</script>

This utility will restore standard unRaid permissions to all shares and files without touching any of the <b>APPDATA</b> shares for docker applications.

(Many times, a docker application has specific requirements for its ownership / permissions on the files contained within its appdata, and the standard New Permissions tool will change these, possibly rendering the docker application inoperable.)

<b>You should use this tool in case a misconfigured docker application (notably CouchPotato or Sonarr / SickBeard) has written media files to your array with the wrong permissions, and you find yourself unable to modify / delete those files.</b>

This utility starts a background process that goes to each of your data disks and cache disk and changes file and directory ownership to nobody/users (i.e., uid/gid to 99/100), and sets permissions as follows:
<pre><code>
For directories:
  drwxrwxrwx

For read/write files:
  -rw-rw-rw-

For readonly files:
  -r--r--r--
  </code>  </pre>
  The following shares will <b>NOT</b> be touched: <font color='purple'>Additional shares can be excluded <a href='/Settings/FixProblems'>HERE</a></font>
  
<span id='excluded'></span>

Clicking Start will open another window and start the background process. Closing the window before completion will terminate the background process - so don't do that. This process can take a long time if you have many files.  During this time, the webUI will be unavailable.  If you do close the pop up window, the current folder in progress will be finished before the webUI is responsive again.

<font color='red'>If you have a <b>preclear</b> in progress, do not run this utility (or the regular new permissions utility) as the process will appear to hang until the preclear is finished (due to the new permissions utility running the <b>sync</b> command)

<input type='button' id='start_button' value='Start' disabled onclick='openBox("/plugins/fix.common.problems/scripts/newperms.sh","Docker Safe New Permissions",490,430);'> <input type='button' value='Done' onclick='done();'> <input type='checkbox' onclick='$("#start_button").prop("disabled",!this.checked);'> <small>Yes I want to do this</small>


                )

            [NerdTools] => Array
                (
                    [Menu] => Utilities
                    [Title] => NerdTools
                    [Icon] => cog
                    [Tag] => cog
                    [file] => plugins/NerdTools/NerdTools.page
                    [root] => plugins/NerdTools
                    [name] => NerdTools
                    [text] => <link type="text/css" rel="stylesheet" href="<?=autov('/plugins/NerdTools/css/tablesorter.css');?>">
<link type="text/css" rel="stylesheet" href="<?=autov('/plugins/NerdTools/css/tablesorter-'.(($display['theme'] == 'white' || $display['theme'] == 'azure') ? 'white' : 'black').'.css');?>">
<link type="text/css" rel="stylesheet" href="<?=autov('/webGui/styles/jquery.switchbutton.css');?>">
<link type="text/css" rel="stylesheet" href="<?=autov('/plugins/NerdTools/css/NerdTools.css');?>">
<style>
table.tablesorter tbody tr:nth-child(odd) {
    background-color: #<?=($display['theme'] == 'white' || $display['theme'] == 'azure') ? 'F0F0F0' : '212421';?>;
}
table.tablesorter tbody tr:nth-child(even) {
    background-color: #<?=($display['theme'] == 'white' || $display['theme'] == 'azure') ? 'e4e2e4' : '1b1d1b';?>;
}
</style>

<form markdown="1" id="package_form" name="package_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" id="include" name="#include" value="/plugins/NerdTools/include/ClearConfig.php"/>

<div class="wrapper">
<table class="tablesorter hover-highlight" id="tblPackages">
    <thead>
        <tr>
            <th class="parser-false filter-false" nowrap="nowrap"></th>
            <th class="filter-name" data-placeholder="Search..."> Name </th>
            <th class="filter-false" data-placeholder="by dependencies"> Dependencies </th>
            <th class="filter-version" data-placeholder="by status"> Status </th>
            <th class="filter-installed" data-placeholder="by install"> Installed </th>
            <th class="sorter-metric filter-false" data-placeholder="by size" data-metric-name-full="byte|Byte|BYTE" data-metric-name-abbr="b|B"> Size </th>
            <th class="filter-false" data-placeholder="Search..."> Installed Version </th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
</div>
<input onclick="packageQuery(1)" value="Force Updates" type="button" title="Press if the package list doesn't load correctly"><input class="reset" type="button" title="Reset applied filters" value="Reset Filters">
: <input id="btnApply" type="button" value="Apply"><input type="button" value="Done" onClick="done()">
<input type="hidden" name="#file" value="NerdTools/NerdTools.cfg">
</form>

<script src="<?=autov('/plugins/NerdTools/js/jquery.tablesorter.combined.min.js');?>"></script>
<script src="<?=autov('/plugins/NerdTools/js/parser-metric.min.js');?>"></script>
<script type="text/javascript" src="<?=autov('/webGui/javascript/jquery.switchbutton.js');?>"></script>
<script type="text/javascript" src="<?=autov('/plugins/NerdTools/js/jquery.NerdTools.js');?>"></script>
                )

            [rclone] => Array
                (
                    [Menu] => Utilities
                    [Title] => rclone
                    [Icon] => rclone.png
                    [file] => plugins/rclone/rclone.page
                    [root] => plugins/rclone
                    [name] => rclone
                    [text] => <?PHP
/* Copyright 2005-2016, Lime Technology
 * Copyright 2012-2016, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
> Use this page to make changes to your `rclone.conf` file as well as update rclone if a newer version is available.
>
> To setup rclone for the first time execute the command `rclone config` in command line.


<script>
function updaterclone(branch) {
   var path = "/usr/local/emhttp/plugins/rclone/updaterclone.sh"
   openBox('/usr/local/emhttp/plugins/rclone/startScript.sh&arg1='+path+'&arg2='+branch,"Update rclone",450,800,true);
}
</script>

<?
$file = "/boot/config/plugins/rclone/.rclone.conf";
$defaultfile = "/boot/config/plugins/rclone/.rclone.conf";
$text = file_get_contents($file);
$default_text = @file_get_contents($defaultfile);
?>

<?
exec('rclone version --check | grep -Po "(([a-z])*:( )*)\K( )*([0-9])([^ ])*[0-9]"', $output);
$currentversion = $output[0];
?>

<?
if (file_exists("/boot/config/plugins/rclone/install/beta") == true) {
  $branch = "2";
} elseif (strpos($currentversion, 'beta') !== false) {
  $branch = "2";
} else {
  $branch = "1";
}
?>

<?
if (isset($_POST['branch'])) {$branch = $_POST['branch'];}

if ($branch == "1") {
    exec("rm -f /boot/config/plugins/rclone/install/beta");
    $latestversion = $output[1];
    ($latestversion == '') ? $latestversion = "Error fetching version number" : '';

} elseif ($branch == "2") {
    exec("touch /boot/config/plugins/rclone/install/beta");
    $latestversion = $output[2];
    ($latestversion == '') ? $latestversion = "Error fetching version number" : '';
}
?>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>

.row {
  display: flex;
}

/* Create two unequal columns that floats next to each other */
.column {
  float: left;
  padding: 10px;
}

.left {
  width: 25%;
}

.right {
  width: 75%;
}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}</style>
</head>
<body>

<div class="row">
  <div class="column left">
    <h2>Branch</h2>

	<form action="" method="post"> 
	<select name="branch" onchange="this.form.submit();"> 
	<option value="1" <?php if($branch == 1) echo("selected")?>>Stable</option>
	<option value="2" <?php if($branch == 2) echo("selected")?>>Beta</option>
	</select> 
	</form> 
	<?
	echo "Installed version: $currentversion";
	echo "<br>";
	echo "Latest version:&emsp;&ensp;$latestversion";
	?>
	<br>
	<input type="button" value="Update rclone" <?php if ($currentversion == $latestversion){ ?> disabled <?php   } ?> onclick="updaterclone('<?php echo $branch; ?>')">

  </div>
  <div class="column right">
    <h2>Edit config</h2>
	<form markdown="1" method="POST" action="/update.php" target="progressFrame">
	<input type="hidden" name="#include" value="/webGui/include/update.file.php">
	<input type="hidden" name="#file" value="<?=$file;?>">
	<textarea spellcheck="false" cols="80" rows="22" maxlength="8192" name="text" style="font-family:bitstream;width:100%"><?=$text;?></textarea>
	<br>
	<input type="submit" value="Apply"/><input type="button" value="Original" onclick="setDefault(this.form)">
	</form> 
  </div>
</div>

</body>
</html>

<script>
function setDefault(form) {
  form.elements['text'].value = <?=json_encode($default_text);?>;
}
</script>

> Click the **Apply** button to commit the current edits.
>
> Click the **Original** button to initialize the edit box with the
> original contents.  You still need to click **Apply** in order to
>commit the change.
</form>

                )

            [RecycleBinShares] => Array
                (
                    [Menu] => RecycleBin:2
                    [Title] => Shares
                    [file] => plugins/recycle.bin/RecycleBinShares.page
                    [root] => plugins/recycle.bin
                    [name] => RecycleBinShares
                    [text] => <?php
/* Copyright 2015-2023 Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "recycle.bin";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/RecycleBinShares.page"))?>
<?else:?>
<?

$recycle_bin_cfg = parse_ini_file( "/boot/config/plugins/{$plugin}/{$plugin}.cfg" );
if (is_file("/tmp/{$plugin}/share_trashsize")) {
	$share_trashsize = json_decode(file_get_contents("/tmp/{$plugin}/share_trashsize"), true);
} else {
	$share_trashsize = array();
}
?>

:recycle_bin_shares_plug:
> Recycle Bin Shares:
>
> The shares with Recycle Bin contents will be displayed along with the size of the share's Trash Bin.
> Click on the <strong>Browse</strong> icon to browse the deleted files in that share.
> Click on the <strong>Empty</strong> button to remove the deleted files.
>
> Unassigned Devices shares will only show if the Recycle Bin is enabled for Unassigned Devices and there are Unassigned Devices that are mounted and shared and have Recycle Bin contents.
>
> Click on the 'SMB Share', 'Share Type', or 'Trash Size' columns of the table header and the contents will be sorted.  The 'Trash Size' is an alpha numeric and not a numeric sort.
:end

<table class='tablesorter shift ups' id='tblRecycleShares'>
<thead><tr><th>_(SMB Share)_</th><th>_(Share Type)_</th><th>_(Trash Size)_</th><th>_(Browse)_</th><th>_(Empty Trash)_</th></tr></thead>
<tbody>

<?
$recycle_bin_cfg = parse_ini_file( "/boot/config/plugins/".$plugin."/".$plugin.".cfg" );
$smb_shares = parse_ini_file("/etc/samba/smb-shares.conf", true, INI_SCANNER_RAW);
$shares = array_keys($smb_shares);
natcasesort($shares);

foreach($shares as $share) {
	$recycle_bin_trashsize = isset($share_trashsize[$share]['trashsize']) ? $share_trashsize[$share]['trashsize'] : "";
	if ($share == 'flash') {
		$browse = "/mnt/RecycleBin/Flash";
		$share_type = _('Flash');
	} else if (strcmp(substr($share, 0, 4), 'disk') == 0) {
		$browse = "/mnt/RecycleBin/Disk/".$share;
		$share_type = _('Disk');
	} else if (strcmp($share, 'cache') == 0 || strcmp(substr($share, 0, 4), 'disk') == 0) {
		$browse = "/mnt/RecycleBin/Disk/".$share;
		$share_type = _('Disk');
	} else {
		$browse = "/mnt/RecycleBin/User Shares/".$share;
		$share_type = _('Share');
	}
	$mount_point = $browse."/";
	$browse = urlencode($browse);
	$check_id = str_replace(array(" ", ".", "-"), "", $share);

	if ($recycle_bin_trashsize != "") {
		$aa = "<a href='/Settings/RecycleBin/Browse?dir=$browse' title='_(Browse the Share Recycle Bin)_.'><i class='fa fa-external-link'></i></a>";
		$bb = "<form name='empty_share_trash' method='POST' action='/update.php' target='progressFrame'>";
		$bb .= "<input type='hidden' name='#command' value='/plugins/{$plugin}/scripts/rc.recycle.bin'>";
		$bb .= "<input type='hidden' name='#arg[1]' value='share'>";
		$bb .= '<input type="hidden" name="#arg[2]" value="'.$mount_point.'">';
		$bb .= '<input type="checkbox" onclick=\'$("#'.$check_id.'").prop("disabled",!this.checked);\'>';
		$bb .= '<input id="'.$check_id.'" disabled type="submit" value="_(Empty)_" title="_(Empty the)_ '.$share.' _(Recycle Bin)_.">';
		$bb .= "</form>";
		echo "<tr><td>$share</td><td>_(Array)_ $share_type</td><td>".my_scale($recycle_bin_trashsize * 1024, $unit)." {$unit}"."</td><td>$aa</td><td>$bb</td></tr>";
	}
}

$files = glob("/mnt/RecycleBin/Unassigned/*");
foreach ($files as $file) {
	$share_name = basename($file);
	$browse = "/mnt/RecycleBin/Unassigned/".$share_name;
	$recycle_bin_trashsize = isset($share_trashsize[$share_name]['trashsize']) ? $share_trashsize[$share_name]['trashsize'] : "";
	$mount_point = $browse."/";
	$browse = urlencode($browse);
	$check_id = str_replace(array(" ", ".", "-"), "", $share_name);

	if ($recycle_bin_trashsize != "") {
		$aa = "<a href='/Settings/RecycleBin/Browse?dir=$browse' title='_(Browse the Share Recycle Bin)_.'><i class='fa fa-external-link'></i></a>";
		$bb = "<form name='empty_share_trash' method='POST' action='/update.php' target='progressFrame'>";
		$bb .= "<input type='hidden' name='#command' value='/plugins/{$plugin}/scripts/rc.recycle.bin'>";
		$bb .= "<input type='hidden' name='#arg[1]' value='share'>";
		$bb .= '<input type="hidden" name="#arg[2]" value="'.$mount_point.'">';
		$bb .= '<input type="checkbox" onclick=\'$("#'.$check_id.'").prop("disabled",!this.checked);\'>';
		$bb .= '<input id="'.$check_id.'" disabled type="submit" value="_(Empty)_" title="_(Empty the)_ '.$share_name.' _(Recycle Bin)_.">';
		$bb .= "</form>";
		echo "<tr><td>$share_name</td><td>_(Unassigned Device)_</td><td>".my_scale($recycle_bin_trashsize * 1024, $unit)." {$unit}"."</td><td>$aa</td><td>$bb</td></tr>";
	}
}

$files = glob("/mnt/RecycleBin/Root Shares/*");
foreach ($files as $file) {
	$share_name = basename($file);
	$browse = "/mnt/RecycleBin/Root Shares/".$share_name;
	$recycle_bin_trashsize = isset($share_trashsize[$share_name]['trashsize']) ? $share_trashsize[$share_name]['trashsize'] : "";
	$mount_point = $browse."/";
	$browse = urlencode($browse);
	$check_id = str_replace(array(" ", ".", "-"), "", $share_name);

	if ($recycle_bin_trashsize != "") {
		$aa = "<a href='/Settings/RecycleBin/Browse?dir=$browse' title='_(Browse the Share Recycle Bin)_.'><i class='fa fa-external-link'></i></a>";
		$bb = "<form name='empty_share_trash' method='POST' action='/update.php' target='progressFrame'>";
		$bb .= "<input type='hidden' name='#command' value='/plugins/{$plugin}/scripts/rc.recycle.bin'>";
		$bb .= "<input type='hidden' name='#arg[1]' value='share'>";
		$bb .= '<input type="hidden" name="#arg[2]" value="'.$mount_point.'">';
		$bb .= '<input type="checkbox" onclick=\'$("#'.$check_id.'").prop("disabled",!this.checked);\'>';
		$bb .= '<input id="'.$check_id.'" disabled type="submit" value="_(Empty)_" title="_(Empty the)_ '.$share_name.' _(Recycle Bin)_.">';
		$bb .= "</form>";
		echo "<tr><td>$share_name</td><td>_(Root Share)_</td><td>".my_scale($recycle_bin_trashsize * 1024, $unit)." {$unit}"."</td><td>$aa</td><td>$bb</td></tr>";
	}
}
?>
</tbody></table>

<form name="refresh_page" method="POST" action="/update.php" target="progressFrame">
	<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
<?if ($recycle_bin_cfg['BACKGROUND'] != "no"):?>
	<input type="button" value="_(Refresh)_"  title="_(Refresh the Recycle Bin page)_." onclick="refresh()">
<?else:?>
	<input type="hidden" name="#arg[1]" value="refresh">
	<input type="submit" value="_(Refresh)_" title="_(Refresh the Recycle Bin page)_.">
<?endif;?>
	<input type="button" value="_(Done)_" onclick="done()">
</form>

<script>
<?if ($display['resize']):?>
function resize() {
  $('pre.up').height(Math.max(window.innerHeight-340,370)).show();
}
$(function() {
  resize();
  $(window).bind('resize',function(){resize();});
});
<?endif;?>
</script>

<script type="text/javascript">
$(function(){
	$('#tblRecycleShares').tablesorter({headers:{3:{sorter:false},4:{sorter:false}}});
});
</script>
<?endif;?>

                )

            [RecycleBinSettings] => Array
                (
                    [Menu] => RecycleBin:1
                    [Title] => Settings
                    [file] => plugins/recycle.bin/RecycleBinSettings.page
                    [root] => plugins/recycle.bin
                    [name] => RecycleBinSettings
                    [text] => <?php
/* Copyright 2015-2023 Dan Landon.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "recycle.bin";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/RecycleBinSettings.page"))?>
<?else:?>
<?

$recycle_bin_cfg = parse_ini_file( "/boot/config/plugins/{$plugin}/{$plugin}.cfg" );
$recycle_bin_cfg['BACKGROUND']		= $recycle_bin_cfg['BACKGROUND'] ?? '';
$recycle_bin_cfg['SERVICE']			= $recycle_bin_cfg['SERVICE'] ?? '';
$recycle_bin_cfg['HIDE_FOLDER']		= $recycle_bin_cfg['HIDE_FOLDER'] ?? '';
$recycle_bin_cfg['INCLUDE_UD']		= $recycle_bin_cfg['INCLUDE_UD'] ?? '';
$recycle_bin_cfg['PARAMETERS']		= $recycle_bin_cfg['PARAMETERS'] ?? '';
$recycle_bin_cfg['DIR_MODE']		= $recycle_bin_cfg['DIR_MODE'] ?? '';
$recycle_bin_cfg['EXCLUDE']			= $recycle_bin_cfg['EXCLUDE'] ?? '';
$recycle_bin_cfg['EXCLUDE_DIRS']	= $recycle_bin_cfg['EXCLUDE_DIRS'] ?? '';
$recycle_bin_cfg['EXCLUDE_SHARES']	= $recycle_bin_cfg['EXCLUDE_SHARES'] ?? '';
$recycle_bin_cfg['AGE']				= $recycle_bin_cfg['AGE'] ?? '';
$recycle_bin_cfg['SCHEDRUN']		= $recycle_bin_cfg['SCHEDRUN'] ?? '';
$recycle_bin_cfg['NOTIFY']			= $recycle_bin_cfg['NOTIFY'] ?? '';
$recycle_bin_cfg['LOG']				= $recycle_bin_cfg['LOG'] ?? '';

if (is_file("/tmp/".$plugin."/trashsize")) {
	$trashsize				= file_get_contents("/tmp/".$plugin."/trashsize");
	$trashsize				= (is_numeric($trashsize)) ? $trashsize : "0";
	$recycle_bin_trashsize	= my_scale($trashsize * 1024, $unit)." {$unit}";
} else {
	$recycle_bin_trashsize = "?";
}

if (is_file("/var/run/{$plugin}.pid")) {
	$recycle_bin_enabled = "yes";
} else {
	$recycle_bin_enabled = "no";
}
?>

<script>
$(function() {
	showStatus('pid','recycle.bin');
});

$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("recycle.bin.plg");
	}
});
</script>

<table class="tablesorter shift ups">
<thead><tr><th>_(Recycle Bin)_</th></tr></thead>
</table>

<?if ($var['mdState']=="STARTED"):?>
<div style="width: 35%; float:left">
	<div>
		<blockquote class='inline_help'>
		<p><strong>_(Note)_:</strong> _(Starting and stopping the Recycle Bin can cause SMB shares to go offline for a short period)_.</p>
		<p>_(These actions apply to all shares)_:</p>
		<list>
		<li>_(Click on)_ <strong>_(Remove Aged Files)_</strong> _(to remove deleted files older than the 'Age Days' setting)_.</li>
		<li>_(Click on)_ <strong>_(Empty All Trash)_</strong> _(to remove all deleted files)_.</li>
		</list>
		</blockquote>
	</div>
	<?if ($recycle_bin_enabled=="yes"):?>
		<div style="position:relative;float:left;width:50%;text-align:right;margin-bottom:24px">
			<form name="stop_recycle_bin" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="stop">
				<input type="submit" value="_(Stop)_" title="_(Stop the Recycle Bin)_.">
			</form>
		</div>
		<div style="position:relative;float:left;width:20%;text-align:left;margin-bottom:24px">
			<form name="restart_recycle_bin" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="restart">
				<input type="submit" value="_(Restart)_" title="_(Restart the Recycle Bin)_.">
			</form>
		</div>
	<?else:?>
		<div style="position:relative;float:left;width:100%;text-align:center;margin-bottom:24px;margin-left:10px">
            <form name="start_recycle_bin" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="buttonstart">
				<input type="submit" value="_(Start)_" title="_(Start the Recycle Bin)_.">
            </form>
		</div>
	<?endif;?>
	<?if ($recycle_bin_trashsize != "0"):?>
		<div style="position:relative;float:left;width:100%;text-align:center;margin-bottom:35px">
			<img src='/plugins/recycle.bin/images/recycle.bin_full.png'></a><br />
			<b>_(Recycle Bin Total Size)_: <?=$recycle_bin_trashsize?></b>
			<form name="remove_aged_files" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="purge">
				<input type="checkbox" onclick='$("#remove_aged").prop("disabled",!this.checked);'><input type="submit" id="remove_aged" disabled value="_(Remove Aged Files)_" title="_(Remove aged files from the Recycle Bin)_.">
			</form>
			<form name="empty_trash" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="empty">
				<input type="checkbox" onclick='$("#empty_trash").prop("disabled",!this.checked);'><input type="submit" id="empty_trash" disabled value="_(Empty All Trash)_" title="_(Remove all files from the Recycle Bin)_.">
			</form>
		</div>
	<?else:?>
		<div style="position:relative;float:right;width:100%;text-align:center;margin-bottom:35px">
			<img src='/plugins/recycle.bin/images/recycle.bin_empty.png'><br />
			<b>_(Recycle Bin is empty)_</b>
			<form name="remove_aged_files" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="purge">
				<input type="submit" value="_(Remove Aged Files)_" disabled>
			</form>
			<form name="empty_trash" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="empty">
				<input type="submit" value="_(Empty Trash)_" disabled>
			</form>
		</div>
	<?endif;?>
		<div style="position:relative;float:right;width:100%;text-align:center">
		<?if ($recycle_bin_cfg['BACKGROUND'] != "no"):?>
			<input type="button" value="_(Refresh)_" title="_(Refresh the Recycle Bin page)_." onclick="refresh()">
		<?else:?>
			<form name="refresh_page" method="POST" action="/update.php" target="progressFrame">
				<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
				<input type="hidden" name="#arg[1]" value="refresh">
				<input type="submit" value="_(Refresh)_" title="_(Refresh the Recycle Bin page)_.">
			</form>
		<?endif;?>
	</div>
</div>
<div style="width: 65%; float:right">
	<form markdown="1" name="recycle_bin_settings" method="POST" action="/update.php" target="progressFrame">
	<input type="hidden" name="#file" value="recycle.bin/recycle.bin.cfg">
	<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
	<input type="hidden" name="#arg[1]" value="update">

	_(Enable Recycle Bin)_?
	: <select name="SERVICE" size="1">
		<?=mk_option($recycle_bin_cfg['SERVICE'], "disable", "_(No)_");?>
		<?=mk_option($recycle_bin_cfg['SERVICE'], "enable", "_(Yes)_");?>
	  </select>

:recycle_bin_enable_plug:
	> Set to **Yes** to enable the Recycle Bin functionality for SMB deleted files when the server is started.
	>
	> To hide the Recycle Bin folder, set 'Hide Dot Files to 'Yes' in the SMB settings <a href='/Settings/SMB'>here</a>.
:end

	_(Hide Recycle Bin Folder)_?
	: <select name="HIDE_FOLDER" size="1">
		<?=mk_option($recycle_bin_cfg['HIDE_FOLDER'], "no", "_(No)_");?>
		<?=mk_option($recycle_bin_cfg['HIDE_FOLDER'], "yes", "_(Yes)_");?>
	  </select>

:recycle_bin_hide_folder_plug:
	> Set to **No** to show the Recycle Bin folder in user shares.  The SMB setting "Hide dot files" controls if hidden folders show in user shares.
:end

	_(Update Recycle Bin Size in Background)_?
	: <select name="BACKGROUND" size="1">
		<?=mk_option($recycle_bin_cfg['BACKGROUND'], "yes", "_(Yes)_");?>
		<?=mk_option($recycle_bin_cfg['BACKGROUND'], "no", "_(No)_");?>
	  </select>

:recycle_bin_background_plug:
	> Set to **Yes** to enable the Recycle Bin Size to be updated in the background every five minutes.  This can make the Recycle Bin Settings and Shares pages more responsive and prevent disk spinups when accessing the Recycle Bin.  The Recycle Bin size can take up to five minutes to refresh when this is enabled.
:end

	_(Enable on Unassigned Devices)_?
	: <select name="INCLUDE_UD" size="1">
		<?=mk_option($recycle_bin_cfg['INCLUDE_UD'], "no", "_(No)_");?>
		<?=mk_option($recycle_bin_cfg['INCLUDE_UD'], "yes", "_(Yes)_");?>
	  </select>

:recycle_bin_ud_plug:
	> Set to **Yes** to enable the Recycle Bin deleted file functionality on Unassigned Devices drive shares when the Unassigned Devices plugin is installed.  SMB/NFS mounts and iso mounts are excluded from the Recycle Bin functionality on this server.  Enable the Recycle Bin on the remote server where the remote share originates if it is an Unraid server.
:end

	_(Recycle Bin parameters)_:
	: <input type="text" name="PARAMETERS" class="narrow" maxlength="50" value="<?=$recycle_bin_cfg['PARAMETERS'];?>">

:recycle_bin_parameters_plug:
	> Additional parameters for Recycle Bin.  The following are some options you can set to control the file structure of the deleted files.
	> Enter the parameters in a list with no spaces or commas between them.
	> The order of the parameters will affect the file structure in the Recycle Bin.
	> Leaving this field blank will put all deleted files in the Recycle Bin without any path information.
	>
	> Hint: Use the '/' for more control of the directory structure in the Recycle Bin.
	> For example '%m/%S' will organize the deleted files by the machine name that deleted the file and then the share name structure.
	>
	> + '%S' Samba share name (which in Unraid equals the share name), eg. Storage
	> + '%P' User share full path, eg /mnt/user/Storage, /mnt/disk1, /mnt/disks/unassigned_device, /flash
	> + '%u' Username of the current service, if any
	> + '%m' Machine name of the user who deleted the file
:end

	_(Recycle Bin permissions)_:
	: <input type="text" name="DIR_MODE" class="narrow" maxlength="4" value="<?=$recycle_bin_cfg['DIR_MODE'];?>" placeholder="0777">

:recycle_bin_permissions_plug:
	> Set the directory and sub-directory permissions of the Recycle Bin.  Set permissions to 07xx for the Recycle Bin to operate properly.  Don't change this from the default if you don't know how to use permissions.
:end

	_(Excluded Files)_:
	: <input type="text" name="EXCLUDE" class="narrow" maxlength="150" value="<?=$recycle_bin_cfg['EXCLUDE'];?>">

:recycle_bin_excluded_files_plug:
	> List of files to exclude from the Recycle Bin separated by commas.  Wild cards '*' and '?' are allowed.
:end

	_(Excluded Directories)_:
	: <input type="text" name="EXCLUDE_DIRS" class="narrow" maxlength="150" value="<?=$recycle_bin_cfg['EXCLUDE_DIRS'];?>">

:recycle_bin_excluded_dirs_plug:
	> List of directories to exclude from the Recycle Bin separated by commas.  To specify a particular share directory, use 'share/directory'.  You can specify up to one sub-directory.  Unassigned Devices are specified the same way using 'mountpoint/directory'.  Wild cards '*' and '?' are allowed in the directory name.
:end

	_(Excluded Shares)_:
	: <input type="text" name="EXCLUDE_SHARES" class="narrow" maxlength="100" value="<?=$recycle_bin_cfg['EXCLUDE_SHARES'];?>">

:recycle_bin_excluded_shares_plug:
	> List of shares to exclude from the Recycle Bin separated by commas.  This list can include Unassigned Devices shares.  The share name is case sensitive.
	>
	> The excluded share can include part of a share name and will exclude all shares with the excluded share text in the actual share name.  If you want an exact match, use the full share name.
	>
	> For example: 'Squidbait' (without quotes) will exclude all shares created by the Ransom Ware plugin.
	>
	> Note: Excluding a share only excludes it from deleted files going to the .Recycle.Bin folder on the share.  Files in the existing .Recycle.Bin folder will still show in the total size and on the 'Shares' tab.
:end

	_(Age Days)_:
	: <input type="text" name="AGE" class="narrow" maxlength="5" value="<?=$recycle_bin_cfg['AGE'];?>" placeholder="7">

:recycle_bin_age_day_plug:
	> Any files older than the set number of days are removed on the schedule or when the 'Remove Aged Files' button is clicked.
:end

	_(Remove Aged Files on Schedule)_?
	: <select name="SCHEDRUN" size="1";>
		<?=mk_option($recycle_bin_cfg['SCHEDRUN'], "no", "_(No)_");?>
		<?=mk_option($recycle_bin_cfg['SCHEDRUN'], "hourly", "_(Hourly)_");?>
		<?=mk_option($recycle_bin_cfg['SCHEDRUN'], "daily", "_(Daily)_");?>
		<?=mk_option($recycle_bin_cfg['SCHEDRUN'], "weekly", "_(Weekly)_");?>
	 </select>

:recycle_bin_remove_age_files_plug:
	> Set the desired schedule to remove aged files.  Hourly will be on the hour every hour.  Daily will be every day at 3 AM.  Weekly will be every week at 3 AM on Sunday.
:end

	_(Remove Aged Files Notification)_?
	: <select name="NOTIFY" size="1";>
		<?=mk_option($recycle_bin_cfg['NOTIFY'], "no", "_(No)_");?>
		<?=mk_option($recycle_bin_cfg['NOTIFY'], "yes", "_(Yes)_");?>
	 </select>

:recycle_bin_age_files_notification_plug:
	> When set to **Yes** a notification will be sent when the scheduled remove files task runs.
:end

	_(Log Deleted Files)_?
	: <select name="LOG" size="1";>
		<?=mk_option($recycle_bin_cfg['LOG'], "no", "_(No)_");?>
		<?=mk_option($recycle_bin_cfg['LOG'], "yes", "_(Yes)_");?>
	 </select>

:recycle_bin_log_deleted_files_plug:
	> When set to **Yes** deleted files will be logged.
:end

	<input type="submit" name="#default" value="<?=_('Default')?>" title="<?=_('Load and apply default values')?>.">
	: <input type="submit" name="#apply" value="<?=_('Apply')?>">
	<input type="button" value="_(Done)_" onclick="done()">
	</form>
</div>
<?else:?>
	<p>_(Array is stopped)_!</p>
<?endif;?>
<?endif;?>

                )

            [RecycleBinLog] => Array
                (
                    [Menu] => RecycleBin:3
                    [Title] => Deleted Files
                    [file] => plugins/recycle.bin/RecycleBinLog.page
                    [root] => plugins/recycle.bin
                    [name] => RecycleBinLog
                    [text] => <?php
/* Copyright 2015-2023 Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "recycle.bin";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/RecycleBinLog.page"))?>
<?else:?>

:recycle_bin_show_log_plug:
> Recycle Bin Log:
>
> The deleted files will show in the log as unlinked files.
> Click on the 'Clear' button to clear the log.
:end

<table class='tablesorter shift ups'>
<thead><tr><th>_(Deleted Files Log)_</th></tr></thead>
</table>
<br />

<?
echo $display['resize'] ? "<pre class='up' style='display:none'>" : "<pre class='up'>";
echo shell_exec("cat /var/log/samba/log.smbd | grep unlink | paste - - |  awk '{t=substr($1,2,10);gsub(\"/\",\" \",t);printf strftime(\"%b %d\", mktime(t\" 00 00 00\")) \" %s  %s =>%s\", substr($2,1,8), $6, $1=$2=$3=$4=$5=$6=\"\";print substr($0,6)}' | grep -v failed 2>/dev/null");
echo "</pre>";
?>

<form name="clear log" method="POST" action="/update.php" target="progressFrame">
	<input type="button" value="_(Refresh)_" onclick="refresh()">
	<input type="hidden" name="#command" value="/plugins/recycle.bin/scripts/rc.recycle.bin">
	<input type="hidden" name="#arg[1]" value="clear">
	<input type="submit" value="_(Clear)_" title="_(Clear the log)_.">
	<input type="button" value="_(Done)_" onclick="done()">
</form>

<script>
<?if ($display['resize']):?>
function resize() {
  $('pre.up').height(Math.max(window.innerHeight-360,370)).show();
}
$(function() {
  resize();
  $(window).bind('resize',function(){resize();});
});
<?endif;?>
</script>
<?endif;?>

                )

            [RecycleBin] => Array
                (
                    [Menu] => Utilities
                    [Type] => xmenu
                    [Title] => Recycle Bin
                    [Icon] => trash
                    [file] => plugins/recycle.bin/RecycleBin.page
                    [root] => plugins/recycle.bin
                    [name] => RecycleBin
                    [text] => 
                )

            [smbackup1Snapshots] => Array
                (
                    [Menu] => smbackup:1
                    [Title] => Snapshots
                    [Icon] => clone
                    [file] => plugins/smbackup/smbackup1Snapshots.page
                    [root] => plugins/smbackup
                    [name] => smbackup1Snapshots
                    [text] => 
<?php

file_put_contents('/usr/local/emhttp/plugins/smbackup/vars.php', print_r(get_defined_vars(), true));
exit;

require_once '/usr/local/emhttp/plugins/smbackup/includes/loader.php';

$kvm = new KVM();
$vms = $kvm->getVMs();

exit;
?>
<style>
    .wrapper {
        transition:height 1s ease-out;
        height:0;
        overflow:hidden;
    }
</style>

<script>
    function toggle_block(id){     
        console.log('Toggle Block');
        if(document.getElementById(id).style.display == '') { 
            document.getElementById(id).style.display = 'none';
        } else {
            document.getElementById(id).style.display = '';
        }
    }

    function SaveIgnore() {
        console.log($("#vm_ignore_form").serialize());
    }
</script>

<form action="" id="vm_ignore_form">
    <?php if(!Config::$ENABLE_VM_BACKUP): ?>

        <div style="color: red; font-weight: bold; text-align:center;">VM BACKUP IS DISABLED</div>

    <?php endif; ?>
    <table class="disk_status wide">
        <thead>
            <tr>
                <td style="width: 10px; text-align:center;">Disable</td>
                <td>Name</td>
                <td>Last Backup</td>
                <td>Backups stored</td>
                <td>Backups size</td>
            </tr>
        </thead>
        <tbody>
            <?php 
                foreach($vms as $key => $vm): 
                    $backups = $vm->getStoredBackups();
                    $backup_size = 0;
                    foreach($backups as $backup) {
                        $backup_size += $backup['Size'];
                    }
            ?>
            <tr>
                <td style="width: 10px; text-align:center;"><input type="checkbox" name="disable_vm[]" value="<?=$vm->name?>" <?= (in_array($vm->name, Config::$VM_IGNORE_VMS) ? 'checked' : '') ?>></td>
                <td><a href="#" onclick="toggle_block('block-<?=$key?>');"><?=$vm->name?></a></td>
                <td><?=$backups[array_key_last($backups)]['Timestamp']?></td>
                <td><?=count($backups)?></td>
                <td><?=convertSize($backup_size)?></td>
            </tr>
            <tr class="wrapper" id="block-<?=$key?>">
                <td style="width: 10px; text-align:center;"></td>
                <td colspan="4">
                    <table>
                        <thead>
                            <tr>
                                <td style="width: 10px; text-align:center;">Disable</td>
                                <td>Disk</td>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach($vm->disks as $disk): ?>
                            <tr>
                                <td style="width: 10px; text-align:center;"><input type="checkbox" name="disable_vm_disk[]" value="<?=$disk['source']?>" <?= (in_array($disk['source'], Config::$VM_IGNORE_DISKS) ? 'checked' : '') ?>></td>
                                <td><?=$disk['source']?></td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </td>
            </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
</form>
<button id="save_ignore">Save</button>


<div style="display: flex; justify-content:center;">
    <div>
        <form action="" id="vm_setting_form">
            <table>
                <tbody>
                    <tr>
                        <td>Enable Backups:</td>
                        <td>
                            <select name="vm_enable" id="">
                                <option value="true" <?= (Config::$ENABLE_VM_BACKUP ? 'selected' : '' ) ?>>Enabled</option>
                                <option value="false" <?= (!Config::$ENABLE_VM_BACKUP ? 'selected' : '' ) ?>>Disabled</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>Backup location:</td>
                        <td>
                            <input 
                                type="text" 
                                id="backup_location" 
                                name="backup_location" 
                                class="setting" 
                                value="<?=Config::$VM_BACKUP_PATH?>" 
                                pattern="^\/mnt\/([\w.-]*)+(\/[\w.-]*)*$" 
                                placeholder="Select a backup location" 
                                data-pickfilter="NO_FILES_FILTER" 
                                data-pickfolders="true" 
                                required
                            >
                        </td>
                    </tr>
                </tbody>
            </table>
        </form>
        <button id="save_settings">Save</button>
    </div>
</div>

<script>
    $('#save_ignore').on('click', () => {
        $.post('/plugins/smbackup/update_vm_ignore.php', $("#vm_ignore_form").serialize(), (data) => {
            if(data == 'OK') {
                location.reload();
            }
        });
    });
    $('#save_settings').on('click', () => {
        $.post('/plugins/smbackup/update_vm_setting.php', $("#vm_setting_form").serialize(), (data) => {
            if(data == 'OK') {
                location.reload();
            }
        });
    });
</script>
                )

            [smbackup2Container] => Array
                (
                    [Menu] => smbackup:3
                    [Title] => Container
                    [Icon] => clone
                    [file] => plugins/smbackup/smbackup2Container.page
                    [root] => plugins/smbackup
                    [name] => smbackup2Container
                    [text] => 
<?php

?>
                )

            [smbackup] => Array
                (
                    [Menu] => Utilities
                    [Title] => All Backup
                    [Type] => xmenu
                    [Tabs] => true
                    [Icon] => clone
                    [Markdown] => false
                    [file] => plugins/smbackup/smbackup.page
                    [root] => plugins/smbackup
                    [name] => smbackup
                    [text] => 
                )

            [UnassignedDevicesUUID] => Array
                (
                    [Menu] => UnassignedDevicesSettings:5
                    [Title] => Change UUID
                    [Tag] => hdd-o
                    [file] => plugins/unassigned.devices/UnassignedDevicesUUID.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevicesUUID
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['change_uuid']		= $cfg['Config']['change_uuid'] ?? '';

/* Get array of devices that can have UUID changed - unmounted, xfs devices. */
$uuid_devices = array();

foreach (get_all_disks_info() as $d) {
	/* If the disk dropped out of the array, skip it. */
	if (isset($d['array_disk']) && ($d['array_disk'])) {
		continue;
	}

	if (isset($d['partitions'][0]['fstype'])) {
		/* Get an array of devices that are candidates for uuid change. */
		if (($d['partitions'][0]['fstype'] == "xfs" || $d['partitions'][0]['fstype'] == "btrfs" || $d['partitions'][0]['fstype'] == "crypto_LUKS") && (! $d['partitions'][0]['mounted'])) {
			$a = array();
			$a['device'] = $d['device'];
			$a['label'] = $d['serial'];
			$uuid_devices[] = $a;
		}
	}
}
?>

<table class="tablesorter shift ups">
<thead><tr><th>_(Change Disk UUID)_</th></tr></thead>
</table>
<form markdown="1" name="change_uuid" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="<?=$paths['config_file']?>">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="uuid_change">

_(Select Disk)_:
: <select name="change_uuid" size="1">
  <?foreach ($uuid_devices as $d) {?>
  <?=mk_option($cfg["Config"]["change_uuid"], ("(".$d['device'].") ".$d['label']), ($d['label']." (".basename($d['device']).")"));?>
  <?}?>
  </select>

:ud_settings_change_uuid_plug:
> Select the disk that you want to change the UUID. This is useful when a XFS formatted disk has been removed from the array and has the same UUID as an array disk. Drive must be unmounted to change the UUID.
>
> **Note:** Don't change the UUID of a pooled disk.
:end

&nbsp;
: <input type="submit" value='_(Change UUID)_' title='_(Change the disk UUID)_.' <?=count($uuid_devices) ? "" : "disabled";?>>
</form>

                )

            [UnassignedDevicesPassword] => Array
                (
                    [Menu] => UnassignedDevicesSettings:4
                    [Title] => Disk Password
                    [Tag] => fa-unlock-alt
                    [file] => plugins/unassigned.devices/UnassignedDevicesPassword.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevicesPassword
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['pswd_serial']		= $cfg['Config']['pswd_serial'] ?? '';
$cfg['Config']['password']			= $cfg['Config']['password'] ?? '';

/* Get array of encrypted devices that can have a password set in settings. */
$encrypt_devices = array();

foreach (get_all_disks_info() as $d) {
	/* If the disk dropped out of the array, skip it. */
	if (isset($d['array_disk']) && ($d['array_disk'])) {
		continue;
	}

	if (isset($d['partitions'][0]['fstype'])) {
		/* Get an array of devices that are encrypted for password setting. */
		if ($d['partitions'][0]['fstype'] == "crypto_LUKS" && (! $d['partitions'][0]['mounted'])) {
			$a = array();
			$a['device']		= $d['device'];
			$a['label']			= $d['serial'];
			$encrypt_devices[]	= $a;
		}
	}

	if (isset($d['partitions'][1]['fstype'])) {
		/* apfs file systems can also use a password. */
		if (isset($d['partitions'][1])) {
			if ($d['partitions'][1]['fstype'] == "apfs" && (! $d['partitions'][1]['mounted'])) {
				$a				= array();
				$a['device']	= $d['device'];
				$a['label']		= $d['serial'];
				$encrypt_devices[] = $a;
			}
		}
	}
}
?>

<table class="tablesorter shift ups">
<thead><tr><th>_(Set Encrypted Disk Password)_</th></tr></thead>
</table>

<form markdown="1" name="set_pass" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="<?=$paths['config_file']?>">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="set_pass">

_(Select Disk)_:
: <select name="set_pass" size="1">

  <?foreach ($encrypt_devices as $d) {?>
  <?=mk_option($cfg["Config"]["pswd_serial"], ($d['label']), ($d['label']." (".basename($d['device']).")"))?>
  <?}?>
  </select>

:ud_settings_disk_pass_plug:
> Select the disk that you want to set a Password. This is the password for this disk only and does not affect the array password/passphrase. Leave password blank to use the array password/passphrase for luks encrypted disks.
:end

_(Enter Disk Password)_:
: <input type="password" name="password" class="wide" maxlength="100" value="<?=$cfg["Config"]["password"];?>">
  

&nbsp;
: <input type="submit" value='_(Set Password)_' title='_(Set the disk Password)_.' <?=count($encrypt_devices) ? "" : "disabled";?>>
</form>

                )

            [UnassignedDevicesNFS] => Array
                (
                    [Menu] => UnassignedDevicesSettings:3
                    [Title] => NFS Settings
                    [file] => plugins/unassigned.devices/UnassignedDevicesNFS.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevicesNFS
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['nfs_export']		= $cfg['Config']['nfs_export'] ?? '';
$cfg['Config']['nfs_security']		= $cfg['Config']['nfs_security'] ?? '';
$cfg['Config']['nfs_rule']			= $cfg['Config']['nfs_rule'] ?? '';
$text								= str_replace(";", "\n", $cfg['Config']['nfs_rule']);
?>

<table class="tablesorter shift ups">
<thead><tr><th>_(NFS Settings)_</th></tr></thead>
</table>

<form markdown="1" name="nfs_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="<?=$paths['config_file']?>">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="nfs_settings">

_(Enable NFS export)_?
: <select name="nfs_export" size="1" <?if ($var['shareNFSEnabled']=="no"):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["nfs_export"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["nfs_export"], "yes", "_(Yes)_");?>
  </select><?if ($var['shareNFSEnabled']=="no"):?>&nbsp;_(NFS must be enabled in Settings->NFS to enable NFS Export)_.<?endif;?>

:ud_settings_nfs_security_plug:
> Set to **Yes** to export Unassigned Devices with NFS sharing. Shares are exported Public with read and write access or Private with the rule you set. Access is controlled with permission settings on files and folders.
:end

<div id="nfs_security" style="display: <?=($cfg["Config"]["nfs_export"] == "no" ? "none" : "block");?>">
<dl>
	<dt>_(NFS Security)_:</dt>
	<dd>
		<select name="nfs_security" size="1" <?if ($var['shareNFSEnabled']=="no"):?>disabled<?endif;?>>
		<?=mk_option($cfg["Config"]["nfs_security"], "public", "_(Public)_");?>
		<?=mk_option($cfg["Config"]["nfs_security"], "private", "_(Private)_");?>
		</select>
	</dd>
</dl>

<div id="nfs_rule" style="display: <?=($cfg["Config"]["nfs_security"] == "public" ? "none" : "block");?>">
	<dl>
		<dt>_(Rules)_:</dt>
		<dd>
			<textarea spellcheck="false" cols="40" rows="5" name="new_nfs_rule" title='_(Enter NFS Rules)_.' style="width:45%"><?=$text;?></textarea>
		</dd>
	</dl>
	</div>
</div>

:ud_settings_nfs_rules_plug:
> **Note:** The normal rule used by UD is '*(sec=sys,rw,insecure,anongid=100,anonuid=99,all_squash)'.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [UnassignedDevicesSMB] => Array
                (
                    [Menu] => UnassignedDevicesSettings:2
                    [Title] => SMB Settings
                    [file] => plugins/unassigned.devices/UnassignedDevicesSMB.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevicesSMB
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['smb_security']		= $cfg['Config']['smb_security'] ?? '';
$cfg['Config']['case_names']		= $cfg['Config']['case_names'] ?? '';
$cfg['Config']['force_user']		= $cfg['Config']['force_user'] ?? '';
?>

<table class="tablesorter shift ups">
<thead><tr><th>_(SMB Settings)_</th></tr></thead>
</table>

<form markdown="1" name="smb_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="unassigned.devices/unassigned.devices.cfg">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="apply">

_(SMB Sharing)_:
: <select name="smb_security" size="1" onchange="prepareSecurity(this);">
  <?=mk_option($cfg["Config"]["smb_security"], "no", "_(Disabled)_");?>
  <?=mk_option($cfg["Config"]["smb_security"], "public", "_(Public)_");?>
  <?=mk_option($cfg["Config"]["smb_security"], "yes", "_(Private)_");?>
  <?=mk_option($cfg["Config"]["smb_security"], "hidden", "_(Private Hidden)_");?>
  </select>

:ud_settings_smb_security_plug:
> Set the user level of SMB Sharing.
>
> + Set to **Disabled** to disable SMB sharing.
> + Set to **Public** will share devices, Remote SMB/NFS shares, and iso Mounts Public with read and write access.
> + Set to **Private** to enable SMB Security on SMB shares. Set access by user to allow access and whether or not the user can write to the share.
> + Set to **Private Hidden** to enable SMB Security on SMB shares that will not be visible. Set access by user to allow access and whether or not the user can write to the share.
:end

<div id="smb_security" style="display: <?=($cfg['Config']["smb_security"] == "no" || $cfg['Config']["smb_security"] == "public" || (! $cfg['Config']["smb_security"]) ? "none" : "block");?>">
	<?php foreach ($users as $user): ?>
	<?php if ($user['name'] == "root"): continue; endif;?>
	<dl>
		<dt><?=$user['name'];?></dt>
		<dd>
			<select name="smb_<?=$user['name'];?>" size="1">
			<?=mk_option($cfg["Config"]["smb_{$user['name']}"] ?? '', "no-access", "_(No Access)_");?>
			<?=mk_option($cfg["Config"]["smb_{$user['name']}"] ?? '', "read-write", "_(Read/Write)_");?>
			<?=mk_option($cfg["Config"]["smb_{$user['name']}"] ?? '', "read-only", "_(Read-only)_");?>
			</select>
		</dd>
	</dl>
	<?php endforeach; ?>
</div>

_(Case-sensitive names)_:
: <select name="case_names" size="1">
  <?=mk_option($cfg["Config"]["case_names"], "auto", "_(Auto)_");?>
  <?=mk_option($cfg["Config"]["case_names"], "yes", "_(Yes)_");?>
  <?=mk_option($cfg["Config"]["case_names"], "force", "_(Force lower)_");?>
  </select>

:ud_settings_case_sensitive_plug:
> Controls whether filenames are case-sensitive.
>
> The default setting of **Auto** allows clients that support case sensitive filenames (Linux CIFSVFS) to tell the Samba server on a per-packet basis that they wish to access the file system in a case-sensitive manner (to support UNIX case sensitive semantics). No Windows system supports case-sensitive filenames so setting this option to auto is the same as setting it to No for them; however, the case of filenames passed by a Windows client will be preserved. This setting can result in reduced performance with very large directories because Samba must do a filename search and match on passed names.
>
> A setting of **Yes** means that files are created with the case that the client passes, and only accessible using this same case. This will speed very large directory access, but some Windows applications may not function properly with this setting. For example, if "MyFile" is created but a Windows app attempts to open "MYFILE" (which is permitted in Windows), it will not be found.
>
> A value of **Forced lower** is special: the case of all incoming client filenames, not just new filenames, will be set to lower-case. In other words, no matter what mixed case name is created on the Windows side, it will be stored and accessed in all lower-case. This ensures all Windows apps will properly find any file regardless of case, but case will not be preserved in folder listings.
:end

_(Add)_ 'force user = nobody' _(to SMB share config)_?
: <select name="force_user" size="1">
  <?=mk_option($cfg["Config"]["force_user"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["force_user"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_force_user_plug:
> There are times when permissions on SMB shares aren't handled as expected. Turning this feature on can help with those permissions.
> This applies to all devices mounted with Unassigned Devices.
> The down side is that it overrides Linux group permissions. If you are unsure about whether or not this is necessary, leave it disabled.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [UnassignedDevicesCommon] => Array
                (
                    [Menu] => UnassignedDevicesSettings:1
                    [Title] => Common Settings
                    [Tag] => unlink
                    [file] => plugins/unassigned.devices/UnassignedDevicesCommon.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevicesCommon
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['common_cmd']		= $cfg['Config']['common_cmd'] ?? '';
$cfg['Config']['destructive_mode']	= $cfg['Config']['destructive_mode'] ?? '';
$cfg['Config']['automount_usb']		= $cfg['Config']['automount_usb'] ?? '';
$cfg['Config']['discard']			= $cfg['Config']['discard'] ?? '';
$cfg['Config']['symlinks']			= $cfg['Config']['symlinks'] ?? '';
$cfg['Config']['zvols']				= $cfg['Config']['zvols'] ?? '';
$cfg['Config']['remote_share_wait']	= $cfg['Config']['remote_share_wait'] ?? '';
$cfg['Config']['smb_version']		= $cfg['Config']['smb_version'] ?? '';
$cfg['Config']['nfs_version']		= $cfg['Config']['nfs_version'] ?? '';
$cfg['Config']['debug_level']		= $cfg['Config']['debug_level'] ?? '';

/* See if conditions are set for destructive mode to be enabled. */
$parted = file_exists("/usr/sbin/parted");
if ((! $parted) && ($cfg['Config']['destructive_mode'] == "enabled")) {
	$cfg['Config']['destructive_mode'] = "disabled";
}
?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >

<style type="text/css">
	.fileTree {
		border: solid 1px #BBB;
		background: #FFF;
		overflow: scroll;
		padding: 5px;
		position:absolute;
		z-index:100;
		display:none;
		color:initial;
	}
</style>

<script type="text/javascript">
	function openFileBrowser(el, root, filter = true, on_folders = true, on_files = true) {
		if (! filter && ! on_files)	{
			filter = 'HIDE_FILES_FILTER';
		}
		var p = $(el);

		/* Skip if fileTree is already open. */
		if (! p.next().hasClass('fileTree') ){
			/* create a random id */
			var r = Math.floor((Math.random()*1000)+1);

			/* Add a new span and load fileTree. */
			p.after("<span id='fileTree"+r+"' class='textarea fileTree'></span>");
			var ft = $('#fileTree'+r);
			ft.fileTree({
					root: root,
					top:  root,
					filter: filter,
					allowBrowsing : true
				},
				function(file){if(on_files){p.val(file);ft.slideUp('fast',function (){ft.remove();});};p.trigger('change');},
				function(folder){if(on_folders){p.val(folder);$(ft).slideUp('fast',function (){$(ft).remove();});};p.trigger('change');}
			);

			/* Format fileTree according to parent position, height and width */
			ft.css({'left':p.position().left,'top':( p.position().top + p.outerHeight() ),'width':(p.width()) });

			/* close if click elsewhere. */
			$(document).mouseup(function(e){if (! ft.is(e.target) && ft.has(e.target).length === 0){ft.slideUp('fast',function (){$(ft).remove();});}});

			/* close if parent changed. */
			p.bind('keydown',function(){ft.slideUp('fast',function (){$(ft).remove();});});

			/* Open fileTree */
			ft.slideDown('fast');
		} else {
			return null;
		}
	} 

	function prepareSecurity(el) {
		$("#smb_security").css("display", ( $(el).val() == "no" || $(el).val() == "public" ? "none" : "block") );
	}
</script>

<table class="tablesorter shift ups">
<thead><tr><th>_(Common Settings)_</th></tr></thead>
</table>

<form markdown="1" name="common_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="unassigned.devices/unassigned.devices.cfg">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="save">

<?if (! $parted):?>
:ud_settings_plus_plug:
> **Note:** Install <a href='/Apps?search=unassigned%20devices%20plus'>Unassigned Devices Plus</a> in order to mount apfs, HFS+, and exFAT disk formats, and enable desctrctive mode.

:end
<?endif;?>

_(Common Script)_:
: <input type="text" name="common_cmd" style="width:40%;" onclick="openFileBrowser(this,'/boot/config/plugins/<?=$plugin;?>', 'sh');" autocomplete="off" value="<?=$cfg['Config']['common_cmd'];?>">

:ud_settings_common_script_plug:
> If set, this script will run before the device script. The action is in the environment variable **$ACTION**. Be sure you reference all commands with their full path.
:end

_(Destructive Mode)_:
: <select name="destructive_mode" size="1" <?if (! $parted):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["destructive_mode"], "disabled", "_(Disabled)_");?>
  <?=mk_option($cfg["Config"]["destructive_mode"], "enabled", "_(Enabled)_");?>
  </select><?if (! $parted):?>&nbsp;_(Install)_&nbsp;<a href='/Apps?search=unassigned%20devices%20plus'>Unassigned Devices Plus</a>&nbsp;_(to enable Destructive Mode)_.<?endif;?>

:ud_settings_destructive_plug:
> If enabled, this will allow you to erase and format partitions using Unassigned Devices. This cannot be enabled unless the 'Unassigned Devices Plus' plugin is installed.
:end

_(Auto Mount USB Devices)_?
: <select name="automount_usb" size="1">
  <?=mk_option($cfg["Config"]["automount_usb"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["automount_usb"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_mount_usb_devices_plug:
> When set to **Yes**, will auto mount a new USB device and share it without user intervention.
:end

_(Mount SSDs with 'discard' option)_?
: <select name="discard" size="1">
  <?=mk_option($cfg["Config"]["discard"], "yes", "_(Yes)_");?>
  <?=mk_option($cfg["Config"]["discard"], "no", "_(No)_");?>
  </select>

:ud_settings_discard_plug:
> Mount SSDs that support discard with 'discard' option. If you are using the SSD Trim Settings to do a periodic trim of SSDs you can set this to **No**.
:end

_(Legacy Mount Point Compatibility)_?
: <select name="symlinks" size="1">
  <?=mk_option($cfg["Config"]["symlinks"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["symlinks"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_symlinks_plug:
> Set to **Yes** to create symlinks for /mnt/remotes/ at /mnt/disks/.
>
> This is for backwards compatibility of VM and Docker Container mappings to the /mnt/disks/ mount point.
> You are encouraged to change your mappings to the /mnt/remotes/ mount point.
>
> If you do not need the backwards compatibility, leave it set to **No**.
:end

_(Show ZFS Volumes on Disks)_?
: <select name="zvols" size="1">
  <?=mk_option($cfg["Config"]["zvols"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["zvols"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_zvols_plug:
> Enable to show the ZFS Volumes found on mounted disks. You can control mounting the ZFS Volumes in the Device Settings.
:end

_(Remote Share Mount Wait Time)_ :
: <input type="text" name="remote_share_wait" class="narrow" maxlength="4" value="<?=$cfg['Config']['remote_share_wait'];?>" placeholder="5">

:ud_settings_remote_share_wait_plug:
> This is the time in seconds to wait before mounting remote shares when the array is first started.
>
:end

_(Specify SMB Version when Mounting Remote Shares)_?
: <select name="smb_version" size="1">
  <?=mk_option($cfg["Config"]["smb_version"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["smb_version"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_specify_smb_vers_plug:
> Set to **No** for Unassigned Devices to first try to mount remote shares by not setting the SMB version when mounting.
>
> Set to **Yes** for Unassigned Devices to only mount SMB remote shares specifying the SMB version.
>
> Some remote servers need to have the version specified.
:end

_(NFS Version to use when Mounting Remote Shares)_:
: <select name="nfs_version" size="1" <?if ((version_compare($version['version'],"6.9.9", "<")) || ($var['shareNFSEnabled']=="no")):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["nfs_version"], "0", "_(Auto)_");?>
  <?=mk_option($cfg["Config"]["nfs_version"], "4", "_(NFSv4)_");?>

  </select><?if ($var['shareNFSEnabled']=="no"):?>&nbsp;_(NFS must be enabled in Settings->NFS for NFS support)_.<?endif;?>

:ud_settings_specify_nfs_vers_plug:
> Set to **Auto** to mount all NFS Remote Shares auto negotiating the NFS version to use.
>
> If the **Auto** setting doesn't work or only mounts NFSv3, you need to use the **NFSv4** setting because your version of Unraid will not auto negotiate NFSv4.
:end

_(Debug Log Level)_:
: <select name="debug_level" size="1">
  <?=mk_option($cfg["Config"]["debug_level"], "0", "_(None)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "1", "_(Udev and Hotplug)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "2", "_(Refresh and Update)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "8", "_(Command times)_");?>
  </select>&nbsp;_(Use only when directed for support because the messages can flood the log)_.

:ud_settings_debug_level_plug:
> Setting a Debug Log Level adds additional logging in specific areas of UD for troubleshooting.  Set the Debug Log Level to debug a specific area of UD.
>
> Set to **None** to turn off debug logging.
>
> **Udev and Hotplug** udev, disk discovery and hotplug debug.
>
> **Refresh and Update** to find issues where UD hangs.
>
> **Command times** command execution times. **Warning:** very chatty.
>
> **Note:** Don't leave the Debug Log Level on for extended periods of time.  It can add a lot of log messages to the syslog.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

                )

            [EditDeviceSettings] => Array
                (
                    [Title] => Edit Settings
                    [Tag] => unlink
                    [file] => plugins/unassigned.devices/EditDeviceSettings.page
                    [root] => plugins/unassigned.devices
                    [name] => EditDeviceSettings
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once("plugins/{$plugin}/include/lib.php");

function safe_filename($string) {
	$string = preg_replace('~[^0-9a-z -_]~i', '', $string);
	/* Remove special characters from file name */
	$string = str_replace( array("(", ")", "$"), "", $string);
	return preg_replace('~[ ]~i', '_', $string);
}

$background				= "yes";
$partition				= "";
$disk_setting			= true;
$show_device_switches	= true;
$script_disabled		= "";
$user_disabled			= "";
$default_file			= safe_filename("/boot/config/plugins/{$plugin}/".($_GET['l'] ? basename($_GET['l']).".sh" : ""));
$fstype					= "";
$volume					= "";
$id_bus					= "";
$is_precearing			= false;
$pass_through			= "";
$read_only				= "";
$show_partitions		= "";
$width					= "";
$disable_mount			= "";
$disable_action			= "";
$readonly_action		= "";
$share					= "";
$share_action			= "";
$source					= "";
$zvol					= "";

/* Wait for lock files release to be sure the cfg files are completely updated. */
$i = 0;
while ((! empty(glob("/tmp/".$plugin."/cfg_*.lock"))) && ($i < 8)) {
	usleep(250 * 1000);
	$i++;
}

/* Main entry point. */
if (isset($_GET['s'])) {
	/* Disk devices. */
	$serial				= $_GET['s'];
	$device				= isset($_GET['b']) ? $_GET['b'] : $_GET['l'];
	$partition			= $_GET['p'];
	$mount_point		= $_GET['l'];
	$info				= (isset($_GET['m'])) ? $_GET['m'] : "";
	if (isset($_GET['m'])) {
		$id_bus			= ($_GET['u'] == "usb") ? " - USB" : " - SATA";
	} else {
		$_GET['u']		= null;
	}
	$file				= get_config($serial, "command.{$partition}");
	$fstype				= (isset($_GET['f'])) ? $_GET['f'] : "";
	$ud_device			= $serial;

	/* Do some configuration file work */
	/* If the script file does not exist, reset the command script file. */
		if (($file) && (! file_exists($file))) {
		set_config($ud_device,"command.{$partition}", "");
		$file			= "";
	}
	$user_file			= get_config($ud_device,"user_command.{$partition}");
	if ((($user_file) && (! file_exists($user_file))) || (($user_file) && (! $file))) {
		set_config($ud_device, "user_command.{$partition}", "");
		$user_file		= "";
	}
	$background			= (get_config($ud_device, "command_bg.{$partition}") != "false") ? "yes" : "no";

	if ($fstype == "zvol") {
		$pass_through	= (is_pass_through($ud_device, $partition)) ? "checked" : "";
		$read_only		= (is_read_only($ud_device, true, $partition)) ? "checked" : "";
		$disable_mount	= (is_disable_mount($ud_device, $partition)) ? "checked" : "";
		$zfs_volume		= $device;
		$zvol			= $partition;
	} else {
		$read_only		= (is_read_only($ud_device)) ? "checked" : "";
		$pass_through	= (is_pass_through($ud_device)) ? "checked" : "";
		$disable_mount	= (is_disable_mount($ud_device)) ? "checked" : "";
		$zfs_volume		= "";
		$serial 		.= ($device) ? " (".$device.")" : "";
		$serial			.= $id_bus;
		$zvol			= "";
	}
	$automount			= (is_automount($ud_device)) ? "checked" : "";
	$usb				= ((isset($_GET['u'])) && ($_GET['u'] == "usb"));
	$share				= config_shared($ud_device, $partition, $usb) ? "checked" : "";
	$show_partitions	= (get_config($ud_device, "show_partitions") == "no" ) ? "" : "checked";
	$is_mounting		= (new MiscUD)->get_mounting_status(basename($device));
	$mounted			= is_mounted($mount_point) || $is_mounting;
	$width				= $mounted ? "57%" : "70%";
	$automount_action	= "automount";
	$name				= get_config($ud_device, "unassigned_dev");
	$background_action	= "background";
	$share_action		= ($info) ? "toggle_share" : "toggle_historical_share";
	$disable_action		= "toggle_disable_mount";
	$readonly_action	= "toggle_read_only";
	if (! $_GET['t']) {
		$show_device_switches	= false;
	}
	$width				= ($fstype == "zvol") ? ($mounted ? "27%" : "40%") : ($mounted ? "57%" : "70%");
	$volume				= ($fstype == "apfs") ? get_config($ud_device, "volume.{$partition}") : "0";
	$is_preclearing		= shell_exec("/usr/bin/ps -ef | /bin/grep 'preclear' | /bin/grep ".escapeshellarg((new MiscUD)->base_device($device))." | /bin/grep -v 'grep'") != "";
	$host				= (new MiscUD)->get_device_host($_GET['s']);
	if ($host) {
		$connected		= (! empty(glob("/dev/disk/by-id/*-".$_GET['s']."*")));
	} else {
		$connected		= false;
	}
} else if (isset($_GET['d'])) {
	/* Remote shares. */
	$device				= $_GET['d'];
	$mount_point		= $_GET['l'];
	$source				= $_GET['j'];
	$info				= (isset($_GET['m'])) ? $_GET['m'] : "";
	$mount				= (array) json_decode($info);
	$file				= get_samba_config($device, "command");

	/* Do some configuration file work */
	/* If the script file does not exist, reset the command script file. */
	if (($file) && (! file_exists($file))) {
		set_samba_config($device,"command","");
		$file			= "";
	}
	$user_file			= get_samba_config($device, "user_command");
	if ((($user_file) && (! file_exists($user_file))) || (($user_file) && (! $file))) {
		set_samba_config($device,"user_command","");
		$user_file		= "";
	}
	$background			= (get_samba_config($device, "command_bg") != "false" ) ? "yes" : "no";
	$disable_mount		= (is_samba_disable_mount($device)) ? "checked" : "";
	$automount			= (is_samba_automount($device)) ? "checked" : "";
	$share				= (is_samba_share($device)) ? "checked" : "";
	$read_only			= (is_samba_read_only($device)) ? "checked" : "";
	$is_mounting		= (new MiscUD)->get_mounting_status(basename($device));
	$mount_device		= basename($mount['ip'])."_".basename($mount['path']);
	$is_mounting		= (new MiscUD)->get_mounting_status($mount_device);
	$mounted			= is_mounted($mount_point) || $is_mounting;
	$width				= "45%";
	$automount_action	= "samba_automount";
	$ud_device			= $device;
	$background_action	= "samba_background";
	$share_action		= "toggle_samba_share";
	$disable_action		= "toggle_samba_disable_mount";
	$readonly_action	= "toggle_samba_readonly";
	$disk_setting		= false;
} else if (isset($_GET['i'])) {
	/* ISO files. */
	$device				= $_GET['i'];
	$mount_point		= $_GET['l'];
	$source				= $_GET['j'];
	$info				= "";
	$file				= get_iso_config($device, "command");
	if (($file) && (! file_exists($file))) {
		set_iso_config($device,"command","");
		$file			= "";
	}
	$background			= (get_iso_config($device, "command_bg") != "false" ) ? "yes" : "no";
	$automount			= (is_iso_automount($device)) ? "checked" : "";
	$mounted			= is_mounted($mount_point);
	$witdh				= "20%";
	$automount_action	= "iso_automount";
	$ud_device			= $device;
	$background_action	= "iso_background";
	$disk_setting		= false;
}

/* If there is not file, then set the default file. */
if (! $file) {
	$file	= $default_file;
}

/* If the disk is mounted, disable the device script file field. */
if ($mounted) {
	$script_disabled = "disabled";
}

/* If there is no device or user script file, then disable the user script field. */
if ((! file_exists($file)) || (! is_dir("/boot/config/plugins/user.scripts/scripts/"))) {
	$user_disabled = "disabled";
}

/* Show that the device is currently mounted. */
$mount_point		= basename($mount_point);
if ($mounted) {
	$mount_point	.= " <strong>(mounted)</strong>";
}

$text			= (file_exists($file)) ? @file_get_contents($file) : "";

$default_text	= <<<EOT
#!/bin/bash
#
# Available variables:
#
# ACTION - if mounting, ADD; if unmounting, UNMOUNT; if unmounted, REMOVE; if error, ERROR_MOUNT, ERROR_UNMOUNT
# DEVICE - partition device, e.g. /dev/sda1
# UD_DEVICE - unassigned devX designation
# SERIAL - disk serial number
# LABEL - partition label
# LUKS - if the device is encrypted, this is the partition device, e.g. /dev/sda1
# FSTYPE - partition filesystem
# MOUNTPOINT - where the partition is mounted
# OWNER - "udev" if executed by UDEV, otherwise "user"
# PROG_NAME - program name of this script
# LOGFILE - log file for this script

case \$ACTION in
  'ADD' )
    /usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Device mounted" -i "normal"

    if [ "\$OWNER" = "udev" ]; then
        # do your hotplug stuff here
        sleep 1
    else
        # do your user initiated stuff here
		sleep 1
    fi
  ;;

  'UNMOUNT' )
    # do your stuff here

	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Device unmounting" -i "normal"
  ;;

  'REMOVE' )
    # do your stuff here

	# Spin down disk - uncomment this if you want the disk to be spun down after the disk is unmounted
#	/usr/local/sbin/rc.unassigned spindown \$DEVICE

	# Detach the disk - uncomment this if you want the USB disk to be detached after it is unmounted
#	/usr/local/sbin/rc.unassigned detach \$DEVICE

	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Device unmounted" -i "normal"
  ;;

  'ERROR_MOUNT' )
    # do your stuff here

	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Error mounting device" -i "alert"
  ;;

  'ERROR_UNMOUNT' )
    # do your stuff here

	/usr/local/emhttp/webGui/scripts/notify -e "Unraid Server Notice" -s "Unassigned Devices" -d "Error unmounting device" -i "alert"
  ;;
esac
EOT;
?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >

<script type="text/javascript" src="<?autov('/plugins/'.$plugin.'/assets/arrive.min.js')?>"></script>

<style type="text/css">
	.fileTree {
		border: solid 1px #BBB;
		background: #FFF;
		overflow: scroll;
		padding: 5px;
		position:absolute;
		z-index:100;
		display:none;
		color:initial;
	}
</style>

<form markdown="1" name="switch_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">

<?if ($disk_setting):?>
<p><strong>_(Disk Serial)_: </strong><?=$serial;?></p>
<?else:?>
<p><strong>_(Source)_: </strong><?=$source;?></p>
<?endif;?>
<?if (($disk_setting) && ($fstype == "zvol")):?>
<p><strong>_(ZFS Volume)_: </strong><?=$zfs_volume;?></p>
<?endif;?>
<p><strong>_(Mount Point)_: </strong><?=$mount_point;?></p>

<table style='width: <?=$width;?>;' class='usb_disks'><thead><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></thead>
<tr>
&nbsp;

<?if ($show_device_switches):?>
<?if (isset($_GET['s'])):?>
<?if (! $mounted):?>
<td title='_(Mark this Device as passed through to a VM or Docker Container)_.'><a><input type='checkbox' class='passthrough-switch'></a></td>
<?endif;?>
<td title='_(Disable Mount and Unmount Button)_.'><a><input type='checkbox' class='disable-mount-switch'></a></td>
<td title='_(Mount Device Read only)_.'><a><input type='checkbox' class='readonly-switch'></a></td>
<?if ($fstype != "zvol"):?>
<td title='_(Mount Device when Plugged in or Array is Started)_.'><a><input type='checkbox' class='automount-switch'></a></td>
<?endif;?>
<?endif;?>
<?endif;?>

<?if (isset($_GET['d'])):?>
<td title='_(Disable Mount and Unmount Button)_.'><a><input type='checkbox' class='disable-mount-switch'></a></td>
<td title='_(Mount Remote Share Read only)_.'><a><input type='checkbox' class='readonly-switch'></a></td>
<td title='_(Mount Remote SMB or NFS Share when Array is Started)_.'><a><input type='checkbox' class='automount-switch'></a></td>
<?endif;?>

<?if (isset($_GET['i'])):?>
<td title='_(Mount ISO File when Array is Started)_.'><a><input type='checkbox' class='automount-switch'></a></td>
<?elseif ($fstype != "zvol"):?>
<td title='_(Share Device with SMB and NFS)_.'><a><input type='checkbox' class='share-switch' info='<?=$info?>'></a></td>
<?endif;?>

<?if ((isset($_GET['s'])) && ($show_device_switches) && ($fstype != "zvol")):?>
<td title='_(Show all partitions on this device by default)_.'><a><input type='checkbox' class='partitions-switch'></a></td>
<?endif;?>

</tr>
</table>

<?if ((! $shares_enabled) && (! isset($_GET['i'])) && ($fstype != "zvol")):?>
<p style='font-weight:bold'>_(Note: Enable SMB Sharing or NFS Export in Unassigned Devices Settings to share this device)_.</p>
<?endif;?>

:ud_edit_script_device_settings_plug:
> Select the options for this device and mount point.
:end

<?if (($disk_setting) && ($fstype != "zvol") && (isset($_GET['s'])) && (isset($_GET['m'])) && (! $mounted) && (! $is_preclearing) && (! is_pass_through($_GET['s'])) && ($host) && ($connected)):?>
<button type="button" id="detach" title='_(Detach This Disk)_.' onclick='detach_disk("<?=$device;?>");'>_(Detach)_</button>

:ud_edit_script_detach_plug:
> Click **Detach** to detach the device.  The device will then show in Historical Devices and can be Attached from the device settings there.
:end
<?endif;?>
<?if (isset($_GET['s']) && (! isset($_GET['m'])) && ($host) && (! $connected)):?>
<button type="button" id="attach" title='_(Attach This Disk)_.' onclick='attach_disk("<?=$_GET['s'];?>");'>_(Attach)_</button>

:ud_edit_script_attach_plug:
> Click **Attach** to attach a device that has been detached.  This will act like the device was just installed and will auto mount if 'Auto Mount' is on.  It will take a while for the device to show up in UD.
:end
<?endif;?>
<?if ((is_script_running($file)) && (isset($_GET['m']))):?>
<button type="button" title='_(Abort Device Script)_.' onclick='abort_script("<?=$file;?>");'>_(Abort)_</button>

:ud_edit_script_abort_plug:
> Click **Abort** to abort the device script.
:end
<?endif;?>

</form>

<form markdown="1" name="device_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">

<?if (($disk_setting) && ($fstype != "zvol")):?>
_(Disk Name)_:
: <input type="text" name="#name" class="narrow" style="width:8%" maxlength="8" value="<?=$name;?>">
<?endif;?>

<?if (($disk_setting) && ($fstype != "zvol")):?>
:ud_disk_name_plug:
> Enter the alias name for this device.  This is the name you want to use to refer to this drive.  Leave the name blank and the 'devX' will be assigned.
>
> **Name:** 8 characters max, spaces converted to '_', minimal special characters allowed, name is case sensitive.
>
> **Note:** Cannot contain "dev" as the first characters.  This is reserved for the 'devX' devices.
:end
<?endif;?>

<?if (($fstype == "apfs") && (! $mounted)):?>
_(Volume)_:
: <input type="text" name="#volume" class="narrow" style="width:2%" maxlength="1" value="<?=$volume;?>" placeholder="0">_(Enter the volume to mount on this apfs partition)_.
<?endif;?>

<?if (($disk_setting) && ($fstype != "zvol")):?>
<input type="submit" value="_(Apply)_">
<?endif;?>
<input type="button" value="_(Done)_" onclick="done()">
</form>

<form markdown="1" name="edit_script" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#include" value="/webGui/include/update.file.php">

<?if ($fstype != "zvol"):?>
_(Device Script)_:
<?if (! $script_disabled):?>
: <input type="text" title='_(Enter Device Script File Name)_.' name="#file" style="width:40%;" onclick="openFileBrowser(this, '/boot/config/plugins/<?=$plugin;?>', 'sh');" autocomplete="off" value="<?=$file;?>" placeholder="_(Click to select file or click 'Default' button for the Device Script File)_">
<?else:?>
: <input type="text" title='_(Enter Device Script File Name)_.' name="#file" style="width:40%;" value="<?=$file;?>" readonly>
<?endif;?>

:ud_edit_script_choose_name_plug:
> This is the Script File that runs when the device is mounted. Choose your Script File name from the file selection dropdown, or enter your desired script.  This cannot be changed if the device is mounted.
:end

_(Run Device Script File in the background)_?
: <select name="#background" size="1" <?=$script_disabled;?>>
  <?=mk_option($background, "yes", "_(Yes)_");?>
  <?=mk_option($background, "no", "_(No)_");?>
  </select>

:ud_edit_script_run_background_plug:
> Set to **Yes** to have the Device Script run as a background task.  This can keep the Unassigned Devices UI from hanging when the script is run from the UI.
:end

<? if (! isset($_GET['i'])):?>
_(User Script)_:
<?if (! $script_disabled):?>
: <input type="text" title='_(Enter the User Script File Name)_.' name="#user_file" style="width:40%;" onclick="openFileBrowser(this, '/boot/config/plugins/user.scripts/scripts', '', false);" autocomplete="off" placeholder="_(Enter the User Script that will be using this device)_" value="<?=$user_file;?>">
<?else:?>
: <input type="text" title='_(Enter the User Script File Name)_.' name="#user_file" style="width:40%;" value="<?=$user_file;?>" readonly>
<?endif;?>
<?endif;?>

<? if (! isset($_GET['i'])):?>
:ud_edit_user_script_choose_name_plug:
> If you have the User Scripts plugin installed, you can have Unassigned Devices show the running status of the User Script that will be using this device.  This field will only be enabled when a Device Script File exists.
:end
<?endif;?>

&nbsp;&nbsp;_(Device Script content)_:
<br />

<textarea spellcheck="false" cols="80" rows="22" name="text" title='_(Enter and Edit the Device Script that runs when a udev or operator event occurs)_.' style="width:80%"><?=$text;?></textarea>

<?if (! $mounted):?>
<?if (! is_file($file)):?>
<button type="button" title='_(Load the default Device Script)_.' onclick="setDefault(this.form)">_(Default)_</button>
<input type="reset" title='_(Undo your changes since last Save)_.' value='_(Reset)_'/>
<input type="submit" title='_(Save your Device Script File)_.' value='_(Save)_'/>
<?else:?>
<button type="button" title='_(Delete Device Script File)_.' onclick='rmfile();'>_(Delete)_</button>
<?endif;?>
<?endif;?>
<input type="submit" title='_(Save your Device Script File changes)_.' value='_(Apply)_'>
<input type="button" value="_(Done)_" onclick="done()">

:ud_edit_script_buttons_plug:
> Click **Default** to initialize the edit box with a default Device Script. You still need to click **Save** in order to commit the change.
>
> Click **Save** to save your Device Script file.
>
> Click **Delete** to delete the Device Script file.
>
> Click **Reset** to undo any changes you make (before Saving).
>
> Click **Apply** to commit the current edits.
>
> Click **Done** to exit this page.
:end
<?endif;?>
</form>

<script>
	var UDURL		= '/plugins/<?=$plugin;?>/UnassignedDevices.php';

<? if (! $mounted):?>
	$('.passthrough-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Passed Through');?>", off_label: "<?=_('Passed Through');?>", checked:"<?=$pass_through;?>" });
	$('.passthrough-switch').change(function()
	{
		$.post(UDURL,{action:"toggle_pass_through",serial:"<?=$ud_device;?>",part:"<?=$zvol;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
			location.reload();
		}, 'json');
	});
<?endif;?>

	$('.disable-mount-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Disable Mount Button');?>", off_label: "<?=_('Disable Mount Button');?>", checked:"<?=$disable_mount;?>" });
	$('.disable-mount-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$disable_action?>",device:"<?=$ud_device;?>",part:"<?=$zvol;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		}, 'json');
	});

	$('.readonly-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Read Only');?>", off_label: "<?=_('Read Only');?>", checked:"<?=$read_only;?>" });
	$('.readonly-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$readonly_action?>",serial:"<?=$ud_device;?>",part:"<?=$zvol;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		}, 'json');
	});

	$('.automount-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Automount');?>", off_label: "<?=_('Automount');?>", checked:"<?=$automount;?>" });
	$('.automount-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$automount_action?>",device:"<?=$ud_device;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		}, 'json');
	});

<?if ($info):?>
	$('.share-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Share');?>", off_label: "<?=_('Share');?>", checked:"<?=$share;?>" });
	$('.share-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$share_action;?>",info:$(this).attr("info"),status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		}, 'json');
	});
<?else:?>
	$('.share-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Share');?>", off_label: "<?=_('Share');?>", checked:"<?=$share;?>" });
	$('.share-switch').change(function()
	{
		$.post(UDURL,{action:"<?=$share_action;?>",serial:"<?=$ud_device;?>",part:"<?=$partition;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		}, 'json');
	});
<?endif;?>

	$('.partitions-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Show Partitions');?>", off_label: "<?=_('Show Partitions');?>", checked:"<?=$show_partitions;?>" });
	$('.partitions-switch').change(function()
	{
		$.post(UDURL,{action:"show_partitions",serial:"<?=$ud_device;?>",status:$(this).is(":checked")},function(data)
		{
			$(this).prop("checked",data.result);
		}, 'json');
	});

	$( "form" ).submit(function( event ) {
	<?if (isset($_GET['s'])):?>
			$.post(UDURL,{action:"set_command",serial:"<?=$ud_device;?>",part:"<?=$partition;?>",command:$("input[name='#file']").val(),user_command:$("input[name='#user_file']").val()}).done(function(){location.reload();});
		<?if ($disk_setting):?>
			$.post(UDURL,{action:"set_name",serial:"<?=$ud_device;?>",device:"<?=$device;?>",name:$("input[name='#name']").val()}).done(function(){location.reload();});
		<?endif;?>
			$.post(UDURL,{action:"<?=$background_action;?>",device:"<?=$ud_device;?>",part:"<?=$partition;?>",status:$("select[name='#background']").val()}).done(function(){location.reload();});
		<?if ($fstype == "apfs"):?>
			$.post(UDURL,{action:"set_volume",serial:"<?=$ud_device;?>",part:"<?=$partition;?>",volume:$("input[name='#volume']").val()}).done(function(){location.reload();});
		<?endif;?>
	<?else:?>
		<?if (isset($_GET['d'])):?>
			$.post(UDURL,{action:"set_samba_command",device:"<?=$device;?>",command:$("input[name='#file']").val(),user_command:$("input[name='#user_file']").val()}).done(function(){location.reload();});
		<?endif;?>
		<?if (isset($_GET['i'])):?>
			$.post(UDURL,{action:"set_iso_command",device:"<?=$device;?>",command:$("input[name='#file']").val()}).done(function(){location.reload();});
		<?endif;?>
			$.post(UDURL,{action:"<?=$background_action;?>",device:"<?=$ud_device;?>",status:$("select[name='#background']").val()}).done(function(){location.reload();});
	<?endif;?>
	});

	function setDefault(form) {
		/* Set the default values. */
		form.elements['text'].value		= <?=json_encode($default_text);?>;
		form.elements['#file'].value	= <?=json_encode($default_file);?>;

		/* Create a new 'change' event. */
		var event = new Event('change');

		/* Trigger a change event. */
		form.dispatchEvent(event);
	}

	function load(el) {
		$.get($( el ).val(),function(data){ $( 'textarea' ).val(data);});
	}

	function openFileBrowser(el, root, filter = true, on_folders = true, on_files = true) {
		if (! filter && ! on_files) {
			filter = 'HIDE_FILES_FILTER';
		}
		p = $(el);

		/* Skip if fileTree is already open. */
		if (! p.next().hasClass('fileTree') ) {
			/* Create a random id. */
			var r = Math.floor((Math.random()*1000)+1);

			/* Add a new span and load fileTree. */
			p.after("<span id='fileTree"+r+"' class='textarea fileTree'></span>");
			var ft = $('#fileTree'+r);
			ft.fileTree({
					root: root,
					top: root,
					filter: filter,
					allowBrowsing : true
				},
				function(file){if(on_files){p.val(file);$(ft).slideUp('fast',function (){$(ft).remove();});if(filter){load(p)};}},
				function(folder){if(on_folders){p.val(folder);$(ft).slideUp('fast',function (){$(ft).remove();});}}
			);

			/* Format fileTree according to parent position, height and width. */
			ft.css({'left':p.position().left,'top':( p.position().top + p.outerHeight() ),'width':(p.width()+2) });

			/* Close if click elsewhere. */
			$(document).mouseup(function(e){if (! ft.is(e.target) && ft.has(e.target).length === 0){$(ft).slideUp('fast',function (){$(ft).remove();});}});

			/* Open fileTree. */
			ft.slideDown('fast');
		} else {
			return null;
		}
	}

	function rmfile() {
		$.post("/update.php",{"#command":"/plugins/unassigned.devices/scripts/rm","#arg[1]":$("input[name='#file']").val()}).done(function(){location.reload();});
	}

	function detach_disk(device) {
		$("button[id='detach']").prop("disabled", "true");
		$("button[id='detach']").html("<i class='fa fa-spinner fa-spin'></i> <?=_('Detaching');?>");
		$.post("/update.php",{"#command":"/plugins/unassigned.devices/scripts/rc.unassigned","#arg[1]":"detach","#arg[2]":device, "#arg[3]":"true"}).done(function(){location.reload();});
	}

	function attach_disk(serial) {
		$("button[id='attach']").prop("disabled", "true");
		$("button[id='attach']").html("<i class='fa fa-spinner fa-spin'></i> <?=_('Attaching');?>");
		$.post("/update.php",{"#command":"/plugins/unassigned.devices/scripts/rc.unassigned","#arg[1]":"attach","#arg[2]":serial}).done(function(){location.reload();});
	}

	function abort_script(script) {
		$.post("/update.php",{"#command":"/plugins/unassigned.devices/scripts/rc.unassigned","#arg[1]":"abort","#arg[2]":script}).done(function(){location.reload();});
	}
</script>

                )

            [UnassignedDevices] => Array
                (
                    [Menu] => Main:4
                    [Title] => Unassigned Devices
                    [Tag] => unlink
                    [file] => plugins/unassigned.devices/UnassignedDevices.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevices
                    [text] => <?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

/* read translations */
parse_plugin('UnassignedDevices');

/* Get the version of Unraid we are running. */
$version = parse_ini_file("/etc/unraid-version");

/* Adjustments for 6.12 UI changes. */
if (version_compare($version['version'], '6.12.0-beta5', '>')) {
	$title_classid	= "class='title'";
	$new_model		= true;
} else {
	$title_classid	= "id='title'";
	$new_model		= false;
}

/* Set up name for nchan socket. */
$ud_reload = "UD_reload";

$disabled = (($var['shareNFSEnabled'] == "no") && ($var['shareSMBEnabled'] == "no")) ? "disabled" : "";
?>

<div class='pluginUpdate'></div>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">

<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>

<script type="text/javascript" src="<?autov('/plugins/'.$plugin.'/assets/arrive.min.js')?>"></script>

<style>
	table.disk_mounts {padding: 0px 0px 0px 0px;border-collapse:collapse;white-space:nowrap;}
	table.disk_mounts thead tr>td{text-align:left;width:8%;}
	table.disk_mounts tr>td+td{text-align:left;}
	table.disk_mounts tr>td+td+td{text-align:center;}
	table.disk_mounts tr>td+td+td+td{text-align:right;}
	table.disk_mounts tr>td+td+td+td+td+td+td{text-align:center;}
	table.disk_mounts tr>td+td+td+td+td+td+td+td{text-align:right;}
	table.disk_mounts tr>td+td+td+td+td+td+td+td+td+td+td+td{text-align:center;}

	table.usb_absent {padding: 0px 0px 0px 0px;border-collapse:collapse;white-space:nowrap;}
	table.usb_absent thead tr>td{text-align:left;width:8%;}
	table.usb_absent tr>td+td{text-align:left;}
	table.usb_absent tr>td+td+td+td{text-align:center;}

	table.samba_mounts {padding: 0px 0px 0px 0px;border-collapse:collapse;white-space:nowrap;}
	table.samba_mounts thead tr>td{text-align:left;width:8%;}
	table.samba_mounts tr>td+td+td{text-align:left;}
	table.samba_mounts tr>td+td+td+td{text-align:left;}
	table.samba_mounts tr>td+td+td+td+td+td{text-align:center;}
	table.samba_mounts tr>td+td+td+td+td+td+td+td+td{text-align:right;}
	table.samba_mounts tr>td+td+td+td+td+td+td+td+td+td+td+td+td+td+td{text-align:center}

	button.mount {user-drag:none;user-select:none;padding:2px 4px 3px 6px;margin:1px 0px 1px 0px;}
	i.partition-hdd{margin:5px; 5px; 0px; 0px;}
	i.hdd{margin:5px; 5px; 0px; 0px;}
	i.share{margin:5px 5px 0px 0px;}
	i.mount-share{margin:5px 5px 0px 0px;}
	i.partition-script{margin-left: 10px; margin-right: 6px;}
	.exec{cursor: pointer;}
	i.fa-append{margin:0px;font-size: 0.8em;position: relative; left:-0.3em;top:0.7em;}
	i.fa-switch{margin:5px; 5px; 0px; 0px;}
	.underline{text-decoration: underline;}

	form.inline{display:inline;margin: 0px; padding: 0px;}

	.fileTree {
		width: 305px;
		max-height: 150px;
		overflow: scroll;
		position: absolute;
		z-index: 100;
		display: none;
		color:initial;
	}

	.image-radio input{margin:0;padding:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;}
	.image-radio input:active +.image-radio-label{opacity: .9;}
	.image-radio input:checked +.image-radio-label{ -webkit-filter: none;-moz-filter: none;filter: none;}
	.image-radio-label{cursor:pointer; background-size:contain; background-repeat:no-repeat;display:inline-block; width:100px;height:70px; -webkit-transition: all 100ms ease-in;-moz-transition: all 100ms ease-in;transition: all 100ms ease-in;-webkit-filter: brightness(1.8) grayscale(1) opacity(.7);-moz-filter: brightness(1.8) grayscale(1) opacity(.7);filter: brightness(1.8) grayscale(1) opacity(.7);}
	.image-radio-label:hover{-webkit-filter: brightness(1.2) grayscale(.5) opacity(.9);-moz-filter: brightness(1.2) grayscale(.5) opacity(.9);filter: brightness(1.2) grayscale(.5) opacity(.9);}
	.image-radio-linux{background-image: url(/plugins/unassigned.devices/icons/nfs-radio.png)}
	.image-radio-windows{background-image: url(/plugins/unassigned.devices/icons/smb-radio.png)}
</style>

<script type="text/javascript">

	function spin_down_disk(dev) {
		document.getElementById('disk_orb-'+dev).className = "fa fa-refresh fa-spin green-orb";
		$.post(UDURL, {'action' : 'spin_down_disk', device:dev});
	}

	function spin_up_disk(dev) {
		document.getElementById('disk_orb-'+dev).className = "fa fa-refresh fa-spin grey-orb";
		$.post(UDURL, {'action' : 'spin_up_disk', device:dev});
	}

	if (typeof " ".formatUnicorn !== "function") {
		String.prototype.formatUnicorn = String.prototype.formatUnicorn ||
		function () {
			"use strict";

			var str = this.toString();
			if (arguments.length) {
				var t = typeof arguments[0];
				var key;
				var args = ("string" === t || "number" === t) ? Array.prototype.slice.call(arguments) : arguments[0];

				for (key in args) {
					str = str.replace(new RegExp("\\{" + key + "\\}", "gi"), args[key]);
				}
			}

			return str;
		};
	}

	(function ($) {
		$.fn.getHiddenDimensions = function (includeMargin)
		{
			var $item		= this,
			props			= { position: 'absolute', visibility: 'hidden', display: 'block' },
			dim				= { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 },
			$hiddenParents	= $item.parents().andSelf().not(':visible'),
			includeMargin	= (includeMargin == null) ? false : includeMargin;

			var oldProps	= [];
			$hiddenParents.each(function () {
				var old = {};

				for (var name in props) {
					old[name] = this.style[name];
					this.style[name] = props[name];
				}

				oldProps.push(old);
			});

			dim.width		= $item.width();
			dim.outerWidth	= $item.outerWidth(includeMargin);
			dim.innerWidth	= $item.innerWidth();
			dim.height		= $item.height();
			dim.innerHeight	= $item.innerHeight();
			dim.outerHeight	= $item.outerHeight(includeMargin);

			$hiddenParents.each(function (i) {
				var old		= oldProps[i];
				for (var name in props) {
					this.style[name] = old[name];
				}
			});

			return dim;
		}
	}(jQuery));

	function openWindow_fsck(cmd,title, height, width) {
		var run		= cmd;
		var top		= (screen.height-height)/2;
		var left	= (screen.width-width)/2;
		var options	= 'resizeable=yes,scrollbars=yes,height='+height+',width='+width+',top='+top+',left='+left;
		window.open(run, 'log', options);
	}

	function disk_op(el, op, device) {
		/* Add spinning and disable button. */
		$("button[device='"+device+"']").html("<i class='fa fa-spinner fa-spin'></i> "+(op == "mount" ? "<?=_('Mounting');?>" : "<?=_('Unmounting');?>"));
		$("button[device='"+device+"']").prop("disabled", "true");
		$.post(UDURL, {'action' : op, 'device' : device}).done(function(data)
		{
			if (data == "false") {
				swalShowMountUnmount(device, op);
			}
		},'json').fail(function(){swalShowResult(false);});
	}

	function usb_disks() {
		/* Save table widths. */
		if (! diskinfo) {
			tableWidths = $("#usb_devices_list > table > thead > tr").children("td").map(function(i,v){return $(this).getHiddenDimensions().outerWidth;});

			$("#usb_devices_list > table > thead > tr").children("td").each(function(i,v) {
				if (i in tableWidths) {
					$(this).css("width", tableWidths[i]);
				}
			});
		}

		/* Get the UD devices and render web page. */
		$.post(UDURL, {'action' : 'get_content', display:display}, function(data) {
			maxWidth	= [];
			var toggled	= $("tr.toggle-parts").filter(":visible").map(function(){return $(this).attr("name");}).get();
			if (data) {
				$('#disk-table-body').html(data.disks);
				$('#remotes-table-body').html(data.remotes);
				$('#historical-table-body').html(data.historical);
			}

			/* Show toggled disk partitions. */
			$.each(toggled, function(k,v) {
				if (v.length) {
					$("tr[name='"+v+"']").css("display", "table-row");
				}
			});
		},'json');
	}

	/* Detect a change in the diskio cookie and refresh the page to update diskio if it changes. */
	var checkCookie = function() {
		var lastCookie = $.cookie('diskio');
		return function() {
			var currentCookie = $.cookie('diskio');
			if (currentCookie != lastCookie) {
				lastCookie = currentCookie;
				refreshPage();
			}
		};
	}();

	/* Poll remote servers and update ping status. */
	function pingPoll() {
		$.post(UDURL, {'action' : 'update_ping'});
	}

	/* Refresh UD page showing any updated information. */
	function refreshPage() {
		$.post(UDURL, {'action' : 'refresh_page'});
	}

	/* Process nchan events. */
	var ud_Reload		= new NchanSubscriber("/sub/"+"<?=$ud_reload?>");

	/* Handle incomming nchan messages. */
	ud_Reload.on('message', function(data) {
		if (data == "rescan") {
			/* Update UD content and refresh page. */
			usb_disks();
		}
	});

	function load_hosts(el, action) {
		var target	= $(el).parents("div").find("*[name='IP']");
		var old		= $(el).html();
		$(el).html("<i class='fa fa-spinner fa-spin'></i> <?=_('Searching');?>");
		$.post(UDURL, {'action': action, 'network': network, 'workgroup': workgroup}).done(function(data) {
			$(el).html(old);
			if (data) {
				var hosts = data.split('\n');
				if (hosts.length) {
					var add = "<select name='IP' class='swal-content__input' required>";
					for (var i = 0;i < hosts.length;i++) {
						if (hosts[i].length) {
							add += "<option value='"+hosts[i].trim()+"'>"+hosts[i].trim()+"</option>";
						}
					}
					target.replaceWith(add+"</select>")
				} else {
					target.replaceWith("<input type='text' name='IP' class='swal-content__input' autocomplete='off'>");
				}
			}
		});
	}

	function load_shares(el, ip, user, pass, action) {
		var old			= $(el).html();
		var target		= $(el).parents("div").find("*[name='SHARE']");

		$(el).html("<i class='fa fa-spinner fa-spin'></i> <?=_('Loading');?>");

		var opts		= new Object();
		opts["action"]	= action;
		opts["IP"]		= ip;
		opts["USER"]	= user;
		opts["PASS"]	= pass;

		$.post(UDURL, opts).done(function(data) {
			$(el).html(old);
			if (data) {
				var shares = data.split('\n');
				if (shares.length) {
					var add = "<select name='SHARE' class='swal-content__input' required>";
					for (var i = 0;i < shares.length;i++) {
						if (shares[i].length) {
							add += "<option value='"+shares[i]+"'>"+shares[i]+"</option>";
						}
					}
					target.replaceWith(add+"</select>");
				} else {
					target.replaceWith("<input type='text' name='SHARE' class='swal-content__input' autocomplete='off' required>");
				}
			} else {
				target.replaceWith("<input type='text' name='SHARE' class='swal-content__input' autocomplete='off' required>");
			}
		});
	}

	function get_tab_title_by_name(name) {
		var tab		= $("input[name$=tabs] + label").filter(function(){return $(this).text() === name;}).prev();
<?if ($new_model):?>
		var title	= $("div.title > span.left").filter(function(){return $(this).text() === name;}).parent();
<?else:?>
		var title	= $("div#title > span.left").filter(function(){return $(this).text() === name;}).parent();
<?endif;?>
		if (tab.length) {
			rc = tab;
		} else if (title.length) {
			rc = title;
		} else {
			rc = $(document);
		}

		return rc;
	}

	function addButtonTab(Button, Name, autoHide = true, Append = true) {
		var Target		= get_tab_title_by_name(Name);
		var elementId 	= 'event-' + new Date().getTime() * Math.floor(Math.random()*100000);
		var element		= $("<span id='"+elementId+"' class='status'>"+Button+"</span>");

		rc = true;
		if (element.find("input[type='button']").length) {
			element.addClass("vhshift");
			element.find("input[type='button']").prop("style","padding-top: 5px; padding-bottom: 5px; margin-top:-3px; margin-bottom:0;");
		}

		if (Target.prop('nodeName') === "DIV") {
			element.addClass("vhshift");
			if (Append) {
				Target.append(element);
			} else {
				Target.prepend(element);
			}
		} else if (Target.prop('nodeName') === "INPUT") {
			element.css("display","none");

			if (Append) {
				$('.tabs').append(element);
			} else {
				$('.tabs').prepend(element);
			}

			Target.bind({click:function() {
				$('#'+elementId).fadeIn('slow');}
			});

			if (Target.is(':checked') || (! autoHide)) {
				$('#'+elementId).fadeIn('slow');
			}

			$("input[name$=tabs]").each(function() {
				if (! $(this).is(Target) && autoHide ) {
					$(this).bind({click:function() {
						$('#'+elementId).fadeOut('slow');}
					});
				}
			});
		} else {
			rc = false;
		}

		return rc;
	}

	function rescan_disks() {
		$.post(UDURL, {'action' : 'rescan_disks'});
		swalShowResult(true);
	}

	function swalShowResult(success) {
		if (success) {
			swal2({
				title:"<?=_('Success')?>!",
				icon:"success",
				text:" ",
				buttons: {
					confirm: { visible:false },
					cancel: { visible:false }
				},
				timer:2000
			});
		} else {
			swal2({
				title:"<?=_('Fail')?>!",
				icon:"error",
				text:"<?=_('Check the syslog for details');?>.",
				buttons: {
					confirm: { visible:false },
					cancel: { visible:false }
				},
				timer:2000
			});
		}
	}

	function swalShowMountUnmount(device, op) {
		swal2({
			title: "<?=_('Fail')?>!",
			icon: "error",
			text: "<?=_('Device');?> '"+device+"' <?=('failed to');?> "+op+". <?=_('Check the syslog for details');?>.",
			buttons: {
				confirm: { visible: false },
				cancel: { visible: false }
			},
			timer: 3000
		});
	}

	function doUnassignedDevicesSurvey(surveyName, surveyOption) {
		var survey			= $("div[data-survey-name="+ surveyName +"]");
		var numQuestions	= survey.find("div[data-question]").length;
		var surveyData		= new Array
		var index			= 0;
		var evalCondition	= function(obj, selector){

		rc = null;
		if (obj.find(selector).length) {
			evaled = $.trim(obj.find(selector).eq(0).text())
				if (evaled.length ) {
					rc = eval(evaled);
				}
			}

			return rc;
		}

		var getAttr = function(obj, name, defaultValue) {
			return (typeof obj.attr(name) !== "undefined") ? obj.attr(name) : defaultValue;
		}

		function showSwal(direction = "=") {
			switch(direction) {
				case '>':
					index++;
					break;

				case '<':
					index--;
					break;
			}

			if (index >= numQuestions) {
				return false;
			}

			question	= survey.find("div[data-question]").eq(index);
			condition	= question.find("div[data-question-condition]").eq(0);

			if (condition.length && ! eval($.trim(condition.text())) ) {
				showSwal(direction);
			}

			content = question.find("div[data-question-content]").html();
			format = question.find("div[data-question-format]");

			if (format.length) { 
				eval("formatOpts = " + $.trim(format.text()));
				content = content.formatUnicorn(formatOpts);
			}

			has_checked = ["checkbox","radio","option"];
			restore_content = $("<div></div>").html(content);
			restore_content.find(":input").each(function(i,v) {
				name = $(this).prop("name");
				if (name in surveyData) {
					if ($.inArray($(this).prop("type"), has_checked) != -1 ) {
						if ($(this).val() == surveyData[name]) { 
							$(this).attr("checked", true);
						}
					} else {
						if ($(this).prop("type") == "select-one") {
							$(this).find("option[value="+ surveyData[name] +"]").attr("selected",true);
						} else { 
							$(this).attr("value",surveyData[name]);
						}
					}
				}
			});

			content = restore_content[0].outerHTML;
			button = {back:getAttr(question, "data-question-button-back", "<?=_('Back')?>"), cancel:getAttr(question, "data-question-button-cancel", "<?=_('Cancel')?>"),
					  done:getAttr(question, "data-question-button-done", "<?=_('Done')?>"), next:getAttr(question, "data-question-button-next", "<?=_('Next')?>")};

			swalOpts					= new Object;
			swalOpts.title				= question.attr("data-question-title");
			swalOpts.content			= {element:"div", attributes:{innerHTML:content}};
			swalOpts.icon				= getAttr(question, "data-question-icon", "info");
			swalOpts.closeOnClickOutside = false;
			swalOpts.buttons			= new Object;
			swalOpts.buttons.confirm	= (index > 0) ? {text: button.cancel, value: null, visible: true, className: "", closeModal: true} :
														{text: "", value: null, visible: false, className: "", closeModal: true};
			swalOpts.buttons.cancel		= (index > 0) ? {text: button.back,  value: false, visible: true, className: "", closeModal: false} :
														{text: button.cancel, value: null, visible: true, className: "", closeModal: true};
			swalOpts.buttons.next		= (index == numQuestions - 1 ) ? {text:button.done, value: true, visible: true, className: "", closeModal: false} : {text:button.next, value: true, visible: true, className: "", closeModal: false};
			swal2(swalOpts).then( (response) => {
				emptyInputs = $.grep($(".swal-modal").find(":input"), function (e,v){ e = $(e);
					switch (e.prop('type')) {
						case 'radio':
							if (e.is(":checked")) {
								surveyData[e.prop("name")] = e.val();
							}
							n = $(":input[name="+e.prop("name")+"]");
							return (n.is("[required]") && ! n.is(":checked"));
							break;

						case 'option':
						case 'checkbox':
							if (e.is(":checked")) {
								surveyData[e.prop("name")] = e.val()
							}
							return (e.is("[required]") && ! e.is(":checked"));
							break;

						case 'select-one':
							if (e.has(":checked")) {
								surveyData[e.prop("name")] = e.find(":checked").val();
							}
							n = $(":input[name="+e.prop("name")+"]");
							return (n.is("[required]") && ! n.has(":checked"));
							break;

						default:
							if (e.val() || e.prop("name")) {
								surveyData[e.prop("name")] = e.val()
							}
							return (e.is("[required]") && ! e.val());
							break;
					}
				});

				if (response) {
					if (emptyInputs.length) {
						return "=";
					} else if (! emptyInputs.length && index <= numQuestions - 1) {
						evaled = evalCondition(question, "div[data-question-done]");
						if (index < numQuestions - 1) {
							if (evaled !== null && evaled === true) {
								return ">";
							}

							if (evaled !== null && evaled === false) {
								return "<";
							} else {
								return ">";
							}
						} else if(index == numQuestions - 1) {
							if (evaled !== null && evaled === false) {
								return "=";
							} else {
								$(".swal-button--cancel").prop("disabled",true);
								$(".swal-button--confirm").prop("disabled",true);
								evalCondition(survey,"div[data-survey-done]");
								if (getAttr(survey.find("div[data-survey-done]").eq(0),"data-survey-done-wait", "true") == "false" ) {
									setTimeout(() => { swal2({buttons:{confirm:{visible:false},cancel:{visible:false}},timer:100}) }, 1500)
								}

								return true;
							}
						}
					} else {
						return "=";
					}
				} else if ( response === false && index <= numQuestions ) {
					return "<";
				} else if  (response === null) { 
					return true;
				}

				return "=";
			}).then( (response2) => {
				if (typeof response2 !== "boolean") {
					return showSwal(response2);
				} else {
					return false;
				}
			});
		}

		showSwal();
	}

	$(function() {
		$('div.spinner').html(unraid_logo);
	});

	$(function() {
		if ( typeof caPluginUpdateCheck === "function" ) {
			caPluginUpdateCheck("unassigned.devices.plg",{element:".pluginUpdate"});
		}
	});

</script>

<?=$Preclear ? $Preclear->html() : "";?>

<table id ='usb_devices_list' class='disk_status wide disk_mounts show-disks'>
	<thead>
		<tr>
			<td><?=('Device')?></td>
			<td><?=('Identification')?></td>
			<td></td>
			<td><?=_('Temp')?>.</td>
			<td><?=_('Reads')?></td>
			<td><?=_('Writes')?></td>
			<td><?=_('Settings')?></td>
			<td><?=_('FS')?></td>
			<td><?=_('Size')?></td>
			<td><?=_('Used')?></td>
			<td><?=_('Free')?></td>
			<td><?=_('Log')?></td>
		</tr>
	</thead>
	<tbody id="disk-table-body">
		<tr>
			<td colspan='12'><div class='spinner'></div>
			</td>
		</tr>
	</tbody>
</table>

:unassgned_devices_switches_plug:
> Turn on the **Disks** switch to change the web page to show disk devices. Turn off the **Disks** switch to change the web page to hide disk devices.
>
> Turn on the **Shares** switch to change the web page to show shares. Turn off the **Shares** switch to change the web page to hide shares.
>
> Turn on the **Historical** switch to show Historical disk devices. Turn off **Historical** switch to switch back to not show Historical disk devices.
>
> Click on the <i style='color:black;font-weight:bold;' class="fa fa-refresh"></i> icon to refresh disks and configuration.
>
> Click on the <i style='color:black;font-weight:bold;' class="fa fa-gear"></i> icon to go to the UD Settings.
>
> You can spin a disk up or down by clicking on the disk ball <i class='fa fa-circle orb green-orb'></i>or <i class='fa fa-circle orb grey-orb'></i>indicator.  Applies to version 6.9 RC2 and later only.
:end

<div class='show-shares'>
	<div <?=$title_classid;?> class='show-disks'>
		<span class='left'>
			<img src='/plugins/<?=$plugin?>/icons/smbsettings.png' class='icon'><?=_('SMB Shares')?> &nbsp;|&nbsp;<img src='/plugins/<?=$plugin?>/icons/nfssettings.png' class='icon'><?=_('NFS Shares')?> &nbsp;|&nbsp;<img src='/plugins/<?=$plugin?>/icons/iso.png' class='icon' style='width:16px;'><?=_('ISO File Shares')?>
		</span>
	</div>
	<table class='disk_status wide samba_mounts'>
		<thead>
		<tr>
			<td><?=_('Share Type')?></td>
			<td><?=_('Source')?></td>
			<td></td>
			<td><?=_('Mount Point')?></td>
			<td></td><td></td>
			<td><?=_('Remove')?></td>
			<td><?=_('Settings')?></td>
			<td></td>
			<td></td>
			<td></td>
			<td><?=_('Size')?></td>
			<td><?=_('Used')?></td>
			<td><?=_('Free')?></td>
			<td><?=_('Log')?></td>
		</tr>
		</thead>
		<tbody id="remotes-table-body">
		</tbody>
	</table>
	<div id='remotes-buttons'>
		<button onclick='add_samba_share()' <?=$disabled?>><?=_('Add Remote SMB')?>/<?=_('NFS Share')?></button>
		<button onclick='add_iso_share()'><?=_('Add ISO File Share')?></button>
		<button onclick='add_root_share()'><?=_('Add Root Share')?></button>
	</div>
</div>

<div class='show-disks'>
	<div class='show-historical'>
		<div <?=$title_classid;?>>
			<span class='left'><img src='/plugins/<?=$plugin?>/icons/historical.png' class='icon'><?=_('Historical Devices')?></span>
		</div>
		<table class='disk_status wide usb_absent'>
			<thead>
			<tr>
				<td><?=_('Device')?></td>
				<td><?=_('Serial Number (Mount Point)')?></td>
				<td></td>
				<td><?=_('Remove')?></td>
				<td><?=_('Settings')?></td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
			</thead>
			<tbody id="historical-table-body">
			</tbody>
		</table>
	</div>
</div>

:unassigned_devices_general_help_plug:
> **Unassigned Devices is called UD for short.**
>
> Hover your mouse over an any active area on the UD page and a tool tip will show you what clicking that area does.
> You can mount USB devices, sata drives, Remote SMB/NFS shares, and ISO Files with UD.  Any devices with the auto mount switch on will be mounted when the array is started.  All drives and SMB/NFS Mounts are unmounted when the array is stopped on the 'stopping_svcs' event.
> If you want to share your drive, you can turn on the Share switch.  The default for Remote SMB shares is Public read/write access.  Enable SMB Security by user in the Unassigned Devices Settings.  NFS shares are exported and access is read/write.  The export of NFS devices is enabled in the Unassigned Devices settings. You can also enable a common script that will be executed on every disk mount.  In order to share any UD device, sharing needs to be enabled in the UD Settings and the switch turned on to share the particular device.  SMB/NFS remove shares and ISO mounts are always shared.
> After entering a mount point, press &lt;Enter&gt; to save the change.
>
> Additional options are available when you click on the <i style='color:black;font-weight:bold;' class="fa fa-plus-square"></i> icon by device identification.  When the disk is unmounted, the mount point of the device can be changed.  The disk label will also be changed.  A disk can be formatted and an fsck run to check the disk.
>
> The 'Settings->Unassigned Devices' security settings for SMB and NFS must be set correctly for SMB and NFS sharing to work properly.
>
> If the mount button is grayed out for a SMB/NFS remote share, the remote server is not responding to a ping.  The remote share server must respond to a ping or UD will consider it off-line.
>
> The 'Add Root Share' button is disabled when 'Enable disk shares' is enabled and any Root Shares previously added will not mount.
>
> UD has a destructive mode that allows deleting disk partitions and formatting disks.	If Destructive Mode is not turned on in the UD Settings, you WILL NOT be able to format a disk or remove partitions.  Go the the 'Settings->Unassigned Devices' to set the destructive mode.
>
> **To format a disk:**
>
> + Destructive mode must be enabled.
> + Disk must have all partitions removed.  Unmount disk, click on the <i style='color:black;font-weight:bold;' class='fa fa-plus-square'></i> icon,, and click on all <i style='color:red;font-weight:bold;' class='fa fa-remove hdd'></i> icons to delete partitions.
> + If the disk has been precelared and shows a grayed 'Format' button, click on the <i style='color:black;font-weight:bold;' class='fa fa-plus-square'></i> icon, then click on the <i style='color:red;font-weight:bold;' class='fa fa-remove hdd'></i> icon to delete the preclear status file.
>
> **Note: A disk partitioned in UD is compatible with the array disk partitioning and can be added to the array.  Supported file formats are XFS, XFS encrypted, BTRFS, BTRFS encrypted, ZFS and ZFS encrypted.**
>
> **Encrypted Disks:**
>
> + Any disk formatted in UD that is encrypted will use the array password/passphrase and can be incorporated into the array.  Or you can set a unique password when it is formatted.  If you set a password on the disk when it is formatted, you will need to enter a disk password in Unassignd Devices->Settings for that disk.
> + Any disk that was not encrypted with the Array password/passphrase can be mounted by setting a per disk passord set in Unassigned Devices->Settings.
>
> **Unassigned devices script:**
>
> UD includes a script that is used for mounting and unmounting devices and SMB/NFS mounts. These scripts can be used from the command line or in your scripts as necessary.
>
> + '/usr/local/sbin/rc.unassigned mount autodevices' - all devices set to auto mount will be mounted.
> + '/usr/local/sbin/rc.unassigned mount autoshares' - all SMB/NFS mounts set to auto mount will be mounted.
> + '/usr/local/sbin/rc.unassigned umount auto' - all devices and SMB/NFS mounts set to auto mount will be unmounted.
> + '/usr/local/sbin/rc.unassigned umount all' - all devices and SMB/NFS mounts are unmounted in preparation for shutting down the array.
> + '/usr/local/sbin/rc.unassigned mount /dev/sdX or devX' - mount disk device.
> + '/usr/local/sbin/rc.unassigned mount name=diskname' - mount disk device by disk name.
> + '/usr/local/sbin/rc.unassigned umount /dev/sdX or devX' - unmount disk device. You can use this command in a UD script to unmount the device when the script has completed.
> + '/usr/local/sbin/rc.unassigned umount name=diskname' - unmount device by disk name.
> + '/usr/local/sbin/rc.unassigned spindown /dev/sdX or devX' - spin down disk device.
> + '/usr/local/sbin/rc.unassigned spindown name=diskname' - spin down a disk by disk name.
> + '/usr/local/sbin/rc.unassigned detach /dev/sdX or devX' - detach a USB disk device. You can use this command in a UD script to detach the device when the script has completed.
> + '/usr/local/sbin/rc.unassigned attach serial - attach a disk device. You can use this command in a script to attach a device.
> + '/usr/local/sbin/rc.unassigned mount source' - where source is the SMB/NFS source.
> + '/usr/local/sbin/rc.unassigned umount source' - where source is the SMB/NFS source.
>
> Note: /dev/sdX where 'X' is the device designator.  The devX is the device name in the UD page.  If the device name is 'Dev 1', then use dev1 as the device to spin down.  Using the name=diskname is useful if you have a User Script needing to perform UD operations on a disk.
>
> Be careful using the /dev/sdX or devX designation because they can change after a reboot.  It's best to use the values passed into the UD script for sdX (DEVICE) and devX (UD_DEVICE).
:end

<script type="text/javascript">
	var maxWidth	= [];
	var tableWidths = [];
	var display		= <?=json_encode($display);?>;
	var network		= [];
	var workgroup	= "";

	/* Reload page if browser back button was used. */
	window.addEventListener( "pageshow", function ( event )
	{
		var historyTraversal = event.persisted || ( typeof window.performance != "undefined" && window.performance.navigation.type === 2 );
		if ( historyTraversal ) {
			/* Handle page restore. */
			window.location.reload();
		}
	});

	<?
	if (isset($var['WORKGROUP'])) echo "var workgroup = '{$var['WORKGROUP']}';\n";
	for ($i=0; $i < 11; $i++) { 
		$_var = "eth{$i}";
		if (isset($$_var) ) {
			$iface		= $$_var;
			$gateway	= array_values(array_flip(preg_grep("/GATEWAY:/", array_flip($iface))));
			$ipaddr		= array_values(array_flip(preg_grep("/IPADDR:/",	array_flip($iface))));
			$netmask	= array_values(array_flip(preg_grep("/NETMASK/",	array_flip($iface))));
			for ($z=0; $z < count($ipaddr); $z++) { 
				echo "network.push({gateway:'{$ipaddr[$z]}', ip:'{$ipaddr[$z]}', netmask:'{$netmask[$z]}'});\n";
			}
		}
	}
	?>

	var tab_usbdisks	= $('input[name$="tabs"]').length;
	var UDURL			= '/plugins/<?=$plugin;?>/UnassignedDevices.php';
	var diskinfo		= "";

	if (typeof swal2 === "undefined") {
		$('head').append( $('<link rel="stylesheet" type="text/css" />').attr('href', '<?autov("/plugins/".$plugin."/assets/sweetalert2.css");?>') );
		$.getScript( '/plugins/<?=$plugin;?>/assets/sweetalert2.js');
	}

	/* Bind Arrive events. */
	$("#usb_devices_list").arrive("tr",{onceOnly:false},function() {
		tr = $(this);

		tr.find("span.toggle-hdd").click(function(e) {
			$(this).disableSelection();disk = $(this).attr("hdd");el = $(this);
			$(".toggle-"+disk).slideToggle(0);
		});

		tr.find( "button[role$=mount]" ).on( "click", function() {
			disk_op(this, $(this).attr("role"), $(this).attr("device"));
		});

		tr.find("button[role$=format]").on( "click", function() {
			format_disk(this, $(this).attr("context"), $(this).attr("device"));
		});
	});

	$(function() {
		/* Set page refresh interval every 3 seconds. */
		window.setInterval(refreshPage, 3000);

		/* Set ping poll interval every 15 seconds. */
		window.setInterval(pingPoll, 15000);

		/* Check for diskio cookie change every 100ms. */
		window.setInterval(checkCookie, 100);

		/* Add icons to Tab/Title bar. */
		$('#tab4').bind({click:function() {$('i.toggle').show('slow');}});
		if ($.cookie('diskio') === undefined) {
			$('i.toggle').removeClass('fa-tachometer').addClass('fa-list');
		} else {
			$('i.toggle').removeClass('fa-list').addClass('fa-tachometer');
		}

		/* Update the show-disks status. */
		if ($.cookie('unassigned-disks-view') == 'false') {
			$('.show-disks').slideToggle('slow');
		}

		/* Update the show-shares status. */
		if ($.cookie('unassigned-shares-view') == 'false') {
			$('.show-shares').slideToggle('slow');
		}

		/* Update the show-historical status. */
		if ($.cookie('unassigned-historical-view') == 'false') {
			$('.show-historical').slideToggle('slow');
		}

		addButtonTab('<a style="cursor:pointer" class="tooltip" title="<?=_("Unassigned Devices Settings");?>" href="/Settings/UnassignedDevicesSettings"><i class="fa fa-gear fa-switch"></i></a>',
								"<?=_('Unassigned Devices');?>");
		addButtonTab('<a style="cursor:pointer" class="tooltip" title="<?=_("Refresh Disks and Configuration");?>" onclick="rescan_disks()"><i class="fa fa-refresh fa-switch"></i></a>',
								"<?=_('Unassigned Devices');?>");
		addButtonTab('<a style="cursor:pointer" class="tooltip" title="<?=_("Show Historical Devices");?>"><input type="checkbox" class="historical-switch"></a>',
								"<?=_('Unassigned Devices');?>");
		addButtonTab('<a style="cursor:pointer" class="tooltip" title="<?=_("Show SMB/NFS/ISO Shares");?>"><input type="checkbox" class="shares-switch"></a>',
								"<?=_('Unassigned Devices');?>");
		addButtonTab('<a style="cursor:pointer" class="tooltip" title="<?=_("Show Disk Devices");?>"><input type="checkbox" class="disks-switch"></a>',
								"<?=_('Unassigned Devices');?>");

		$('.tooltip').tooltipster({delay:100, trigger:'custom', triggerOpen:{mouseenter:true}, triggerClose:{click:false, scroll:true, mouseleave:true}});

		/* Add switchButton to Tab/Title bar. */
		$('.disks-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Disks');?>", off_label: "<?=_('Disks');?>", checked: $.cookie('unassigned-disks-view') != 'false'});
		$('.disks-switch').change(function() {
			$('.show-disks').slideToggle('slow');
			$.cookie('unassigned-disks-view', $('.disks-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path:'/' });
		});

		$('.shares-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Shares');?>", off_label: "<?=_('Shares');?>", checked: $.cookie('unassigned-shares-view') != 'false'});
		$('.shares-switch').change(function() {
			$('.show-shares').slideToggle('slow');
			$.cookie('unassigned-shares-view', $('.shares-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path:'/' });
		});

		$('.historical-switch').switchButton({ labels_placement: "left", on_label: "<?=_('Historical');?>", off_label: "<?=_('Historical');?>", checked: $.cookie('unassigned-historical-view') != 'false'});
		$('.historical-switch').change(function() {
			$('.show-historical').slideToggle('slow');
			$.cookie('unassigned-historical-view', $('.historical-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path:'/' });
		});

		/* Load contents if tab is checked. */
		if ($('#tab'+tab_usbdisks).is(':checked')) {
			$('#tab'+tab_usbdisks).trigger("click");
			$.removeCookie('one',{path:'/'});
		}

		/* Create cookie for the nchan socket. */
		$.cookie("ud_reload", "<?=$ud_reload?>", { setMaxAge:0, path:"/;SameSite=Lax" });

		pingPoll();
		ud_Reload.start();
	});
</script>

<div style="display:none;" data-survey-name="add_root_share" data-survey-title="<?=_('Add Root Share');?>">
	<div data-question data-question-title="<?=_('Root Share')?>" data-question-button-done="<?=_('Add');?>">
		<div data-question-content>
			<input type="text" class="swal-content__input" name="SHARE" autocomplete="off" required placeholder="<?=_('Enter Root Share Name');?>" <?=($var['shareDisk']=="yes") ? "disabled" : "";?>>
			<p><?=_('This is a way to gather Unraid shares into one Root Share');?>.</p>
			<?if ($var['shareDisk'] != "yes"):?>
			<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('Use caution when gathering shares into one Root Share');?>. <?=_('Do not put files or folders into the /mnt/rootshare/ folder');?>.
			<p><?=_('When you copy files between shares in the Root Share, the files may not end up on the expected disks');?>.</p>
			<p><?=_('You can also subject yourself to security issues like ransomware by exposing all your shares in one Root Share');?>.</p>
			<?else:?>
			<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('Disk Sharing must be disabled to add a Root Share')?>.</p>
			<p><?=_('Go to Settings->Global Share Settings and set Enable Disk Shares to Auto or Off');?>.</p>
			<?endif;?>
		</div>
	</div>

	<div data-question data-question-title="<?=_('Root Share')?>" data-question-button-done="<?=_('Add');?>">
		<div data-question-content>
			<select name="PATH" class="swal-content__input">
				<option value="/mnt/user0"><?=_('User Shares');?></option>
				<option value="/mnt/user"><?=_('User and Pool Shares');?></option>
			</select>
			<p><?=_('Select the Root Share');?>.</p>
			<p><?=_('User Shares will allow access to User Shares, but the Root Share will not include Cache and Pool Device files');?>.</p>
			<p><?=_('User and Pool Shares will include all files in User Shares, Cache and Pool Devices');?>.</p>
			<p><?=_('Note');?>:&nbsp;<?= _('Exclusive Share files will not be accessible in a Root Share');?>.</p>
		</div>
	</div>

	<div data-survey-done>
		$.post(UDURL, {'action' : 'add_root_share', share:surveyData['SHARE'], path:surveyData['PATH']}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>

	<div>
		<script type="text/javascript">
			$(function() {
				window.add_root_share = function(){doUnassignedDevicesSurvey("add_root_share")}
			})
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="add_iso_share" data-survey-title="<?=_('Add ISO File Share');?>">
	<div data-question data-question-title="<?=_('Choose ISO File')?>" data-question-button-done="<?=_('Add');?>">
		<div data-question-format>
			["data-pickroot","ISO_FILE"]
		</div>
		<div data-question-content>
			<input type='text' name='{1}' placeholder="<?=_('Click to select ISO file');?>" data-pickcloseonfile='true' data-pickfilter='iso' {0}='/mnt/user/isos/' data-pickfolders='true' required class='swal-content__input' autocomplete="off" >
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["ISO_FILE"].toLowerCase().indexOf(".iso") !== -1)
		</div>
	</div>
	<div data-survey-done>
		var opts = {action:"add_iso_share",ISO_FILE:surveyData["ISO_FILE"]};
		if (opts.ISO_FILE) {
			$.post(UDURL, opts).done(function(data)
			{
				swalShowResult(data == "true");
			},'json').fail(function(){swalShowResult(false);});
		}
	</div>
	<div>
		<script type="text/javascript">
			$(document).on("click","input[name=ISO_FILE]",function() {
				if (! $(this).siblings("div.fileTree").length) {
					$(this).fileTreeAttach();
					$(this).trigger("click");
				}
				$(this).next("div.fileTree").css("text-align","left").css("z-index","10001").css("left","20px").css("width",$(this).width()+13)
			});
			$(function() {
				window.add_iso_share = function(){doUnassignedDevicesSurvey("add_iso_share")}
			})
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="format_disk" data-survey-title="<?=_('Partition and Format Disk');?>">
<?if (file_exists("/usr/sbin/parted") && get_config("Config", "destructive_mode") == "enabled"):?>
	<div data-question data-question-title="<?=_('Choose File System Format');?>">
		<div data-question-format>
			[surveyOption.device, surveyOption.type]
		</div>
		<div data-question-content>
			<select name="FS" class="swal-content__input">
				<option value="xfs">XFS</option>
				<option value="btrfs">BTRFS</option>
				<?if (version_compare($version['version'],"6.11.9", ">")):?>
				<option value="zfs">ZFS</option>
				<?endif;?>
				<option value="xfs-encrypted">XFS - encrypted</option>
				<option value="btrfs-encrypted">BTRFS - encrypted</option>
				<?if (version_compare($version['version'],"6.11.9", ">")):?>
				<option value="zfs-encrypted">ZFS - encrypted</option>
				<?endif;?>
				<option value="ntfs">NTFS</option>
				<option value="exfat">exFAT</option>
				<option value="fat32">FAT32</option>
			</select>
			<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('An XFS, BTRFS, or ZFS disk partitioned in UD is compatible with the array disk partitioning and can be added to the array');?>.</p>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>

	<div data-question data-question-title="<?=_('ZFS Pool Name');?>">
		<div data-question-condition>
			surveyData['FS'] == 'zfs' || surveyData['FS'] == 'zfs-encrypted'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="text" class="swal-content__input" name="POOL_NAME" required placeholder="<?=_('Pool Name');?>">
				<p><?=_('Enter the Pool Name for this device');?>. <?=_('This wil also be the mountpoint for the disk');?>.</p>
			</div>
		</div>
	</div>

	<div data-question data-question-title="<?=_('Password');?>">
		<div data-question-condition>
			surveyData['FS'] == 'xfs-encrypted' || surveyData['FS'] == 'btrfs-encrypted' || surveyData['FS'] == 'zfs-encrypted'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="password" class="swal-content__input" name="PASS" autocomplete="off" placeholder="<?=_('Password');?>">
				<p><?=_('Enter the password to use for this disk');?>. <?=_('Leave blank to use the array password/passphrase');?>. <?=_('If using a disk password, be sure to enter the password for this disk in UD Settings so it can be mounted');?>.</p>
				<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('Remember your password');?>. <?=_('It cannot be recovered');?>!</p>
			</div>
		</div>
	</div>

	<div data-question data-question-title="" data-question-button-done=<?=_('Format');?> data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.type]
		</div>
		<div data-question-content>
			<div class="swal-title"><?=_('Any data on this disk will be lost');?>!</div>
			<div style="margin-bottom: 25px;font-size: 20px;"><?=_('Type');?> <span class="red">'<?=_('Yes');?>'</span> <?=_('to format');?>:</div>
			<input type="text" name="confirmation" class="swal-content__input" autocomplete="off" required >
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["confirmation"] == "<?=_('Yes');?>")
		</div>
	</div>

	<div data-survey-done data-survey-done-wait="true">
		$("button[device='"+surveyOption.device+"']").prop('disabled',true);
		$("button[device='"+surveyOption.device+"']").html("<i class='fa fa-spinner fa-spin'></i> <?=_('Formatting');?>");
		$.post(UDURL, {'action' : 'format_'+surveyOption.type, device:surveyOption.device, fs:surveyData["FS"], pass:surveyData["PASS"], pool_name:surveyData["POOL_NAME"]}, function(data)
		{
			$("button[device='"+surveyOption.device+"']").prop('disabled',true);
			$("button[device='"+surveyOption.device+"']").html( data.status ? "<?=_('Formatted');?>" : "<?=_('Format failed');?>" );
			swalShowResult(data.status);
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.format_disk = function(bt, type, device){doUnassignedDevicesSurvey("format_disk", {el:bt, type:type, device:device});}
			});
		</script>
	</div>
	<?else:?>
	<div data-question data-question-title="<?=_('Partition and Format Disk');?>">
		<div data-question-content>
			<p><?=_('You must enable the Destructive Mode in UD Settings before you can Format this disk');?>.</p>
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="false">
	</div>
	<?endif;?>
	<div>
		<script type="text/javascript">
			$(function() {
				window.format_disk = function(bt, type, device){doUnassignedDevicesSurvey("format_disk", {el:bt, type:type, device:device});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_partiton" data-survey-title="">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.partition, surveyOption.device, surveyOption.serial]
		</div>
		<div data-question-content>
			<div class="swal-title"><?=_('Data on this disk will be lost');?>!</div>
			<div class="swal-title" style="font-size: 20px;"><?=_('Remove partition');?> <span class="red">{0}</span> <?=_('from disk');?> <span class="red">{1}?</span></div>
			<div style="margin-bottom: 25px;font-size: 20px;"><?=_('Type');?> <span class="red">'<?=_('Yes');?>'</span> <?=_('to delete this partition');?>:</div>
			<input type="text" name="confirmation" class="swal-content__input" autocomplete="off" required >
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["confirmation"] == "<?=_('Yes');?>")
		</div>
	</div>
	<div data-survey-done>
		$("span[device='"+surveyOption.device+surveyOption.partition+"']").prop('disabled',true);
		$("span[device='"+surveyOption.device+surveyOption.partition+"']").html("<i class='fa fa-spinner fa-spin'></i> <?=_('Removing');?>");
		$.post(UDURL, {'action' : 'rm_partition', serial:surveyOption.serial, device:surveyOption.device, partition:surveyOption.partition}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.rm_partition = function(bt, serial, device, partition){doUnassignedDevicesSurvey("remove_partiton", {el:bt, serial:serial, device:device, partition:partition});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="clear_disk" data-survey-title="">
	<div data-question data-question-title="" data-question-button-done="<?=_('Clear');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.serial]
		</div>
		<div data-question-content>
			<div class="swal-title"><?=_('Data on this disk will be lost');?>!</div>
			<div class="swal-title" style="font-size: 20px;"><?=_('Clear Disk');?> <span class="red">{0}?</span></div>
			<div style="margin-bottom: 25px;font-size: 20px;"><?=_('Type');?> <span class="red">'<?=_('Yes');?>'</span> <?=_('to clear this disk of all partitions');?>:</div>
			<input type="text" name="confirmation" class="swal-content__input" autocomplete="off" required >
			<?if ($Preclear):?>
			<p><?=_('If this disk was pre-cleared, you will remove the pre-clear signature.  If you add the disk to the array and the pre-clear signature is removed, Unraid will go through the lengthy process of clearing the disk again')?>.</p>
			<?endif;?>
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["confirmation"] == "<?=_('Yes');?>")
		</div>
	</div>
	<div data-survey-done>
		$("span[device='"+surveyOption.device+surveyOption.partition+"']").prop('disabled',true);
		$("span[device='"+surveyOption.device+surveyOption.partition+"']").html("<i class='fa fa-spinner fa-spin'></i> <?=_('Removing');?>");
		$.post(UDURL, {'action' : 'clr_disk', serial:surveyOption.serial, device:surveyOption.device}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.clr_disk = function(bt, serial, device){doUnassignedDevicesSurvey("clear_disk", {el:bt, serial:serial, device:device});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_iso_share" data-survey-title="<?=_('Remove ISO File mount');?>">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.compressed]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will remove the ISO file share for');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{1}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {'action' : 'remove_iso_config', device:surveyOption.device}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.remove_iso_config = function(device, compressed){doUnassignedDevicesSurvey("remove_iso_share", {device:device, compressed:compressed});}
		});
	</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_disk_config" data-survey-title="<?=_('Remove Disk Config');?>">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.serial, surveyOption.compressed]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will remove the saved configuration of');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{1}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {'action' : 'remove_config', serial:surveyOption.serial}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function(){
				window.remove_disk_config = function(serial, compressed){doUnassignedDevicesSurvey("remove_disk_config",{serial:serial, compressed:compressed});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_remote_share" data-survey-title="<?=_('Remove SMB/NFS mount');?>?">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.compressed, surveyOption.type]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will remove the');?> <span style="font-weight: bold;">{2}</span> <?=_('share for');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{1}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {'action' : 'remove_samba_config', device:surveyOption.device}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function(){
				window.remove_samba_config = function(device, compressed, type){doUnassignedDevicesSurvey("remove_remote_share",{device:device, compressed:compressed, type:type});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="add_remote_share" data-survey-title="<?=_('Add Remote Share');?>">
	<div data-question data-question-title="<?=_('Click on Icon to Choose Protocol');?>">
		<div data-question-format>
			["nfs_radio","smb_radio"]
		</div>
		<div data-question-content>
			<div class="image-radio">
				<input type="radio" id="{0}" name="PROTOCOL" value="NFS" required="" <?=($var['shareNFSEnabled']=="no") ? "disabled" : "";?>>
				<label class="image-radio-label image-radio-linux" for="{0}"></label>
				<input type="radio" id="{1}" name="PROTOCOL" value="SMB" required="" <?=($var['shareSMBEnabled']=="no") ? "disabled" : "";?>>
				<label class="image-radio-label image-radio-windows" for="{1}"></label>
				<p><?=_('WARNING').": "._('Use caution when using a remote share local mount in a Docker Container or VM for critical data');?>.  <?=_('Media mapped to apps like Plex should not be a problem');?>.  <?=_('Remote share mounts are dependent on a solid and reliable network connection and that can be difficult to achieve');?>. <?=_('If the remote share goes offline, you may have problems');?>!</p>
				<?if ($var['shareNFSEnabled']=="no"):?><p><?=_('Note').": "._('You must enable NFS in Settings->NFS to mount NFS shares').".";?></p><?endif;?>
				<?if ($var['shareSMBEnabled']=="no"):?><p><?=_('Note').": "._('You must enable SMB in Settings->SMB to mount SMB shares').".";?></p><?endif;?>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Choose Server');?>">
		<div data-question-format>
			[surveyData["PROTOCOL"] == "SMB" ? "list_samba_hosts" : "list_nfs_hosts"]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="IP" autocomplete="off" required placeholder="<?=_('Enter or Select Server');?>"><br/>
			<button class="swal-button" onclick='load_hosts(this,"{0}")'><?=_('Search For Servers');?></button>
			<p><?=_('Search for Servers, or enter the Server name/IP address manually');?>.</p>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Username');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB';
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="text" class="swal-content__input" name="USER" autocomplete="off" placeholder="<?=_('Username');?>">
				<p><?=_('Enter the Username if the share is password protected');?>.</p>
				<p><?=_('You will need to enter credentials to list the shares');?>.</p>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Password');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="password" class="swal-content__input" name="PASS" autocomplete="new-password" placeholder="<?=_('Password');?>">
				<p><?=_('Enter the Password if the share is password protected');?>.</p>
				<p><?=_('You will need to enter credentials to list the shares');?>.</p>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Domain');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="text" class="swal-content__input" name="DOMAIN" autocomplete="off" placeholder="<?=_('Domain');?>">
				<p><?=_('Enter the Domain for the share if on a Domain');?>.</p>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Choose Share');?>">
		<div data-question-format>
			[surveyData['PROTOCOL'], surveyData['IP'], surveyData['USER'], surveyData['PASS'], surveyData['DOMAIN'], (surveyData['PROTOCOL'] == 'SMB' ? 'list_samba_shares' : 'list_nfs_shares')]
		</div>
		<div data-question-content>
			<input type='text' class="swal-content__input" autocomplete="off" name='SHARE' required placeholder="<?=_('Enter or Select Share');?>"><br />
			<button class="swal-button" onclick='load_shares(this, "{1}", "{2}", "{3}", "{5}")'><?=_('Load Shares');?></button>
			<p><?=_('Search for Shares or enter the Share name manually');?>.</p>
		</div>
		<div data-question-done>
			(surveyData["SHARE"].length)
		</div>
	</div>
	<div data-survey-done>
		var opts			= new Object();
		opts["action"]		= "add_samba_share";
		opts["PROTOCOL"]	= surveyData['PROTOCOL'];
		opts["IP"]			= surveyData['IP'];
		opts["USER"]		= surveyData['USER'];
		opts["DOMAIN"]		= surveyData['DOMAIN'];
		opts["PASS"]		= surveyData['PASS'];
		opts["SHARE"]		= surveyData['SHARE'];
		if (opts.SHARE && opts.IP) {
			$.post(UDURL, opts).done(function(data)
			{
				swalShowResult(data == "true");
			},'json').fail(function(){swalShowResult(false);});
		}
	</div>
	<div>
		<script type="text/javascript">
			$(function(){
				window.add_samba_share = function(i){doUnassignedDevicesSurvey("add_remote_share",i);}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change Disk Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint, surveyOption.disklabel]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>">
			<p><?=_('Disk Label');?>:&nbsp;{1}</p>
			<p><?=_('Changing the Mount Point will also change the disk label');?>.</p>
		</div>
		<div data-question-load></div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {'action' : 'chg_mountpoint', serial:surveyOption.serial, partition:surveyOption.partition, device:surveyOption.device, fstype:surveyOption.fstype, mountpoint:surveyData['MOUNTPOINT']}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.chg_mountpoint = function(serial, partition, device, fstype, mountpoint, disklabel){doUnassignedDevicesSurvey("change_mountpoint",{serial:serial,partition:partition,device:device,fstype:fstype,mountpoint:mountpoint,disklabel:disklabel});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_samba_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change SMB/NFS Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>" required>
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["MOUNTPOINT"].length)
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {'action' : 'chg_samba_mountpoint', device:surveyOption.device,mountpoint:surveyData['MOUNTPOINT']}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.chg_samba_mountpoint = function(device, mountpoint){doUnassignedDevicesSurvey("change_samba_mountpoint",{device:device,mountpoint:mountpoint});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_iso_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change ISO File Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>" required>
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["MOUNTPOINT"].length)
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {'action' : 'chg_iso_mountpoint', device:surveyOption.device,mountpoint:surveyData['MOUNTPOINT']}).done(function(data)
		{
			swalShowResult(data == "true");
		},'json').fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.chg_iso_mountpoint = function(device, mountpoint){doUnassignedDevicesSurvey("change_iso_mountpoint",{device:device,mountpoint:mountpoint});}
			});
		</script>
	</div>
</div>

                )

            [UnassignedDevicesSettings] => Array
                (
                    [Menu] => Utilities
                    [Type] => xmenu
                    [Title] => Unassigned Devices
                    [Icon] => unlink
                    [Tag] => unlink
                    [file] => plugins/unassigned.devices/UnassignedDevicesSettings.page
                    [root] => plugins/unassigned.devices
                    [name] => UnassignedDevicesSettings
                    [text] => 
                )

            [UDAppend] => Array
                (
                    [Menu] => Buttons:10
                    [Link] => nav-user
                    [file] => plugins/unassigned.devices/UDAppend.page
                    [root] => plugins/unassigned.devices
                    [name] => UDAppend
                    [text] => <?$plugin = "unassigned.devices";?>
<script type="text/javascript">
	ud_url = location.pathname.split('/');
	if (ud_url[1] == "Main" && ud_url.length > 2)
	{
		var InitTab = $.cookie('tab');
		$.cookie('tab','tab1',{path:'/'});
		$(window).bind('beforeunload', function() {
			$.cookie('one',InitTab,{path:'/'});
		});
	}
<?if (is_file("/var/state/".$plugin."/reboot_required")):?>
	showUpgrade('<b>Reboot required</b> to apply Unassigned Devices update');
<?endif;?>
</script>

                )

            [ScriptLog] => Array
                (
                    [Title] => Script Log
                    [file] => plugins/unassigned.devices/ScriptLog.page
                    [root] => plugins/unassigned.devices
                    [name] => ScriptLog
                    [text] => <?php
/* Copyright 2015, Lime Technology
 * Copyright 2015, Bergware International.
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once("plugins/".$plugin."/include/lib.php");

/* read translations */
parse_plugin('UnassignedDevices');

if (isset($_GET['s'])) {
	$serial = $_GET['s'];
	$partition = $_GET['p'];
	$file = get_config($serial,"command.{$partition}");
} else if (isset($_GET['d'])) {
	$device = $_GET['d'];
	$file = get_samba_config($device,"command");
} else if (isset($_GET['i'])) {
	$device = $_GET['i'];
	$file = get_iso_config($device,"command");
}

$zip_file	= "-".basename($file, ".sh")."-";
$zip		= str_replace(' ','_',strtolower($var['NAME'])).$zip_file.date('Ymd-Hi').".zip";
$file		= $paths['device_log'].basename($file, ".sh").".log";
$cmd		= "cat ".$file." | tail -n 1000 2>/dev/null";
echo $display['resize'] ? "<pre class='up' style='display:none'>" : "<pre class='up'>";
echo `{$cmd}`;
echo "</pre>";
?>
<script>
function cleanUp() {
	if (document.hasFocus()) {
		$('input[value="Downloading..."]').val('Download').prop('disabled',false);
		$.post('/webGui/include/Download.php',{cmd:'delete',file:'<?=$zip;?>'});
	} else {
		setTimeout(cleanUp,4000);
	}
}	
function getlog() {
	$('input[value="Download"]').val('Downloading...').prop('disabled', true);
	$.post('/webGui/include/Download.php', {cmd:'save', source:'<?=$file;?>', file:'<?=$zip;?>'}, function(zip) {
		location = zip;
		setTimeout(cleanUp,4000);
	});
}
<?if ($display['resize']):?>
$(function() {
	$('pre.up').css('height',Math.max(window.innerHeight-280,370)).show();
});
<?endif;?>
</script>

<?if (is_file($file)):?>
	<input type="button" value=_(Download)_ onclick="getlog()">
<?else:?>
	<input type="button" value=_(Download)_ disabled>
<?endif;?>
<input type="button" value=_(Refresh)_ onclick="refresh()">
<input type="button" value=_(Done)_ onclick="done()">

                )

            [EULA] => Array
                (
                    [Menu] => About
                    [Title] => EULA
                    [Icon] => icon-eula
                    [Tag] => file-text-o
                    [file] => plugins/unRAIDServer/EULA.page
                    [root] => plugins/unRAIDServer
                    [name] => EULA
                    [text] => <?PHP
/* Copyright 2005-2019, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$file = "/boot/license.txt";
if (file_exists($file)) echo Markdown(file_get_contents($file)); else echo Markdown("** No license file present! **");
?>
<button type="button" onclick="done()">Done</button>

                )

            [Userscripts] => Array
                (
                    [Menu] => Utilities
                    [Icon] => file-text-o
                    [Title] => User Scripts
                    [file] => plugins/user.scripts/Userscripts.page
                    [root] => plugins/user.scripts
                    [name] => Userscripts
                    [text] => <?
############################################################
#                                                          #
# User Scripts Plugin Copyright 2016-2023, Andrew Zawadzki #
#                                                          #
############################################################

require_once("/usr/local/emhttp/plugins/user.scripts/helpers.php");
require_once("/usr/local/emhttp/plugins/user.scripts/caCredits.php");

exec("mkdir -p /boot/config/plugins/user.scripts/scripts");
exec("mkdir -p /tmp/user.scripts/running");
exec("mkdir -p /tmp/user.scripts/finished");


$vars = parse_ini_file("/var/local/emhttp/var.ini");

$userScripts = @array_diff(@scandir("/boot/config/plugins/user.scripts/scripts"),array(".",".."));
if ( ! is_array($userScripts) ) {
  $userScripts = array();
}
$o = "";
foreach ($userScripts as $script) {
  if ( ! is_file("/boot/config/plugins/user.scripts/scripts/$script/script") ) {
    continue;
  }
  $variables = getScriptVariables("/boot/config/plugins/user.scripts/scripts/$script/script");
  $command = ($variables['directPHP'] ?? false) ? "directRunScript" : "runScript";
  $scriptName = ($variables['name'] ?? false) ? $variables['name'] : $script;
  if ( is_file("/boot/config/plugins/user.scripts/scripts/$script/name") ) {
    $scriptName = trim(file_get_contents("/boot/config/plugins/user.scripts/scripts/$script/name"));
  }
  $id = str_replace(".","-",$script);
  $id = str_replace(" ","",$id);
  $o .= "<tr><td width='30%' style='text-align:initial'>";
  $o .= "<font size='2'><span class='ca_nameEdit warning' id='name$id' data-nameName='$scriptName' data-scriptName=".escapeshellarg($script)." style='font-size:1.9rem;cursor:pointer;'><i class='warning fa fa-gear'></i></span>&nbsp;&nbsp;<b><span style='color:#ff8c2f;'>$scriptName</span>&nbsp;</b></font><br>";
  if ( is_file("/boot/config/plugins/user.scripts/scripts/$script/description") ) {
    $description = @file_get_contents("/boot/config/plugins/user.scripts/scripts/$script/description");
    $description = str_replace("\r","",$description);
    $description = str_replace("\n","<br>",$description);
  } else {
    $description = isset($variables['description']) ? $variables['description'] : "No description<br>(/boot/config/plugins/user.scripts/scripts/$script)";
  }
  $o .= "<span class='ca_descEdit' data-scriptName=".escapeshellarg($script)." id='desc$id'>$description</span>";
  $o .= "</td>";
  if ( ($variables['backgroundOnly'] ?? false) != "true")  {
    $o .= "<td width=10%><input type='button' value='Run Script' class='running$id' id='foreground$id' onclick='$command(&quot;/boot/config/plugins/user.scripts/scripts/$script/script&quot;);'></td>";
  } else {
    $o .= "<td width=10%></td>";
  }
  if ( ($variables['foregroundOnly'] ?? false) != "true" ) {
    $o .= "<td width=10%><input type='button' value='Run In Background' class='running$id' id='$id' onclick='backgroundScript(&quot;/boot/config/plugins/user.scripts/scripts/$script/script&quot;,&quot;$id&quot;);'>";
    $o .= "<td><select class='schedule' id='schedule$id' onchange='changeApply(&quot;$id&quot;);' data-script='&quot;/boot/config/plugins/user.scripts/scripts/$script/script&quot;'>";
    $o .= "  <option value='disabled'>Schedule Disabled</option>";
    $o .= "  <option value='hourly'>Scheduled Hourly</option>";
    $o .= "  <option value='daily'>Scheduled Daily</option>";
    $o .= "  <option value='weekly'>Scheduled Weekly</option>";
    $o .= "  <option value='monthly'>Scheduled Monthly</option>";
    $o .= "  <option value='start'>At Startup of Array</option>";
    $o .= "  <option value='stop'>At Stopping of Array</option>";
    $o .= "  <option value='boot'>At First Array Start Only</option>";
    $o .= "  <option value='custom'>Custom</option>";
    $o .= "</select></td>";
    $o .= "<td width=15%><input id='customschedule$id'type='text' hidden onchange='changeApply(&quot;$id&quot;);' placeholder='Custom Cron Schedule' class='narrow'></td>";
    $o .= "";
  } else {
    $o .= "<td width=10%></td><td width=15%></td>";
  }
  $o .= "<td><i class='warning ca_tooltip fa fa-file-o' id='log$id' onclick='showLog(&quot;$script&quot;);' style='display:none;cursor:pointer;font-size:2rem;' title='Show Log'></i>";
  $o .= "&nbsp;&nbsp;&nbsp;<i class='warning ca_tooltip fa fa-download' id='download$id' style='display:none;cursor:pointer;font-size:2rem;' title='Download Log' onclick='downloadLog(&quot;$script&quot;);'></i>";
  $o .= "&nbsp;&nbsp;&nbsp;<i class='warning ca_tooltip fa fa-trash' id='trash$id' onclick='deleteLog(&quot;$script&quot;);' style='display:none;cursor:pointer;font-size:2rem;' title='Delete Log File'></i>";
  $o .= "</td>";
  $o .= "<td><font color='red'><span id='status$id'></span></font>";
  $o .= "</tr>";
}

$scheduleScript = "<script>";
$schedule = json_decode(@file_get_contents("/boot/config/plugins/user.scripts/schedule.json"),true);
if ( ! $schedule ) { $schedule = array(); }

foreach ($schedule as $scriptSchedule) {
  $scheduleScript .= "$('#".$scriptSchedule['id']."').val('".$scriptSchedule['frequency']."');";
  $scheduleScript .= "$('#custom".$scriptSchedule['id']."').val('".$scriptSchedule['custom']."');";
  if ( $scriptSchedule['frequency'] == "custom" ) {
    $scheduleScript .= "$('#custom".$scriptSchedule['id']."').show();";
  }      
}
$scheduleScript .= "</script>";
?>
<script src="/plugins/user.scripts/javascript/ace/ace.js" type= "text/javascript"></script>
<script>
var caURL = "/plugins/user.scripts/exec.php";
var aceTheme=<?php echo (in_array($theme,['black','gray']) ? json_encode('ace/theme/tomorrow_night') : json_encode('ace/theme/tomorrow')); ?>;

$(function() {
  var editor = ace.edit("itemEditor");
  editor.setTheme(aceTheme);
  editor.setShowPrintMargin(false);
})

function abortScript(name) {
   swal({
    title: "Abort this script?",
    text: "Are you sure you want to abort this script <font color='red'><b>"+name+"?</b></font>",
    showConfirmButton: true,
    showCancelButton: true,
    closeOnConfirm: false,
    type: "warning",
    html: true
  },
  function() {
    $.post(caURL,{action:"abortScript",name:name});
    swal({
      title: "Aborted!",
      text: "The script <font color='red'><b>"+name+"</b></font> has been aborted",
      showConfirmButton: true,
      showCancelButton: false,
      closeOnConfirm: true,
      html: true,
      type: "success"
    });
  });
}

function deleteLog(name) {
  swal({
    title: "Delete the logs?",
    text: "Are you sure you want to delete the logs from <font color='red'><b>"+name+"?</b><font>",
    showConfirmButton: true,
    showCancelButton: true,
    closeOnConfirm: false,
    type: "warning",
    html:true
  },
  function() {
    $.post(caURL,{action:"deleteLog",name:name});
    swal({
      title: "Deleted",
      text: "The log files from <font color='red'><b>"+name+"</b></font> have been deleted",
      showConfirmButton: true,
      showCancelButton: false,
      html: true,
      type: "success"
    });
  });
}

function basename( path ) {
  return path.replace( /\\/g, '/' ).replace( /.*\//, '' );
}

function dirname( path ) {
  return path.replace( /\\/g, '/' ).replace( /\/[^\/]*$/, '' );
}

function runScript(path) {
  $.post(caURL,{action:'getScriptVariablesString',script:path},function(data) {
    if (data) {
      var variables = new Array();
      variables = parseINIString(data);
      if ( variables['argumentDescription'] ) {
        swal({
          title: "Enter In Script Arguments",
          text: variables['argumentDescription'],
          type: "input",
          inputValue: variables['argumentDefault'],
          inputPlaceHolder: "Command Arguments",
          showCancelButton: true,
          closeOnConfirm: true
        },function(inputValue){
          if (inputValue) {
            actuallyRunScript(path,inputValue);
          }
        });
      } else {
        actuallyRunScript(path,"");
      }        
    }
  });
}

function actuallyRunScript(path,inputValue) {
  $.post(caURL,{action:'convertScript',path:path},function(data) {
    if (data) {
      openBox('/plugins/user.scripts/startScript.sh&arg1='+data+'&arg2='+inputValue,"Script "+basename(dirname(path))+" Running",800,1200,true);
    }
  });
}

function directRunScript(path) {
  $.post(caURL,{action:'directRunScript',path:path},function(data) {
    if (data) {
      openBox(data,"Script "+basename(dirname(path))+" Running",800,1200);
    }
  })
}

function backgroundScript(path,element) {
  $.post(caURL,{action:'getScriptVariables',script:path},function(data) {
    if (data) {
      var variables = new Array();
      variables = parseINIString(data);
      $.post(caURL,{action:'convertScript',path:path},function(data) {
        if (data) {
          openBox('/plugins/user.scripts/backgroundScript.sh&arg1='+data,"Script Running",800,1200);
        }
      });
    }
  });
}

function downloadLog(script) {
  $.post(caURL,{action:'convertLog',script:script},function(data) {
    if (data) {
      window.open('/plugins/user.scripts/log.zip');
    }
  });
}

function showLog(script) {
  openWindow('/plugins/user.scripts/showLog.php&arg1='+script,'Log Information',800,1200);
}

function checkBackground() {
  $.post(caURL,{action:'checkBackground'},function(data) {
    if (data) {
      $("#backgroundScript").html(data);
    }
  });
}

function changeApply(scheduleID) {
  $("#applyButton").prop("disabled",false);
  if ( $("#schedule" + scheduleID).val() == "custom" ) {
    $("#customschedule" + scheduleID).show();
  } else {
    $("#customschedule" + scheduleID).hide();
  }
}

function applySchedule() {
  var schedule = new Array();
  
  $(".schedule").each(function() {
    var script = $(this).data("script");
    var frequency = $(this).val();
    var custom = $("#custom"+this.id).val();
    var newSchedule = new Array(script,frequency,this.id,custom);
    
    schedule.push(newSchedule);
  });
  $.post(caURL,{action:'applySchedule',schedule:schedule}, function(data) {
    if (data) {
      $("#testing").html(data);
    }
  });
  $("#applyButton").prop("disabled",true);
}

$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("user.scripts.plg",{name:"User Scripts"});
	}

	$(".tipsterallowed").show();
	$('.ca_tooltip').tooltipster({delay:[1000,1],timer:15000, animation:'grow', arrow:true, trigger:'custom', triggerOpen:{mouseenter: true}, triggerClose:{click:true,scroll:true,mouseleave:true}});
	$('.ca_credits').tooltipster({
		trigger: 'custom',
		triggerOpen: {mouseenter:true},
		contentAsHTML: true,
		maxWidth:550,
		minWidth:550,
		animation: 'grow',
		triggerClose:{click:false,scroll:true,mouseleave:true},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var myID = origin.attr('id');
			instance.content("<div style='overflow:scroll; max-height:350px; height:550px; overflow-x:hidden; overflow-y:auto;'><center><img src='/plugins/user.scripts/images/user.scripts.png' width=96px><br><font size='6' color='white'>CA User Scripts</font><br><br><?=$caCredits?></div>");
		}
	});  
	$('.ca_cron').tooltipster({
		trigger: 'custom',
		triggerOpen: {mouseenter:true},
		triggerClose:{click:true,scroll:true,mouseleave:true},
		contentAsHTML: true,
		maxWidth:550,
		minWidth:550,
		animation: 'grow',
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var myID = origin.attr('id');
			instance.content("Custom schedule format (standard cron entry):<br><tt>┌───────────── minute (0 - 59)<br></tt><tt>│ ┌───────────── hour (0 - 23)<br></tt><tt>│ │ ┌───────────── day of month (1 - 31)<br></tt><tt>│ │ │ ┌───────────── month (1 - 12)<br></tt><tt>│ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday)<br></tt><tt>│ │ │ │ │<br></tt><tt>│ │ │ │ │<br></tt><tt>│ │ │ │ │<br></tt><tt>* * * * *</tt><br>See <a href='https://en.wikipedia.org/wiki/Cron' target='_blank'>HERE</a> for examples.  Or <a href='https://crontab.guru/' target='_blank'>HERE</a> for an online generator");
		}
	});  
	$('.ca_nameEdit').tooltipster({
		trigger: 'custom',
		triggerOpen: {click:true,touchstart:true,mouseenter:true},
		triggerClose:{click:true,scroll:false,mouseleave:true},
		delay: 1000,
		contentAsHTML: true,
		animation: 'grow',
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var myID = origin.attr('id');
			var name = $("#"+myID).html();
			var scriptName = $("#"+myID).attr("data-scriptname");
			instance.content("/boot/config/plugins/user.scripts/scripts/"+scriptName + "<br><center><input type='button' value='Edit Name' onclick='editName(&quot;"+myID+"&quot;);'><input type='button' value='Edit Description' onclick='editDesc(&quot;"+myID+"&quot;);'><input type='button' onclick='editScript(&quot;"+myID+"&quot;);' value='Edit Script'><input type='button' onclick='deleteScript(&quot;"+myID+"&quot;);' value='Delete Script'></center>");
		}
	});

  
  setInterval(function() {
    checkBackground();
  }, 1000);
});

function stripTags(string) {
	return string.replace(/(<([^>]+)>)/ig,"");
}

function editName(myID) {
	console.log(myID);
  var currentName = $("#"+myID).attr("data-namename");
//	currentName = stripTags(currentName);
  $("#"+myID).attr("data-originalName",currentName);
  $("#"+myID).html("<input type='text' id='newName"+myID+"' value='"+currentName+"'><br><font color='red' size='4'><i class='fa fa-times' aria-hidden='true' style='cursor:pointer' onclick='cancelName(&quot;"+myID+"&quot;);'></i>&nbsp;&nbsp;<font color='green' size='4'><i style='cursor:pointer' onclick='applyName(&quot;"+myID+"&quot;);' class='fa fa-check' aria-hidden='true'></i></font>");
  $("#"+myID).tooltipster("close");
  $("#"+myID).tooltipster("disable");
}

function editDesc(myID) {
  var origID = myID;
  $("#"+myID).tooltipster("close");
  myID = myID.replace("name","desc");
  var currentDesc = $("#"+myID).html();
  $("#"+myID).attr("data-originaldescription",currentDesc);
  $("#"+myID).html("<textarea id='newDesc"+myID+"' cols='40' rows='5'>"+currentDesc+"</textarea><br><font color='red' size='4'><i class='fa fa-times' aria-hidden='true' style='cursor:pointer' onclick='cancelDesc(&quot;"+myID+"&quot;);'></i>&nbsp;&nbsp;<font color='green' size='4'><i style='cursor:pointer' onclick='applyDesc(&quot;"+myID+"&quot;); ' class='fa fa-check' aria-hidden='true'></i></font>");
  $("#"+origID).tooltipster("enable");
}

function getModeForShebang(data)
{
  var firstLine = data.split('\n')[0];
  if (firstLine.startsWith("#!")) {
    if (firstLine.includes("bash") || firstLine.includes("sh")) {
      return "ace/mode/sh";
    } else if (firstLine.includes("php") ) {
      return "ace/mode/php";
    } else if (firstLine.includes("perl") ) {
      return "ace/mode/perl";
    }
  }
  return "ace/mode/text";
}

function editScript(myID) {
  var origID = myID;
  $("#"+myID).tooltipster("close");
  var script = $("#"+myID).attr("data-scriptname");
  $.post(caURL,{action:'getScript',script:script},function(data) {
    if (data) {
      $("#editScriptName").html(script);
      var editor = ace.edit("itemEditor");
      editor.getSession().setValue(data);
      editor.getSession().setMode(getModeForShebang(data));
      $(".editing").show();
			window.scrollTo(0, 0);
    }
  });
}
  
function cancelEdit() {
  $(".editing").hide();
}

function saveEdit() {
  var script = $("#editScriptName").html();
  var editor = ace.edit("itemEditor");
  var scriptContents = editor.getValue();
  
  $.post(caURL,{action:'saveScript',script:script,scriptContents:scriptContents},function(data) {
    if (data) {
      $(".editing").hide();
    }
  });
  
}

function applyName(myID) {
  var newName = $("#newName"+myID).val();
  var script = $("#"+myID).attr("data-scriptname");
  $("#"+myID).html(newName);
  $("#"+myID).tooltipster("enable");
  $("#"+myID).tooltipster("close");
  $.post(caURL,{action:'changeName',script:script,newName:newName},function(data) {
		window.location.reload();
	});
}

function cancelName(myID) {
  var oldName = $("#"+myID).attr("data-originalName");
  $("#"+myID).html(oldName);
  $("#"+myID).tooltipster("enable");
  $("#"+myID).tooltipster("close");
	window.location.reload();
}

function cancelDesc(myID) {
  var oldName = $("#"+myID).attr("data-originaldescription");
  $("#"+myID).html(oldName);
  $("#"+myID).tooltipster("enable");
  $("#"+myID).tooltipster("close");
}

function applyDesc(myID) {
  var newDesc = $("#newDesc"+myID).val();
  newDesc = newDesc.replace(/\n/g, "<br>");
  var script = $("#"+myID).attr("data-scriptname");
  $("#"+myID).html(newDesc);
  $.post(caURL,{action:'changeDesc',script:script,newDesc:newDesc});
}

function addScript() {
  swal({
    title: "Add New Script",
    text: "Enter in the name for the script",
    type: "input",
    inputValue: "",
    inputPlaceHolder: "Command Arguments",
    showCancelButton: true,
    closeOnConfirm: true
  },function(inputValue){
    if (inputValue) {
      $.post(caURL,{action:'addScript',scriptName:inputValue},function(data) {
        if (data) {
          location.reload();
        }
      });
    }
  });
}

function deleteScript(myID) {
  var scriptName = $("#"+myID).attr("data-scriptname");
  var script = $("#"+myID).html();
  swal({
    text: "Are you sure you want to delete <font color='red'><b>"+script+"</b></font> (<font color='green'>/boot/config/plugins/user.scripts/scripts/"+scriptName+"</font>)?",
    title: "Delete Script?",
    type: "warning",
    showCancelButton: true,
    closeOnConfirm: true,
    html: true
  },function(){
    $.post(caURL,{action:'deleteScript',scriptName:scriptName},function(data) {
      if (data) {
        location.reload();
      }
    });
  });
}

function myAlert(description,textdescription,textimage,imagesize, outsideClick, showCancel, showConfirm, alertType) {
  if ( !outsideClick ) outsideClick = false;
  if ( !showCancel )   showCancel = false;
  if ( !showConfirm )  showConfirm = false;
  if ( imagesize == "" ) { imagesize = "80x80"; }
  swal({
    title: description,
    text: textdescription,
    imageUrl: textimage,
    imageSize: imagesize,
    allowOutsideClick: outsideClick,
    showConfirmButton: showConfirm,
    showCancelButton: showCancel,
    type: alertType,
    html: true
  });
}

function parseINIString(data){
    var regex = {
        section: /^\s*\[\s*([^\]]*)\s*\]\s*$/,
        param: /^\s*([\w\.\-\_]+)\s*=\s*(.*?)\s*$/,
        comment: /^\s*;.*$/
    };
    var value = {};
    var lines = data.split(/\r\n|\r|\n/);
    var section = null;
    lines.forEach(function(line){
        if(regex.comment.test(line)){
            return;
        }else if(regex.param.test(line)){
            var match = line.match(regex.param);
            if(section){
                value[section][match[1]] = match[2];
            }else{
                value[match[1]] = match[2];
            }
        }else if(regex.section.test(line)){
            var match = line.match(regex.section);
            value[match[1]] = {};
            section = match[1];
        }else if(line.length == 0 && section){
            section = null;
        };
    });
    return value;
}
</script>
<a class='ca_cron' href='https://crontab.guru/' target='_blank'>What Is Cron</a><a class='ca_credits' style='float:right;cursor:pointer'>Credits</a>

<div class='editing' hidden>
<center><b>Editing /boot/config/plugins/user.scripts/scripts/<span id='editScriptName'></span>/script</b><br>
<input type='button' value='Cancel' onclick='cancelEdit();'><input type='button' onclick='saveEdit();' value='Save Changes'><br>
<div id='itemEditor' style='width:90%; height:500px; position: relative;'></div>
</center>
</div>

<span class='tipsterallowed' hidden></span><br>
<table>
<?=$o?>
</table>
<br>
<span class='tipsterallowed' hidden><input type='button' value='Add New Script' onclick='addScript();'><span><br>
<?=$scheduleScript?>
<span id='testing'></span>
<span id='backgroundScript'></span>
<span id='downloadScript'></span>

<input type='button' value='Apply' disabled onclick='applySchedule();' id='applyButton'><input type='button' value='Done' onclick='done();'>

<center><input type='button' value='How To Add Scripts' onclick='$(&quot;#howToAdd&quot;).show();'></center>

<span id='howToAdd' style='display:none'>
To add your own user scripts, on the flash drive within the <font color='red'><b>config/plugins/user.scripts/scripts</b></font> folder, create a new folder for a script (the name does not matter of the folder <font color='red'> but it can only contain the following characters: letters ([A-Za-z]), digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), periods ("."), and spaces (" ").</font>  Any other characters will impact the ability to run the script in the background.Within that folder, create a file called <font color='red'><b>description</b></font> which contains the description of the script.<br>
Create a file called <font color='red'><b>script</b></font> which contains the actual script.
Notepad can be used to do this on Windows machines, as prior to being executed, DOS line endings are automatically converted to Linux style line endings.  #!/bin/bash will even be automatically added to the start of the script before execution
Note that user interaction (ie: answering questions within the script) will NOT work.  Also, if there are any dependencies for the script (ie: other scripts), those can be called as usual, but make note that during execution, the script does not run from the flash drive (ie: include the full path to any dependency scripts)
There is no point in running a particular script in the background if the script displays text that you need to see (ie: displaying the size of the docker logs)
<br><br>
Additionally, scripts can contain inline variables which will modify the operation of the GUI for them.<br>
<br>These variables are:<br><br>
<b>description</b> - Contains the description of the script<br>
<b>foregroundOnly</b> Setting this to be true disallows background running (and scheduling) of the script<br>
<b>backgroundOnly</b> Setting this to be true disallows foreground running of the script<br>
<b>arrayStarted</b> Setting this to be true will only run the script (foreground or background or scheduled) if the array is up and running<br>
<b>name</b> this is the name of the script.  Without this variable, the GUI will display the folder's name<br>
<b>argumentDescription</b> if present this will bring up a pop up asking the user for the argument list for the script.  Note that currently arguments do not accept spaces contained within one argument (ie: quoting and escaping spaces does NOT work)<br>
<b>argumentDefault</b> this is the default arguments for the above<br>
<br><b>How to implment these variables:</b> Immediately after the interpreter line (eg: immediately after the #!/bin/bash line), add these lines if you choose (you do not need to add all of them if you don't require them)<br>
<br><font face='monospace'>
&#35;description=this is the description of the script<br>
&#35;foregroundOnly=true<br>
&#35;backgroundOnly=true<br>
&#35;arrayStarted=true<br>
&#35;name=blah blah blah<br>
&#35;argumentDescription=This is the description of the argument(s)<br>
&#35;argumentDefault=defaultArg1 defaultArg2 etc<br></font>
<br>
After the first non comment line within any script, parsing for these variables stops.  (IE: they have to be right at the top of the script file)<br>
<br>
Note that you do NOT have to have any or all of the lines contained within any particular script.  (Also, if you do have the description file present, then its contents takes precedence over the description variable)<br>
<br>
*PHP scripters:  You can also place these variable lines immediately after the <? or <?PHP line<br>
</span>

<center>For help with this plugin, visit <a href='https://forums.unraid.net/topic/48286-plugin-ca-user-scripts/' target='_blank'>HERE</a></center>


<span id='debugging'></span>

                )

            [Vmbackup1Settings] => Array
                (
                    [Menu] => Vmbackup:1
                    [Title] => Settings
                    [Icon] => clone
                    [file] => plugins/vmbackup/Vmbackup1Settings.page
                    [root] => plugins/vmbackup
                    [name] => Vmbackup1Settings
                    [text] => 
<?php

  /* vmbackup plugin
    copyright JTok */

  require_once '/usr/local/emhttp/plugins/vmbackup/include/functions.php';
  require_once '/usr/local/emhttp/plugins/vmbackup/include/sanitization.php';
  require_once '/usr/local/emhttp/plugins/vmbackup/include/validation.php';

  // create local variables.
  // plugin name.
  $plugin = 'vmbackup';
  // default files.
  $plugin_source_path = '/usr/local/emhttp/plugins/' . $plugin;
  $script_path = $plugin_source_path . '/scripts';
  $commands_script_file = $script_path . '/commands.sh';
  $default_script_file = $script_path . '/default-script.sh';
  $default_conf_file = $plugin_source_path . '/default.cfg';
  $default_fix_snapshots_file = $script_path. '/default-fix-snapshots.sh';
  // user files.
  $plugin_path = '/boot/config/plugins/' . $plugin;
  $user_fix_snapshots_file = $plugin_path. '/user-fix-snapshots.sh';
  // generated files.
  $tmp_plugin_path = '/tmp/vmbackup';
  $vm_list = $tmp_plugin_path . '/vm-list.txt';
  $vdisk_list = $tmp_plugin_path . '/vdisk-list.json';

  // get current config from cookie.
  if (!isset($_COOKIE["current_config"])) {
    $current_config = "default";
  } else {
    $current_config = $_COOKIE["current_config"];
  }

  // if the current config is not default, then check to see if current config is still valid.
  if (!strcasecmp($current_config, "default") == 0) {
    $configs_plugin_path = $plugin_path . '/configs';
    $current_config_path = $configs_plugin_path . '/' . $current_config;
    // if the current config does not exist, then change the current config to default.
    if (!is_dir($current_config_path)) {
      $current_config = "default";
    }
  }

  // finish creating variables based on current config.
  if (!strcasecmp($current_config, "default") == 0) {
    $configs_plugin_path = $plugin_path . '/configs';
    $current_config_path = $configs_plugin_path . '/' . $current_config;
    $user_script_file = $current_config_path . '/user-script.sh';
    $user_conf_file = $current_config_path . '/user.cfg';
    $pre_script_file = $current_config_path . '/pre-script.sh';
    $post_script_file = $current_config_path . '/post-script.sh';
  } else {
    $user_script_file = $plugin_path . '/user-script.sh';
    $user_conf_file = $plugin_path . '/user.cfg';
    $pre_script_file = $plugin_path . '/pre-script.sh';
    $post_script_file = $plugin_path . '/post-script.sh';
  }


  // create or update the user config file as necessary and return the results as a config array.
  $conf_array = update_user_conf_file($default_conf_file, $user_conf_file);

  // see if default script version is the same as user script version.
  if (!same_file_version($default_script_file, $user_script_file, false)) {
    // create a variable with the default script contents and user config file merged.
    $script_contents = update_script_contents($default_script_file, $user_conf_file);

    // write script contents variable as the user script file.
    file_put_contents($user_script_file, $script_contents);
  }

  // check to see if we are working with the default config.
  if (strcasecmp($current_config, "default") == 0) {
    // see if default fix snapshots script version is the same as user fix snapshots script version.
    if (!same_file_version($default_fix_snapshots_file, $user_fix_snapshots_file, false)) {
      // create a variable with the default fix snapshots script contents and user config file merged.
      $snapshot_script_contents = update_script_contents($default_fix_snapshots_file, $user_conf_file);

      // write script contents variable as the user fix snapshots script file.
      file_put_contents($user_fix_snapshots_file, $snapshot_script_contents);
    }
  }

  // create text files containing a list of vms and a list of vdisks respectively.
  exec("$commands_script_file create_vm_lists");
?>

<!-- import stylesheets -->
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/plugins/vmbackup/include/vmbackup.css')?>">

<!-- import javascript sources -->
<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script type="text/javascript" src="<?autov('/plugins/vmbackup/include/javascript/functions.js')?>"></script>
<script type="text/javascript" src="<?autov('/plugins/vmbackup/include/javascript/vmbackup.js')?>"></script>

<!-- run jquery/javascript -->
<script type="text/javascript">
  // declare global variables.
  var rebuild_text_files = false;
  var refresh_settings = false;
  var current_config = "default";

  // function to prepare form for submission.
  function prepare_form(form) {
    // make vdisks to skip a comma separated list for user config.
    if (typeof form.vdisks_to_skip !== 'undefined') {
      var vdisks_to_skip = '';
      for (var i=0,item; item=form.vdisks_to_skip.options[i]; i++) {
        if (item.selected) {
          if (vdisks_to_skip.length) vdisks_to_skip += ',';
          vdisks_to_skip += item.value;
          item.selected = false;
        }
      }
      item = form.vdisks_to_skip.options[0];
      item.value = vdisks_to_skip;
      item.selected = true;
    }

    // make vms to backup a comma separated list for user config.
    if (typeof form.vms_to_backup !== 'undefined') {
      var vms_to_backup = '';
      for (var i=0,item; item=form.vms_to_backup.options[i]; i++) {
        if (item.selected) {
          if (vms_to_backup.length) vms_to_backup += ',';
          vms_to_backup += item.value;
          item.selected = false;
        }
      }
      item = form.vms_to_backup.options[0];
      item.value = vms_to_backup;
      item.selected = true;
    }

    // make vms to backup while running a comma separated list for user config.
    if (typeof form.vms_to_backup_running !== 'undefined') {
      var vms_to_backup_running = '';
      for (var i=0,item; item=form.vms_to_backup_running.options[i]; i++) {
        if (item.selected) {
          if (vms_to_backup_running.length) vms_to_backup_running += ',';
          vms_to_backup_running += item.value;
          item.selected = false;
        }
      }
      item = form.vms_to_backup_running.options[0];
      item.value = vms_to_backup_running;
      item.selected = true;
    }

    // remove whitespace and prepare comma separated lists.
    var vdisk_extensions_to_skip = document.getElementById("vdisk_extensions_to_skip");
    vdisk_extensions_to_skip.value = remove_list_whitespace(vdisk_extensions_to_skip.value);
  }


  // document ready function.
  $(function() {
    // set the width of the first grid column based on content.
    set_width();
    // set up inline help toggle handler.
    toggle_inline_help();
    //configure dropdown checklists.
    configure_vdisks_to_skip();
    configure_vms_to_backup();
    configure_vms_to_backup_running();
    // set the regex pattern each element should use.
    toggle_cron_regex();
    toggle_restrictive_regex();
    // build config selection.
    build_configs_file_tree();
    // set the validation for each element.
    set_validation();
    // set the initial attributes for cron controls.
    backup_frequency();
    // set the label for vms_to_backup based on backup_all_vms.
    set_vms_to_backup_lbl();
    // set the disabled state for compression drop downs.
    set_compression_drop_down_states();
    // assign functions to element events.
    assign_functions();
    // set default cookies.
    check_cookie("rebuild_text_files");
    check_cookie("refresh_settings");
    check_cookie("current_config", "default");
    // update global variables based on cookies.
    rebuild_text_files = (get_cookie("rebuild_text_files") === "true");
    refresh_settings = (get_cookie("refresh_settings") === "true");
    current_config = get_cookie("current_config");
    // set the current configs based on the cookie.
    set_current_config_values(current_config);
    // append current config to forms.
    update_form_config(current_config);
    // fix the dimensions of the vms_to_backup_running dropdown box so that it will actually display
    fix_css_vms_to_backup_running();
  });
</script>

<div id="vmbackup_settings_div" class="wrapper_div">

  <!-- current config -->
  <div class="wrapper_div">
    <div id="current_config_settings_div" class="grid_container_left">
      <label name="current_config_settings_label" class="config_label config_text">Currently editing config:</label>
      <div class="user_input_div"><select id="current_config_settings" name="current_config_settings" size="1">
        <option value="default">default</option>
        <?php
          $configs = glob("/boot/config/plugins/vmbackup/configs/*", GLOB_ONLYDIR);
          foreach ($configs as $config_path) {
            $config = basename($config_path)?>
            <option value="<?= $config ?>"><?= $config ?></option>
        <?php
          } ?>
      </select></div>

      <span name="current_config_settings_help" class="custom_inline_help">
        <p>Select a config to edit.</p>
        <ul>
          <li>To add a config, go to the Manage Configs tab.</li>
          <li>Default is 'default'.</li>
        </ul>
      </span>
    </div>
  </div>

  <form id="vmbackup_settings_form" name="vmbackup_settings" autocomplete="off" method="POST" action="/update.php" target="progressFrame" onsubmit="prepare_form(this)">
    <input type="hidden" id="vmbackup_settings_file" name="#file" value="vmbackup/user.cfg">
    <input type="hidden" name="#command" value="/plugins/vmbackup/scripts/commands.sh">
    <input type="hidden" name="#arg[1]" value="update_user_script">

    <!-- first titles -->
    <div class="half_width_title"><div id="title" class="nocontrol">Basic Settings</div></div>
    <div class="half_width_title"><div id="title" class="nocontrol">Schedule</div></div>

    <!-- basic settings -->
    <div id="basic_settings_div" class="grid_container_left">

      <label name="enabled_label" class="input_description">Enable backups?</label>
      <div class="user_input_div"><select id="enabled" name="enabled" size="1">
        <?=mk_option($conf_array['enabled'], "0", "No");?>
        <?=mk_option($conf_array['enabled'], "1", "Yes");?>
      </select></div>

      <span id="enabled_help" name="enabled_help" class="custom_inline_help">
        <p>Must be set to 'Yes' to enable backups.
        <br>Set to 'No' to disable backups without disabling the schedule.</p>
      </span>


      <label name="backup_location_label" class="input_description">Set backup location:</label>
      <div class="user_input_div"><input type="text" id="backup_location" name="backup_location" class="setting" value="<?=$conf_array['backup_location'];?>" pattern="^\/mnt\/([\w.-]*)+(\/[\w.-]*)*$" placeholder="Select a backup location" data-pickfilter="NO_FILES_FILTER" data-pickfolders="true" required></div>

      <span id="backup_location_help" name="backup_location_help" class="custom_inline_help">
        <p>Folder location to save backups. Must be full path.</p>
        <ul>
          <li>This can be a device/share mapped through unassigned devices, or an Unraid share you have already created.</li>
          <li>Each VM will have a subfolder made for it in this location.</li>
          <li>To change the dropdown menu from /mnt/users/ to /mnt/, disable restrictive validation.</li>
          <li>Any typed path in /mnt/ will validate. If a different path is needed, disable restrictive validation on the Danger Zone tab.</li>
        </ul>
      </span>


      <label name="backup_all_vms_label" class="input_description">Backup all VMs?</label>
      <div class="user_input_div"><select id="backup_all_vms" name="backup_all_vms" size="1" onchange="set_vms_to_backup_lbl()">
        <?=mk_option($conf_array['backup_all_vms'], "0", "No");?>
        <?=mk_option($conf_array['backup_all_vms'], "1", "Yes");?>
      </select></div>

      <span id="backup_all_vms_help" name="backup_all_vms_help" class="custom_inline_help">
        <p>Set to 'Yes' to backup all VMs.</p>
        <ul>
          <li>When set to 'No', "List VMs to backup" will be used to determine which VMs to backup.</li>
          <li>When set to 'Yes', "List VMs to backup" will be used as a list of VMs to exclude from the backup.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="vms_to_backup_label" class="input_description">List VMs to backup:</label>
      <div class="user_input_div"><select id="vms_to_backup" name="vms_to_backup" size="1" multiple="multiple" style="display:none">
        <?$vm_list_array = file($vm_list, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($vm_list_array as $vm):?>
          <?=mk_option_check($conf_array['vms_to_backup'], $vm, $vm)?>
        <?endforeach;?>
      </select></div>

      <span id="vms_to_backup_help" name="vms_to_backup_help" class="custom_inline_help">
        <p>Check the names of VMs to backup.
        <br>If "Backup all VMs" is set to 'Yes', then this list will be used as a list of VMs to exclude from the backup.</p>
        <ul>
          <li>Names should be the same names used in the configs.</li>
        </ul>
      </span>


      <label name="number_of_days_to_keep_backups_label" class="input_description">Number of days to keep backups:</label>
      <div class="user_input_div"><input type="text" id="number_of_days_to_keep_backups" name="number_of_days_to_keep_backups" class="narrow" maxlength="5" value="<?=$conf_array['number_of_days_to_keep_backups'];?>" pattern="^(0|([7-9]|[1-8][0-9]|9[0-9]|1[0-7][0-9]|180))$"></div>

      <span id="number_of_days_to_keep_backups_help" name="number_of_days_to_keep_backups_help" class="custom_inline_help">
        <p>Set this to the number of days backups should be kept.
        <br>'0' means indefinitely.</p>
        <ul>
          <li>Default is '0'.</li>
        </ul>
      </span>


      <label name="number_of_backups_to_keep_label" class="input_description">Number of backups to keep:</label>
      <div class="user_input_div"><input type="text" id="number_of_backups_to_keep" name="number_of_backups_to_keep" class="narrow" maxlength="5" value="<?=$conf_array['number_of_backups_to_keep'];?>" pattern="^(0|([2-9]|[1-3][0-9]|40))$"></div>

      <span id="number_of_backups_to_keep_help" name="number_of_backups_to_keep_help" class="custom_inline_help">
        <p>Set this to the number of backups that should be kept.
        <br>'0' means indefinitely.</p>
        <ul>
          <li>WARNING: If a VM has multiple vdisks, then they must end in sequential numbers in order to be correctly backed up (i.e. vdisk1.img, vdisk2.img, etc.).</li>
          <li>Default is '0'.</li>
        </ul>
      </span>
    </div>


    <!-- schedule -->
    <div id="schedule_div" class="grid_container_right">

      <label name="frequency_label" class="input_description">Backup Frequency:</label>
      <div class="user_input_div"><select id="frequency" name="frequency" size="1" onchange="backup_frequency()">
        <?=mk_option($conf_array['frequency'], "disabled", "Disabled");?>
        <?=mk_option($conf_array['frequency'], "daily", "Daily");?>
        <?=mk_option($conf_array['frequency'], "weekly", "Weekly");?>
        <?=mk_option($conf_array['frequency'], "monthly", "Monthly");?>
        <?=mk_option($conf_array['frequency'], "custom", "Custom");?>
      </select></div>

      <span id="frequency_help" name="frequency_help" class="custom_inline_help">
        <p>Set to the desired backup frequency.</p>
        <ul>
          <li>Selecting 'Custom' will allow for a custom Cron setting.</li>
        </ul>
      </span>


      <label name="week_label" class="input_description">Day of the Week:</label>
      <div class="user_input_div"><select id="week" name="week" size="1">
        <?=mk_option($conf_array['week'], "0", "Sunday");?>
        <?=mk_option($conf_array['week'], "1", "Monday");?>
        <?=mk_option($conf_array['week'], "2", "Tuesday");?>
        <?=mk_option($conf_array['week'], "3", "Wednesday");?>
        <?=mk_option($conf_array['week'], "4", "Thursday");?>
        <?=mk_option($conf_array['week'], "5", "Friday");?>
        <?=mk_option($conf_array['week'], "6", "Saturday");?>
      </select></div>

      <span id="week_help" name="week_help" class="custom_inline_help">
        <p>Set the day of the week to perform the backup.</p>
      </span>


      <label name="month_label" class="input_description">Day of the Month:</label>
      <div class="user_input_div"><select id="month" name="month" size="1">
        <?php
          $days = create_number_array(1,31,"2");
          foreach($days as $key => $value) {
        ?>
            <?=mk_option($conf_array['month'], $value, $key);?>
          <?php
          }
          ?>
      </select></div>

      <span id="month_help" name="month_help" class="custom_inline_help">
        </p>Set the day of the month to perform the backup.</p>
      </span>


      <label name="hour_label" class="input_description">Hour:</label>
      <div class="user_input_div"><select id="hour" name="hour" size="1">
        <?php
          $hours = create_number_array(0,23,"2");
          foreach($hours as $key => $value) {
        ?>
            <?=mk_option($conf_array['hour'], $value, $key);?>
          <?php
          }
          ?>
      </select></div>

    <span id="hour_help" name="hour_help" class="custom_inline_help">
      <p>Set the hour to perform the backup.</p>
    </span>


      <label name="minute_label" class="input_description">Minute:</label>
      <div class="user_input_div"><select id="minute" name="minute" size="1">
        <?php
          $minutes = create_number_array(0,59,"2");
          foreach($minutes as $key => $value) {
        ?>
            <?=mk_option($conf_array['minute'], $value, $key);?>
          <?php
          }
          ?>
      </select></div>

      <span id="minute_help" name="minute_help" class="custom_inline_help">
        <p>Set the minute to perform the backup.</p>
      </span>


      <label name="custom_label" class="input_description">Custom Cron:</label>
      <div class="user_input_div"><input type="text" id="custom" name="custom" class="narrow" maxlength="100" value="<?=$conf_array['custom'];?>" required></div>

      <span id="custom_help" name="custom_help" class="custom_inline_help">
        <p>Set a custom Cron schedule.</p>
        <ul>
          <li>By default this field will only take asterisks, numbered ranges, and extensions (such as @weekly).</li>
        </ul>
      </span>
    </div>


    <!-- second titles -->
    <div id="title" class="nocontrol full_width_title clear_both">Advanced Settings</div>

    <!-- advanced settings -->
    <div id="advanced_settings" class="grid_container_left">

      <label name="backup_config_label" class="input_description">Keep config backed up?</label>
      <div class="user_input_div"><select id="backup_config" name="backup_config" size="1">
        <?=mk_option($conf_array['backup_config'], "0", "No");?>
        <?=mk_option($conf_array['backup_config'], "1", "Yes");?>
      </select></div>

      <span name="backup_config_help" class="custom_inline_help">
        <p>A copy of the config will be backed up to the backup folder with each applied change.</p>
        <ul>
          <li>The backup file name will start with the config name.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="backup_user_scripts_label" class="input_description">Keep pre/post scripts backed up?</label>
      <div class="user_input_div"><select id="backup_user_scripts" name="backup_user_scripts" size="1">
        <?=mk_option($conf_array['backup_user_scripts'], "0", "No");?>
        <?=mk_option($conf_array['backup_user_scripts'], "1", "Yes");?>
      </select></div>

      <span name="backup_user_scripts_help" class="custom_inline_help">
        <p>A copy of the pre and post scripts will be backed up to the backup folder with each applied change.</p>
        <ul>
          <li>The backup file name will start with the config name.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="include_extra_files_label" class="input_description">Include extra files in VM folder?</label>
      <div class="user_input_div"><select id="include_extra_files" name="include_extra_files" size="1">
        <?=mk_option($conf_array['include_extra_files'], "0", "No");?>
        <?=mk_option($conf_array['include_extra_files'], "1", "Yes");?>
      </select></div>

      <span name="include_extra_files_help" class="custom_inline_help">
        <p>This will back up any extra files and folders in the directory of each vdisk.</p>
        <ul>
          <li>WARNING: This is still in beta and may not work as expected yet.</li>
          <li>This is recommended for backing up non-standard VMs.</li>
          <li>This will still honor the vdisk extensions to skip setting.</li>
          <li>Any vdisk that is skipped will have its directory ignored unless a different vdisk in that directory is backed up.</li>
          <li>This is not compatible with gzip compression. enabling this will disable gzip compression.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="vdisks_to_skip_label" class="input_description">List vdisks to skip:</label>
      <div class="user_input_div"><select id="vdisks_to_skip" name="vdisks_to_skip" size="1" multiple="multiple" style="display:none">
        <? $vdisk_list_json_contents = file_get_contents($vdisk_list);
        $vdisk_list_array = json_decode($vdisk_list_json_contents, true);
        foreach ($vdisk_list_array as $key => $value):?>
          <?=mk_option_check($conf_array['vdisks_to_skip'], $key, $value)?>
        <?endforeach;?>
      </select></div>

      <span name="vdisks_to_skip_help" class="custom_inline_help">
        <p>Check the specific vdisks to skip.</p>
        <ul>
          <li>IMPORTANT: Remember to change the path if you change the virtual disk path when enabling snapshots.</li>
        </ul>
      </span>


      <label name="vdisk_extensions_to_skip_label" class="input_description">List vdisk extensions to skip:</label>
      <div class="user_input_div"><input type="text" id="vdisk_extensions_to_skip" name="vdisk_extensions_to_skip" class="narrow" maxlength="9999" value="<?=$conf_array['vdisk_extensions_to_skip'];?>" pattern="^([\w.-]*)(,\s{0,1}[\w.-]+)*$"></div>

      <span name="vdisk_extensions_to_skip_help" class="custom_inline_help">
        <p>Comma separated list of vdisk extensions to skip.</p>
        <ul>
          <li>WARNING: Choosing an extension that is the same as one of your vdisks will cause it not to be backed up.</li>
          <li>iso extensions are skipped by default.</li>
        </ul>
      </span>


      <label name="use_snapshots_label" class="input_description">Enable snapshots?</label>
      <div class="user_input_div"><select id="use_snapshots" name="use_snapshots" size="1">
        <?=mk_option($conf_array['use_snapshots'], "0", "No");?>
        <?=mk_option($conf_array['use_snapshots'], "1", "Yes");?>
      </select></div>

      <span name="use_snapshots_help" class="custom_inline_help">
        <p>Snapshots will be used when backing up VMs to prevent them from needing to be shutdown.</p>
        <ul>
          <li>WARNING: This will fail if the config path for the virtual disk is /mnt/user/. you must use /mnt/cache/ or /mnt/diskX/ for snapshots to work.</li>
          <li>IMPORTANT: It is highly recommended that you install the qemu guest agent on your VMs before using snapshots to ensure the integrity of your backups.</li>
          <li>If a VM is already shutdown the default backup method will be used instead.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="inline_zstd_compress_label" class="input_description">Use Zstandard compression?</label>
      <div class="user_input_div"><select id="inline_zstd_compress" name="inline_zstd_compress" size="1">
        <?=mk_option($conf_array['inline_zstd_compress'], "0", "No");?>
        <?=mk_option($conf_array['inline_zstd_compress'], "1", "Yes");?>
      </select></div>

      <span name="inline_zstd_compress_help" class="custom_inline_help">
        <p>Set to 'Yes' to compress backups using inline Zstandard compression.</p>
        <ul>
          <li>WARNING: If turned on and there are already uncompressed or legacy compression backups, you will need to manually remove old versions of those backups until they are gone.</li>
          <li>IMPORTANT: This can add to the amount of time the backup process takes depending on your hardware and configuration.</li>
          <li>Uses Zstandard for multi-threaded compression.</li>
          <li>Cannot be used with legacy compression.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="gzip_compress_label" class="input_description">Use legacy gzip compression?</label>
      <div class="user_input_div"><select id="gzip_compress" name="gzip_compress" size="1">
        <?=mk_option($conf_array['gzip_compress'], "0", "No");?>
        <?=mk_option($conf_array['gzip_compress'], "1", "Yes");?>
      </select></div>

      <span name="gzip_compress_help" class="custom_inline_help">
        <p>Set to 'Yes' to compress backups using legacy gzip compression.
        <br>It is recommended to use Zstandard compression option instead of this, if possible.</p>
        <ul>
          <li>WARNING: Do not turn on if you already have uncompressed backups. Move or delete existing uncompressed backups before enabling, because this will compress all files in the backup directory into ONE tarball.</li>
          <li>IMPORTANT: This can add a significant amount of time to the backup process.</li>
          <li>Compression uses tar.gz for sparse file compatibility.</li>
          <li>Cannot be used with Zstandard compression.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="enable_reconstruct_write_label" class="input_description">Enable reconstruct write?</label>
      <div class="user_input_div"><select id="enable_reconstruct_write" name="enable_reconstruct_write" size="1">
        <?=mk_option($conf_array['enable_reconstruct_write'], "0", "No");?>
        <?=mk_option($conf_array['enable_reconstruct_write'], "1", "Yes");?>
      </select></div>

      <span name="enable_reconstruct_write_help" class="custom_inline_help">
        <p>Set to 'Yes' to enable reconstruct write (a.k.a. turbo write) during the backup.</p>
        <ul>
          <li>IMPORTANT: Do not use if reconstruct write is already enabled.</li>
          <li>IMPORTANT: May break auto functionality whenever it is implemented.</li>
          <li>When set to 'Yes', reconstruct write will be disabled after the backup finishes.</li>
          <li>Backups may run faster with this enabled.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>
    </div>

    <div id="advanced_message_div" class="container_left" style="padding-bottom:12px">
      <span class="important_info"><p>Note</p></span>
      <p>When configuring Advanced Settings, be sure to review the help.
      <br>Several of the options in this section may require additional configuration before they will work correctly.</p>
    </div>

    <div id="buttons_left_div" class="grid_container_left clear_both">
      <div class="input_description"><input type="button" id="default_vmbackup_settings" name="#default" value="Default" title="Load defaults." formnovalidate></div>
      <div class="grid_right_column buttons_div"><input type="button" id="apply_vmbackup_settings" name="#apply" value="Apply" disabled><input type="button" id="done_vmbackup_settings" value="Done" formnovalidate></div>
    </div>
  </form>
  <div id="buttons_right_div" class="buttons_right">
    <form id="backup_now_form" name="backup_now_form" autocomplete="off" method="POST" action="/plugins/vmbackup/include/functions.php" target="progressFrame" style="float:right">
      <input type="hidden" name="#script" value="/usr/local/emhttp/plugins/vmbackup/scripts/commands.sh">
      <input type="hidden" name="#args[1]" value="backup_now">
      <input type="button" id="show_log" name="#show_log" value="Show Log" title="Show latest log.">
      <input type="button" id="backup" name="#backup" value="Backup Now">
    </form>
    <div style="clear:both; float:right"><p>version: v0.2.5 - 2022.12.25</p></div>
  </div>
</div>

<div align="left" style="padding-top:0px; width:50%; clear:both">
  <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_blank">
    <input type="hidden" name="cmd" value="_s-xclick" />
    <input type="hidden" name="hosted_button_id" value="NG5HGW4Q3CZU4" />
    <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
    <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
  </form>
</div>
                )

            [Vmbackup] => Array
                (
                    [Menu] => Utilities
                    [Title] => VM Backup
                    [Type] => xmenu
                    [Tabs] => true
                    [Icon] => clone
                    [Markdown] => false
                    [file] => plugins/vmbackup/Vmbackup.page
                    [root] => plugins/vmbackup
                    [name] => Vmbackup
                    [text] => 
                )

            [Vmbackup5ManageConfigs] => Array
                (
                    [Menu] => Vmbackup:5
                    [Title] => Manage Configs
                    [Icon] => clone
                    [file] => plugins/vmbackup/Vmbackup5ManageConfigs.page
                    [root] => plugins/vmbackup
                    [name] => Vmbackup5ManageConfigs
                    [text] => 
<?php

  /* vmbackup plugin
    copyright JTok */

?>

<div id="manage_configs_div" class="wrapper_div">

  <!-- current config -->
  <div class="wrapper_div">
    <div id="current_config_manage_configs_div" class="grid_container_left pad_config_top">
      <label name="current_config_manage_configs_label" class="config_label config_text">Currently editing config:</label>
      <div class="user_input_div"><select id="current_config_manage_configs" name="current_config_manage_configs" size="1">
        <option value="default">default</option>
        <?php
          $configs = glob("/boot/config/plugins/vmbackup/configs/*", GLOB_ONLYDIR);
          foreach ($configs as $config_path) {
            $config = basename($config_path)?>
            <option value="<?= $config ?>"><?= $config ?></option>
        <?php
          } ?>
      </select></div>

      <span name="current_config_manage_configs_help" class="custom_inline_help">
        <p>Select a config to edit.</p>
        <ul>
          <li>To add a config, go to the Manage Configs tab.</li>
          <li>Default is 'default'.</li>
        </ul>
      </span>
    </div>
  </div>

  <!-- instructions -->
  <div class="wrapper_div">
    <span class="important_info"><p>Instructions</p></span>
    <p>This tab is where you manage your configs. The 'default' is the current config when no other configs are available.
    <br>The default config cannot be renamed, copied, or removed; so it will not show up here.
    <br>To change the settings for a config, select the config you want to edit from the 'Current Config' drop down box at the top any tab.
    <br>
    <ul>
      <li>Create a config using the textbox in the 'Add Config' section.</li>
      <li>Rename, copy, or remove the config using the 'Rename/Delete Configs' section.</li>
      <li>To edit the config, choose it from the 'Current Config' dropdown box at the top of any tab.</li>
      <li>Make changes to the selected config like normal. Don't forget to apply your changes.</li>
      <li>Change the drop down box at the top of a tab to select a different config to edit.</li>
    </ul>
    </p>
  </div>

  <form id="manage_configs_form" name="manage_configs_form" autocomplete="off" method="POST" action="/plugins/vmbackup/include/configs.php" target="progressFrame">

    <div class="container_full">
      <!-- add config -->
      <div id="title" class="nocontrol full_width_title">Add Config</div>

      <div id="add_config_div" name="add_config_div" class="clear_both">
        <label>Choose a config name:</label>
        <div class="clear_both"><input type="text" class="narrow" id="add_config" name="add_config" maxlength="100" pattern="^[^\/\. ](([\w.-]+)( [\w.-]+)*)+$"></div>
      </div>
      <div id="add_config_button_div" name="add_config_button_div" class="clear_both">
        <input type="button" id="add_config_button" name="#add_config_button" value="Add Config">
      </div>

      <!-- rename/delete configs -->
      <div id="title" class="nocontrol full_width_title">Rename/Delete Configs</div>
      <div id="rename_delete_configs_div" name="rename_delete_configs_div" class="clear_both">
        <label>Select a config:</label>
        <div id="select_configs_div" name="select_configs_div" class="selection_div clear_both"></div>
      </div>
      <div id="manage_configs_button_div" name="manage_configs_button_div" class="clear_both">
        <input type="button" id="rename_config_button" name="#rename_config_button" value="Rename Config"><input type="button" id="copy_config_button" name="#copy_config_button" value="Copy Config"><input type="button" id="remove_configs_button" name="#remove_configs_button" value="Remove Configs">
      </div>
    </div>
  </form>
</div>

                )

            [Vmbackup4DangerZone] => Array
                (
                    [Menu] => Vmbackup:4
                    [Title] => Danger Zone
                    [Icon] => clone
                    [file] => plugins/vmbackup/Vmbackup4DangerZone.page
                    [root] => plugins/vmbackup
                    [name] => Vmbackup4DangerZone
                    [text] => 
<?php

  /* vmbackup plugin
    copyright JTok */

?>

<div id="vmbackup_danger_zone_div" class="wrapper_div">

  <!-- current config -->
  <div class="wrapper_div">
    <div id="current_config_danger_zone_div" class="grid_container_left pad_config_top">
      <label name="current_config_danger_zone_label" class="config_label config_text">Currently editing config:</label>
      <div class="user_input_div"><select id="current_config_danger_zone" name="current_config_danger_zone" size="1">
        <option value="default">default</option>
        <?php
          $configs = glob("/boot/config/plugins/vmbackup/configs/*", GLOB_ONLYDIR);
          foreach ($configs as $config_path) {
            $config = basename($config_path)?>
            <option value="<?= $config ?>"><?= $config ?></option>
        <?php
          } ?>
      </select></div>

      <span name="current_config_danger_zone_help" class="custom_inline_help">
        <p>Select a config to edit.</p>
        <ul>
          <li>To add a config, go to the Manage Configs tab.</li>
          <li>Default is 'default'.</li>
        </ul>
      </span>
    </div>
  </div>

  <!-- warning -->
  <div class="wrapper_div">
    <span class="important_info"><p>Warning</p></span>
    <p>The settings below can be dangerous or have unintended side effects if used improperly.
    <br>Many of them can result in corrupted backups, or no backups at all.
    <br>It is recommended not to change these settings.
    <br>Be sure to read the help and make certain you fully understand what you are doing before changing any of these settings.</p>
  </div>

  <form id="vmbackup_danger_zone_form" name="vmbackup_danger_zone" autocomplete="off" method="POST" action="/update.php" target="progressFrame" onsubmit="prepare_form(this)">
    <input type="hidden" id="vmbackup_danger_zone_file" name="#file" value="vmbackup/user.cfg">
    <input type="hidden" name="#command" value="/plugins/vmbackup/scripts/commands.sh">
    <input type="hidden" name="#arg[1]" value="update_user_script">

    <!-- danger zone -->
    <div id="title" class="nocontrol full_width_title">Danger Zone</div>
    <div id="danger_zone_div" class="grid_container_left">

      <label name="zstd_threads_label" class="input_description">Number of Zstandard compression threads:</label>
      <div class="user_input_div"><select id="zstd_threads" name="zstd_threads" size="1">
        <option value="0">auto</option>
        <?php
          $thread_count = cpu_thread_count(false);
          for ($i = 1; $i <= $thread_count; $i++) {
        ?>
            <?=mk_option($conf_array['zstd_threads'], $i, $i);?>
          <?php
          }
          ?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to the number of threads you would like to use when compressing backups.</p>
        <ul>
          <li>Set to 'auto' to let the compression algorithm automatically detect the number of physical CPU cores.</li>
          <li>Be careful choosing the number of threads as this setting could affect other services running on unRAID.</li>
          <li>Default is '2'.</li>
        </ul>
      </span>


      <label name="keep_error_log_file_label" class="input_description">Keep error log file?</label>
      <div class="user_input_div"><select id="keep_error_log_file" name="keep_error_log_file" size="1">
        <?=mk_option($conf_array['keep_error_log_file'], "0", "No");?>
        <?=mk_option($conf_array['keep_error_log_file'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to have error log file deleted after the backup has completed.</p>
        <ul>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="kill_vm_if_cant_shutdown_label" class="input_description">Kill VMs if they can't be shutdown?</label>
      <div class="user_input_div"><select id="kill_vm_if_cant_shutdown" name="kill_vm_if_cant_shutdown" size="1">
        <?=mk_option($conf_array['kill_vm_if_cant_shutdown'], "0", "No");?>
        <?=mk_option($conf_array['kill_vm_if_cant_shutdown'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to kill VMs if they cannot be shutdown cleanly.</p>
        <ul>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="set_vm_to_original_state_label" class="input_description">Return VM to original state?</label>
      <div class="user_input_div"><select id="set_vm_to_original_state" name="set_vm_to_original_state" size="1">
        <?=mk_option($conf_array['set_vm_to_original_state'], "0", "No");?>
        <?=mk_option($conf_array['set_vm_to_original_state'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to prevent VMs from being set back to their original state after backing up.</p>
        <ul>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="snapshot_extension_label" class="input_description">Snapshot extension:</label>
      <div class="user_input_div"><input type="text" id="snapshot_extension" name="snapshot_extension" class="narrow" maxlength="50" value="<?=$conf_array['snapshot_extension'];?>" pattern="^[^., ]+([\w.-])+[^,. ]+$" required></div>

      <span class="custom_inline_help">
        <p>Change the extension used when creating snapshots.</p>
        <ul>
          <li>WARNING: Choosing an extension that is the same as one of your vdisks will cause an error.</li>
          <li>Default is 'snap'.</li>
        </ul>
      </span>


      <label name="snapshot_fallback_label" class="input_description">Fallback to standard backups?</label>
      <div class="user_input_div"><select id="snapshot_fallback" name="snapshot_fallback" size="1">
        <?=mk_option($conf_array['snapshot_fallback'], "0", "No");?>
        <?=mk_option($conf_array['snapshot_fallback'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to fallback to standard backup method if snapshot creation fails.</p>
        <ul>
          <li>This will act as though "Enable snapshots" was set to 'No' for just the VM with the failed snapshot.</li>
          <li>If a snapshot fails and this is enabled, VMs will be shutdown or paused based on standard backup settings.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="pause_vms_label" class="input_description">Pause VMs instead of shutting down?</label>
      <div class="user_input_div"><select id="pause_vms" name="pause_vms" size="1">
        <?=mk_option($conf_array['pause_vms'], "0", "No");?>
        <?=mk_option($conf_array['pause_vms'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to pause VMs instead of shutting them down during standard backups.</p>
        <ul>
          <li>WARNING: This could result in unusable backups, but I have not thoroughly tested.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="vms_to_backup_running_label" class="input_description">List VMs to backup while running:</label>
      <div class="user_input_div"><select id="vms_to_backup_running" name="vms_to_backup_running" size="1" multiple="multiple" style="display:none">
        <?$vm_list_array = file($vm_list, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($vm_list_array as $vm):?>
          <?=mk_option_check($conf_array['vms_to_backup_running'], $vm, $vm)?>
        <?endforeach;?>
      </select></div>

      <span id="vms_to_backup_running_help" name="vms_to_backup_running_help" class="custom_inline_help">
        <p>Check the names of VMs to backup while they are running.
        <ul>
          <li>List of VMs that will be backed up WITHOUT first shutting it down.</li>
          <li>These must also be set to backup using the Settings tab.</li>
          <li>NOTE: VMs backed up via snapshot will not be shutdown.</li>
          <li>WARNING: using this setting can result in an unusable backup, and is not recommended.</li>
        </ul>
      </span>


      <label name="backup_xml_label" class="input_description">Backup configs?</label>
      <div class="user_input_div"><select id="backup_xml" name="backup_xml" size="1">
        <?=mk_option($conf_array['backup_xml'], "0", "No");?>
        <?=mk_option($conf_array['backup_xml'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to skip backing up of VM configuration.</p>
        <ul>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="backup_nvram_label" class="input_description">Backup nvram?</label>
      <div class="user_input_div"><select id="backup_nvram" name="backup_nvram" size="1">
        <?=mk_option($conf_array['backup_nvram'], "0", "No");?>
        <?=mk_option($conf_array['backup_nvram'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to skip backing up of VM nvram.</p>
        <ul>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>

      <label name="backup_vdisks_label" class="input_description">Backup vdisks?</label>
      <div class="user_input_div"><select id="backup_vdisks" name="backup_vdisks" size="1">
        <?=mk_option($conf_array['backup_vdisks'], "0", "No");?>
        <?=mk_option($conf_array['backup_vdisks'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to skip backing up of VM vdisks.</p>
        <ul>
          <li>Setting to 'No' will automatically disable compression.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="start_vm_after_backup_label" class="input_description">Start VMs after successful backup?</label>
      <div class="user_input_div"><select id="start_vm_after_backup" name="start_vm_after_backup" size="1">
        <?=mk_option($conf_array['start_vm_after_backup'], "0", "No");?>
        <?=mk_option($conf_array['start_vm_after_backup'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to always start VMs after a successful backup.</p>
        <ul>
          <li>Setting to 'Yes' will cause "Set VM to original state after backup" to be ignored.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="start_vm_after_failure_label" class="input_description">Start VMs after failed backup?</label>
      <div class="user_input_div"><select id="start_vm_after_failure" name="start_vm_after_failure" size="1">
        <?=mk_option($conf_array['start_vm_after_failure'], "0", "No");?>
        <?=mk_option($conf_array['start_vm_after_failure'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to always start VMs after a failed backup.</p>
        <ul>
          <li>Setting to 'Yes' will cause "Set VM to original state after backup" to be ignored.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="actually_copy_files_label" class="input_description">Actually copy files?</label>
      <div class="user_input_div"><select id="actually_copy_files" name="actually_copy_files" size="1">
        <?=mk_option($conf_array['actually_copy_files'], "0", "No");?>
        <?=mk_option($conf_array['actually_copy_files'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' if you would like to perform a dry-run backup.</p>
        <ul>
          <li>WARNING: Performing a Dry-run backup of an existing VM will still honor the chosen retention policy, which could cause backups to be removed.</li>
          <li>Dry-run backups will still create empty files in your backup directory.</li>
          <li>This will only use rsync to perform the dry-run.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>

      <label name="allow_simultaneous_scripts_label" class="input_description">Allow simultaneous execution?</label>
      <div class="user_input_div"><select id="allow_simultaneous_scripts" name="allow_simultaneous_scripts" size="1">
        <?=mk_option($conf_array['allow_simultaneous_scripts'], "0", "No");?>
        <?=mk_option($conf_array['allow_simultaneous_scripts'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' if you would like to have multiple scripts able to be executed at the same time.</p>
        <ul>
          <li>When set to 'Yes', multiple configs will be able to run at the same time.</li>
          <li>This will not allow the same config to run multiple times.</li>
          <li>Simultaneous execution is set on a per-config basis, so each config you want to allow will need this setting changed.</li>
          <li>A backup will not run if Fix Snapshots is running, and vice versa, regardless of this setting.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>

      <label name="arrayStarted_label" class="input_description">Require array to be started?</label>
      <div class="user_input_div"><select id="arrayStarted" name="arrayStarted" size="1">
        <?=mk_option($conf_array['arrayStarted'], "false", "No");?>
        <?=mk_option($conf_array['arrayStarted'], "true", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' if you would like the script to run even if the array is not started.</p>
        <ul>
          <li>Unless you are using unassigned devices to run your VMs and as your backup destination, this should be left as 'Yes'.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="noParity_label" class="input_description">Prevent backups during parity?</label>
      <div class="user_input_div"><select id="noParity" name="noParity" size="1">
        <?=mk_option($conf_array['noParity'], "false", "No");?>
        <?=mk_option($conf_array['noParity'], "true", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' if you would like the script to run even if a parity check is in progress.</p>
        <ul>
          <li>Running during a parity check could cause significant slow-downs.</li>
          <li>It is highly recommended to leave this set to 'Yes', and just schedule backups when a parity check is not scheduled.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="disable_cron_regex_label" class="input_description">Disable custom cron validation?</label>
      <div class="user_input_div"><select id="disable_cron_regex" name="disable_cron_regex" size="1" onchange="toggle_cron_regex();">
        <?=mk_option($conf_array['disable_cron_regex'], "0", "No");?>
        <?=mk_option($conf_array['disable_cron_regex'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' if you would like to disable the regular expression for the custom cron text field.</p>
        <ul>
          <li>The regular expression used to validate the custom cron field is not perfect, so you may find yourself needing to disable it.</li>
          <li>This will completely remove any validation for the custom cron field.</li>
          <li>Disable with care!</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="disable_restrictive_regex_label" class="input_description">Disable restrictive validation?</label>
      <div class="user_input_div"><select id="disable_restrictive_regex" name="disable_restrictive_regex" size="1" onchange="toggle_restrictive_regex();">
        <?=mk_option($conf_array['disable_restrictive_regex'], "0", "No");?>
        <?=mk_option($conf_array['disable_restrictive_regex'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' if you would like to disable the restrictive regular expressions used to validate many of the fields.</p>
        <ul>
          <li>The default regular expressions used to validate many of the fields are restricted to values that are considered reasonable.</li>
          <li>This does not remove validation completely, but instead removes many of the safety checks. Disable with care!</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>
    </div>

    <div class="grid_container_left clear_both">
      <div class="input_description"><input type="button" id="default_vmbackup_danger_zone" name="#default" value="Default" title="Load defaults." formnovalidate></div>
      <div class="grid_right_column buttons_div"><input type="button" id="apply_vmbackup_danger_zone" name="#apply" value="Apply" disabled><input type="button" id="done_vmbackup_danger_zone" value="Done" formnovalidate></div>
    </div>
  </form>
  <div class="buttons_right">
    <form id="fix_snapshots_form" name="fix_snapshots_form" autocomplete="off" method="POST" action="/plugins/vmbackup/include/functions.php" target="progressFrame" style="float:right">
      <input type="hidden" name="#script" value="/usr/local/emhttp/plugins/vmbackup/scripts/commands.sh">
      <input type="hidden" name="#args[1]" value="fix_snapshots">
      <input type="button" id="fix_snapshots" name="#fix_snapshots" value="Fix Snapshots">
    </form>
    <form id="abort_script_form" name="abort_script_form" autocomplete="off" method="POST" action="/plugins/vmbackup/include/functions.php" target="progressFrame" style="float:right">
      <input type="hidden" name="#script" value="/usr/local/emhttp/plugins/vmbackup/scripts/commands.sh">
      <input type="hidden" name="#args[1]" value="abort_script">
      <input type="button" id="abort_script" name="#abort_script" value="Abort Script">
    </form>
  </div>
</div>
                )

            [Vmbackup3OtherSettings] => Array
                (
                    [Menu] => Vmbackup:3
                    [Title] => Other Settings
                    [Icon] => clone
                    [file] => plugins/vmbackup/Vmbackup3OtherSettings.page
                    [root] => plugins/vmbackup
                    [name] => Vmbackup3OtherSettings
                    [text] => 
<?php

  /* vmbackup plugin
    copyright JTok */

?>

<div id="vmbackup_other_settings_div" class="wrapper_div">

  <!-- current config -->
  <div class="wrapper_div">
    <div id="current_config_other_settings_div" class="grid_container_left pad_config_top">
      <label name="current_config_other_settings_label" class="config_label config_text">Currently editing config:</label>
      <div class="user_input_div"><select id="current_config_other_settings" name="current_config_other_settings" size="1">
        <option value="default">default</option>
        <?php
          $configs = glob("/boot/config/plugins/vmbackup/configs/*", GLOB_ONLYDIR);
          foreach ($configs as $config_path) {
            $config = basename($config_path)?>
            <option value="<?= $config ?>"><?= $config ?></option>
        <?php
          } ?>
      </select></div>

      <span name="current_config_other_settings_help" class="custom_inline_help">
        <p>Select a config to edit.</p>
        <ul>
          <li>To add a config, go to the Manage Configs tab.</li>
          <li>Default is 'default'.</li>
        </ul>
      </span>
    </div>
  </div>

  <!-- warning -->
  <div class="wrapper_div">
    <span class="important_info"><p>Warning</p></span>
    <p>The settings below could have unintended side effects if used improperly.
    <br>They should not be able to result in corrupt backups, but some settings could cause backups to be skipped in specific situations.
    <br>It is recommended not to change these settings.
    <br>Be sure to read the help and make certain you fully understand what you are doing before changing any of these settings.</p>
  </div>

  <form id="vmbackup_other_settings_form" name="vmbackup_other_settings" autocomplete="off" method="POST" action="/update.php" target="progressFrame">
    <input type="hidden" id="vmbackup_other_settings_file" name="#file" value="vmbackup/user.cfg">
    <input type="hidden" name="#command" value="/plugins/vmbackup/scripts/commands.sh">
    <input type="hidden" name="#arg[1]" value="update_user_script">

    <!-- logging -->
    <div id="title" class="nocontrol full_width_title">Logging</div>
    <div id="logging_div" class="grid_container_left">

      <label name="keep_log_file_label" class="input_description">Keep log file?</label>
      <div class="user_input_div"><select id="keep_log_file" name="keep_log_file" size="1">
        <?=mk_option($conf_array['keep_log_file'], "0", "No");?>
        <?=mk_option($conf_array['keep_log_file'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to have log file deleted after the backup has completed.</p>
        <ul>
          <li>Error logs are separate. Settings for error logs can be found in the 'Advanced' section.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="number_of_log_files_to_keep_label" class="input_description">Number of log files to keep:</label>
      <div class="user_input_div"><input type="text" id="number_of_log_files_to_keep" name="number_of_log_files_to_keep" class="narrow" maxlength="5" value="<?=$conf_array['number_of_log_files_to_keep'];?>" pattern="^(0|([1-9]|[1-3][0-9]|40))$" required></div>

      <span class="custom_inline_help">
        <p>Set this to the number of successful log files that should be kept.
        <br>'0' means infinitely.</p>
        <ul>
          <li>Default is '1'.</li>
        </ul>
      </span>


      <label name="number_of_error_log_files_to_keep_label" class="input_description">Number of error log files to keep:</label>
      <div class="user_input_div"><input type="text" id="number_of_error_log_files_to_keep" name="number_of_error_log_files_to_keep" class="narrow" maxlength="5" value="<?=$conf_array['number_of_error_log_files_to_keep'];?>" pattern="^(0|([2-9]|[1-3][0-9]|40))$" required></div>

      <span class="custom_inline_help">
        <p>Set this to the number of error log files that should be kept.
        <br>'0' means infinitely.</p>
        <ul>
          <li>Default is '10'.</li>
        </ul>
      </span>


      <label name="log_file_subfolder_label" class="input_description">Log file subfolder:</label>
      <div class="user_input_div"><input type="text" id="log_file_subfolder" name="log_file_subfolder" class="narrow" maxlength="100" value="<?=$conf_array['log_file_subfolder'];?>" pattern="^[^\/ ](([\w.-]+)( [\w.-]+)*)*(\/(([\w.-]+)( [\w.-]+)*)*)*$"></div>

      <span class="custom_inline_help">
        <p>Choose a folder name for storing logs.</p>
        <ul>
          <li>Set to blank to put logs in the root of backups folder.</li>
          <li>Set to "logs/subfolder" to place logs in an additional subfolder.</li>
          <li>Default is 'logs'.</li>
        </ul>
      </span>


      <label name="enable_vm_log_file_label" class="input_description">Enable per VM logs?</label>
      <div class="user_input_div"><select id="enable_vm_log_file" name="enable_vm_log_file" size="1">
        <?=mk_option($conf_array['enable_vm_log_file'], "0", "No");?>
        <?=mk_option($conf_array['enable_vm_log_file'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to have VM specific log files created in each VM's backup subfolder.</p>
        <ul>
          <li>This is independent of other log settings.</li>
          <li>This uses the same retention policy as the VM's backups.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>
    </div>


    <!-- notifications -->
    <div id="title" class="nocontrol full_width_title">Notifications</div>
    <div id="notifications_div" class="grid_container_left">

      <label name="send_notifications_label" class="input_description">Send notifications?</label>
      <div class="user_input_div"><select id="send_notifications" name="send_notifications" size="1">
        <?=mk_option($conf_array['send_notifications'], "0", "No");?>
        <?=mk_option($conf_array['send_notifications'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to prevent notifications from being sent.
        <br>Disabling this could prevent you from receiving error notifications.</p>
        <ul>
          <li>Script failures that occur before logging can start, and before this variable is validated, will still be sent.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="detailed_notifications_label" class="input_description">Enable detailed notifications?</label>
      <div class="user_input_div"><select id="detailed_notifications" name="detailed_notifications" size="1">
        <?=mk_option($conf_array['detailed_notifications'], "0", "No");?>
        <?=mk_option($conf_array['detailed_notifications'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to receive more detailed notifications.</p>
        <ul>
          <li>Will not work if "Send notifications" is set to 'No', or if "Only send error notifications" is set to 'Yes'.</li>
          <li>Sends notifications when vm backups are started and stopped.</li>
          <li>Sends notifications when old backups are deleted</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>

      <label name="only_send_error_notifications_label" class="input_description">Only send error notifications?</label>
      <div class="user_input_div"><select id="only_send_error_notifications" name="only_send_error_notifications" size="1">
        <?=mk_option($conf_array['only_send_error_notifications'], "0", "No");?>
        <?=mk_option($conf_array['only_send_error_notifications'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to only send error notifications.</p>
        <ul>
          <li>Default is 'No'.</li>
        </ul>
      </span>
    </div>


    <!-- advanced features -->
    <div id="title" class="nocontrol full_width_title">Advanced Features</div>
    <div id="advanced_features" class="grid_container_left">

      <label name="zstd_level_label" class="input_description">Zstandard compression level:</label>
      <div class="user_input_div"><select id="zstd_level" name="zstd_level" size="1">
        <?php
          $zstd_level = create_number_array(1,19);
          foreach($zstd_level as $key => $value) {
        ?>
            <?=mk_option($conf_array['zstd_level'], $value, $key);?>
          <?php
          }
          ?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to '1' for the lowest compression level with the largest file sizes, but the highest speeds.
        <br>Set to '19' for the highest compression level with the smallest file sizes, but the lowest speeds.</p>
        <ul>
          <li>WARNING: Setting to numbers over 8 can be significantly slower, and may not produce meaningfully smaller backups.</li>
          <li>Default is '3'.</li>
        </ul>
      </span>


      <label name="gzip_level_label" class="input_description">Legacy compression level:</label>
      <div class="user_input_div"><select id="gzip_level" name="gzip_level" size="1">
        <?php
          $gzip_level = create_number_array(1,9);
          foreach($gzip_level as $key => $value) {
        ?>
            <?=mk_option($conf_array['gzip_level'], $value, $key);?>
          <?php
          }
          ?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to '1' for the lowest compression level with the largest file sizes, but the highest speeds.
        <br>Set to '9' for the highest compression level with the smallest file sizes, but the lowest speeds.</p>
        <ul>
          <li>Default is '6'.</li>
        </ul>
      </span>


      <label name="timestamp_files_label" class="input_description">Timestamp backups?</label>
      <div class="user_input_div"><select id="timestamp_files" name="timestamp_files" size="1">
        <?=mk_option($conf_array['timestamp_files'], "0", "No");?>
        <?=mk_option($conf_array['timestamp_files'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'No' to prevent backups from being timestamped.</p>
        <ul>
          <li>Timestamps are dropped only when "Number of backups to keep" is set to '1'.</li>
          <li>Default is 'Yes'.</li>
        </ul>
      </span>


      <label name="compare_files_label" class="input_description">Compare files during backup?</label>
      <div class="user_input_div"><select id="compare_files" name="compare_files" size="1">
        <?=mk_option($conf_array['compare_files'], "0", "No");?>
        <?=mk_option($conf_array['compare_files'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to compare files after copy and then run rsync in the event of a mismatch.</p>
        <ul>
          <li>IMPORTANT: Enabling can add a significant amount of time depending on the size of the VM.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="disable_delta_sync_label" class="input_description">Disable delta syncs for backups?</label>
      <div class="user_input_div"><select id="disable_delta_sync" name="disable_delta_sync" size="1">
        <?=mk_option($conf_array['disable_delta_sync'], "0", "No");?>
        <?=mk_option($conf_array['disable_delta_sync'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to disable rsync delta syncs.</p>
        <ul>
          <li>When not using snapshots, delta syncs make a copy of the latest backup and then write just the changes since the last backup.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="rsync_only_label" class="input_description">Only use rsync for backups?</label>
      <div class="user_input_div"><select id="rsync_only" name="rsync_only" size="1">
        <?=mk_option($conf_array['rsync_only'], "0", "No");?>
        <?=mk_option($conf_array['rsync_only'], "1", "Yes");?>
      </select></div>

      <span class="custom_inline_help">
        <p>Set to 'Yes' to to always use rsync instead of other quicker options.</p>
        <ul>
          <li>IMPORTANT: rsync was significantly slower in my tests.</li>
          <li>Default is 'No'.</li>
        </ul>
      </span>


      <label name="clean_shutdown_checks_label" class="input_description">Number of VM shutdown checks:</label>
      <div class="user_input_div"><input type="text" id="clean_shutdown_checks" name="clean_shutdown_checks" class="narrow" maxlength="5" value="<?=$conf_array['clean_shutdown_checks'];?>" pattern="^(0|([5-9]|[1-4][0-9]|50))$" required></div>

      <span class="custom_inline_help">
        <p>Set this to the number of times to check if a clean shutdown of a VM has been successful.</p>
        <ul>
          <li>Default is '20'.</li>
        </ul>
      </span>


      <label name="seconds_to_wait_label" class="input_description">Seconds between shutdown checks:</label>
      <div class="user_input_div"><input type="text" id="seconds_to_wait" name="seconds_to_wait" class="narrow" maxlength="5" value="<?=$conf_array['seconds_to_wait'];?>" pattern="^(0|([3-8][0-9]|9[0-9]|[1-5][0-9]{2}|600))$" required></div>

      <span class="custom_inline_help">
        <p>Set this to the number of seconds to wait between VM shutdown checks.</p>
        <ul>
          <li>Default is '30'.</li>
        </ul>
      </span>
    </div>

    <div class="grid_container_left clear_both">
      <div class="input_description"><input type="button" id="default_vmbackup_other_settings" name="#default" value="Default" title="Load defaults." formnovalidate></div>
      <div class="grid_right_column buttons_div"><input type="button" id="apply_vmbackup_other_settings" name="#apply" value="Apply" disabled><input type="button" id="done_vmbackup_other_settings" value="Done" formnovalidate></div>
    </div>
  </form>
</div>
                )

            [Vmbackup2UploadScripts] => Array
                (
                    [Menu] => Vmbackup:2
                    [Title] => Upload Scripts
                    [Icon] => clone
                    [file] => plugins/vmbackup/Vmbackup2UploadScripts.page
                    [root] => plugins/vmbackup
                    [name] => Vmbackup2UploadScripts
                    [text] => 
<?php

  /* vmbackup plugin
    copyright JTok */

?>

<div id="upload_form_div" class="wrapper_div">

  <!-- current config -->
  <div class="wrapper_div">
    <div id="current_config_upload_scripts_div" class="grid_container_left pad_config_top">
      <label name="current_config_upload_scripts_label" class="config_label config_text">Currently editing config:</label>
      <div class="user_input_div"><select id="current_config_upload_scripts" name="current_config_upload_scripts" size="1">
        <option value="default">default</option>
        <?php
          $configs = glob("/boot/config/plugins/vmbackup/configs/*", GLOB_ONLYDIR);
          foreach ($configs as $config_path) {
            $config = basename($config_path)?>
            <option value="<?= $config ?>"><?= $config ?></option>
        <?php
          } ?>
      </select></div>

      <span name="current_config_upload_scripts_help" class="custom_inline_help">
        <p>Select a config to edit.</p>
        <ul>
          <li>To add a config, go to the Manage Configs tab.</li>
          <li>Default is 'default'.</li>
        </ul>
      </span>
    </div>
  </div>

  <form id="upload_form" name="upload_form" autocomplete="off" method="POST" action="/plugins/vmbackup/include/upload.php" target="progressFrame">

    <div id="scripts_div" class="container_full">
      <!-- pre-script -->
      <div id="title" class="nocontrol">Pre-Script</div>

      <div id="pre_script_div" name="pre_script_div" class="script_divs clear_both">
        <label>Paste a pre-script:</label>
        <div id="pre_script_textarea_div" name="pre_script_textarea_div" class="clear_both">
          <textarea id="pre_script_textarea" name="pre_script_textarea" rows="40" wrap="off" placeholder="Paste your pre-script here." spellcheck="false" class="script_textarea"><?php if (is_file($pre_script_file)) { $pre_script_contents = file_get_contents($pre_script_file); echo $pre_script_contents; } ?></textarea>
        </div>
        <input type="button" id="save_pre_script" name="#save_pre_script" value="Save Pre-Script"><input type="button" id="remove_pre_script" name="#remove_pre_script" value="Remove Pre-Script">
      </div>

      <!-- post-script -->
      <div id="title" class="nocontrol">Post-Script</div>

      <div id="post_script_div" name="post_script_div" class="script_divs clear_both">
        <label>Paste a post-script:</label>
        <div id="post_script_textarea_div" name="post_script_textarea_div" class="clear_both">
          <textarea id="post_script_textarea" name="post_script_textarea" rows="40" wrap="off" placeholder="Paste your post-script here." spellcheck="false" class="script_textarea"><?php if (is_file($post_script_file)) { $post_script_contents = file_get_contents($post_script_file); echo $post_script_contents; } ?></textarea>
        </div>
        <input type="button" id="save_post_script" name="#save_post_script" value="Save Post-Script"><input type="button" id="remove_post_script" name="#remove_post_script" value="Remove Post-Script">
      </div>

    </div>
  </form>
</div>

                )

        )

    [plugin] => unassigned.devices
    [name] => 
    [dir] => 
    [path] => Settings/smbackup
    [task] => Settings
    [myPage] => Array
        (
            [Menu] => Utilities
            [Title] => All Backup
            [Type] => xmenu
            [Tabs] => true
            [Icon] => clone
            [Markdown] => false
            [file] => plugins/smbackup/smbackup.page
            [root] => plugins/smbackup
            [name] => smbackup
            [text] => 
        )

    [pageroot] => /usr/local/emhttp/plugins/smbackup
    [nchan_pid] => /var/run/nchan.pid
    [nchan_run] => plugins/dynamix.system.temp/nchan
    [_SESSION] => Array
        (
            [unraid_login] => 1693072854
            [unraid_user] => root
            [locale] => 
            [buildDate] => 20230715
        )

    [confirm] => Array
        (
            [down] => 1
            [stop] => 1
        )

    [parity] => Array
        (
            [mode] => 5
            [hour] => 0 22
            [dotm] => W1
            [month] => *
            [day] => 6
            [cron] => 
            [write] => NOCORRECT
        )

    [notify] => Array
        (
            [display] => 0
            [date] => d-m-Y
            [time] => H:i
            [position] => top-right
            [path] => /tmp/notifications
            [system] => */1 * * * *
            [entity] => 1
            [normal] => 1
            [warning] => 1
            [alert] => 7
            [unraid] => 5
            [plugin] => 5
            [docker_notify] => 5
            [language_notify] => 1
            [report] => 7
            [unraidos] => 11 0 * * 1
            [version] => 10 0 * * 1
            [docker_update] => 10 0 * * 1
            [language_update] => 10 0 * * 1
            [status] => 
        )

    [ssmtp] => Array
        (
            [root] => info@michelhp.de
            [RcptTo] => info@michelhp.de
            [SetEmailPriority] => True
            [Subject] => Unraid Status: 
            [server] => w01a93a6.kasserver.com
            [port] => 587
            [UseTLS] => NO
            [UseSTARTTLS] => YES
            [UseTLSCert] => NO
            [TLSCert] => 
            [AuthMethod] => login
            [AuthUser] => m0541f06
            [AuthPass] => mbJ3kbu4V3lLVKi4lXm4V1m=Sgf6mwBCSHIKTriz
            [service] => ::NO:NO:none
        )

    [smartALL] => /boot/config/smart-all.cfg
    [smartONE] => /boot/config/smart-one.cfg
    [smarts] => Array
        (
            [Samsung_SSD_970_EVO_Plus_2TB_S4J4NX0W599368N] => Array
                (
                    [hotTemp] => 75
                    [maxTemp] => 80
                )

        )

    [smart] => Array
        (
            [hotTemp] => 75
            [maxTemp] => 80
        )

    [id] => Samsung_SSD_970_EVO_Plus_2TB_S4J4NX0W599368N
    [disk] => Array
        (
            [idx] => 32
            [name] => flash
            [device] => sda
            [id] => Micro_Line
            [transport] => usb
            [size] => 3915744
            [status] => DISK_OK
            [format] => unknown
            [rotational] => 1
            [discard] => 0
            [removable] => 1
            [spundown] => 0
            [temp] => *
            [numReads] => 21957
            [numWrites] => 806
            [numErrors] => 0
            [type] => Flash
            [color] => green-on
            [comment] => Unraid OS boot device
            [exportable] => yes
            [fsType] => vfat
            [fsStatus] => Mounted
            [fsColor] => yellow-on
            [fsSize] => 3907100
            [fsFree] => 2997584
            [fsUsed] => 909516
            [autotrim] => off
            [compression] => off
            [warning] => 
            [critical] => 
        )

    [key] => flash
    [eth0] => Array
        (
            [DHCP_KEEPRESOLV] => yes
            [DNS_SERVER1] => 192.168.1.1
            [DNS_SERVER2] => 
            [DNS_SERVER3] => 
            [DHCP6_KEEPRESOLV] => no
            [BONDING] => yes
            [BONDNAME] => bond0
            [BONDNICS] => eth0
            [BONDING_MODE] => 1
            [BONDING_MIIMON] => 100
            [BRIDGING] => yes
            [BRNAME] => br0
            [BRNICS] => bond0
            [BRSTP] => no
            [BRFD] => 0
            [DESCRIPTION:0] => 
            [PROTOCOL:0] => ipv4
            [USE_DHCP:0] => no
            [IPADDR:0] => 192.168.1.50
            [NETMASK:0] => 255.255.255.0
            [GATEWAY:0] => 192.168.1.1
            [METRIC:0] => 
            [USE_DHCP6:0] => yes
            [IPADDR6:0] => 
            [NETMASK6:0] => 
            [GATEWAY6:0] => 
            [METRIC6:0] => 
            [PRIVACY6:0] => 
            [MTU] => 
            [TYPE] => trunk
            [VLANID:1] => 2
            [DESCRIPTION:1] => old_Server
            [PROTOCOL:1] => ipv4
            [USE_DHCP:1] => yes
            [IPADDR:1] => 10.1.0.205
            [NETMASK:1] => 255.255.255.0
            [GATEWAY:1] => 10.1.0.1
            [METRIC:1] => 
            [USE_DHCP6:1] => 
            [IPADDR6:1] => 
            [NETMASK6:1] => 
            [GATEWAY6:1] => 
            [METRIC6:1] => 
            [PRIVACY6:1] => 
            [VLANID:2] => 10
            [DESCRIPTION:2] => Admin-Netzwerk
            [PROTOCOL:2] => ipv4
            [USE_DHCP:2] => 
            [IPADDR:2] => 
            [NETMASK:2] => 
            [GATEWAY:2] => 
            [METRIC:2] => 
            [USE_DHCP6:2] => 
            [IPADDR6:2] => 
            [NETMASK6:2] => 
            [GATEWAY6:2] => 
            [METRIC6:2] => 
            [PRIVACY6:2] => 
            [VLANID:3] => 20
            [DESCRIPTION:3] => Server-local
            [PROTOCOL:3] => ipv4
            [USE_DHCP:3] => yes
            [IPADDR:3] => 172.16.20.101
            [NETMASK:3] => 255.255.255.0
            [GATEWAY:3] => 172.16.20.1
            [METRIC:3] => 
            [USE_DHCP6:3] => 
            [IPADDR6:3] => 
            [NETMASK6:3] => 
            [GATEWAY6:3] => 
            [METRIC6:3] => 
            [PRIVACY6:3] => 
            [VLANID:4] => 30
            [DESCRIPTION:4] => Server-public
            [PROTOCOL:4] => ipv4
            [USE_DHCP:4] => yes
            [IPADDR:4] => 172.16.30.109
            [NETMASK:4] => 255.255.255.0
            [GATEWAY:4] => 172.16.30.1
            [METRIC:4] => 
            [USE_DHCP6:4] => 
            [IPADDR6:4] => 
            [NETMASK6:4] => 
            [GATEWAY6:4] => 
            [METRIC6:4] => 
            [PRIVACY6:4] => 
            [VLANID:5] => 40
            [DESCRIPTION:5] => Gemeinnetz-Familie
            [PROTOCOL:5] => ipv4
            [USE_DHCP:5] => yes
            [IPADDR:5] => 172.16.40.101
            [NETMASK:5] => 255.255.255.0
            [GATEWAY:5] => 172.16.40.1
            [METRIC:5] => 
            [USE_DHCP6:5] => 
            [IPADDR6:5] => 
            [NETMASK6:5] => 
            [GATEWAY6:5] => 
            [METRIC6:5] => 
            [PRIVACY6:5] => 
            [VLANID:6] => 50
            [DESCRIPTION:6] => Gemeinnetz-IoT
            [PROTOCOL:6] => ipv4
            [USE_DHCP:6] => yes
            [IPADDR:6] => 172.16.50.28
            [NETMASK:6] => 255.255.255.0
            [GATEWAY:6] => 172.16.50.1
            [METRIC:6] => 
            [USE_DHCP6:6] => 
            [IPADDR6:6] => 
            [NETMASK6:6] => 
            [GATEWAY6:6] => 
            [METRIC6:6] => 
            [PRIVACY6:6] => 
            [VLANID:7] => 60
            [DESCRIPTION:7] => Gemeinnetz-Gast
            [PROTOCOL:7] => ipv4
            [USE_DHCP:7] => yes
            [IPADDR:7] => 172.16.60.102
            [NETMASK:7] => 255.255.255.0
            [GATEWAY:7] => 172.16.60.1
            [METRIC:7] => 
            [USE_DHCP6:7] => 
            [IPADDR6:7] => 
            [NETMASK6:7] => 
            [GATEWAY6:7] => 
            [METRIC6:7] => 
            [PRIVACY6:7] => 
        )

    [session] => /var/lib/php/sess_f43fda13bc1fcb8b532b6d1a7372f842
    [language] => Array
        (
            [_main_array_devices_help] => 
>**Colored Status Indicator** the significance of the color indicator at the beginning of each line in *Array Devices* is as follows:
>
><i class='fa fa-circle orb green-orb'></i>Normal operation, device is active.
>
><i class='fa fa-circle orb grey-orb'></i>Device is in standby mode (spun-down).
>
><i class='fa fa-warning orb yellow-orb'></i>Device contents emulated.
>
><i class='fa fa-times orb red-orb'></i>Device is disabled, contents emulated.
>
><i class='fa fa-square orb blue-orb'></i>New device.
>
><i class='fa fa-square orb grey-orb'></i>No device present, position is empty.
>
>**Identification** is the *signature* that uniquely identifies a storage device. The signature
>includes the device model number, serial number, linux device id, and the device size.
>
>**Temp.** (temperature) is read directly from the device. You configure which units to use on
>the [Display Preferences](Settings/DisplaySettings) page.  We do not read the temperature of spun-down hard
>drives since this typically causes them to spin up; instead we display the `*` symbol.  We also
>display the `*` symbol for SSD and Flash devices, though sometimes these devices do report a valid
>temperature, and sometimes they return the value `0`.
>
>**Size, Used, Free** reports the total device size, used space, and remaining space for files.  These
>units are also configured on the [Display Preferences](Settings/DisplaySettings) page.  The
>amount of space used will be non-zero even for an empty disk due to file system overhead.
>
>*Note: for a multi-device cache pool, this data is for the entire pool as returned by btrfs.*
>
>**Reads, Writes** are a count of I/O requests sent to the device I/O drivers.  These statistics may
>be cleared at any time, refer to the Array Status section below.
>
>**Errors** counts the number of *unrecoverable* errors reported by the device
>I/O drivers. Missing data due to unrecoverable array read errors is filled in on-the-fly using parity
>reconstruct (and we attempt to write this data back to the sector(s) which failed). Any unrecoverable
>write error results in *disabling* the disk.
>
>**FS** indicates the file system detected in partition 1 of the device.
>
>**View** column contains a folder icon indicating the device is *mounted*. Click the icon to
>browse the file system.
>
>If "Display array totals" is enable on the [Display Preferences](Settings/DisplaySettings) page, a
>**Total** line is included which provides a tally of the device statistics, including the average temperature
>of your devices.
>
>The Array must be Stopped in order to change Array device assignments.
>
>An unRAID array consists of one or two Parity disks and a number of Data disks. The Data
>disks are exclusively used to store user data, and the Parity disk(s) provides the redundancy necessary
>to recover from disk failures.
>
>Since data is not striped across the array, the Parity disk(s) must be as large, or larger than the largest Data
>disk.  Parity should also be your highest performance drive.
>
>Each Data disk has its own file system and can be exported as a
>separate share.
>
>Click on the Device name to configure individual device settings and launch certain utilities.

            [_main_slots_help] => 
>**Slots** select the number of device slots in your server designated for Array devices.
>The minimum number of Array slots is 2, and you must have at least one device assigned to the array.

            [_cache_devices_help] => 
>**Colored Status Indicator** the significance of the color indicator at the beginning of each line in *Pool Devices* is as follows:
>
><i class='fa fa-circle orb green-orb'></i>Normal operation, device is active.
>
><i class='fa fa-circle orb grey-orb'></i>Device is in standby mode (spun-down).
>
><i class='fa fa-square orb blue-orb'></i>New device.
>
><i class='fa fa-square orb grey-orb'></i>No device present, position is empty.
>
>**Pool Devices** is a single device, or pool of multiple devices, *outside* the unRAID array.  It may be exported for network access just
>like an Array device.  Being outside the unRAID array results in significantly faster write access.
>
>There are two ways to configure the Pool devices:
>
>1. As a single device, or
>2. As a multi-device pool.
>
>When configured as a single device you may format the device using any supported file system (btrfs, reiserfs,
>or xfs).  This configuration offers the highest performance, but at the cost of no data protection - if the
>single pool device fails all data contained on it may be lost.
>
>When configured as a multi-device pool, Unraid OS will automatically select *btrfs-raid1* format (for both data
>and meta-data).  btrfs permits any number of devices to be added to the pool and each copy of data is guaranteed
>to be written to two different devices.  Hence the pool can withstand a single-disk failure without losing data.
>
>When [User Shares](/Settings/ShareSettings) are enabled, user shares may be configured to
>automatically make use of the Pool device in order to
>speed up writes.  A special background process called the *mover* can be scheduled to run
>periodically to move user share files off the Cache and onto the Array.

            [_cache_slots_help] => 
>**Slots** select the number of device slots in your server designated for Cache devices.

            [_boot_device_help] => 
>Vital array configuration is maintained on the USB Flash device; for this reason, it must remain
>plugged in to your server.  Click on [Flash](/Main/Flash?name=flash) to see the GUID and registration
>information, and to configure export settings.  Since the USB Flash device is formatted using FAT file system,
>it may only be exported using SMB protocol.

            [_array_status_help] => 
>**Colored Status Indicator** the significance of the color indicator of the *Array* is as follows:
>
><i class='fa fa-circle orb green-orb'></i>Array is Started and Parity is valid.
>
><i class='fa fa-circle orb grey-orb'></i>Array is Stopped, Parity is valid.
>
><i class='fa fa-warning orb yellow-orb'></i>Array is Started, but Parity is invalid.
>
><i class='fa fa-warning orb grey-orb'></i>Array is Stopped, Parity is invalid.
>

            [_array_devices_help] => 
>#### Assigning Devices
>
>An unRAID disk array consists of a number of Data disks and up to two Parity disks. The data
>disks are exclusively used to store user data, and the Parity disk(s) provides the redundancy necessary
>to recover from any single or double disk failure.
>
>Note that we are careful to use the term *disk* when referring to an array storage device.  We
>use the term *hard drive* (or sometimes just *drive*) when referring to an actual hard disk drive (HDD)
>device. This is because in a RAID system it is possible to read/write an array disk whose corresponding
>hard drive is disabled or even missing! In addition, it is useful to be able to ask, "which device is
>assigned to be the Parity disk?"; or, "which device corresponds to disk2?".
>
>We therefore need a way to assign hard drives to array disks. This is accomplished here on the
>Main page when the array is stopped. There is a drop-down box for each array disk which lists all the
>unassigned devices. To assign a device simply select it from the list. Each time a device
>assignment is made, the system updates a configuration file to record the assignment.
>
>#### Requirements
>
>Unlike traditional RAID systems which stripe data across all the array devices, an Unraid server
>stores files on individual hard drives. Consequently, all file write operations will involve both the
>Data disk the file is being written to, and the Parity disk(s).  For these reasons,
>
>* a Parity disk size must be as large or larger than any of the Data disks,
>
>and
>
>* given a choice, Parity disk(s) should be the fastest disk(s) in your collection.
>
>#### Guidelines
>
>Here are the steps you should follow when designing your unRAID disk array:
>
>1. Decide which hard drive you will use for parity, and which hard drives you will use for
>Data disk1, disk2, etc., and label them in some fashion. Also, find the serial number of each hard
>drive and jot it down somewhere; you will need this information later.
>
>2. Install your hard drive devices, boot your server and bring up the webGUI. If this is a fresh system
>build, then the Main page will show no disks installed. This doesn't mean the system can't detect your
>hard drives; it just means that none have been assigned yet.
>
>3. Remember the serial numbers you recorded back in step 1? For parity and each Data disk, select the
>proper hard drive based on its serial number from the drop down list.
>
>#### Hot Plug
>
>You may also *hot plug* hard drives into your server if your hardware supports it. For example,
>if you are using hard drive cages, you may simply plug them into your server while powered on and
>with array Stopped. Refresh the Main page to have new unassigned devices appear in the assignment
>dropdown lists.
>
>#### Next Steps
>
>Once you have assigned all of your hard drives, refer to the Array Status section below
>and Start the array.

            [_encryption_help] => 
>#### Encryption input
>
>With array Stopped, the user can specify a new encryption key. Note that once a device
>is formatted with a particular key it may only be opened using that same key. Changing the encryption key requires
>encrypted devices to be reformatted **resulting in permanent loss of all existing data on those devices.**
>
>#### Passphrase
>
>Enter a passphrase of up to 512 characters. It is highly advisable to only use the 95 printable characters from the
>first 128 characters of the [ASCII table](https://en.wikipedia.org/wiki/ASCII), as they will always have the same binary
>representation. Other characters may have different encoding depending on system configuration and your passphrase will
>not work with a different encoding. If you want a longer passphrase or to include binary data, upload a keyfile instead.
>
>Please refer to the [cryptsetup FAQ](https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions#5-security-aspects)
>for what constitutes a *secure* passphrase.
>
>**Memorize** this passphrase. **IF LOST, ENCRYPTED CONTENT CANNOT BE RECOVERED!**
>
>#### Keyfile
>
>Select a local keyfile with a stored encryption key or a binary file. The maximum size of the keyfile is 8M (8388608 byte).
>
>**Backup** your local keyfile. **IF LOST, ENCRYPTED CONTENT CANNOT BE RECOVERED!**

            [_info_warning_temp_help] => 
>*Warning disk temperature* sets the warning threshold for this hard disk temperature. Exceeding this threshold will result in a warning notification.
>
>A value of zero will disable the warning threshold (including notifications).

            [_info_critical_temp_help] => 
>*Critical disk temperature* sets the critical threshold for this hard disk temperature. Exceeding this threshold will result in an alert notification.
>
>A value of zero will disable the critical threshold (including notifications).

            [_info_file_system_help] => 
>Enter the desired file system type.  Changing the file system type of a device will permit you to reformat
>that device using the new file system.  Be aware that **all existing data on the device will be lost**.

            [_info_comments_help] => 
>This text will appear under the *Comments* column for the share in Windows Explorer.
>Enter anything you like, up to 256 characters.

            [_info_warning_utilization_help] => 
>*Warning disk utilization* sets the warning threshold for this hard disk utilization. Exceeding this threshold will result in a warning notification.
>
>When the warning threshold is set equal or greater than the critical threshold, there will be only critical notifications (warnings are not existing).
>
>A value of zero will disable the warning threshold (including notifications).

            [_info_critical_utilization_help] => 
>*Critical disk utilization* sets the critical threshold for this hard disk utilization. Exceeding this threshold will result in an alert notification.
>
>A value of zero will disable the critical threshold (including notifications).

            [_info_btrfs_balance_help] => 
>**Balance** will run the *btrfs balance* program to restripe the extents across all pool devices, for example,
>to convert the pool from raid1 to raid0 or vice-versa.
>
>When a *full balance* is performed, it basically rewrites everything in the current filesystem.
>
>A *mode conversion* affects the btrfs data extents; metadata always uses raid1 and is converted to raid1 if necessary by any balance operation.
>
>The run time is potentially very long, depending on the filesystem size and speed of the device.
>
>Unraid OS uses these default options when creating a multiple-device pool:
>
>`-dconvert=raid1 -mconvert=raid1`
>
>For more complete documentation, please refer to the btrfs-balance [Manpage](https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-balance)
>
>*Note: raid5 and raid6 are generally still considered **experimental** by the Linux community*

            [_info_balance_cancel_help] => 
>**Cancel** will cancel the balance operation in progress.

            [_info_btrfs_scrub_help] => 
>**Scrub** runs the *btrfs scrub* program which will read all data and metadata blocks from all
>devices and verify checksums.
>
>If *Repair corrupted blocks* is checked, *btrfs scrub* will repair corrupted blocks if there’s a correct copy available.

            [_info_scrub_cancel_help] => 
>**Cancel** will cancel the Scrub operation in progress.

            [_info_btrfs_check_help] => 
>**Check** will run the *btrfs check* program to check file system integrity on the device.
>
>The *Options* field is initialized with *--readonly* which specifies check-only.  If repair is needed, you should run
>a second Check pass, setting the *Options* to *--repair*; this will permit *btrfs check* to fix the file system.
>
>After starting a Check, you should Refresh to monitor progress and status.  Depending on
>how large the file system is, and what errors might be present, the operation can take **a long time** to finish (hours).
>Not much info is printed in the window, but you can verify the operation is running by observing the read/write counters
>increasing for the device on the Main page.

            [_info_check_cancel_help] => 
>**Cancel** will cancel the Check operation in progress.

            [_info_reiserfs_check_help] => 
>**Check** will run the *reiserfsck* program to check file system integrity on the device.
>
>The *Options* field may be filled in with specific options used to fix problems in the file system. Typically, you
>first run a Check pass leaving *Options* blank.  Upon completion, if *reiserfsck* finds any problems, you must
>run a second Check pass, using a specific option as instructed by the first *reiserfsck* pass.
>
>After starting a Check you should Refresh to monitor progress and status.  Depending on
>how large the file system is, and what errors might be present, the operation can take **a long time** to finish (hours).
>Not much info is printed in the window, but you can verify the operation is running by observing the read/write counters
>increasing for the device on the Main page.

            [_info_reiserfs_cancel_help] => 
>**Cancel** will cancel the Check operation in progress.

            [_info_xfs_check_help] => 
>**Check** will run the *xfs_repair* program to check file system integrity on the device.
>
>The *Options* field is initialized with *-n* which specifies check-only.  If repair is needed, you should run
>a second Check pass, setting the *Options* blank; this will permit *xfs_repair* to fix the file system.
>
>After starting a Check, you should Refresh to monitor progress and status.  Depending on
>how large the file system is, and what errors might be present, the operation can take **a long time** to finish (hours).
>Not much info is printed in the window, but you can verify the operation is running by observing the read/write counters
>increasing for the device on the Main page.

            [_info_xfs_cancel_help] => 
>**Cancel** will cancel the Check operation in progress.

            [_info_smart_notifications_help] => 
>SMART notifications are generated on either an increasing RAW value of the attribute, or a decreasing NORMALIZED value which reaches a predefined threshold set by the manufacturer.
>
>Each disk may have its own specific setting overruling the 'default' setting (see global SMART settings under Disk Settings).

            [_info_tolerance_level_help] => 
>A tolerance level may be given to prevent that small changes result in a notification. Setting a too high tolerance level may result in critical changes without a notification.
>
>Each disk may have its own specific setting overruling the 'default' setting (see global SMART settings under Disk Settings).

            [_info_controller_type_help] => 
>By default automatic controller selection is done by smartctl to read the SMART information. Certain controllers however need specific settings for smartctl to work.
>Use this setting to select your controller type and fill-in the specific disk index and device name for your situation. Use the manufacturer's documentation to find the relevant information.
>
>Each disk may have its own specific setting overruling the 'default' setting (see global SMART settings under Disk Settings).

            [_info_attribute_notifications_help] => 
>The user can enable or disable notifications for the given SMART attributes. It is recommended to keep the default, which is ALL selected attributes,
>when certain attributes are not present on your hard disk or do not provide the correct information, these may be excluded.
>In addition custom SMART attributes can be entered to generate notifications. Be careful in this selection,
>it may cause an avalance of notifcations if inappropriate SMART attributes are chosen.
>
>Each disk may have its own specific setting overruling the 'default' setting (see global SMART settings under Disk Settings).

            [_selftest_history_help] => 
>Press **Show** to view the self-test history as is kept on the disk itself.
>This feature is only available when the disk is in active mode.

            [_selftest_error_log_help] => 
>Press **Show** to view the error report as is kept on the disk itself.
>This feature is only available when the disk is in active mode.

            [_selftest_short_test_help] => 
>Starts a *short* SMART self-test, the estimated duration can be viewed under the *Capabilities* section. This is usually a few minutes.
>
>When the disk is spun down, it will abort any running self-test.
>This feature is only available when the disk is in active mode.

            [_selftest_long_test_help] => 
>Starts an *extended* SMART self-test, the estimated duration can be viewed under the *Capabilities* section. This is usually several hours.
>
>When the disk is spun down, it will abort any running self-test. It is advised to disable the spin down timer of the disk
>to avoid interruption of this self-test.
>
>This feature is only available when the disk is in active mode.

            [_selftest_result_help] => 
>When no test is running it will show here the latest obtained self-test result (if available).
>Otherwise a progress indicator (percentage value) is shown for a running test.

            [_smart_attributes_help] => 
>This list shows the SMART attributes supported by this disk. For more information about each SMART attribute, it is recommended to search online.
>
>Attributes in *orange* may require your attention. They have a **raw value** greater than zero and may indicate a pending disk failure.
>
>Special attention is required when the particular attribute raw value starts to increase over time. When in doubt, consult the Limetech forum for advice.

            [_smart_capabilities_help] => 
>This list shows the SMART capabilities supported by this disk.
>
>Observe here the estimated duration of the SMART short and extended self-tests.

            [_smart_identity_help] => 
>This list shows the SMART identity information of this disk

            [_open_devices_help] => 
>These are devices installed in your server but not assigned to either the parity-protected
>array or the cache disk/pool.

            [_flash_backup_help] => 
>Use *Flash backup* to create a single zip file of the current contents of the flash device and store it locally on your computer.

            [_syslinux_cfg_help] => 
>Use this page to make changes to your `syslinux.cfg` file.
>You will need to reboot your server for these changes to take effect.

            [_syslinux_button_help] => 
>Click the **Default** button to initialize the edit box with the
>factory-default contents.  You still need to click **Apply** in order to
>commit the change.
>
>Click the **Apply** button to commit the current edits.  Click **Reset** to
>undo any changes you make (before Saving). Click **Done** to exit this page.

            [_info_share_assignment_help] => 
>The selected pool is available for user shares.

            [_info_free_space_help] => 
>This defines a "floor" for the amount of free space remaining in the volume.
>If the free space becomes less than this value, then new files written via user shares will fail with "not enough space" error.
>
>Enter a numeric value with one of these suffixes:
>
>**KB** = 1,000<br>
>**MB** = 1,000,000<br>
>**GB** = 1,000,000,000<br>
>**TB** = 1,000,000,000,000<br>
>**K** = 1,024 (ie, 2^10)<br>
>**M** = 1,048,576 (ie, 2^20)<br>
>**G** = 1,073,741,824 (ie, 2^30)<br>
>**T** = 1,099,511,627,776 (ie, 2^40)<br>
>
>If no suffix, a count of 1024-byte blocks is assumed.

            [_share_list_help] => 
>**Colored Status Indicator** -- the significance of the color indicator at the beginning of each line in *User Shares* is as follows:
>
><i class='fa fa-circle orb green-orb'></i>All files are on protected storage.
>
><i class='fa fa-warning orb yellow-orb'></i>Some or all files are on unprotected storage.
>
>**Security modes:**
>
>+ '-' -- user share is not exported and unavailable on the network
>+ *Public* -- all users including guests have full read/write access (open access)
>+ *Secure* -- all users including guests have read access, write access is set per user (limited access)
>+ *Private* -- no guest access at all, read/write or read-only access is set per user (closed access)
>
>**Special modes:**
>
>+ SMB security mode displayed in *italics* indicates exported hidden user shares.
>+ NFS does not have special modes for user shares.

            [_disk_list_help] => 
>**Colored Status Indicator** -- the significance of the color indicator at the beginning of each line in *Disk Shares* is as follows:
>
><i class='fa fa-circle orb green-orb'></i>Mounted, underlying device has redundancy/protection.
>
><i class='fa fa-warning orb yellow-orb'></i>Mounted, underlying device does not have redundancy/protection.
>
>**Security modes:**
>
>+ '-' -- disk share is not exported and unavailable on the network
>+ *Public* -- all users including guests have full read/write access (open access)
>+ *Secure* -- all users including guests have read access, write access is set per user (limited access)
>+ *Private* -- no guest access at all, read/write or read-only access is set per user (closed access)
>
>**Special modes:**
>
>+ SMB security mode displayed in *italics* indicates exported hidden disk shares.
>+ NFS does not have special modes for disk shares.

            [_share_edit_global1_help] => 
>A *Share*, also called a *User Share*, is simply the name of a top-level directory that exists on one or more of your
>storage volumes (array disks and pools).  Each share can be exported for network access.  When browsing a share, we return the
>composite view of all files and subdirectories for which that top-level directory exists on each storage device.
>
>*Read settings from* is used to preset the settings of the new share with the settings of an existing share.
>
>Select the desired share name and press **Read** to copy the settings from the selected source.

            [_share_edit_global2_help] => 
>*Write settings to* is used to copy the settings of the current share to one or more other existing shares.
>
>Select the desired destinations and press **Write** to copy the settings to the selected shares.

            [_share_edit_name_help] => 
>The share name can be up to 40 characters, and is case-sensitive with these restrictions:
>
>* cannot contain a double-quote character (") or the following characters: / \ * < > |
>* cannot be one of the reserved share names: flash, cache, cache2, .., disk1, disk2, ..
>
>We highly recommend to make your life easier and avoid special characters.

            [_share_edit_comments_help] => 
>Anything you like, up to 256 characters.

            [_share_edit_allocation_method_help] => 
>This setting determines how Unraid OS will choose which disk to use when creating a new file or directory:
>
>**High-water**
>Choose the lowest numbered disk with free space still above the current *high water mark*.  The
>*high water mark* is initialized with the size of the largest Data disk divided by 2.  If no disk
>has free space above the current *high water mark*, divide the *high water mark* by 2 and choose again.
>
>The goal of **High-water** is to write as much data as possible to each disk (in order to minimize
>how often disks need to be spun up), while at the same time, try to keep the same amount of free space on
>each disk (in order to distribute data evenly across the array).
>
>**Fill-up**
>Choose the lowest numbered disk that still has free space above the current **Minimum free space**
>setting.
>
>**Most-free**
>Choose the disk that currently has the most free space.

            [_share_edit_free_space_help] => 
>The *minimum free space* available to allow writing to any disk belonging to the share.<br>
>
>Choose a value which is equal or greater than the biggest single file size you intend to copy to the share.
>Include units KB, MB, GB and TB as appropriate, e.g. 10MB.

            [_share_edit_split_level_help] => 
>Determines whether a directory is allowed to expand onto multiple disks.
>
>**Automatically split any directory as required**
>When a new file or subdirectory needs to be created in a share, Unraid OS first chooses which disk
>it should be created on, according to the configured *Allocation method*.  If the parent directory containing
>the new file or subdirectory does not exist on this disk, then Unraid OS will first create all necessary
>parent directories, and then create the new file or subdirectory.
>
>**Automatically split only the top level directory as required**
>When a new file or subdirectory is being created in the first level subdirectory of a share, if that first
>level subdirectory does not exist on the disk being written, then the subdirectory will be created first.
>If a new file or subdirectory is being created in the second or lower level subdirectory of a share, the new
>file or subdirectory is created on the same disk as the new file or subdirectory's parent directory.
>
>**Automatically split only the top "N" level directories as required**
>Similar to previous: when a new file or subdirectory is being created, if the parent directory is at level "N",
>and does not exist on the chosen disk, Unraid OS will first create all necessary parent directories.  If the
>parent directory of the new file or subdirectory is beyond level "N", then the new file or subdirectory is
>created on the same disk where the parent directory exists.
>
>**Manual: do not automatically split directories**
>When a new file or subdirectory needs to be created in a share, Unraid OS will only consider disks where the
>parent directory already exists.

            [_share_edit_included_disks_help] => 
>Specify the disks which can be used by the share. By default all disks are included; that is, if specific
>disks are not selected here, then the share may expand into *all* array disks.

            [_share_edit_excluded_disks_help] => 
>Specify the disks which can *not* be used by the share. By default no disks are excluded.

            [_share_edit_cache_pool_help] => 
>Specify whether new files and directories written on the share can be written onto the Cache disk/pool if present.
>This setting also affects *mover* behavior.
>
>**No** prohibits new files and subdirectories from being written onto the Cache disk/pool.
>*Mover* will take no action so any existing files for this share that are on the cache are left there.
>
>**Yes** indicates that all new files and subdirectories should be written to the Cache disk/pool, provided
>enough free space exists on the Cache disk/pool.
>If there is insufficient space on the Cache disk/pool, then new files and directories are created on the array.
>When the *mover* is invoked, files and subdirectories are transferred off the Cache disk/pool and onto the array.
>
>**Only** indicates that all new files and subdirectories must be written to the Cache disk/pool.
>If there is insufficient free space on the Cache disk/pool, *create* operations will fail with *out of space* status.
>*Mover* will take no action so any existing files for this share that are on the array are left there.
>
>**Prefer** indicates that all new files and subdirectories should be written to the Cache disk/pool, provided
>enough free space exists on the Cache disk/pool.
>If there is insufficient space on the Cache disk/pool, then new files and directories are created on the array.
>When the *mover* is invoked, files and subdirectories are transferred off the array and onto the Cache disk/pool.
>
>**NOTE:** Mover will never move any files that are currently in use.
>This means if you want to move files associated with system services such as Docker or VMs then you need to
>disable these services while mover is running.

            [_share_edit_copy_on_write_help] => 
>Set to **No** to cause the *btrfs* NOCOW (No Copy-on-Write) attribute to be set on the share directory
>when created on a device formatted with *btrfs* file system.  Once set, newly created files and
>subdirectories on the device will inherit the NOCOW attribute. This setting has no effect on non-btrfs file systems.
>
>Set to **Auto** for normal operation, meaning COW **will** be in effect on devices formatted with *btrfs*.

            [_share_edit_status_help] => 
>Share does *not* contain any data and may be deleted if not needed any longer.

            [_share_edit_delete_help] => 
>Share can *not* be deleted as long as it contains data. Be aware that some data can be hidden. See also [SMB Settings](/Settings/SMB) -> Hide "dot" files.

            [_share_edit_exclusive_access_help] => 
>When set to "Yes" indicates a synmlink directly to a pool has been set up for the share in the /mnt/user tree.
>
>Refer to [Global Share Settings](Settings/ShareSettings) -> Permit exclusive shares.

            [_share_edit_primary_storage_help] => 
>**Primary storage** is where *new files and folders* are created.  If
>Primary storage is below the minimum free space setting then new files
>and folders will be created in **Secondary storage**, if configured.
>
>**Important:** For *Exclusive access* shares, the Min free space
>settings are ignored.

            [_share_edit_secondary_storage_help] => 
>**Secondary storage** is where new files and directories are created if no
>room on Primary storage.  When both Primary and Secondary storage are
>configured the 'mover' will transfer files between them.

            [_share_edit_mover_action_help] => 
>This defines the direction of file transfer between Primary and
>Secondary storage when both are configured.

            [_smb_security_help] => 
>*Read settings from* is used to preset the SMB security settings of the current selected share with the settings of an existing share.
>
>Select the desired share name and press **Read** to copy the SMB security settings from the selected source.
>
>*Write settings to* is used to copy the SMB security settings of the current selected share to one or more other existing shares.
>
>Select the desired destinations and press **Write** to copy the SMB security settings to the selected shares.

            [_smb_export_help] => 
>This setting determines whether the share is visible and/or accessible.  The 'Yes (hidden)' setting
>will *hide* the share from *browsing* but is still accessible if you know the share name.

            [_smb_time_machine_volume_help] => 
>This limits the reported volume size, preventing Time Machine from using the entire real disk space
>for backup.  For example, setting this value to "1024" would limit the reported disk space to 1GB.

            [_smb_case_sensitive_names_help] => 
>Controls whether filenames are case-sensitive.
>
>The default setting of **auto** allows clients that support case sensitive filenames (Linux CIFSVFS)
>to tell the Samba server on a per-packet basis that they wish to access the file system in a case-sensitive manner (to support UNIX
>case sensitive semantics). No Windows system supports case-sensitive filenames so setting this option to **auto** is the same as
>setting it to No for them; however, the case of filenames passed by a Windows client will be preserved.  This setting can result
>in reduced performance with very large directories because Samba must do a filename search and match on passed names.
>
>A setting of **Yes** means that files are created with the case that the client passes, and only accessible using this same case.
>This will speed very large directory access, but some Windows applications may not function properly with this setting.  For
>example, if "MyFile" is created but a Windows app attempts to open "MYFILE" (which is permitted in Windows), it will not be found.
>
>A value of **Forced lower** is special: the case of all incoming client filenames, not just new filenames, will be set to lower-case.
>In other words, no matter what mixed case name is created on the Windows side, it will be stored and accessed in all lower-case.  This
>ensures all Windows apps will properly find any file regardless of case, but case will not be preserved in folder listings.
>Note this setting should only be configured for new shares.

            [_smb_security_modes_help] => 
>Summary of security modes:
>
>**Public** All users including guests have full read/write access.
>
>**Secure** All users including guests have read access, you select which of your users have write access.
>
>**Private** No guest access at all, you select which of your users have read/write, read-only access or no access.

            [_smb_secure_access_help] => 
>*Read settings from* is used to preset the SMB User Access settings of the current selected share with the settings of an existing share.
>
>Select the desired share name and press **Read** to copy the SMB security settings from the selected source.
>
>*Write settings to* is used to copy the SMB User Access settings of the current share to one or more other existing shares.
>
>Select the desired destinations and press **Write** to copy the SMB User access settings to the selected shares.

            [_smb_private_access_help] => 
>*Read settings from* is used to preset the SMB User Access settings of the current selected share with the settings of an existing share.
>
>Select the desired share name and press **Read** to copy the SMB security settings from the selected source.
>
>*Write settings to* is used to copy the SMB User Access settings of the current share to one or more other existing shares.
>
>Select the desired destinations and press **Write** to copy the SMB User access settings to the selected shares.

            [_nfs_security_help] => 
>*Read settings from* is used to preset the NFS security settings of the current selected share with the settings of an existing share.
>
>Select the desired share name and press **Read** to copy the NFS security settings from the selected source.
>
>*Write settings to* is used to copy the NFS security settings of the current selected share to one or more other existing shares.
>
>Select the desired destinations and press **Write** to copy the NFS security settings to the selected shares.

            [_user_add_username_help] => 
>Usernames may be up to 40 characters long and must start with a **lower case letter** or an underscore,
>followed by **lower case letters**, digits, underscores, or dashes. They can end with a dollar sign.

            [_user_add_description_help] => 
>Up to 64 characters. The characters ampersand (&amp;) quote (&quot;) and colon (:) are not allowed.

            [_user_add_custom_image_help] => 
>The image will be scaled to 48x48 pixels in size. The maximum image file upload size is 95 kB (97,280 bytes).

            [_user_password_help] => 
>Up to 128 characters.

            [_user_edit_description_help] => 
>Up to 64 characters. The characters ampersand (&amp;) quote (&quot;) and colon (:) are not allowed.

            [_user_edit_custom_image_help] => 
>The image will be scaled to 48x48 pixels in size. The maximum image file upload size is 512 kB (524,288 bytes).

            [_cpu_vms_help] => 
>This page gives a total view of the current CPU pinning assignments for VMs.<br>
>It also allows to modify these assignments.
>
>Running VMs are **stopped first** and restarted after the modification.<br>
>Stopped VMs are instantly modified and new assignments become active when the VM is started.
>
>When ***Apply*** is pressed a scan is performed to find the changes, subsequently only VMs which have changes are modified in parallel.
>
>*Important: Please wait until all updates are finished before leaving this page*.

            [_cpu_pinning_help] => 
>This page gives a total view of the current CPU pinning assignments for Docker containers.<br>
>It also allows to modify these assignments.
>
>Running containers are **stopped first** and restarted after the modification.<br>
>Stopped containers are instantly modified and new assignments become active when the user manually starts the container.
>
>When ***Apply*** is pressed a scan is performed to find the changes, subsequently containers which have changes are modified in parallel.
>
>*Important: Please wait until all updates are finished before leaving this page*.
>
>By default NO cores are selected for a Docker container, which means it uses all available cores.<br>
>Do not select **ALL** cores for containers, just select **NO** cores if you want unrestricted core use.
>
>Do not select cores for containers which are *isolated*.
>By design a container will only use a single core (the lowest numbered core) when multiple isolated cores are selected.<br>
>Usually this is not what a user wants when selecting multiple cores.

            [_cpu_isolation_help] => 
>CPU isolation allows the user to specify CPU cores that are to be explicitly reserved for assignment (to VMs or Docker containers).
>
>This is incredibly important for gaming VMs to run smoothly because even if you manually pin your Docker containers to not overlap with your gaming VM,
>the host OS can still utilize those same cores as the guest VM needs for things like returning responses for the webGUI, running a parity check, btrfs operations, etc.

            [_timezone_help] => 
>Select your applicable time zone from the drop-down list.

            [_use_ntp_help] => 
>Select 'Yes' to use Network Time Protocol to keep your server time accurate.
>We **highly** recommend the use of a network time server, especially if you plan on using Active Directory.
>
>Note: if using `pool.ntp.org` time servers, please also refer to [their documentation](http://www.pool.ntp.org/en/use.html).

            [_ntp_server1_help] => 
>This is the primary NTP server to use.  Enter a FQDN or an IP address.

            [_ntp_server2_help] => 
>This is the alternate NTP server to use if NTP Server 1 is down.

            [_ntp_server3_help] => 
>This is the alternate NTP Server to use if NTP Servers 1 and 2 are both down.

            [_ntp_server4_help] => 
>This is the alternate NTP Server to use if NTP Servers 1, 2, and 3 are all down.

            [_current_time_help] => 
>Enter the current time-of-day.  Use format YYYY-MM-DD HH:MM:SS. Greyed out when using NTP.

            [_disk_enable_autostart_help] => 
>If set to 'Yes' then if the device configuration is correct upon server start-up,
>the array will be automatically Started and shares exported.<br>
>If set to 'No' then you must Start the array yourself.

            [_disk_spindown_delay_help] => 
>This setting defines the 'default' time-out for spinning hard drives down after a period
>of no I/O activity.  You may override the default value for an individual disk on the Disk Settings
>page for that disk.

            [_disk_spinup_groups_help] => 
>If set to 'Yes' then the spinup groups feature is enabled.

            [_disk_default_partition_format_help] => 
>Defines the type of partition layout to create when formatting hard drives 2TB in size and
>smaller **only**. (All devices larger than 2TB are always set up with GPT partition tables.)
>
>**MBR: unaligned** setting will create MBR-style partition table, where the single
>partition 1 will start in the **63rd sector** from the start of the disk.  This is the *traditional*
>setting for virtually all MBR-style partition tables.
>
>**MBR: 4K-aligned** setting will create an MBR-style partition table, where the single
>partition 1 will start in the **64th sector** from the start of the disk. Since the sector size is 512 bytes,
>this will *align* the start of partition 1 on a 4K-byte boundary.  This is required for proper
>support of so-called *Advanced Format* drives.
>
>Unless you have a specific requirement do not change this setting from the default **MBR: 4K-aligned**.

            [_disk_default_file_system_help] => 
>Defines the default file system type to create when an *unmountable* array device is formatted.
>
>The default file system type for a single or multi-device cache is always Btrfs.

            [_disk_shutdown_timeout_help] => 
>When shutting down the server, this defines how long to wait in seconds for *graceful* shutdown before forcing
>shutdown to continue.

            [_disk_tunable_poll_attributes_help] => 
>This defines the disk SMART polling interval, in seconds.  A value of 0 disables SMART polling (not recommended).

            [_disk_tunable_enable_ncq_help] => 
>If set to **No** then *Native Command Queuing* is disabled for all array devices that support NCQ.
>
>**Auto** leaves the setting for each device as-is.
>
>Note: You must reboot after selecting Auto for setting to take effect.

            [_disk_tunable_nr_requests_help] => 
>This defines the `nr_requests` device driver setting for all array devices.
>
>**Auto** leaves the setting for each device as-is.
>
>Note: if you set to blank and click Apply, the setting is restored to its default, and you must reboot for setting to take effect.

            [_disk_tunable_scheduler_help] => 
>Selects which kernel I/O scheduler to use for all array devices.
>
>**Auto** leaves the setting for each device as-is (mq-deadline).
>
>Note: You must reboot after selecting Auto for setting to take effect.

            [_disk_tunable_md_num_stripes_help] => 
>This is the size of the *stripe pool* in number of *stripes*.  A *stripe* refers to a data structure that facilitates parallel 4K read/write
>operations necessary for a parity-protected array.
>
>Note: if you set to blank and click Apply, the setting is restored to its default, and will take effect after reboot.

            [_disk_tunable_md_queue_limit_help] => 
>This is a number in [1..100] which is the maximum steady-load percentage of the stripe pool permitted to be in use.
>
>Note: if you set to blank and click Apply, the setting is restored to its default.

            [_disk_tunable_md_sync_limit_help] => 
>This is a number in [0..100] which is the maximum percentage of the stripe pool allocated for parity sync/check in the presence of other I/O.
>
>Note: if you set to blank and click Apply, the setting is restored to its default.

            [_disk_tunable_md_write_method_help] => 
>Selects the method to employ when writing to enabled disk in parity protected array.
>
>*Auto* selects `read/modify/write`.

            [_disk_default_warning_utilization_help] => 
>*Warning disk utilization* sets the default warning threshold for all hard disks utilization. Exceeding this threshold will result in a warning notification.
>
>When the warning threshold is set equal or greater than the critical threshold, there will be only critical notifications (warnings are not existing).
>
>A value of zero will disable the warning threshold (including notifications).

            [_disk_default_critical_utilization_help] => 
>*Critical disk utilization* sets the default critical threshold for all hard disks utilization. Exceeding this threshold will result in an alert notification.
>
>A value of zero will disable the critical threshold (including notifications).

            [_disk_default_warning_temperature_help] => 
>*Warning disk temperature* sets the default warning threshold for all hard disks temperature. Exceeding this threshold will result in a warning notification.
>
>A value of zero will disable the warning threshold (including notifications).

            [_disk_default_critical_temperature_help] => 
>*Critical disk temperature* sets the default critical threshold for all hard disks temperature. Exceeding this threshold will result in an alert notification.
>
>A value of zero will disable the critical threshold (including notifications).

            [_disk_default_smart_notification_help] => 
>SMART notifications are generated on either an increasing RAW value of the attribute, or a decreasing NORMALIZED value which reaches a predefined threshold set by the manufacturer.
>
>This section is used to set the global settings for all disks. It is possible to adjust settings for individual disks.

            [_disk_default_smart_tolerance_help] => 
>A tolerance level may be given to prevent that small changes result in a notification. Setting a too high tolerance level may result in critical changes without a notification.
>
>This section is used to set the global settings for all disks. It is possible to adjust settings for individual disks.

            [_disk_default_smart_controller_help] => 
>By default automatic controller selection is done by smartctl to read the SMART information. Certain controllers however need specific settings for smartctl to work.
>Use this setting to select your controller type and fill-in the specific disk index and device name for your situation. Use the manufacturer's documentation to find the relevant information.
>
>This section is used to set the global settings for all disks. It is possible to adjust settings for individual disks.

            [_disk_default_smart_attribute_help] => 
>The user can enable or disable notifications for the given SMART attributes. It is recommended to keep the default, which is ALL selected attributes,
>when certain attributes are not present on your hard disk or do not provide the correct information, these may be excluded.
>In addition custom SMART attributes can be entered to generate notifications. Be careful in this selection,
>it may cause an avalance of notifcations if inappropriate SMART attributes are chosen.
>
>This section is used to set the global settings for all disks. It is possible to adjust settings for individual disks.

            [_docker_repositories_help] => 
>Use this field to add template repositories.
>Docker templates are used to facilitate the creation and re-creation of Docker containers.  Please setup one per line.
>
>Using repositories is deprecated.  For instructions on how to have Community Applications utilize private repositories, visit <a href='https://forums.unraid.net/topic/57181-docker-faq/page/2/?tab=comments#comment-1018225' target='_blank'>here</a>
>

            [_docker_enable_help] => 
>Before you can start the Docker service for the first time, please specify an image file for Docker to install to.
>
>Once started, Docker will always automatically start after the array has been started.

            [_docker_readmore_help] => 
>Some systems with a lot of docker containers may experience lag using the main Docker page.
>
>Setting this to "No" may help speed up general page usage by disabling the use of readmore-js.
>Instead of chevrons indicating more data for Port and Volume mapping, all data is displayed.

            [_docker_timeout_help] => 
>The time in seconds to allow a container to gracefully stop before forcing it to stop

            [_docker_vdisk_type_help] => 
>Select where to keep the Docker persistent state.
>
>This can be an image file with a specific size or a dedicated folder.

            [_docker_vdisk_size_help] => 
>If the system needs to create a new docker image file, this is the default size to use specified in GB.
>
>To resize an existing image file, specify the new size here. Next time the Docker service is started the file (and file system) will be increased to the new size (but never decreased).

            [_docker_vdisk_location_help] => 
>You must specify an image file for Docker. The system will automatically create this file when the Docker service is first started.
>
>The image file name must have the extension .img, If not the input is not accepted and marked red.
>
>It is recommended to create this image file outside the array, e.g. on the Cache pool. For best performance SSD devices are preferred.

            [_docker_vdisk_directory_help] => 
>You must specify a folder for Docker. The system will automatically create this folder when the Docker service is first started.
>
>It is recommended to create this folder under a share which resides on the Cache pool (setting: cache=Only). For best performance SSD devices are preferred.

            [_docker_appdata_location_help] => 
>You can specify a folder to automatically generate and store subfolders containing configuration files for each Docker app (via the /config mapped volume).
>
>The folder's path must end with a trailing slash (/) character. If not the input is not accepted and marked red.
>
>It is recommended to create this folder outside the array, e.g. on the Cache pool. For best performance SSD devices are preferred.
>
>Only used when adding new Docker apps. Editing existing Docker apps will not be affected by this setting.

            [_docker_log_rotation_help] => 
>By default LOG rotation is disabled and will create a single LOG file of unlimited size.
>
>Enable LOG rotation to limit the size of the LOG file and specify the number of files to keep in the rotation scheme.

            [_docker_log_file_size_help] => 
>Specifies the maximum LOG size. When exceeded LOG rotation will occur.

            [_docker_log_file_number_help] => 
>Specifies the number of LOG files when LOG rotation is done.

            [_docker_authoring_mode_help] => 
>If set to **Yes**, when creating/editing containers the interface will be present with some extra fields related to template authoring.

            [_docker_custom_network_type_help] => 
>The **ipvlan** type is best when connection to the physical network is not needed.
>Please read <u><a style="color:blue" href='https://docs.docker.com/network/ipvlan/', target='_blank'>this</a></u> on implementing an ipvlan network.<br>
>
>The **macvlan** type of network allows direct connection to the physical network.
>Please read <u><a style="color:blue" href='https://docs.docker.com/network/macvlan/', target='_blank'>this</a></u> on implementing a macvlan network.<br>
>
>**Note:** Docker uses its own dhcp service, which is the **DHCP Pool** setting.
>When you use multiple Unraid servers, then each server must have a different Docker **DHCP Pool** range configured.

            [_docker_custom_network_access_help] => 
>Allows direct communication between the host and containers using a custom **macvlan** network.  By default this is disabled.

            [_docker_user_defined_network_help] => 
>User created networks are networks created by the user outside of the GUI.  By default user created networks are removed from Docker. This is done to prevent potential conflicts with the automatic generation of custom networks.
>
>Change this setting to preserve user defined networks, but it is the responsibility of the user to ensure these entries work correctly and are conflict free.

            [_docker_include_interface_vlan_ipv4_help] => 
>Include (default) or exclude the above interfaces or VLANs as custom network for Docker.
>
>Enter the pool range within each allocated subnet which is used for DHCPv4 assignments by Docker. E.g. 192.168.1.128/25

            [_docker_exclude_interface_vlan_ipv4_help] => 
>Include or exclude (default) the above interfaces or VLANs as custom network for Docker.
>
>Enter the pool range within each allocated subnet which is used for DHCPv4 assignments by Docker. E.g. 192.168.1.128/25

            [_docker_include_interface_vlan_ipv6_help] => 
>Include (default) or exclude the above interfaces or VLANs as custom network for Docker.
>
>Enter the pool range within each allocated subnet which is used for DHCPv6 assignments by Docker. E.g. 2a02:abcd:9ef5:100:1::/72

            [_docker_exclude_interface_vlan_ipv6_help] => 
>Include or exclude (default) the above interfaces or VLANs as custom network for Docker.
>
>Enter the pool range within each allocated subnet which is used for DHCPv6 assignments by Docker. E.g. 2a02:abcd:9ef5:100:1::/72

            [_docker_version_help] => 
>This is the active Docker version.

            [_docker_vdisk_location_active_help] => 
>This is the location of the Docker image.

            [_docker_appdata_location_active_help] => 
>This is the storage location for Docker containers.

            [_docker_log_rotation_active_help] => 
>By default a single unlimited LOG file is created. Otherwise LOG file size and number of files are limited when LOG rotation is enabled.

            [_docker_custom_network_active_help] => 
>Allows direct communication between the host and containers using a custom (macvlan) network.<br>
>By default this is prohibited.

            [_docker_user_defined_network_active_help] => 
>Shows whether networks created outside of the GUI are removed or preserved for Docker. When preserved *user defined networks* become available in the *Network type* dropdown list of containers.

            [_docker_scrub_help] => 
>**Scrub** runs the *btrfs scrub* program to check file system integrity.
>
>If repair is needed you should check the *Correct file system errors* and run a second Scrub pass; this will permit *btrfs scrub* to fix the file system.

            [_docker_cancel_help] => 
>**Cancel** will cancel the Scrub operation in progress.

            [_id_server_name_help] => 
>The network identity of your server.  Also known as *hostname* or *short hostname*. Windows networking
>refers to this as the *NetBIOS name* and must be 15 characters or less in length.
>Use only alphanumeric characters (that is, "A-Z", "a-z", and "0-9"), dashes ("-"), and dots (".");
>and, the first and last characters must be alphanumeric.

            [_id_description_help] => 
>This is a text field that is seen next to a server when listed within Network or File Explorer
>(Windows), or Finder (macOS).

            [_id_model_help] => 
>This is the server model number.

            [_mgmt_start_page_help] => 
>Select the page which is opened first when entering the GUI. By default the *Main* page is selected.

            [_mgmt_use_telnet_help] => 
>By default TELNET access is enabled. TELNET is an insecure type of CLI access however,
>and it is highly recommended to use SSH access instead and disable TELNET access.

            [_mgmt_telnet_port_help] => 
>Enter the TELNET port, default port is 23.

            [_mgmt_use_ssh_help] => 
>SSH is enabled by default and offers a secure way of CLI access. Upon system startup SSH keys are automatically generated
>if not yet existing, and stored on the flash device in the folder */config/ssh*.

            [_mgmt_ssh_port_help] => 
>Enter the SSH port, default port is 22.

            [_mgmt_use_upnp_help] => 
>Enable (default) or disable the UPnP function on the server. This function allows automatic forwarding of ports on the router, only applicable when UPnP is enabled on the router itself.

            [_mgmt_use_ssl_tls_help] => 
>Determines how the webGUI responds to HTTP and/or HTTPS protocol on your LAN.
>
>Select **No** to use HTTP. To access your server use this URL:
>
>`http://<server-name>.<localTLD>`
>
>or this URL:
>
>`http://<server-ip-address>`
>
>Select **Yes** to enable use of an automatically-generated self-signed
>SSL certificate.  Use this URL to access your server:
>
>`https://<server-name>.<localTLD>`
>
>Note that use of a self-signed SSL certificate will generate a browser
>warning.
>
>Select **Strict** to enable *exclusive* use of an Unraid.net SSL
>certificate for https access (see **Provision** below).  Note that a DNS
>server must be reachable.
>
>**Redirects:** When accessing `http://<server-ip-address>` or `http://<server-name>.<localTLD>`, the 
>behavior will change depending on the value of the Use SSL/TLS setting:
>
>* If Use SSL/TLS is set to **Strict**, you will be redirected to `https://<lan-ip>.<hash>.myunraid.net`
>* If Use SSL/TLS is set to **Yes**, you will be redirected to `https://<server-ip-address> or https://<server-name>.<localTLD>`
>* If Use SSL/TLS is set to **No**, then the http url will load directly.
>
>Important: **Strict** may not be selectable if your router or upstream DNS server has
>[DNS rebinding protection](https://en.wikipedia.org/wiki/DNS_rebinding) enabled. DNS rebinding
>protection prevents DNS from resolving a private IP network range. DNS rebinding protection is meant as
>a security feature on a LAN that may include legacy devices with buggy/insecure "web" interfaces.
>
>One source of DNS rebinding protection could be your ISP DNS server. In this case the problem may be solved by
>switching to a different DNS server such as OpenDNS where DNS rebinding proection can be turned off.
>
>More commonly, DNS rebinding protection could be enabled in your router. Most consumer routers do not implement DNS
>rebinding protection; but, if they do, a configuration setting should be available to turn it off.
>
>Higher end routers usually do enable DNS rebinding protection. Typically there are ways of turning it off
>entirely or selectively based on domain. Examples:
>
>**DD-WRT:** If you are using "dnsmasq" with DNS rebinding protection enabled, you can add this line to your router
>configuration file:
>
>`rebind-domain-ok=/myunraid.net/`
>
>**pfSense:** If you are using pfSense internal DNS resolver service, you can add these Custom Option lines:
>
>`server:`<br>
>`private-domain: "myunraid.net"`
>
>**Ubiquiti USG router:** you can add this configuration line:
>
>`set service dns forwarding options rebind-domain-ok=/myunraid.net/`
>
>**OpenDNS:** Go to Settings -> Security and *remove* the checkbox next to
> "Suspicious Responses - Block internal IP addresses". It is an all-or-nothing setting.
>
>When all else fails, you may be able create an entry in your PC's *hosts* file to override external DNS and
>directly resolve your servers myunraid.net FQDN to its local IP address.

            [_mgmt_http_port_help] => 
>Enter the HTTP port, default port is 80.

            [_mgmt_https_port_help] => 
>Enter the HTTPS port, default port is 443.

            [_mgmt_local_tld_help] => 
>Enter your local Top Level Domain. May be blank.

            [_mgmt_local_access_urls_help] => 
>The Local Access URLs shown above are based on your current settings. 
>To adjust URLs or redirects, see the help text for "Use SSL/TLS".

            [_mgmt_certificate_expiration_help] => 
>**Provision** may be used to install a *free* Unraid.net SSL Certificate from
>[Let's Encrypt](https://letsencrypt.org/).
>
>The Unraid.net SSL certificate can be used in two ways.  First,
>having the certificate present enables your server to respond to an
>alternate URL of the form:
>
>`https://<lan-ip>.<hash>.myunraid.net`
>
>The `<hash>` value is a 40-character hex string (160 bits) unique to
>your server.  A Lime Technology DDNS server will return your `<lan-ip>`
>in response to a DNS request on this URL. The certificate Subject is
>set to `*.<hash>.myunraid.net` thus validating the https connection.
>
>You may enable this URL exclusively on your LAN by setting **Use
>SSL/TLS** to **Strict**.
>
>The second use for an Unraid.net certificate is to enable secure
>remote access available through the My Servers plugin feature.  Note
>that it is possible to use secure remote access in conjunction with
>insecure local access.
>
>After an Unraid.net SSL Certificate has been installed, two
>background services are activated while the server is signed in to unraid.net:
>
>- *updatedns* - This starts 30 seconds after server reboot has completed and contacts the Lime Technology
>DNS service to register the servers local IP address. Thereafter it wakes up every 10 minutes in case
>the local IP address has changed.
>
>- *renewcert* - This starts 60 seconds after server reboot has completed and contacts the Lime Technology
>certificate renewal service to determine if your Unraid.net SSL certificate needs to be renewed.
>Thereafter it wakes up every 24 hours. If within 30 days of expiration, a new certificate is automatically
>provisioned and downloaded to your server.
>
>**Delete** may be used to delete the Unraid.net certificate file.
>
>**nginx certificate handling details**
>
>nginx makes use of two certificate files stored on the USB flash boot device:<br>
>
>- a self-signed certificate: `config/ssl/certs/<server-name>_unraid_bundle.pem`
>
>- an Unraid.net certificate: `config/ssl/certs/certificate_bundle.pem`
>
>The self-signed SSL certificate file is automatically created when nginx
>starts; and re-created if the server hostname or local TLD is changed.
>
>**nginx stapling support**
>
>OCSP Stapling is automatically enabled if the certificate contains an OCSP responder URL.
>
>Hence, for self-signed certificates stapling is not enabled; for CA-signed certificates
>stabling is enabled.

            [_ftp_server_help] => 
>Enable or disable the FTP server daemon. By default the FTP server is enabled.
>This setting is not saved, i.e. upon system reboot it will revert to its default setting.

            [_ftp_users_help] => 
>Enter the user names (separated by spaces) permitted to access the server using FTP.
>To disallow any user access, clear this setting.
>
>**Note:** do not enter user name `root` since this may cause problems in the future.

            [_ftp_overview_help] => 
>### Overview
>
>Unraid OS includes the popular `vsftpd` FTP server.  The configuration of `vsftp` is currently very
>simple: **All** user names entered above are permitted to access the server via FTP and will have
>*full read/write/delete access* to the entire server, so use with caution.

            [_smb_enable_help] => 
>Select 'Yes (Workgroup)' to enable SMB (Windows Networking) protocol support. This
>also enables Windows host discovery.
>
>Select 'Yes (Active Directory)' to enable Active Directory integration.

            [_smb_hide_files_help] => 
>If set to 'Yes' then files starting with a '.' (dot) will appear as *hidden files* and normally
>will not appear in Windows folder lists unless you have "Show hidden files, folders, and drives" enabled
>in Windows Folder Options.
>
>If set to 'No' then dot files will appear in folder lists the same as any other file.

            [_smb_multi_channel_help] => 
>When set to 'Yes' enables SMB Multi Channel support in the server. From
>[microsoft](https://docs.microsoft.com/en-us/azure-stack/hci/manage/manage-smb-multichannel):
>"SMB Multichannel enables file servers to use multiple network connections simultaneously." 

            [_smb_enhanced_macos_help] => 
>When set to 'Yes' provides enhanced compatibility with Apple SMB clients, resulting, for example, in faster
>Finder browsing, and ability to export Time Machine shares.  This may cause some issues with Windows clients, however.
>Please also refer to the [VFS_FRUIT MAN PAGE](https://www.mankier.com/8/vfs_fruit).

            [_smb_enable_netbios_help] => 
>Select 'Yes' to enable NetBIOS.  If enabled, SMBv1 protocol will also be recognized.  If disabled,
>clients must use SMBv2 or higher.

            [_smb_enable_wsd_help] => 
>Select 'Yes' to enable WSD (WS-Discovery).  The only reason to turn this off is when you are running an
>old LAN setup based on SMBv1.

            [_smb_wsd_options_help] => 
>This is a command line options string passed to the WSD daemon upon startup. Leave this field blank unless
>instructed by support to put something here.

            [_smb_extra_conf_help] => 
>Use this page to make changes to your `smb-extra.conf` file.  Samba will need
>to be restarted in order for changes to take effect.

            [_smb_extra_button_help] => 
>Click the **Apply** button to commit the current edits.  Click **Reset** to
>undo any changes you make (before Saving). Click **Done** to exit this page.

            [_smb_workgroup_help] => 
>Enter your local network Workgroup name. Usually this is "WORKGROUP".

            [_smb_local_master_help] => 
>If set to 'Yes' then the server will fully participate in browser elections, and in the absence
>of other servers, will usually become the local Master Browser.

            [_nfs_enable_help] => 
>Select 'Yes' to enable the NFS protocol.

            [_nfs_tunable_fuse_remember_help] => 
>When NFS is enabled, this Tunable may be used to alleviate or solve instances of "NFS Stale File Handles" 
>you might encounter with your NFS client.
>
>In essence, (fuse_remember) tells an internal subsystem (named "fuse") how long to "remember" or "cache" 
>file and directory information associated with user shares.  When an NFS client attempts to access a file
>(or directory) on the server, and that file (or directory) name is not cached, then you could encounter
>"stale file handle".
>
>The numeric value of this tunable is the number of seconds to cache file/directory name entries,
>where the default value of 330 indicates 5 1/2 minutes.  There are two special values you may also set
>this to:
>
>* 0 which means, do not cache file/directory names at all, and
>* -1 which means cache file/directory names forever (or until array is stopped)
>
>A value of 0 would be appropriate if you are enabling NFS but only plan to use it for disk shares,
>not user shares.
>
>A value of -1 would be appropriate if no other timeout seems to solve the "stale file handle" on
>your client.  Be aware that setting a value of -1 will cause the memory footprint to grow by approximately
>108 bytes per file/directory name cached.  Depending how much RAM is installed in your server and how many
>files/directories you access via NFS this may or may not lead to out-of-memory conditions.

            [_shares_enable_disk_help] => 
>If set to No, disk shares are unconditionally not exported.
>
>If set to Yes, disk shares may be exported.  **WARNING:** Do not copy data from a disk share to a user share
>unless you *know* what you are doing.  This may result in the loss of data and is not supported.
>
>If set to Auto, only disk shares not participating in User Shares may be exported.

            [_shares_enable_shares_help] => 
>If set to 'Yes' the User Shares feature is activated.

            [_shares_included_disks_help] => 
>This setting defines the set of array disks which are *included* in User Shares.
>Unchecking all disks will allow **all** array disks to be included.

            [_shares_excluded_disks_help] => 
>This setting defines the set of array disk which are *excluded* from User Shares.
>Uncheck all disks in order to not exclude any disks
>
>**Note:** Each separate User Share also includes its own set of Included and Excluded
>disks which represent a subset of the Included/Excluded disks defined here.

            [_shares_exclusive_shares_help] => 
>If set to Yes, share directories under /mnt/user are actually symlinks to the share directory on a storage volume
>provided the following conditions are met:
>
>* The Primary storage for a share is set to a pool.
>* The Secondary storage for a share is set to **none**.
>* The share exists on a single volume.
>* The share is **not** exported over NFS.
>
>The advantage of *exclusive* shares is that transfers bypass the FUSE layer which may significantly
>increase I/O performance.

            [_shares_tunable_hard_links_help] => 
>If set to Yes then support the link() operation.
>
>If set to No then hard links are not supported.
>
>Notes:
>
>* Setting to Yes may cause problems for older media and dvd/bluray players accessing shares using NFS.
>* No matter how this is set, the **mover** will still properly handle any detected hard links.

            [_shares_tunable_direct_io_help] => 
>**Experimental**: If set to Yes then mount User Share file system with FUSE *direct_io* mount option.
>This will increase write performance but might possibly decrease read performance.
>
>*Auto* selects No.

            [_syslog_local_server_help] => 
>Let the server act as a central syslog server and collect syslog messages from other systems.
>The server can listen on UDP, TCP or both with a selectable port number.
>
>Syslog information is stored per IP address. That is every system gets its own syslog file.

            [_syslog_local_folder_help] => 
>Select the share folder where the syslogs will be stored.
>It is recommended that you use a share located on the cache drive to prevent array disk spinups.

            [_syslog_local_rotation_help] => 
>By default LOG rotation is disabled and will create a single LOG file of unlimited size.
>
>Enable LOG rotation to limit the size of the LOG file and specify the number of files to keep in the rotation scheme.

            [_syslog_local_file_size_help] => 
>Specifies the maximum LOG size. When exceeded LOG rotation will occur.

            [_syslog_local_file_number_help] => 
>Specifies the number of additional LOG files to keep in the rotation scheme.

            [_syslog_remote_server_help] => 
>Enter a name or IP address of a remote syslog server.
>This will send a copy of the syslog messages to the designated server.

            [_syslog_mirror_flash_help] => 
>This setting is NO by default and must be used with care to avoid unnecessary wear and tear of the USB device.
>
>Change this setting to YES when troubleshooting is required and it is not possible to get the regular diagnostics information.
>A mirror of the syslog file is stored in the **logs** folder of the flash device.

            [_confirm_reboot_help] => 
>Choose if rebooting or powering down the server needs a confirmation checkbox.

            [_confirm_array_stop_help] => 
>Choose if stopping the array needs a confirmation checkbox.

            [_display_settings_help] => 
>The display settings below determine how items are displayed on screen. Use these settings to tweak the visual effects to your likings.
>
>You can experiment with these settings as desired, they only affect visual properties.

            [_display_font_size_help] => 
>Changes the font size in the GUI. This is a per device setting.

            [_display_tty_size_help] => 
>Changes the font size of terminal windows.

            [_display_page_view_help] => 
>Changes how certain pages are displayed. In **Tabbed** mode different sections will be displayed in different tabs,
>while in **Non-tabbed** mode sections are displayed under each other.

            [_display_users_menu_help] => 
>The Users Menu can be part of the header or part of the Settings menu.
>You can move the Users Menu if insufficient space in the header is available to display all menus.

            [_display_listing_height_help] => 
>**Automatic** : long listings are displayed as is, and the user needs to scroll the whole page to see the bottom
>
>**Fixed** : long listings are displayed in a window with a fixed size, user can scroll this window to see the bottom

            [_display_wwn_device_id_help] => 
>World Wide Name (WWN) is a unique identifier used for SAS attached devices.
>
>Select *Disabled* to suppress the appending of WWN to the device identification
>
>Select "Automatic" to append WWN to the device identification in case of SAS devices

            [_display_custom_text_color_help] => 
>Overrule the default text color in the header. This can be used to match the text color with a background image.

            [_display_custom_background_color_help] => 
>Overrule the default background color in the header. This can be used to match the background color with a custom text color.

            [_display_custom_banner_help] => 
>Image will be scaled to 1920x90 pixels. The maximum image file upload size is 512 kB (524,288 bytes).

            [_display_temperature_unit_help] => 
>Selects the temperature unit for the disk temperature thresholds. Changing the unit will adjust the existing value in the disk temperature thresholds as appropriate.
>
>Make sure any newly entered values represent the selected temperature unit.

            [_vms_enable_help] => 
>Stopping the VM Manager will first attempt to shutdown all running VMs. After 60 seconds, any remaining VM instances will be terminated.

            [_vms_libvirt_volume_help] => 
>This is the libvirt volume.

            [_vms_libvirt_vdisk_size_help] => 
>If the system needs to create a new libvirt image file, this is the default size to use specified in GB.
>To resize an existing image file, specify the new size here. Next time the Libvirt service is started the file (and file system) will be increased to the new size (but never decreased).

            [_vms_libvirt_location_help] => 
>You must specify an image file for Libvirt. The system will automatically create this file when the Libvirt service is first started.

            [_vms_libvirt_storage_help] => 
>Specify a user share that contains all your VM subdirectories with vdisks

            [_vms_libvirt_iso_storage_help] => 
>Specify a user share that contains all your installation media for operating systems

            [_vms_virtio_driver_help] => 
>Specify the virtual CD-ROM (ISO) that contains the VirtIO Windows drivers as provided by the Fedora Project.
>Download the latest ISO from here: <a href="https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/index.html#virtio-win-direct-downloads" target="_blank">fedoraproject.org</a>
>
>When installing Windows, you will reach a step where no disk devices will be found. There is an option to browse for drivers on that screen.
>Click browse and locate the additional CD-ROM in the menu. Inside there will be various folders for the different versions of Windows.
>Open the folder for the version of Windows you are installing and then select the AMD64 subfolder inside (even if you are on an Intel system, select AMD64).
>Three drivers will be found. Select them all, click next, and the vDisks you have assigned will appear.

            [_vms_network_source_help] => 
>Select the name of the network you wish to use as default for your VMs.
>You can choose between **'bridges'** created under network settings or
>**'libvirt'** created with virsh command in the terminal.
>The bridge **'virbr0'** and the associated virtual network **'default'** are
>created by libvirt.  
>Both utilizes NAT (network address translation) and act as a DHCP server to hand out IP addresses to virtual machines directly.
>More optional selections are present for bridges under network settings or for libvirt networks with the virsh command in the terminal.
>
>**If your are unsure, choose 'virbr0' as the recommended Unraid default.**
>
>NOTE: You can also specify a network source on a per-VM basis.
>
>**IMPORTANT: Neither Libvirt nor Unraid automatically brings up an interface that is assigned to a Libvirt network.
>Before you use a Libvirt network, please go to Settings -> Network Settings and, if necessary, manually set the associated interface to up.**

            [_vms_host_shutdown_help] => 
>When shutting down the server, this defines the action to take upon running VMs. If *Hibernate VMs* is chosen,
>the VM will be instructed to hibernate (if supported) otherwise it will attempt a VM shutdown.

            [_vms_shutdown_timeout_help] => 
>When shutting down the server, this defines how long to wait in seconds for *graceful* VM shutdown before forcing shutdown to continue.
>NOTE: It's recommended to shut down guest VMs from within the VM.

            [_vms_console_help] => 
>For setting the console options to show on context menus. Web will show only inbuild web clients(VNC and SPICE), 
>Virtual Manager Remote Viewer will only show the Remote Viewer option. Both will show both Web and Remote Viewer.

            [_vms_acs_override_help] => 
>*PCIe ACS override* allows various hardware components to expose themselves as isolated devices.
>Typically it is sufficient to isolate *Downstream* ports.
>A hardware component may need the setting *Multi-function* or *Both* to further isolate different hardware functions.<br>
>A reboot is required for changes to this setting to take affect.
>
>**Warning: use of this setting could cause possible data corruption with certain hardware configurations.**
>Please visit the [Lime Technology forums](https://forums.unraid.net/forum/51-vm-engine-kvm) for more information.

            [_vms_vfio_interupts_help] => 
>If your system doesn't support interrupt remapping, these can be enabled by allowing unsafe interrupts.<br>
>A reboot will be required for changes to this setting to take affect.
>
>**Warning: use of this setting could cause possible data corruption with certain hardware configurations.**
>Please visit the [Lime Technology forums](https://forums.unraid.net/forum/51-vm-engine-kvm) for more information.

            [_vms_libvirt_log_help] => 
>View the log for libvirt: <a onclick="openTerminal('log','libvirt','libvirt/libvirtd.log')">View libvirtd.log</a>

            [_vms_scrub_help] => 
>**Scrub** runs the *btrfs scrub* program to check file system integrity.
>If repair is needed you should check the *Correct file system errors* and run a second Scrub pass; this will permit *btrfs scrub* to fix the file system.

            [_vms_cancel_help] => 
>**Cancel* will cancel the Scrub operation in progress.

            [_eth_interface_description_help] => 
>Use this optional field to provide additional information about the purpose of the connection.

            [_eth_mac_address_help] => 
>This is the hardware address of the interface.
>When tagging is enabled all VLANs on this interface will share the same hardware address.

            [_eth_enable_bonding_help] => 
>Bonding is a feature that combines multiple physical Ethernet interfaces into a single *bonded* interface named **bond0**.
>This can be used to improve the connection redundancy and/or throughput of the system.
>Different bonding modes are supported (see below), but some modes require proper switch support.

            [_eth_bonding_mode_help] => 
>**Mode 0 (balance-rr)**<br>
>This mode transmits packets in a sequential order from the first available slave through the last.
>If two real interfaces are slaves in the bond and two packets arrive destined out of the bonded interface the first will be transmitted on the first slave and the second frame will be transmitted on the second slave.
>The third packet will be sent on the first and so on. This provides load balancing and fault tolerance.
>
>**Mode 1 (active-backup) - default**<br>
>This mode places one of the interfaces into a backup state and will only make it active if the link is lost by the active interface.
>Only one slave in the bond is active at an instance of time. A different slave becomes active only when the active slave fails.
>This mode provides fault tolerance.
>
>**Mode 2 (balance-xor)**<br>
>This mode transmits packets based on an XOR formula. Source MAC address is XOR'd with destination MAC address modula slave count.
>This selects the same slave for each destination MAC address and provides load balancing and fault tolerance.
>
>**Mode 3 (broadcast)**<br>
>This mode transmits everything on all slave interfaces. This mode is least used (only for specific purpose) and provides only fault tolerance.
>
>**Mode 4 (802.3ad)**<br>
>This mode is known as *Dynamic Link Aggregation*. It creates aggregation groups that share the same speed and duplex settings.
>It requires a switch that supports IEEE 802.3ad dynamic link.
>Slave selection for outgoing traffic is done according to the transmit hash policy, which may be changed from the default simple XOR policy via the xmit_hash_policy option.
>Note that not all transmit policies may be 802.3ad compliant, particularly in regards to the packet mis-ordering requirements of section 43.2.4 of the 802.3ad standard.
>Different peer implementations will have varying tolerances for noncompliance.
>
>**Mode 5 (balance-tlb)**<br>
>This mode is called *Adaptive transmit load balancing*. The outgoing traffic is distributed according to the current load and queue on each slave interface.
>Incoming traffic is received by the current slave.
>
>**Mode 6 (balance-alb)**<br>
>This mode is called *Adaptive load balancing*. This includes balance-tlb + receive load balancing (rlb) for IPV4 traffic.
>The receive load balancing is achieved by ARP negotiation.
>The bonding driver intercepts the ARP Replies sent by the server on their way out and overwrites the src hw address with the unique hw address of one of the slaves in the bond
>such that different clients use different hw addresses for the server.
>
>*Mode 1 (active-backup) is the recommended setting. Other modes allow you to set up a specific environment, but may require proper switch support.
>Choosing a unsupported mode can result in a disrupted communication.*

            [_eth_bonding_members_help] => 
>Select which interfaces are member of the *bonded* interface. By default eth0 is a member, while other interfaces are optional.

            [_eth_enable_bridging_help] => 
>Bridging is a feature which creates a virtual bridge and allows VMs and Docker containers to communicate directly with the physical Ethernet port.
>Both bonding and bridging can be combined to let VMs or containers communicate over a *bonded* interface.

            [_eth_bridging_members_help] => 
>Select which interfaces are member of the *bridged* interface. By default eth0 is a member, while other interfaces are optional.

            [_eth_network_protocol_help] => 
>Select which protocol(s) are used. By default IPv4 only is used.<br>
>When both IPv4 and IPv6 is selected, each protocol can be configured independently.

            [_eth_ipv4_address_assignment_help] => 
>The following settings are possible:
>
>*Automatic* - the server will attempt to obtain a IPv4 address from the local DHCP server<br>
>*Static* - the IPv4 address is manually set for this interface<br>
>*None* - no IPv4 address is assigned to the interface (only available for VLANs)

            [_eth_ipv4_address_help] => 
>Greyed out when using automatic IP assignment. Otherwise specify here the IPv4 address and mask of the system.

            [_eth_ipv4_default_gateway_help] => 
>Greyed out when using automatic IP assignment. Otherwise specify here the IPv4 address of your router.

            [_eth_ipv4_dns_server_assignment_help] => 
>If set to *Automatic* the server will use IPv4 DNS server(s) returned by the local automatic assignment.<br>
>If set to *Static* you may enter your own list.
>
>This is useful in Active Directory configurations where you need to set the first DNS Server entry to the IP address of your AD Domain server.

            [_eth_ipv4_dns_server_help] => 
>This is the primary IPv4 DNS server to use. Enter a IPv4 address.
>
>Note: for *Active Directory* you **must** ensure this is set to the IP address of your AD Domain server.

            [_eth_ipv4_dns_server2_help] => 
>This is the IPv4 DNS server to use when IPv4 DNS server 1 is down.

            [_eth_ipv4_dns_server3_help] => 
>This is the IPv4 DNS server to use when IPv4 DNS servers 1 and 2 are both down.

            [_eth_ipv6_address_assignment_help] => 
>The following settings are possible:
>
>*Automatic* - the server will attempt to obtain a IPv6 address from the local DHCP server or Router Advertisement (RA)<br>
>*Static* - the IPv6 address is manually set for this interface<br>
>*None* - no IPv6 address is assigned to the interface (only available for VLANs)

            [_eth_ipv6_address_help] => 
>Greyed out when using automatic IP assignment. Otherwise specify here the IPv6 address of the system.

            [_eth_ipv6_default_gateway_help] => 
>Greyed out when using automatic IP assignment. Otherwise specify here the IPv6 address of your router.

            [_eth_ipv6_privacy_extensions_help] => 
>Enable or disable the generation of a random IPv6 interface identifier according to RFC4941. This is similar to the temporary IPv6 address generation on Windows machines.

            [_eth_ipv6_dns_server_assignment_help] => 
>If set to *Automatic* the server will use IPv6 DNS server(s) returned by the local automatic assignment.<br>
>If set to *Static* you may enter your own list.

            [_eth_ipv6_dns_server_help] => 
>This is the primary IPv6 DNS server to use. Enter a IPv6 address.

            [_eth_ipv6_dns_server2_help] => 
>This is the IPv6 DNS server to use when IPv6 DNS server 1 is down.

            [_eth_ipv6_dns_server3_help] => 
>This is the IPv6 DNS server to use when IPv6 DNS servers 1 and 2 are both down.

            [_eth_desired_mtu_help] => 
>This is the MTU size to use on the physical Ethernet interface.
>If left blank, the MTU will automatically be determined (by default 1500 bytes).

            [_eth_enable_vlans_help] => 
>By default no VLANs are configured.<br>
>Enabling VLANs extends the number of logical connections over the same physical connection.
>
>Note: your router and switch must support VLANs too when this feature is used.

            [_eth_vlan_number_help] => 
>Give each VLAN a unique identifier. Numbers range from 1 to 4095.

            [_eth_network_rules_help] => 
>The interface assignment rules can be changed here and might be necessary to set the preferred interface for managing Unraid - *use with care, usually there is no need to change*.
>
>**eth0** is the main interface used to manage the Unraid system. The other interfaces are optional and may be used as desired.
>Every interface must be uniquely identified by its MAC (hardware) address.
>
>The interface assignment is stored on the flash device under */config/network-rules.cfg*. This file can be viewed with any editor, but it is recommended to make changes via the webGUI only.<br>
>Deleting the file *network-rules.cfg* from the flash device will restore automatic interface assignment after a system reboot.

            [_eth_routing_table_help] => 
>Enter a valid IPv4 route in the format *nnn.nnn.nnn.nnn/xx*, e.g. *192.168.1.0/24*<br>
>or enter a valid IPv6 route in the format *nnnn:nnnn:nnnn::nnnn/xxx*, e.g. *fe80::3ad8:2fff:fe25:9709/64*
>
>Select the gateway from the dropdown list or enter a valid IPv4/IPv6 address as gateway value.
>
>The metric value is optional, it defaults to 1. Use it to select the preferred gateway when more than one entry of the same route exists.

            [_eth_network_extra_include_help] => 
>Enter one or more interface names or IP addresses which will be included in the list of listening interfaces for local system services.
>
>This is particularly useful when you have created custom interfaces (e.g. tailscale VPN tunnel) which are used to access local system services.

            [_eth_network_extra_exclude_help] => 
>Enter one or more interface names or IP addresses which will be excluded from the list of listening interfaces for local system services.
>
>This can be used to exclude dedicated local interfaces (e.g. p-t-p connections) or exclude dynamic interfaces (WireGuard tunnels) from using local system services.

            [_apc_ups_daemon_help] => 
>Set to 'Yes' to enable apcupsd and start the daemon, set to 'No' to disable apcupsd and stop the daemon.

            [_apc_ups_cable_help] => 
>Defines the type of cable connecting the UPS to your computer.Possible generic choices for 'cable' are:
>
>+ USB, Simple, Smart, Ether, or Custom to specify a special cable.

            [_apc_ups_custom_cable_help] => 
>Specify a special cable by model number, only applicable when *UPS cable* is set to Custom.
>
>+ 940-0119A, 940-0127A, 940-0128A, 940-0020B
>+ 940-0020C, 940-0023A, 940-0024B, 940-0024C
>+ 940-1524C, 940-0024G, 940-0095A, 940-0095B
>+ 940-0095C, 940-0625A, M-04-02-2000

            [_apc_ups_type_help] => 
>Define a *UPS type*, which corresponds to the type of UPS you have (see the Description for more details).
>
>+ **USB** - most new UPSes are USB
>+ **APCsmart** - newer serial character device, appropriate for SmartUPS models using a serial cable (not USB)
>+ **Net** - network link to a master apcupsd through apcupsd's Network Information Server. This is used if the UPS powering your computer is connected to a different computer for monitoring
>+ **SNMP** - SNMP network link to an SNMP-enabled UPS device
>+ **Dumb** - old serial character device for use with simple-signaling UPSes
>+ **PCnet** - PowerChute Network Shutdown protocol which can be used as an alternative to SNMP with the AP9617 family of smart slot cards
>+ **ModBus** - serial device for use with newest SmartUPS models supporting the MODBUS protocol

            [_apc_ups_device_help] => 
>Enter the *device* which corresponds to your situation, only applicable when *UPS type* is not set to USB.
>
>+ **apcsmart** - /dev/tty**
>+ **net** - hostname:port. Hostname is the IP address of the NIS server. The default port is 3551
>+ **snmp** - hostname:port:vendor:community. Hostname is the ip address or hostname of the UPS on the network. Vendor can be can be "APC" or "APC_NOTRAP". "APC_NOTRAP" will disable SNMP trap catching; you usually want "APC". Port is usually 161. Community is usually "private" 
>+ **dumb** - /dev/tty**
>+ **pcnet** - ipaddr:username:passphrase:port. ipaddr is the IP address of the UPS management card. username and passphrase are the credentials for which the card has been configured. port is the port number on which to listen for messages from the UPS, normally 3052. If this parameter is empty or missing, the default of 3052 will be used
>+ **modbus** - /dev/tty**

            [_apc_battery_level_help] => 
>If during a power failure, the remaining battery percentage (as reported by the UPS) is below or equal to *Battery level*, apcupsd will initiate a system shutdown.

            [_apc_runtime_left_help] => 
>If during a power failure, the remaining runtime in minutes (as calculated internally by the UPS) is below or equal to this field, apcupsd, will initiate a system shutdown.

            [_apc_battery_time_help] => 
>If during a power failure, the UPS has run on batteries for *time-out* many seconds or longer; apcupsd will initiate a system shutdown. A value of zero disables this timer.
>
>If you have a Smart UPS, you will most likely want to disable this timer by setting it to zero.
>That way, your UPS will continue on batteries until either the % charge remaining drops to or below *Battery level* or the remaining battery runtime drops to or below *minutes*.
>
>Of course - when testing - setting this to 60 causes a quick system shutdown if you pull the power plug.
>If you have an older dumb UPS, you will want to set this to less than the time you know you can run on batteries.

            [_apc_note_help] => 
>**Note:** *Battery level*, *Runtime left*, and *Time on battery* work in conjunction, so the first that occurs will cause the initiation of a shutdown.

            [_apc_killups_help] => 
>Set to *Yes* to turn off the power to the UPS after a shutdown.

            [_parity_check_scheduled_help] => 
>By default no parity check is scheduled. Select here the desired schedule. This can be one of the preset schedules for daily, weekly, monthly, yearly or a custom schedule.

            [_parity_day_of_the_week_help] => 
>When a **weekly** or **custom** schedule is selected then choose here the preferred *day of the week*, in the other schedules this setting is not used and unavailable.

            [_parity_week_of_the_month_help] => 
>When a **monthly** or **yearly** schedule is selected then choose here the preferred *day of the month*.
>When a **custom** schedule is selected then choose here the preferred *week of the month*, in the other schedules this setting is not used and unavailable.

            [_parity_time_of_the_day_help] => 
>Choose the desired *time of the day* to start the schedule. Time granularity is given in half hour periods.

            [_parity_month_of_the_year_help] => 
>When a **yearly** or **custom** schedule is selected then choose here the preferred *month of the year*, in the other schedules this setting is not used and unavailable.

            [_parity_write_corrections_help] => 
>Choose here whether any parity errors found during the check, need to be corrected on the Parity disk or not.

            [_parity_cumulative_check_help] => 
>Change this setting to **Yes** to divide long duration parity checks over multiple periods. This is useful when the system needs to be available and a parity check runs only during off hours.

            [_parity_accumulation_frequency_help] => 
>Specifies how accumulation periods are executed.
>
>**Daily** means every subsequent day the parity check continues until finished
>
>**Weekly** means every subsequent week the parity check continues until finished

            [_parity_accumulation_duration_help] => 
>Specifies how long each accumulated period runs, expressed in hours. The **Time of the day** speficies the start time of the period.

            [_mover_schedule_help] => 
>Choose a mover schedule ranging from hourly, daily, weekly and monthly.
>
>The interval determines how fast the mover will activated, it runs in the background.

            [_mover_day_of_the_week_help] => 
>Choose a day when the weekly schedule is selected. Otherwise disabled.

            [_mover_day_of_the_month_help] => 
>Choose a date when the monthly schedule is selected. Otherwise disabled.

            [_mover_time_of_the_day_help] => 
>When an hourly schedule is selected this will set the interval in hours. An interval always starts on the whole hour (minute 0).
>
>For the other schedules choose here the time of the day the mover should start.

            [_mover_logging_help] => 
>Write mover messages to the syslog file.

            [_notifications_display_help] => 
>In *Detailed* view all notifications will be displayed on screen as soon as they arrive.<br>
>Notifications can be acknowledged individually or all in once.
>
>In *Summarized* view notifications will be counted only and the number of unread notifications is shown in the menu header per category.<br>
>Click on the counters to either acknowledge or view the unread notifications.

            [_notifications_date_format_help] => 
>Select the desired date format which is used in the notifications archive. Recommended is YYYY-MM-DD, which makes the date/time column sortable in a sensible way.

            [_notifications_time_format_help] => 
>Select the desired time format which is used in the notifications archive. Recommended is 24 hours, which makes the date/time column sortable in a sensible way.

            [_notifications_display_position_help] => 
>Choose the position of where notifications appear on screen. Multiple notifications are stacked, bottom-to-top or top-to-bottom depending on the selected placement.

            [_notifications_store_flash_help] => 
>By default notifications are stored on RAM disk, which will get lost upon system reboot.
>Notifications may be stored permanently on the flash drive under folder '/boot/config/plugins/dynamix' instead.

            [_notifications_system_help] => 
>By default the notifications system is disabled. Enable it here to start receiving notifications.
>The following sections give more options about which and what type of notifications will be sent.

            [_notifications_os_update_help] => 
>Start a periodic verification and notify the user when a new version of the Unraid OS system is detected.
>Use the checkboxes below to select how notifications need to be given; by browser, by email and/or by custom agent.

            [_notifications_plugins_update_help] => 
>Start a periodic verification and notify the user when a new version of one or more of the installed plugins is detected.
>Use the checkboxes below to select how notifications need to be given; by browser, by email and/or by custom agent.

            [_notifications_docker_update_help] => 
>Start a periodic verification and notify the user when a new version of one or more of the installed dockers is detected.
>Use the checkboxes below to select how notifications need to be given; by browser, by email and/or by custom agent.

            [_notifications_array_status_help] => 
>Start a periodic array health check (preventive maintenance) and notify the user the result of this check.

            [_notifications_agent_selection_help] => 
>Use the checkboxes above to select what and how notifications need to be given; by browser, by email and/or by a service.<br>
><b>Tip:</b> you can use custom notification agents; just add them to "/boot/config/plugins/dynamix/notification/agents" directory and check 'Agents'.

            [_notifications_classification_help] => 
>Notifications are classified as:
>
>*notice* - these are informative notifications and do not indicate a problem situation, e.g. a new version is available<br>
>*warning* - these are attentive notifications and may indicate future problems, e.g. a hard disk is hotter than usual<br>
>*alert* - these are serious notifications and require immediate attention, e.g. a failing hard disk<br>
>
>Choose for each classification how you want to be notified.

            [_smtp_preset_service_help] => 
>Select a preset service to set the basic service settings.

            [_smtp_email_address_help] => 
>Email address of your mail account. This address is used as sender of the notifications.

            [_smtp_recipients_help] => 
>Recipients of status and error notifications. Specify one or more email addresses, separate multiple email addresses with a space.

            [_smtp_priority_help] => 
>Set email header with high importance, when there is a problem detected by Unraid OS.

            [_smtp_subject_prefix_help] => 
>Set a prefix for easy recognition of Unraid OS messages.

            [_smtp_mail_server_help] => 
>Specify the name of the email server. Use the preset service selection to have this filled-in automatically.

            [_smtp_mail_server_port_help] => 
>Specify the port of the email server. Use the preset service selection to have this filled-in automatically.

            [_smtp_use_ssl_tls_help] => 
>Specifies whether to use SSL/TLS to talk to the SMTP server.

            [_smtp_use_starttls_help] => 
>Specifies whether to use STARTTLS before starting SSL negotiation - See RFC 2487.

            [_smtp_define_tls_cert_help] => 
>Select only when you have a certificate which required for communication.

            [_smtp_tls_cert_location_help] => 
>The file name of an RSA certificate to use for TLS - as required.

            [_smtp_authentication_method_help] => 
>Select the correct authentication method for your email server. Use test to verify that access is working properly.

            [_smtp_username_password_help] => 
>Enter the username and password to login to your email account. Be aware that the password is stored unencrypted in the email configuration file.

            [_plugin_install_help] => 
>To download and install a plugin, enter the plg file URL and click **Install**. A window will open
>that displays install progress. Do not close this window until install has completed. You may also specify
>the local file name of an extension.

            [_plugin_error_help] => 
>These plugins were not installed because of some kind of installation error.  You should delete these
>plugins and then **reboot** your server.*

            [_plugin_stale_help] => 
>These plugins were not installed because newer code already exists.  It is safe to simply delete these.

            [_docker_client_general_help] => 
>Templates are a quicker way to setting up Docker Containers on your Unraid server.  There are two types of templates:
>
>**Default templates**<br>
>When valid repositories are added to your Docker Repositories page, they will appear in a section on this drop down for you to choose (master categorized by author, then by application template).
>After selecting a default template, the page will populate with new information about the application in the Description field, and will typically provide instructions for how to setup the container.
>Select a default template when it is the first time you are configuring this application.
>
>**User-defined templates**<br>
>Once you've added an application to your system through a Default template,
>the settings you specified are saved to your USB flash device to make it easy to rebuild your applications in the event an upgrade were to fail or if another issue occurred.
>To rebuild, simply select the previously loaded application from the User-defined list and all the settings for the container will appear populated from your previous setup.
>Clicking create will redownload the necessary files for the application and should restore you to a working state.
>To delete a User-defined template, select it from the list above and click the red X to the right of it.

            [_docker_client_name_help] => 
>Give the container a name or leave it as default.  Two characters minimum.  First character must be a-z A-Z 0-9  Remaining characters a-z A-Z 0-9 . - _

            [_docker_client_overview_help] => 
>A description for the application container.  Supports basic HTML mark-up.

            [_docker_client_additional_requirements_help] => 
>Any additional requirements the container has.  Supports basic HTML mark-up.

            [_docker_client_repository_help] => 
>The repository for the application on the Docker Registry.  Format of authorname/appname.
>Optionally you can add a : after appname and request a specific version for the container image.

            [_docker_client_support_thread_help] => 
>Link to a support thread on Lime-Technology's forum.

            [_docker_client_project_page_help] => 
>Link to the project page (eg: www.plex.tv)

            [_docker_client_readme_help] => 
>Link to a readme file or page

            [_docker_client_hub_url_help] => 
>The path to the container's repository location on the Docker Hub.

            [_docker_client_template_url_help] => 
>This URL is used to keep the template updated.

            [_docker_client_icon_url_help] => 
>Link to the icon image for your application (only displayed on dashboard if Show Dashboard apps under Display Settings is set to Icons).

            [_docker_client_webui_help] => 
>When you click on an application icon from the Docker Containers page, the WebUI option will link to the path in this field.
>Use [IP] to identify the IP of your host and [PORT:####] replacing the #'s for your port.

            [_docker_extra_parameters_help] => 
>If you wish to append additional commands to your Docker container at run-time, you can specify them here.<br>
>For all possible Docker run-time commands, see here: <a href="https://docs.docker.com/reference/run/" target="_blank">https://docs.docker.com/reference/run/</a>

            [_docker_post_arguments_help] => 
>If you wish to append additional arguments AFTER the container definition, you can specify them here.
>The content of this field is container specific.

            [_docker_cpu_pinning_help] => 
>Checking a CPU core(s) will limit the container to run on the selected cores only. Selecting no cores lets the container run on all available cores (default)

            [_docker_fixed_ip_help] => 
>If the Bridge type is selected, the application’s network access will be restricted to only communicating on the ports specified in the port mappings section.
>If the Host type is selected, the application will be given access to communicate using any port on the host that isn’t already mapped to another in-use application/service.
>Generally speaking, it is recommended to leave this setting to its default value as specified per application template.
>
>IMPORTANT NOTE:  If adjusting port mappings, do not modify the settings for the Container port as only the Host port can be adjusted.

            [_docker_privileged_help] => 
>For containers that require the use of host-device access directly or need full exposure to host capabilities, this option will need to be selected.
>For more information, see this link: <a href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities" target="_blank">https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities</a>

            [_sysdevs_iommu_groups_help] => 
>This displays a list of IOMMU groups available on your system along with the output of the `lspci` command for each IOMMU group.  The numeric identifiers are used to configure PCI pass-through.
>
>Devices you select will be bound to the vfio-pci driver at boot, which makes them available for assignment to a virtual machine, and also prevents the Linux kernel from automatically binding them to any present host driver.
>
>**Note that selecting a device will bind not only the specified device(s), but *all* other devices in the same IOMMU group as well.**
>
>&nbsp;<i class="fa fa-circle orb green-orb middle"></i>&nbsp;This symbol indicates the device is currently bound to the vfio-pci driver.
>
>&nbsp;<i class="fa fa-retweet grey-orb middle"></i>&nbsp;&nbsp;&nbsp;This symbol indicates the device supports FLR (Function Level Reset).
>
><input type="checkbox" value="" disabled>&nbsp;&nbsp;If a checkbox is greyed out it means the device is in use by Unraid OS and can not be passed through.

            [_sysdevs_thread_pairings_help] => 
>This displays a list of CPU thread pairings.

            [_sysdevs_usb_devices_help] => 
>This displays the output of the `lsusb` command.  The numeric identifiers are used to configure PCI pass-through.

            [_sysdevs_scsi_devices_help] => 
>This displays the output of the `lsscsi` command.  The numeric identifiers are used to configure PCI pass-through.
>
>Note that linux groups ATA, SATA and SAS devices with true SCSI devices.

            [_unraidnet_wanpanel_help] => 
>WAN Port is the external TCP port number setup on your router to NAT/Port Forward traffic from the internet to this
>Unraid server SSL port for secure web traffic.

            [_unraidnet_inactivespanel_help] => 
>Click Activate to set up a local git repo for your local USB Flash boot device and connect to a dedicated remote on unraid.net tied to this server.

            [_unraidnet_changespanel_help] => 
>The Not Up-to-date status indicates there are local files which are changed vs. the remote on unraid.net.
>
>Click Update to push changes to the remote.
>
>Click Changes to see what has changed.

            [_unraidnet_uptodatepanel_help] => 
>The Up-to-date status indicates your local configuration matches that stored on the unraid.net remote.

            [_unraidnet_activepanel_help] => 
>Click Deactivate to pause communication with your remote on unraid.net.
>
>Click Reinitialize to erase all change history in both local and unraid.net remote.

            [_unraidnet_extraorigins_help] => 
>Provide a comma separated list of urls that are allowed to access the unraid-api (https://abc.myreverseproxy.com,https://xyz.rvrsprx.com,…)

            [_myservers_remote_t2fa_help] => 
>When Transparent 2FA for Remote Access is enabled, you will access your server by clicking the "Remote Access" link on the <a href="https://connect.myunraid.net/" target="_blank" rel="noopener noreferrer">Go to Connect</a>. The system will transparently request a 2FA token from your server and embed it in the server's login form. Your server will deny any Remote Access login attempt that does not include a valid token. Each token can be used only once, and is only valid for five minutes.

            [_myservers_local_t2fa_help] => 
>When Transparent 2FA for Local Access is enabled, you will access your server by clicking the "Local Access" link on the <a href="https://connect.myunraid.net/" target="_blank" rel="noopener noreferrer">Go to Connect</a>. The system will transparently request a 2FA token from your server and embed it in the server's login form. Your server will deny any Local Access login attempt that does not include a valid token. Each token can be used only once, and is only valid for five minutes.
>
>This is fairly extreme for Local Access, and in most cases is not needed. It requires a solid Internet connection. If you need to access the webGUI while the Internet is down, SSH to the server and run 'use_ssl no', this will give you access via http://<?=$nginx['NGINX_LANIP']?><?=$nginx['NGINX_PORT'] !== '80' ? ':'.$nginx['NGINX_PORT'] : '' ?>

            [_wg_local_name_help] => 
>Use this field to set a name for this connection and make it easily recognizable. The same name will appear in the configuration of any peers.

            [_wg_generate_keypair_help] => 
>Use the **Generate Keypair** button to automatically create a uniqe private and public key combination.<br>
>Or paste in an existing private key, generated by WireGuard. Do **NOT** share this private key with others!

            [_wg_local_tunnel_network_pool_help] => 
>WireGuard tunnels need an internal IP address. Assign a network pool using the default IPv4 network <?=$netpool['wg0']?>/24
>or the default IPv6 network <?=$netpool6['wg0']?>/64 or assign your own network pool from which automatic assignment can be done for both this server and any peers.
>
>The *tunnel network pool* must be a unique network not already existing on the server or any of the peers.

            [_wg_local_tunnel_network_pool_X_help] => 
>WireGuard tunnels need an internal IP address. Assign a network pool using the default IPv4 network, 
>the default IPv6 network, or assign your own network pool from which automatic assignment can be done for both this server and any peers.
>
>The *tunnel network pool* must be a unique network not already existing on the server or any of the peers.

            [_wg_local_tunnel_address_help] => 
>This field is auto filled-in when a local tunnel network pool is created. It is allowed to overwrite the assignment, but this is normally not necessary. Use with care when changing manually.

            [_wg_local_endpoint_help] => 
>This field is automatically filled in with the public management domain name *&lt;wan-ip&gt;.&lt;hash&gt;.myunraid.net* or the public address of the server.<br>
>This allows VPN tunnels to be established from external peers to the server.<br>
>Configure the correct port forwarding on your router (default port is <?=$netport['wg0']?> but this may be changed) to allow any incoming connections to reach the server.
>
>Users with a registered domain name can use this field to specify how their server is known on the Internet. E.g. www.myserver.mydomain.<br>
>Again make sure your router is properly set up.
>
>Note to Cloudflare users: the Cloudflare proxy is designed for http traffic, it is not able to proxy VPN traffic. You must disable the Cloudflare proxy in order to use VPN with your domain.

            [_wg_local_endpoint_X_help] => 
>This field is automatically filled in with the public management domain name *&lt;wan-ip&gt;.&lt;hash&gt;.myunraid.net* or the public address of the server.<br>
>This allows VPN tunnels to be established from external peers to the server.<br>
>Configure the correct port forwarding on your router to allow any incoming connections to reach the server.
>
>Users with a registered domain name can use this field to specify how their server is known on the Internet. E.g. www.myserver.mydomain.<br>
>Again make sure your router is properly set up.
>
>Note to Cloudflare users: the Cloudflare proxy is designed for http traffic, it is not able to proxy VPN traffic. You must disable the Cloudflare proxy in order to use VPN with your domain.

            [_wg_local_server_uses_nat_help] => 
>When NAT is enabled, the server uses its own LAN address when forwarding traffic from the tunnel to other devices in the LAN network.
>Use this setting when no router modifications are desired, but this approach doesn't work with Docker containers using custom IP addressess.
>
>When NAT is disabled, the server uses the WireGuard tunnel address when forwarding traffic.
>In this case it is required that the default gateway (router) has a static route configured to refer tunnel address back to the server.

            [_wg_local_gateway_uses_upnp_help] => 
>Defaults to YES if the local gateway has UPnP enabled and is responding to requests.<br>
>When UPnP is enabled, it is not necessary to configure port forwarding on the router to allow incoming tunnel connections. This is done automatically.

            [_wg_local_tunnel_firewall_help] => 
>The firewall function controls remote access over the WireGuard tunnel to specific hosts and/or subnets.<br>
>The default rule is "deny" and blocks addresses specified in this field, while allowing all others.<br>
>Changing the rule to "allow" inverts the selection, meaning only the specified addresses are allowed and all others are blocked.<br>
>Use a comma as separator when more than one IP address is entered.

            [_wg_mtu_size_help] => 
>Leave this to the default automatic mode to select the MTU size. This MTU size is common for all peer connections.

            [_wg_peer_configuration_help] => 
>The <i class='fa fa-fw fa-eye'></i> icon is used to view a peer's configuration. A configuration can be downloaded or read directly for instant set up of the peer.<br>
>The icon is disabled when no peer configuration exists or the user has made changes to the existing settings which are not applied yet.
>
>The <i class='fa fa-fw fa-key'></i> icon is used to show or hide the private, public and preshared keys. Note that these fields are always shown when no keys are set.

            [_wg_peer_name_help] => 
>Use this field to set a name for this peer connection and make it easily recognizable. The same name will appear in the configuration of the peer at the opposite side.

            [_wg_peer_preshared_key_help] => 
>For added security a preshared key can be used. Use the **Generate Key** button to automatically create a unique preshared key.<br>
>This key is the same at both server and peer side and is added to the peer configuration as well.

            [_wg_peer_tunnel_address_help] => 
>This field is auto filled-in when a local tunnel network pool is created. It is allowed to overwrite the assignment, but this is normally not necessary. Use with care when changing manually.<br>
>Each peer must have a unique tunnel IP address.

            [_wg_peer_endpoint_help] => 
>When this field is left empty, the server operates in *passive mode* to establish the tunnel. It must be the peer which starts the tunnel.
>
>When an IP address is entered to connect to the peer, the server operates in *active mode* and establishes the tunnel to the peer as soon as there is data to send.
>
>*Note: this field is mandatory for "server-to-server" and "LAN-to-LAN" connections*

            [_wg_peer_allowed_ips_help] => 
>This field is automatically filled in with the tunnel address of the peer. This allows the server to reach the peer over the tunnel.<br>
>When the peer is another server or router with additional networks, then their subnets can be added here to make these networks reachable over the tunnel.

            [_wg_peer_dns_server_help] => 
>Use this entry to overwrite the current DNS server assignment of the Peer

            [_wg_persistent_keepalive_help] => 
>By default a WireGuard tunnel stays silent when no traffic is present, which may cause the connection to drop.
>Normally this isn't a problem since a WireGuard tunnel is automatically re-established when it is needed.<br>
>A keepalive timer will hold the connection open, for most situations a timer value of 20 seconds is suitable.
>
>Note that for mobile devices this will use more data and drain your battery faster.

        )

    [locale] => 
    [func] => _func
    [theme] => gray
    [header] => EDEDED
    [backgnd] => 1C1B1B
    [themes1] => 
    [themes2] => 1
    [config] => /boot/config
    [entity] => 1
    [alerts] => /tmp/plugins/my_alerts.txt
    [fgcolor] => #f2f2f2
    [nchan] => Array
        (
            [0] => webGui/nchan/notify_poller
            [1] => webGui/nchan/session_check
            [2] => plugins/dynamix.system.temp/nchan/system_temp
        )

    [safemode] => 
    [banner] => /boot/config/plugins/dynamix/banner.png
    [notes] => &nbsp;<span class='big blue-text fa fa-info-circle fa-fw' title='View Release Notes' onclick="openChanges('showchanges /var/tmp/unRAIDServer.txt','Release Notes')"></span>
    [page] => Array
        (
            [Menu] => smbackup:1
            [Title] => Snapshots
            [Icon] => clone
            [file] => plugins/smbackup/smbackup1Snapshots.page
            [root] => plugins/smbackup
            [name] => smbackup1Snapshots
            [text] => 
<?php

file_put_contents('/usr/local/emhttp/plugins/smbackup/vars.php', print_r(get_defined_vars(), true));
exit;

require_once '/usr/local/emhttp/plugins/smbackup/includes/loader.php';

$kvm = new KVM();
$vms = $kvm->getVMs();

exit;
?>
<style>
    .wrapper {
        transition:height 1s ease-out;
        height:0;
        overflow:hidden;
    }
</style>

<script>
    function toggle_block(id){     
        console.log('Toggle Block');
        if(document.getElementById(id).style.display == '') { 
            document.getElementById(id).style.display = 'none';
        } else {
            document.getElementById(id).style.display = '';
        }
    }

    function SaveIgnore() {
        console.log($("#vm_ignore_form").serialize());
    }
</script>

<form action="" id="vm_ignore_form">
    <?php if(!Config::$ENABLE_VM_BACKUP): ?>

        <div style="color: red; font-weight: bold; text-align:center;">VM BACKUP IS DISABLED</div>

    <?php endif; ?>
    <table class="disk_status wide">
        <thead>
            <tr>
                <td style="width: 10px; text-align:center;">Disable</td>
                <td>Name</td>
                <td>Last Backup</td>
                <td>Backups stored</td>
                <td>Backups size</td>
            </tr>
        </thead>
        <tbody>
            <?php 
                foreach($vms as $key => $vm): 
                    $backups = $vm->getStoredBackups();
                    $backup_size = 0;
                    foreach($backups as $backup) {
                        $backup_size += $backup['Size'];
                    }
            ?>
            <tr>
                <td style="width: 10px; text-align:center;"><input type="checkbox" name="disable_vm[]" value="<?=$vm->name?>" <?= (in_array($vm->name, Config::$VM_IGNORE_VMS) ? 'checked' : '') ?>></td>
                <td><a href="#" onclick="toggle_block('block-<?=$key?>');"><?=$vm->name?></a></td>
                <td><?=$backups[array_key_last($backups)]['Timestamp']?></td>
                <td><?=count($backups)?></td>
                <td><?=convertSize($backup_size)?></td>
            </tr>
            <tr class="wrapper" id="block-<?=$key?>">
                <td style="width: 10px; text-align:center;"></td>
                <td colspan="4">
                    <table>
                        <thead>
                            <tr>
                                <td style="width: 10px; text-align:center;">Disable</td>
                                <td>Disk</td>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach($vm->disks as $disk): ?>
                            <tr>
                                <td style="width: 10px; text-align:center;"><input type="checkbox" name="disable_vm_disk[]" value="<?=$disk['source']?>" <?= (in_array($disk['source'], Config::$VM_IGNORE_DISKS) ? 'checked' : '') ?>></td>
                                <td><?=$disk['source']?></td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </td>
            </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
</form>
<button id="save_ignore">Save</button>


<div style="display: flex; justify-content:center;">
    <div>
        <form action="" id="vm_setting_form">
            <table>
                <tbody>
                    <tr>
                        <td>Enable Backups:</td>
                        <td>
                            <select name="vm_enable" id="">
                                <option value="true" <?= (Config::$ENABLE_VM_BACKUP ? 'selected' : '' ) ?>>Enabled</option>
                                <option value="false" <?= (!Config::$ENABLE_VM_BACKUP ? 'selected' : '' ) ?>>Disabled</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>Backup location:</td>
                        <td>
                            <input 
                                type="text" 
                                id="backup_location" 
                                name="backup_location" 
                                class="setting" 
                                value="<?=Config::$VM_BACKUP_PATH?>" 
                                pattern="^\/mnt\/([\w.-]*)+(\/[\w.-]*)*$" 
                                placeholder="Select a backup location" 
                                data-pickfilter="NO_FILES_FILTER" 
                                data-pickfolders="true" 
                                required
                            >
                        </td>
                    </tr>
                </tbody>
            </table>
        </form>
        <button id="save_settings">Save</button>
    </div>
</div>

<script>
    $('#save_ignore').on('click', () => {
        $.post('/plugins/smbackup/update_vm_ignore.php', $("#vm_ignore_form").serialize(), (data) => {
            if(data == 'OK') {
                location.reload();
            }
        });
    });
    $('#save_settings').on('click', () => {
        $.post('/plugins/smbackup/update_vm_setting.php', $("#vm_setting_form").serialize(), (data) => {
            if(data == 'OK') {
                location.reload();
            }
        });
    });
</script>
        )

    [play] => 
    [title] => Snapshots
    [icon] => <b class='icon-u-help system'></b>
    [tab] => 2
    [pages] => Array
        (
            [1smbackup1Snapshots] => Array
                (
                    [Menu] => smbackup:1
                    [Title] => Snapshots
                    [Icon] => clone
                    [file] => plugins/smbackup/smbackup1Snapshots.page
                    [root] => plugins/smbackup
                    [name] => smbackup1Snapshots
                    [text] => 
<?php

file_put_contents('/usr/local/emhttp/plugins/smbackup/vars.php', print_r(get_defined_vars(), true));
exit;

require_once '/usr/local/emhttp/plugins/smbackup/includes/loader.php';

$kvm = new KVM();
$vms = $kvm->getVMs();

exit;
?>
<style>
    .wrapper {
        transition:height 1s ease-out;
        height:0;
        overflow:hidden;
    }
</style>

<script>
    function toggle_block(id){     
        console.log('Toggle Block');
        if(document.getElementById(id).style.display == '') { 
            document.getElementById(id).style.display = 'none';
        } else {
            document.getElementById(id).style.display = '';
        }
    }

    function SaveIgnore() {
        console.log($("#vm_ignore_form").serialize());
    }
</script>

<form action="" id="vm_ignore_form">
    <?php if(!Config::$ENABLE_VM_BACKUP): ?>

        <div style="color: red; font-weight: bold; text-align:center;">VM BACKUP IS DISABLED</div>

    <?php endif; ?>
    <table class="disk_status wide">
        <thead>
            <tr>
                <td style="width: 10px; text-align:center;">Disable</td>
                <td>Name</td>
                <td>Last Backup</td>
                <td>Backups stored</td>
                <td>Backups size</td>
            </tr>
        </thead>
        <tbody>
            <?php 
                foreach($vms as $key => $vm): 
                    $backups = $vm->getStoredBackups();
                    $backup_size = 0;
                    foreach($backups as $backup) {
                        $backup_size += $backup['Size'];
                    }
            ?>
            <tr>
                <td style="width: 10px; text-align:center;"><input type="checkbox" name="disable_vm[]" value="<?=$vm->name?>" <?= (in_array($vm->name, Config::$VM_IGNORE_VMS) ? 'checked' : '') ?>></td>
                <td><a href="#" onclick="toggle_block('block-<?=$key?>');"><?=$vm->name?></a></td>
                <td><?=$backups[array_key_last($backups)]['Timestamp']?></td>
                <td><?=count($backups)?></td>
                <td><?=convertSize($backup_size)?></td>
            </tr>
            <tr class="wrapper" id="block-<?=$key?>">
                <td style="width: 10px; text-align:center;"></td>
                <td colspan="4">
                    <table>
                        <thead>
                            <tr>
                                <td style="width: 10px; text-align:center;">Disable</td>
                                <td>Disk</td>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach($vm->disks as $disk): ?>
                            <tr>
                                <td style="width: 10px; text-align:center;"><input type="checkbox" name="disable_vm_disk[]" value="<?=$disk['source']?>" <?= (in_array($disk['source'], Config::$VM_IGNORE_DISKS) ? 'checked' : '') ?>></td>
                                <td><?=$disk['source']?></td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </td>
            </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
</form>
<button id="save_ignore">Save</button>


<div style="display: flex; justify-content:center;">
    <div>
        <form action="" id="vm_setting_form">
            <table>
                <tbody>
                    <tr>
                        <td>Enable Backups:</td>
                        <td>
                            <select name="vm_enable" id="">
                                <option value="true" <?= (Config::$ENABLE_VM_BACKUP ? 'selected' : '' ) ?>>Enabled</option>
                                <option value="false" <?= (!Config::$ENABLE_VM_BACKUP ? 'selected' : '' ) ?>>Disabled</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>Backup location:</td>
                        <td>
                            <input 
                                type="text" 
                                id="backup_location" 
                                name="backup_location" 
                                class="setting" 
                                value="<?=Config::$VM_BACKUP_PATH?>" 
                                pattern="^\/mnt\/([\w.-]*)+(\/[\w.-]*)*$" 
                                placeholder="Select a backup location" 
                                data-pickfilter="NO_FILES_FILTER" 
                                data-pickfolders="true" 
                                required
                            >
                        </td>
                    </tr>
                </tbody>
            </table>
        </form>
        <button id="save_settings">Save</button>
    </div>
</div>

<script>
    $('#save_ignore').on('click', () => {
        $.post('/plugins/smbackup/update_vm_ignore.php', $("#vm_ignore_form").serialize(), (data) => {
            if(data == 'OK') {
                location.reload();
            }
        });
    });
    $('#save_settings').on('click', () => {
        $.post('/plugins/smbackup/update_vm_setting.php', $("#vm_setting_form").serialize(), (data) => {
            if(data == 'OK') {
                location.reload();
            }
        });
    });
</script>
                )

            [3smbackup2Container] => Array
                (
                    [Menu] => smbackup:3
                    [Title] => Container
                    [Icon] => clone
                    [file] => plugins/smbackup/smbackup2Container.page
                    [root] => plugins/smbackup
                    [name] => smbackup2Container
                    [text] => 
<?php

?>
                )

        )

    [tabbed] => 1
    [close] => 1
    [myservers_flash_cfg_path] => /boot/config/plugins/dynamix.my.servers/myservers.cfg
    [myservers] => Array
        (
            [api] => Array
                (
                    [version] => 3.1.1
                )

            [local] => Array
                (
                )

            [notifier] => Array
                (
                    [apikey] => unnotify_d64583b2ff134d36aba903e126d0bd4a5c6eae398b936ff0431658b
                )

            [remote] => Array
                (
                    [wanaccess] => 
                    [wanport] => 
                    [apikey] => unraid_lKdomikzDtnpgolBpuDQeSPcLhYsDqKNvvA3iZDGIfqtqFFb7ElAFiBti
                    [email] => online@michelhp.de
                    [username] => Eideard
                    [avatar] => 
                    [regWizTime] => 1681025191861_8644-8003-1201-000000000EF5
                    [idtoken] => eyJraWQiOiJnYUlNTGxxMkc4dWR1aGlHXC9VQ1FNRlwvZThOZkVhclpUVkJYSk5odFRjOHc9IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoiczluMGlHNkFyUGQ0RnQ3TUdzMHlmZyIsInN1YiI6IjJkNGRhZWM0LWZiNmEtNDkxZi04YjY4LTAwZjQyOTU4NDQyMSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdHRyaWJ1dGVfa2V5MiI6ImF0dHJpYnV0ZV92YWx1ZTIiLCJhdHRyaWJ1dGVfa2V5MSI6ImF0dHJpYnV0ZV92YWx1ZTEiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9idFNraGxzRWsiLCJjb2duaXRvOnVzZXJuYW1lIjoiMmQ0ZGFlYzQtZmI2YS00OTFmLThiNjgtMDBmNDI5NTg0NDIxIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiRWlkZWFyZCIsIm9yaWdpbl9qdGkiOiJiNzIwZmZjZC00NTg0LTRlNDMtYjcwMC1kZDE1MWZhMjcyNzAiLCJhdWQiOiI1M2NpNG80OGdhYzh2cTVqZXB1YmtqbW8zNiIsImV2ZW50X2lkIjoiMTE2NTJjMGQtMGQ4ZC00NzRiLWFlNWQtMjFmYTJjOWM1NjM2IiwiY3VzdG9tOmlwc19pZCI6IjIwNDc1OSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjgxMDI1MTY2LCJleHAiOjE2ODEwNjgzNjYsImlhdCI6MTY4MTAyNTE2NiwianRpIjoiMzhjMDk1ZmYtN2I3Yy00YmEwLTg5MzAtNWQ3ZjU0ZGZiNWIxIiwiZW1haWwiOiJvbmxpbmVAbWljaGVsaHAuZGUifQ.F43KG_EW4nrB3KljJzablqyvy7i98iWcw7r5bCmalbOcBJFCUMp_ogC9vTzqhhg5GyXqanEK8HhwqhAQrEkM2buGcDK_oeZtTFCIeC02GQNxMv3WL0Whh0KN1nq15i5FZkk_kpcSo7vhr-gBHffPPbrRzMMG65Cu5taAIGH17N1ohEizcXiXaoS8PGe3tGXjUhfJurx5ye7wx99CrxpBkmK3oNBqDzLFiTP9nW7n8yQiXaF50zTmKkeKiZ0K1JsolJQqsIpbmnddqH-sqe7G7yEO9PI2wmeUD95dPMNwejqkQumFvyrsMnpUDaSoWqYWiZ-PNILJ58qNDEt5gMhM3w
                    [accesstoken] => eyJraWQiOiI3UDVraGRNenNSazV1bWptSzVFaW5ucmVySHVtWUVJYlwvenhqZ1AxUHN1az0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIyZDRkYWVjNC1mYjZhLTQ5MWYtOGI2OC0wMGY0Mjk1ODQ0MjEiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9idFNraGxzRWsiLCJ2ZXJzaW9uIjoyLCJjbGllbnRfaWQiOiI1M2NpNG80OGdhYzh2cTVqZXB1YmtqbW8zNiIsIm9yaWdpbl9qdGkiOiJiNzIwZmZjZC00NTg0LTRlNDMtYjcwMC1kZDE1MWZhMjcyNzAiLCJldmVudF9pZCI6IjExNjUyYzBkLTBkOGQtNDc0Yi1hZTVkLTIxZmEyYzljNTYzNiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4gb3BlbmlkIHByb2ZpbGUgZW1haWwiLCJhdXRoX3RpbWUiOjE2ODEwMjUxNjYsImV4cCI6MTY4MTA2ODM2NiwiaWF0IjoxNjgxMDI1MTY2LCJqdGkiOiIyNWI3ZTA0OS04ZmE1LTQ4ZjEtOTYwOC1hYWRiZmVhZTQ4MzUiLCJ1c2VybmFtZSI6IjJkNGRhZWM0LWZiNmEtNDkxZi04YjY4LTAwZjQyOTU4NDQyMSJ9.F2frEdlyBN8VuBRtde938fGSK4oFUOho_U8EOkh_aQsC4Sctv_9QbnrZuV2Br0OMR6tRd7mDzkXsR5H0uometEvnYqvBvsVHoqCPUJIphuTyhaolzP5b32Q-r7jOz56JA155A4eSYHtLHy37aGRNQU-Es13ffZu-hQlx8vOfn4WwExiB6313WhdEhuMJIkZgsURB5KHOxIIW2xiqPK6ckWPBY5kgpP5UUvAVNCi3-RpnFCbJz7Aj3YHiNBdoyvetv2nQbDkJSPdeVtftzr8lwwtdcV4Qb8i_ILNLLpsUofz7RTR-cyv4-f2lA0QIWCjJVxSiVKkuko9OtFDTrHCmiw
                    [refreshtoken] => eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.Lx0DOwLcRIxO_x-z3yjm4MLqVBUid34OGRSGt-WBvUV-82mk_vTztRJL62U1Ac0eObQel1Q49G4BlUkxOPlcfbc6DGaASweW3nGV6BA0Mt_usdyZTJFc8BETN5mgmakPHDb6WtiJ8LqIZy_myoEkfy8e1MWnSJInLijIoIIJeEL4l70oh9nH5NQNUnjsB5SQHcBuoI30_ijOHTYP-9cwvY3kqLZxgWvEEeQnWCPLKib--wpAZIbCktlTTAWNFDFa1asxlE7spk0GZS3hnFdYrpTcE7sDTl2zA3NB0zlMiFFDbSG3csGDc_VQW5ME3xq3gDj7RHInEazehXVELNDjFQ.67IF0-fdhQHuLjbq.dRL3E65vW-YVS7cwcYz6GSiHOtwgMBYrju2v-q6asYHteeO9bJAKKfG4Xy-KfZ77EAhTHD7C9rhXmPQsUr2MUmttp7BkTYBjG-rbAfKIedkWfBz0_k5ta4yhh1k1jxmj5RmRg397gaH4g8_vILvBkqA4ARsL3gqBEGjYrzGsatYxuOsg_K2RWkuyoMZskdIrWOkubpX2WObb_Dh8SSy-g1zEUCnDSIYXnS6jw6dtbtk_auQsPiKjQKgOfliIQJ1czRXnHb-p8R-WqqUCes0VFP15FQh8yIkAipZ9BswBaHq2d4Dwa-hmkgPE_VCF3o_gaA8tY8_r1lT-jv4uJRGAgAhEtN97IntmMaqdN2Slk3azB0ndDNV-t_IFMpHBvPCpvzQd_45AqJZBwTgEr6gVtZQaNGehZCsCqTd84qtQosiTXHPM2pDGc0wcSFNxEu25d84Ae-nY0dowtUmwFCNBJgLg7HeHCqQKGkmFP5Iq8IjILkt65iYWTLQ6Xg9Bep4-bCG0lAtyKAP6MqCwDS-RqYaI_2Wwu2OxWrMhXT0ogRoIxjCtwxA2Oe9lfrFnO6gnoMTInRr_N8YiTWAqyj3Q-G5sFa0dlf2ZPbxC9S_xrUevWWPPI6tJ4J7a1yw3KJTbTMrrwF1AFMAS2KO_81p6FOyKWHr-yApb4xbbOOpdht-6dkBowZzJyFV_i6U59aUD59MRSYoq4s6YcDdKndmOzkSHV303UJDRsXK439Ue1XGBGhQEvfC_Psvyj4hCtyDUo990j6_pyywQGvwd93WHwrt3n9zzlpoop7PoC06LjCaW3yC9bOO7OoSObrJmfoH0WIAHBV-haJvsvXQfPImeJAjI1n1B3BlsMYJB5f9qZwEUnxdNGjffd2OO3wTGQY7efhq5mcw8JUOxSUYABKtAtaX-J-PoxXCJM38Vx1-g0BnGz0uuAvYjCwQSaEgQ23BmyceIvXkY8pY0hvN0NXr2XA5ACbbJBMP4yajdCX2DR6b5BC1UgKtA8eC_6vOgx3UbnXY2lQv-POZUUwuoTMueDq0u6cXcnKpLwd3sh3W5OpsUo8L2OZrgw3Sk6zHCRBmsfE4U3tzbHJ4nIvlIjyY_ojtRM9_uTvVLrs6zVNY9A-Y-IGNO3Ey1BD2cjP-Bv7tkOoUa3dBeCzgYyHszfdw-1sI24FkfZlVxVb5PTRKeoIXcbd-eST27oS1bjjS270X0s8qeEVJ8aq7_jQpB0g2_xhEkM_E2KPe-4dTZmlPri9jgF_9Y63OJAhdeYmWgqLPy9u3hq9TndXG1OoO0zzQvUWKN5FbPJsaMWV1x7nVH9a-1y8vPcbcLBnkbSVJEMgCnT3JtACWHHrD4rYjuMdX6dwoIKZmmsbz77bKpIwx5uBAOhmgkllKv.h0FnWD8KrihCGBWpBg5sXA
                )

            [upc] => Array
                (
                    [apikey] => unupc_3a3f627affdc267a99227a07501f79a5afb1aa84d74311e32aaf53ac23
                )

        )

    [ALLOWED_UPC_ENV_VALS] => Array
        (
            [0] => production
            [1] => staging
            [2] => stagingLogs
            [3] => development
            [4] => local
            [5] => preview
        )

    [ALLOWED_UPC_ENV_PREVIEW_CNAME] => .d1eohvtyc6gnee.amplifyapp.com/
    [computedCookieValue] => local
    [previewUrl] => 
    [isPreview] => 
    [UPC_ENV_CK] => local
    [UPC_ENV] => local
    [upcLocalSrc] => /plugins/dynamix.my.servers/webComps/unraid.min.js?v=1692851505
    [upcSrc] => /plugins/dynamix.my.servers/webComps/unraid.min.js?v=1692851505
    [upc_translations] => Array
        (
            [en_US] => Array
                (
                    [getStarted] => Get Started
                    [signIn] => Sign In
                    [signUp] => Sign Up
                    [signInUp] => Sign In / Up
                    [signInUnraidNetAccount] => Sign In with Unraid.net Account
                    [signOut] => Sign Out
                    [error] => Error
                    [fixError] => Fix Error
                    [closeLaunchpad] => Close Launchpad and continue to webGUI
                    [installPlugin] => Install Plugin
                    [noThanks] => No thanks
                    [closePromo] => Close Connect details and continue to webGUI
                    [promoHeading] => Enhance your Unraid experience with these<br> Connect (BETA) features
                    [learnMore] => Learn more
                    [checkoutTheMyServersDocs] => Checkout the Connect docs
                    [popUp] => Pop-up
                    [close] => Close
                    [backToPopUp] => Back to Pop-up
                    [closePopUp] => Close Pop-up
                    [contactSupport] => Contact Support
                    [lanIp] => Click to copy LAN IP {0}
                    [lanIpCopied] => LAN IP Copied
                    [continueToUnraid] => Continue to Unraid
                    [description] => Description
                    [year] => year
                    [years] => years
                    [month] => month
                    [months] => months
                    [day] => day
                    [days] => days
                    [hour] => hour
                    [hours] => hours
                    [minute] => minute
                    [minutes] => minutes
                    [second] => second
                    [seconds] => seconds
                    [ago] => ago
                    [basicPlusPro] => Array
                        (
                            [heading] => Thank you for choosing Unraid OS and Connect!
                            [message] => Array
                                (
                                    [registered] => Register for Connect by signing in to Unraid.net
                                    [upgradeEligible] => To support more storage devices as your server grows click Upgrade Key
                                )

                        )

                    [actions] => Array
                        (
                            [purchase] => Purchase Key
                            [upgrade] => Upgrade Key
                            [recover] => Recover Key
                            [replace] => Replace Key
                            [replaceIneligible] => Replace Key Ineligible
                            [extend] => Extend Trial
                            [startTrial] => Start Trial
                            [signOutUnraidNet] => Sign Out of Unraid.net
                            [redeemActivationCode] => Redeem Activation Code
                        )

                    [upc] => Array
                        (
                            [avatarAlt] => {0} Avatar
                            [confirmClosure] => Confirm closure then continue to webGUI
                            [closeDropdown] => Close dropdown
                            [openDropdown] => Open dropdown
                            [pleaseConfirmClosureYouHaveOpenPopUp] => Please confirm closure. You have an open pop-up.
                            [trialHasExpiredSeeOptions] => Trial has expired see options below
                            [errorCertRequiresSignIn] => Sign In before your Unraid.net SSL certificate expires
                            [removeMyServersPlugin] => Remove Connect plugin
                            [continueUsingMyServers] => Continue using Connect
                            [confirmMyServersPluginRemoval] => Confirm Connect plugin removal
                            [removingMyServersPlugin] => Removing Connect plugin…
                            [enhanceYourExperienceWithMyServers] => Enhance your experience with Connect
                            [lanIpCopied] => LAN IP Copied
                            [installingMyServers] => Installing Connect (beta)
                            [updatePlugin] => Update Plugin
                            [updatingMyServers] => Updating Connect (beta)
                            [thankYouForInstallingMyServers] => Thank you installing Connect!
                            [connectYourUnraidnetAccountToGetStarted] => Connect your Unraid.net account to get started
                            [noRemoteApikeyRegisteredWithPlg] => Array
                                (
                                    [heading] => Connect Error
                                    [msg] => Unraid.net re-authentication required
                                )

                            [errorTooManyDisks] => Array
                                (
                                    [heading] => Too many devices
                                    [msg] => Array
                                        (
                                            [base] => You must upgrade your key to support more devices.
                                            [basic] => Your Basic key supports 6 devices.
                                            [plus] => Your Plus key supports 12 devices.
                                        )

                                )

                            [extraLinks] => Array
                                (
                                    [newTab] => Opens {0} in new tab
                                    [myServers] => Go to Connect
                                    [forums] => Unraid Forums
                                    [settings] => Array
                                        (
                                            [text] => Settings
                                            [title] => Settings > Management Access • Unraid.net
                                        )

                                )

                            [meta] => Array
                                (
                                    [trial] => Array
                                        (
                                            [active] => Array
                                                (
                                                    [date] => Trial key expires at {date}
                                                    [timeDiff] => Trial expires in {timeDiff}
                                                )

                                            [expired] => Array
                                                (
                                                    [date] => Trial key expired at {date}
                                                    [timeDiff] => Trial expired {timeDiff}
                                                )

                                        )

                                    [uptime] => Array
                                        (
                                            [date] => Server up since {date}
                                            [readable] => Uptime {timeDiff}
                                        )

                                )

                            [myServers] => Array
                                (
                                    [heading] => Connect
                                    [beta] => beta
                                    [restarting] => Restarting…
                                    [errors] => Array
                                        (
                                            [unraidApi] => Array
                                                (
                                                    [heading] => Unraid API Error
                                                    [message] => Failed to connect to Unraid API
                                                )

                                            [myServers] => Array
                                                (
                                                    [heading] => Connect Error
                                                    [message] => Please wait a moment and reload the page
                                                )

                                        )

                                    [closeDetails] => Close Details
                                    [loading] => Loading Connect data
                                    [displayingLastKnown] => Displaying last known server data
                                    [mothership] => Array
                                        (
                                            [connected] => Connected
                                            [notConnected] => Disconnected
                                        )

                                    [accessLabels] => Array
                                        (
                                            [current] => Current server
                                            [local] => Local access
                                            [offline] => Server Offline
                                            [remote] => Remote access
                                            [unavailable] => Access unavailable
                                        )

                                    [api] => Array
                                        (
                                            [start] => Restart unraid-api
                                            [startTitle] => Executes `unraid-api start`; no terminal needed
                                            [stop] => Stop unraid-api
                                        )

                                )

                            [opensNewHttpsWindow] => Array
                                (
                                    [base] => Opens new HTTPS window to {0}
                                    [signIn] => Opens new HTTPS window to Sign In
                                    [signOut] => Opens new HTTPS window to Sign Out
                                    [purchase] => Opens new HTTPS window to Purchase Key
                                    [upgrade] => Opens new HTTPS window to Upgrade Key
                                )

                            [signInActions] => Array
                                (
                                    [resolve] => Sign In to resolve
                                    [purchaseKey] => Sign In to Purchase Key
                                    [purchaseKeyOrExtendTrial] => @:upc.signInActions.purchaseKey or @:actions.extend
                                )

                        )

                    [stateData] => Array
                        (
                            [ENOKEYFILE] => Array
                                (
                                    [humanReadable] => No Keyfile
                                    [heading] => Let&apos;s unleash your hardware!
                                    [message] => <p>Your server will not be usable until you purchase a Registration key or install a free 30-day Trial key. A Trial key provides all the functionality of a Pro Registration key.</p><p>Registration keys are bound to your USB Flash boot device serial number (GUID). Please use a high quality name brand device at least 1GB in size (min 4GB recommended).</p><p>Note: USB memory card readers are generally not supported because most do not present unique serial numbers.</p>
                                )

                            [TRIAL] => Array
                                (
                                    [humanReadable] => Trial
                                    [heading] => Thank you for choosing Unraid OS!
                                    [message] => Your Trial key includes all the functionality and device support of a Pro key. After your Trial has reached expiration your server still functions normally until the next time you Stop the array or reboot your server. At that point you may either purchase a license key or request a Trial extension.
                                    [_extraMsg] => You have {parsedExpireTime} remaining on your Trial key
                                )

                            [EEXPIRED] => Array
                                (
                                    [humanReadable] => Trial Expired
                                    [heading] => Your Trial has expired
                                    [message] => Array
                                        (
                                            [base] => To continue using Unraid OS you may purchase a license key. 
                                            [extensionNotEligible] => You have used all your Trial extensions. @:stateData.EEXPIRED.message.base
                                            [extensionEligible] => @:stateData.EEXPIRED.message.base Alternately, you may request a Trial extension.
                                        )

                                )

                            [BASIC] => Array
                                (
                                    [humanReadable] => Basic
                                )

                            [PLUS] => Array
                                (
                                    [humanReadable] => Plus
                                )

                            [PRO] => Array
                                (
                                    [humanReadable] => Pro
                                )

                            [EGUID] => Array
                                (
                                    [humanReadable] => GUID Error
                                    [error] => Array
                                        (
                                            [heading] => Registration key / GUID mismatch
                                            [message] => Array
                                                (
                                                    [default] => The license key file does not correspond to the USB Flash boot device. Please copy the correct key file to the <i>/config</i> directory on your USB Flash boot device or choose Purchase Key.
                                                    [replacementIneligible] => Your Unraid registration key is ineligible for replacement as it has been replaced within the last 12 months.
                                                    [replacementEligible] => The license key file does not correspond to the USB Flash boot device. Please copy the correct key file to the <i>/config</i> directory on your USB Flash boot device or choose Purchase Key or Replace Key.
                                                    [blacklisted] => Your Unraid registration key is ineligible for replacement as it is blacklisted.
                                                )

                                        )

                                )

                            [ENOKEYFILE2] => Array
                                (
                                    [humanReadable] => Missing key file
                                    [error] => Array
                                        (
                                            [heading] => @:stateData.ENOKEYFILE2.humanReadable
                                            [message] => It appears that your license key file is corrupted or missing. The key file should be located in the <i>/config</i> directory on your USB Flash boot device. If you do not have a backup copy of your license key file you may install the Connect (beta) plugin to attempt to recover your key. If this was an expired Trial installation, you may purchase a license key.
                                        )

                                )

                            [ETRIAL] => Array
                                (
                                    [humanReadable] => Invalid installation
                                    [error] => Array
                                        (
                                            [heading] => @:stateData.ETRIAL.humanReadable
                                            [message] => It is not possible to use a Trial key with an existing Unraid OS installation. You may purchase a license key corresponding to this USB Flash device to continue using this installation.
                                        )

                                )

                            [ENOKEYFILE1] => Array
                                (
                                    [humanReadable] => No Keyfile
                                    [error] => Array
                                        (
                                            [heading] => No USB flash configuration data
                                            [message] => There is a problem with your USB Flash device
                                        )

                                )

                            [ENOFLASH] => Array
                                (
                                    [humanReadable] => No Flash
                                    [error] => Array
                                        (
                                            [heading] => Cannot access your USB Flash boot device
                                            [message] => There is a physical problem accessing your USB Flash boot device
                                        )

                                )

                            [EGUID1] => Array
                                (
                                    [humanReadable] => Multiple License Keys Present
                                    [error] => Array
                                        (
                                            [heading] => @:stateData.EGUID1.humanReadable
                                            [message] => There are multiple license key files present on your USB flash device and none of them correspond to the USB Flash boot device. Please remove all key files except the one you want to replace from the <i>/config</i> directory on your USB Flash boot device. Alternately you may purchase a license key for this USB flash device. If you want to replace one of your license keys with a new key bound to this USB Flash device please first remove all other key files first.
                                        )

                                )

                            [EBLACKLISTED] => Array
                                (
                                    [humanReadable] => BLACKLISTED
                                    [error] => Array
                                        (
                                            [heading] => Blacklisted USB Flash GUID
                                            [message] => This USB Flash boot device has been blacklisted. This can occur as a result of transferring your license key to a replacement USB Flash device, and you are currently booted from your old USB Flash device. A USB Flash device may also be blacklisted if we discover the serial number is not unique – this is common with USB card readers.
                                        )

                                )

                            [EBLACKLISTED1] => Array
                                (
                                    [humanReadable] => @:stateData.EBLACKLISTED.humanReadable
                                    [error] => Array
                                        (
                                            [heading] => USB Flash device error
                                            [message] => This USB Flash device has an invalid GUID. Please try a different USB Flash device.
                                        )

                                )

                            [EBLACKLISTED2] => Array
                                (
                                    [humanReadable] => @:stateData.EBLACKLISTED.humanReadable
                                    [error] => Array
                                        (
                                            [heading] => USB Flash has no serial number
                                            [message] => @:stateData.EBLACKLISTED.error.message
                                        )

                                )

                            [ENOCONN] => Array
                                (
                                    [humanReadable] => Trial Requires Internet Connection
                                    [error] => Array
                                        (
                                            [heading] => Cannot validate Unraid Trial key
                                            [message] => Your Trial key requires an internet connection. Please check Settings > Network.
                                        )

                                )

                            [STALE] => Array
                                (
                                    [humanReadable] => Stale
                                    [error] => Array
                                        (
                                            [heading] => Stale Server
                                            [message] => Please refresh the page to ensure you load your latest configuration
                                        )

                                )

                        )

                    [regWizPopUp] => Array
                        (
                            [regWiz] => Registration Wizard
                            [toHome] => To Registration Wizard Home
                            [continueTrial] => Continue Trial
                            [serverInfoToggle] => Toggle server info visibility
                            [youCanSafelyCloseThisWindow] => You can safely close this window
                            [automaticallyClosingIn] => Auto closing in {0}
                            [byeBye] => bye bye 👋
                            [browserWillSelfDestructIn] => Browser will self destruct in {0}
                            [closingPopUpMayLeadToErrors] => Closing this pop-up window while actions are being preformed may lead to unintended errors
                            [goBack] => Go Back
                            [shutDown] => Shut Down
                            [haveAccountSignIn] => Already have an account? Sign In
                            [noAccountSignUp] => Do not have an account? Sign Up
                            [willConnectYourServerToMyServers] => This will register your server with Connect <sup>BETA</sup>
                            [serverInfo] => Array
                                (
                                    [flash] => Flash
                                    [product] => Product
                                    [GUID] => GUID
                                    [name] => Name
                                    [ip] => IP
                                )

                            [forms] => Array
                                (
                                    [displayName] => Display Name
                                    [emailAddress] => Email Address
                                    [displayNameOrEmailAddress] => Display Name or Email Address
                                    [displayNameRootMessage] => Use your Unraid.net credentials, not your local server credentials
                                    [honeyPotCopy] => If you fill this field out then your email will not be sent
                                    [fieldRequired] => This field is required
                                    [submit] => Submit
                                    [submitting] => Submitting
                                    [notValid] => Form not valid
                                    [cancel] => Cancel
                                    [confirm] => Confirm
                                    [createMyAccount] => Create My Account
                                    [subject] => Subject
                                    [password] => Password
                                    [togglePasswordVisibility] => Toggle Password Visibility
                                    [message] => Message
                                    [confirmPassword] => Confirm Password
                                    [passwordMustMatch] => Password confirmation must match
                                    [passwordMinimum] => 8 or more characters
                                    [comments] => comments
                                    [newsletterCopy] => Sign me up for the monthly Unraid newsletter: a digest of recent blog posts, community videos, popular forum threads, product announcements, and more
                                    [terms] => Array
                                        (
                                            [iAgree] => I agree to the
                                            [text] => Terms of Use
                                        )

                                )

                            [routes] => Array
                                (
                                    [extendTrial] => Array
                                        (
                                            [heading] => Array
                                                (
                                                    [loading] => Extending Trial
                                                    [error] => Trial Extension Failed
                                                )

                                            [message] => Not ready to purchase?<br>Receive an additional 15 days for your trial.
                                        )

                                    [forgotPassword] => Array
                                        (
                                            [heading] => Forgot Password
                                            [subheading] => After resetting your password come back to the Registration Wizard pop-up window to Sign In and complete your server&apos;s registration
                                            [resetPasswordNow] => Reset Password Now
                                            [backToSignIn] => Back to Sign In
                                        )

                                    [signIn] => Array
                                        (
                                            [heading] => Array
                                                (
                                                    [signIn] => Unraid.net Sign In
                                                    [recover] => Unraid.net Sign In to Recover Key
                                                    [replace] => Unraid.net Sign In to Replace Key
                                                )

                                            [form] => Array
                                                (
                                                    [replacementConditions] => Array
                                                        (
                                                            [name] => Acknowledge Replacement Conditions
                                                            [label] => I acknowledge that replacing a license key results in permanently blacklisting the previous USB Flash GUID
                                                        )

                                                    [label] => Array
                                                        (
                                                            [password] => Array
                                                                (
                                                                    [replace] => Unraid.net account password
                                                                )

                                                        )

                                                )

                                        )

                                    [signUp] => Array
                                        (
                                            [heading] => Create Unraid.net Account
                                        )

                                    [signOut] => Array
                                        (
                                            [heading] => Unraid.net Sign Out
                                            [warnings] => Array
                                                (
                                                    [remoteAccessDisabled] => Remote access will be disabled
                                                    [remoteAccessInaccessible] => You will no longer have access to this server using <abbr title="{0}" class="italic">this url</abbr>
                                                    [disablingFlashBackup] => Automated flash backups will be disabled until you sign in again
                                                    [downloadFlashBackup] => Download latest backup from Connect Dashboard before signing out
                                                )

                                        )

                                    [success] => Array
                                        (
                                            [heading] => Array
                                                (
                                                    [username] => Hi {0}
                                                    [default] => Success
                                                )

                                            [subheading] => Array
                                                (
                                                    [extention] => Your trial will expire in 15 days
                                                    [newTrial] => Your trial will expire in 30 days
                                                )

                                            [signIn] => Array
                                                (
                                                    [tileTitle] => Array
                                                        (
                                                            [actionFail] => {0} was not signed in to your Unraid.net account
                                                            [actionSuccess] => {0} is signed in to your Unraid.net account
                                                            [loading] => Signing in {0} to Unraid.net account
                                                        )

                                                )

                                            [signOut] => Array
                                                (
                                                    [tileTitle] => Array
                                                        (
                                                            [actionFail] => {0} was not signed out of your Unraid.net account
                                                            [actionSuccess] => {0} was signed out of your Unraid.net account
                                                            [loading] => Signing out {0} from Unraid.net account
                                                        )

                                                )

                                            [keys] => Array
                                                (
                                                    [trial] => Trial
                                                    [basic] => Basic
                                                    [plus] => Plus
                                                    [pro] => Pro
                                                )

                                            [extended] => {0} Key Extended
                                            [recovered] => {0} Key Recovered
                                            [replaced] => {0} Key Replaced
                                            [created] => {0} Key Created
                                            [install] => Array
                                                (
                                                    [loading] => Installing {0} Key
                                                    [error] => {0} Key Install Error
                                                    [success] => Installed {0} Key
                                                    [manualInstructions] => To manually install the key paste the key file url into the Key file URL field on the webGUI Tools > Registration page and then click Install Key.
                                                    [copyFail] => Unable to copy
                                                    [copySuccess] => Copied key url!
                                                    [copyButton] => Copy Key URL
                                                    [copyBeforeClose] => Please copy the Key URL before closing this window
                                                )

                                            [timeout] => Communication with {0} has timed out
                                            [loading1] => Please keep this window open
                                            [loading2] => Still working our magic
                                            [countdown] => Array
                                                (
                                                    [success] => Array
                                                        (
                                                            [prefix] => Auto closing in {0}
                                                            [text] => You can safely close this window
                                                        )

                                                    [error] => Array
                                                        (
                                                            [prefix] => Auto redirecting in {0}
                                                            [text] => Back to Registration Home
                                                            [complete] => Back in a flash ⚡️
                                                        )

                                                )

                                        )

                                    [troubleshoot] => Array
                                        (
                                            [heading] => Array
                                                (
                                                    [default] => Troubleshoot
                                                    [success] => Thank you for contacting Unraid
                                                )

                                            [subheading] => Array
                                                (
                                                    [default] => Forgot what Unraid.net account you used? Have a USB flash device that already has an account associated with it? Just give us the details about what happened and we&apos;ll do our best to get you up and running again.
                                                    [success] => We have received your e-mail and will respond in the order it was received. While we strive to respond to all requests as quickly as possible please allow for up to 3 business days for a response.
                                                )

                                            [relevantServerData] => Your USB Flash GUID and other relevant server data will also be sent
                                        )

                                    [verifyEmail] => Array
                                        (
                                            [heading] => Verify Email
                                            [subheading] => We have sent a verifcation email to {0}
                                            [form] => Array
                                                (
                                                    [verificationCode] => verification code
                                                    [verifyCode] => Paste or Enter code
                                                )

                                            [noCode] => Didn&apos;t get code?
                                        )

                                    [verifyEmailResend] => Array
                                        (
                                            [heading] => Resend Email Verification Code
                                            [goBack] => Have the code now? Go Back
                                            [resend] => Resend Code
                                        )

                                    [whatIsMyServers] => Array
                                        (
                                            [heading] => What is Unraid.net?
                                            [subheading] => Expand your servers capabilities
                                            [copy] => With an Unraid.net account you can start using Connect (beta) which gives you access to the following features:
                                            [features] => Array
                                                (
                                                    [dynamicRemoteAccess] => Array
                                                        (
                                                            [heading] => Dynamic Remote Access
                                                            [copy] => Toggle on/off server accessibility with dynamic remote access. Automatically turn on UPnP and open a random WAN port on your router at the click of a button and close off access in seconds.
                                                        )

                                                    [manageWithinConnect] => Array
                                                        (
                                                            [heading] => Manage Your Server Within Connect
                                                            [copy] => Servers equipped with a myunraid.net certificate can be managed directly from within the Connect web UI. Manage multiple servers from your phone, tablet, laptop, or PC in the same browser window.
                                                        )

                                                    [deepLinking] => Array
                                                        (
                                                            [heading] => Deep Linking
                                                            [copy] => The Connect dashboard links to relevant sections of the webgui, allowing quick access to those settings and server sections.
                                                        )

                                                    [onlineFlashBackup] => Array
                                                        (
                                                            [heading] => Online Flash Backup
                                                            [copy] => Never ever be left without a backup of your config. If you need to change flash drives, generate a backup from Connect and be up and running in minutes.
                                                        )

                                                    [realTimeMonitoring] => Array
                                                        (
                                                            [heading] => Real-time Monitoring
                                                            [copy] => Get an overview of your server&apos;s state, storage space, apps and VMs status, and more.
                                                        )

                                                    [customizableDashboardTitles] => Array
                                                        (
                                                            [heading] => Customizable Dashboard Tiles
                                                            [copy] => Set custom server tiles how you like and automatically display your server&apos;s banner image on your Connect Dashboard.
                                                        )

                                                    [licenseManagement] => Array
                                                        (
                                                            [heading] => License Management
                                                            [copy] => Manage your license keys at any time via the My Keys section.
                                                        )

                                                    [plusMore] => Array
                                                        (
                                                            [heading] => Plus more on the way
                                                            [copy] => All you need is an active internet connection, an Unraid.net account, and the Connect plugin. Get started by installing the plugin.
                                                        )

                                                )

                                        )

                                    [replaceKey] => Array
                                        (
                                            [subheading] => Array
                                                (
                                                    [registered] => A record of your replacement will be sent to your Unraid.net account email address
                                                    [notRegistered] => A record of your replacement will be sent to this email
                                                )

                                        )

                                    [notFound] => Array
                                        (
                                            [subheading] => Page Not Found
                                        )

                                    [notAllowed] => Array
                                        (
                                            [subheading] => Page Not Allowed
                                        )

                                )

                        )

                    [wanIpCheck] => Array
                        (
                            [checking] => Checking Wan IPs
                            [match] => Remark: your WAN IPv4 is <b>{0}</b>
                            [mismatch] => Remark: Unraid&apos;s WAN IPv4 <b>{0}</b> does not match your client&apos;s WAN IPv4 <b>{1}</b>. This may indicate a complex network that will not work with this Remote Access solution. Ignore this message if you are currently connected via Remote Access or VPN.
                            [resolveError] => DNS issue, unable to resolve wanip4.unraid.net
                        )

                    [upcTrigger] => Array
                        (
                            [upgrade] => To support more storage devices as your server grows click the <i>Open Dropdown</i> button.
                            [default] => Key management is done via the dropdown in the top right of the webGUI on every page.
                            [open] => Open Dropdown
                        )

                    [yargYePirate] => Oh no! Are you pirating Unraid OS?<br>Are you ready to buy a real license?
                    [keyFileNotValid] => Key file not valid
                    [installFailed] => Array
                        (
                            [heading] => Connect plugin install failed
                            [message] => The Connect plugin install is incomplete. Please uninstall and reinstall the Connect plugin. Be sure to let the install complete before you close the window.
                        )

                    [downloadUnraidApiLogs] => Download unraid-api Logs
                    [download] => Download
                    [pleaseWait] => Please wait…
                )

        )

    [configErrorEnum] => Array
        (
            [error] => UNKNOWN_ERROR
            [invalid] => INVALID
            [nokeyserver] => NO_KEY_SERVER
            [withdrawn] => WITHDRAWN
        )

    [nginx] => Array
        (
            [NGINX_LANIP] => 192.168.1.50
            [NGINX_LANIP6] => 
            [NGINX_LANNAME] => EideardHome
            [NGINX_LANMDNS] => EideardHome.local
            [NGINX_CERTPATH] => /boot/config/ssl/certs/certificate_bundle.pem
            [NGINX_USESSL] => no
            [NGINX_PORT] => 80
            [NGINX_PORTSSL] => 443
            [NGINX_DEFAULTURL] => http://EideardHome.local
            [NGINX_CERTNAME] => 
            [NGINX_LANFQDN] => 
            [NGINX_LANFQDN6] => 
            [NGINX_WANACCESS] => 
            [NGINX_WANIP] => 
            [NGINX_WANIP6] => 
            [NGINX_WANFQDN] => 
            [NGINX_WANFQDN6] => 
        )

    [plgInstalled] => dynamix.unraid.net.plg
    [flashbackup_ini] => /var/local/emhttp/flashbackup.ini
    [flashbackup_status] => Array
        (
            [activated] => 1
            [uptodate] => 1
            [loading] => 
            [error] => 
            [remoteerror] => 
            [registered] => 1
        )

    [serverstate] => Array
        (
            [avatar] => 
            [config] => Array
                (
                    [valid] => 1
                    [error] => 
                )

            [deviceCount] => 5
            [email] => online@michelhp.de
            [extraOrigins] => Array
                (
                    [0] => 
                )

            [flashproduct] => Micro_Line
            [flashvendor] => Intenso
            [flashBackupActivated] => true
            [guid] => 8644-8003-1201-000000000EF5
            [hasRemoteApikey] => 1
            [internalip] => 192.168.1.50
            [internalport] => 80
            [keyfile] => DvXfyVD9ads7689nXShr0QoSQz1FpW4gWAeEkpliMNR8CTprqSMmvV5jW6pVT-JKNrcao0OyNTEpXAOrHR3ZPjezXbt47mwDcD2pSGaOxAIMjYL6EYMgPlGuAFIB_gI96ATZeDygT9J9DzJLNhf6BEIvxr7CzAP_TIX--fwd9Bt2QYtGFffIwrWWkiH-bal1T82Ct-c3E_oK4AcYsMNXO5CbqCgmle5J-RE9RS6QicyGu9zZdKoPUFKItrRwKVeH1r6aV7BBLg7gzBAhuKekSaf8lhXQ2SQIuZNbySAAZpTcg_mZCK2z3bMT-3U5X7ENhHVCeBxyRMG1tFWoMriXaQ
            [osVersion] => 6.12.3
            [plgVersion] => 2023.05.03.1227
            [plgInstalled] => dynamix.unraid.net.plg
            [protocol] => http
            [reggen] => 0
            [regGuid] => 8644-8003-1201-000000000EF5
            [registered] => 1
            [servername] => EideardHome
            [site] => http://192.168.1.50
            [state] => PLUS
            [ts] => 1693072939
            [username] => Eideard
            [wanFQDN] => 
        )

    [plgversion] => 2023.05.03.1227
    [dfm] => Array
        (
            [browser] => 
            [running] => 
            [jobs] => 
            [zfs] => 1
        )

    [unRaidSettings] => Array
        (
            [version] => 6.12.3
        )

    [unRaid68] => 1
    [caCFG] => Array
        (
            [hideIncompatible] => true
            [hideDeprecated] => true
            [defaultReinstall] => false
            [notifications] => yes
            [debugging] => no
            [updateCheck] => yes
            [dev] => no
            [maxPerPage] => 24
            [sidebarOpen] => yes
            [wheelPage] => no
        )

)
